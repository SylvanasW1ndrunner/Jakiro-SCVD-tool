file,contract,code,label,graph
0x6fc22d1f6852af2bcea6cb749033ccb6b4d3177a.sol,BitSTDView,"contract BitSTDView { BitSTDLogic private logic; address public owner; event Transfer(address indexed from, address indexed to, uint256 value); event FrozenFunds(address target, bool frozen); event Burn(address indexed from, uint256 value); function balanceOf(address add)constant public returns (uint256) { return logic.balanceOf(add); }",1,"subgraph cluster_1510_BitSTDView {
label=""BitSTDView"";
""1510_frozenAccount"" [label=""frozenAccount""];
""1510_decimals"" [label=""decimals""];
""1510_transferFrom"" [label=""transferFrom""];
""1510_buy"" [label=""buy""];
""1510_symbol"" [label=""symbol""];
""1510_mintToken"" [label=""mintToken""];
""1510_buyPrice"" [label=""buyPrice""];
""1510_freezeAccount"" [label=""freezeAccount""];
""1510_transferDataAuthority"" [label=""transferDataAuthority""];
""1510_transferAuthority"" [label=""transferAuthority""];
""1510_approve"" [label=""approve""];
""1510_sellPrice"" [label=""sellPrice""];
""1510_constructor"" [label=""constructor""];
""1510_burn"" [label=""burn""];
""1510_transferLogicAuthority"" [label=""transferLogicAuthority""];
""1510_totalSupply"" [label=""totalSupply""];
""1510_balanceOf"" [label=""balanceOf""];
""1510_migration"" [label=""migration""];
""1510_setBitSTD"" [label=""setBitSTD""];
""1510_transfer"" [label=""transfer""];
""1510_sell"" [label=""sell""];
""1510_allowance"" [label=""allowance""];
""1510_name"" [label=""name""];
""1510_burnFrom"" [label=""burnFrom""];
""1510_approveAndCall"" [label=""approveAndCall""];
""1510_mintToken"" -> ""1510_onlyOwner"";
""1510_transferAuthority"" -> ""1510_onlyOwner"";
""1510_transferLogicAuthority"" -> ""1510_onlyOwner"";
""1510_freezeAccount"" -> ""1510_onlyOwner"";
""1510_setBitSTD"" -> ""1510_onlyOwner"";
""1510_transferDataAuthority"" -> ""1510_onlyOwner"";
}
"
0x6dbc5978711cb22d7ba611bc18cec308ea12ea95.sol,PublicResolver,"contract PublicResolver { bytes4 constant INTERFACE_META_ID = 0x01ffc9a7; bytes4 constant ADDR_INTERFACE_ID = 0x3b3b57de; bytes4 constant NAME_INTERFACE_ID = 0x691f3431; bytes4 constant ABI_INTERFACE_ID = 0x2203ab56; bytes4 constant PUBKEY_INTERFACE_ID = 0xc8690233; bytes4 constant TEXT_INTERFACE_ID = 0x59d1d43c; bytes4 constant MULTIADDR_INTERFACE_ID = 0x4cb7724c; event AddrChanged(bytes32 indexed node, address a); event NameChanged(bytes32 indexed node, string name); event ABIChanged(bytes32 indexed node, uint256 indexed contentType); event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y); event TextChanged(bytes32 indexed node, string indexedKey, string key); event MultiaddrChanged(bytes32 indexed node, bytes addr); struct PublicKey { bytes32 x; bytes32 y; }",1,"subgraph cluster_533_PublicResolver {
label=""PublicResolver"";
""533_text"" [label=""text""];
""533_constructor"" [label=""constructor""];
""533_setPubkey"" [label=""setPubkey""];
""533_setName"" [label=""setName""];
""533_setAddr"" [label=""setAddr""];
""533_setABI"" [label=""setABI""];
""533_multiaddr"" [label=""multiaddr""];
""533_addr"" [label=""addr""];
""533_supportsInterface"" [label=""supportsInterface""];
""533_name"" [label=""name""];
""533_setText"" [label=""setText""];
""533_setMultiaddr"" [label=""setMultiaddr""];
""533_ABI"" [label=""ABI""];
""533_pubkey"" [label=""pubkey""];
""533_setText"" -> ""533_onlyOwner"";
""533_setABI"" -> ""533_onlyOwner"";
""533_setAddr"" -> ""533_onlyOwner"";
""533_setPubkey"" -> ""533_onlyOwner"";
""533_setMultiaddr"" -> ""533_onlyOwner"";
""533_setName"" -> ""533_onlyOwner"";
}
"
0x730f8c40a08d02349a2d64e3193cf207a2a2dfe7.sol,PG_Bank,"contract PG_Bank { function Put(uint _unlockTime) public payable { var acc = Acc[msg.sender]; acc.balance += msg.value; acc.unlockTime = _unlockTime>now?_unlockTime:now; LogFile.AddMessage(msg.sender,msg.value,); }",1,"subgraph cluster_128_PG_Bank {
label=""PG_Bank"";
""128_PG_Bank"" [label=""PG_Bank""];
""128_fallback"" [label=""fallback""];
""128_Put"" [label=""Put""];
""128_Collect"" [label=""Collect""];
""128_fallback"" -> ""128_Put"";
}
"
0x541ac3dbde0712b1a121bdd5e8c506ae594a4631.sol,XPTToken,contract XPTToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 10000000 * (10**18); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; function XPTToken () { owner = msg.sender; },1,"subgraph cluster_756_XPTToken {
label=""XPTToken"";
""756_totalSupply"" [label=""totalSupply""];
""756_XPTToken"" [label=""XPTToken""];
""756_createTokens"" [label=""createTokens""];
""756_approve"" [label=""approve""];
""756_refundTokens"" [label=""refundTokens""];
""756_setOwner"" [label=""setOwner""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_transfer"" [label=""transfer""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_transferFrom"" [label=""transferFrom""];
""756_transferFrom"" -> ""756_transferFrom"";
""756_transfer"" -> ""756_transfer"";
""756_createTokens"" -> ""756_safeSub"";
""756_createTokens"" -> ""756_safeAdd"";
""756_approve"" -> ""756_allowance"";
""756_approve"" -> ""756_approve"";
}
"
0xaa63c8683647ef91b3fdab4b4989ee9588da297b.sol,DSProxy,"contract DSProxy is DSAuth, DSNote { DSProxyCache public cache; function DSProxy(address _cacheAddr) public { require(setCache(_cacheAddr)); }",1,"subgraph cluster_390_DSProxyCache {
label=""DSProxyCache"";
""390_read"" [label=""read""];
""390_write"" [label=""write""];
}
"
0x6a3f85f8a86e7b3de0269c20e9ab066dd57b8e21.sol,AccRegCenter,contract AccRegCenter is Ownable { struct User { address useraddress; uint useramount; bool lastTransfer; },1,"subgraph cluster_443_AccRegCenter {
label=""AccRegCenter"";
""443_SetAddress"" [label=""SetAddress""];
""443_GetUser"" [label=""GetUser""];
""443_transfer"" [label=""transfer""];
""443_AddUser"" [label=""AddUser""];
""443_SetAmount"" [label=""SetAmount""];
""443_constructor"" [label=""constructor""];
""443_ResetAllAmount"" [label=""ResetAllAmount""];
""443_transfertoacc"" [label=""transfertoacc""];
""443_TransferToAllAccounts"" [label=""TransferToAllAccounts""];
""443_transfer"" -> ""443_onlyOwner"";
""443_transfertoacc"" -> ""443_onlyOwner"";
""443_SetAmount"" -> ""443_onlyOwner"";
""443_ResetAllAmount"" -> ""443_onlyOwner"";
""443_TransferToAllAccounts"" -> ""443_onlyOwner"";
""443_AddUser"" -> ""443_onlyOwner"";
""443_SetAddress"" -> ""443_onlyOwner"";
}
"
0x4b96bf1fef93a216914fc843d81207a027ce52b3.sol,VUULRVesting,"contract VUULRVesting is XClaimable, Salvageable { using SafeMath for uint; struct VestingSchedule { uint lockPeriod; uint numPeriods; uint tokens; uint amountWithdrawn; uint startTime; }",1,"subgraph cluster_1806_VUULRVesting {
label=""VUULRVesting"";
""1806_revokeSchedule"" [label=""revokeSchedule""];
""1806_emergencyERC20Drain"" [label=""emergencyERC20Drain""];
""1806_registerVestingSchedule"" [label=""registerVestingSchedule""];
""1806_changeVestingAddress"" [label=""changeVestingAddress""];
""1806_whichPeriod"" [label=""whichPeriod""];
""1806_withdrawVestedTokens"" [label=""withdrawVestedTokens""];
""1806_VUULRVesting"" [label=""VUULRVesting""];
""1806_withdrawable"" [label=""withdrawable""];
""1806_start"" [label=""start""];
""1806_vested"" [label=""vested""];
""1806_revokeSchedule"" -> ""1806_onlyOwner"";
""1806_emergencyERC20Drain"" -> ""1806_canOperate"";
""1806_withdrawVestedTokens"" -> ""1806_vested"";
""1806_revokeSchedule"" -> ""1806_vested"";
""1806_start"" -> ""1806_onlyOwner"";
""1806_withdrawable"" -> ""1806_vested"";
""1806_revokeSchedule"" -> ""1806_withdrawable"";
""1806_emergencyERC20Drain"" -> ""1806_emergencyERC20Drain"";
""1806_changeVestingAddress"" -> ""1806_onlyOwner"";
""1806_registerVestingSchedule"" -> ""1806_canOperate"";
""1806_withdrawVestedTokens"" -> ""1806_withdrawable"";
}
"
0x47fb9b34d4eca0ca1d25cafcb4924d8fc94e8170.sol,FlexibleTokenSale,"contract FlexibleTokenSale is Owned { using SafeMath for uint256; bool public suspended; uint256 public tokenPrice; uint256 public tokenPerEther; uint256 public contributionMin; uint256 public tokenConversionFactor; address public walletAddress; TokenTransfer token; uint256 public totalTokensSold; uint256 public totalEtherCollected; address public priceUpdateAddress; event Initialized(); event TokenPriceUpdated(uint256 _newValue); event TokenPerEtherUpdated(uint256 _newValue); event TokenMinUpdated(uint256 _newValue); event WalletAddressUpdated(address indexed _newAddress); event SaleSuspended(); event SaleResumed(); event TokensPurchased(address indexed _beneficiary, uint256 _cost, uint256 _tokens); event TokensReclaimed(uint256 _amount); event PriceAddressUpdated(address indexed _newAddress); function FlexibleTokenSale(address _tokenAddress,address _walletAddress,uint _tokenPerEther,address _priceUpdateAddress) public Owned() { require(_walletAddress != address(0)); require(_walletAddress != address(this)); require(address(token) == address(0)); require(address(_tokenAddress) != address(0)); require(address(_tokenAddress) != address(this)); require(address(_tokenAddress) != address(walletAddress)); walletAddress = _walletAddress; priceUpdateAddress = _priceUpdateAddress; token = TokenTransfer(_tokenAddress); suspended = false; tokenPrice = 100; tokenPerEther = _tokenPerEther; contributionMin = 5 * 10**18; totalTokensSold = 0; totalEtherCollected = 0; tokenConversionFactor = 10**(uint256(18).sub(token.decimals()).add(2)); assert(tokenConversionFactor > 0); }",1,"subgraph cluster_883_FlexibleTokenSale {
label=""FlexibleTokenSale"";
""883_buyTokens"" [label=""buyTokens""];
""883_buyTokensInternal"" [label=""buyTokensInternal""];
""883_FlexibleTokenSale"" [label=""FlexibleTokenSale""];
""883_updatePriceAddress"" [label=""updatePriceAddress""];
""883_reclaimTokens"" [label=""reclaimTokens""];
""883_suspend"" [label=""suspend""];
""883_fallback"" [label=""fallback""];
""883_updateTokenPerEther"" [label=""updateTokenPerEther""];
""883_setMinToken"" [label=""setMinToken""];
""883_resume"" [label=""resume""];
""883_setTokenPrice"" [label=""setTokenPrice""];
""883_setWalletAddress"" [label=""setWalletAddress""];
""883_setMinToken"" -> ""883_onlyOwner"";
""883_resume"" -> ""883_onlyOwner"";
""883_FlexibleTokenSale"" -> ""883_Owned"";
""883_buyTokens"" -> ""883_buyTokensInternal"";
""883_setTokenPrice"" -> ""883_onlyOwner"";
""883_suspend"" -> ""883_onlyOwner"";
""883_updatePriceAddress"" -> ""883_onlyOwner"";
""883_reclaimTokens"" -> ""883_onlyOwner"";
""883_setWalletAddress"" -> ""883_onlyOwner"";
""883_setWalletAddress"" -> ""883_isOwner"";
""883_fallback"" -> ""883_buyTokens"";
}
"
0x2791528f5617e187a6d73c30034ac211b2f47042.sol,CardsRaffle,"contract CardsRaffle is AccessAdmin { using SafeMath for SafeMath; function CardsRaffle() public { setAdminContract(msg.sender,true); setActionContract(msg.sender,true); }",1,"subgraph cluster_957_CardsRaffle {
label=""CardsRaffle"";
""957_setCardsAddress"" [label=""setCardsAddress""];
""957_buyRaffleTicket"" [label=""buyRaffleTicket""];
""957_getLatestRaffleInfo"" [label=""getLatestRaffleInfo""];
""957_getRafflePlayers"" [label=""getRafflePlayers""];
""957_setRareAddress"" [label=""setRareAddress""];
""957_getRareAddress"" [label=""getRareAddress""];
""957_startRareRaffle"" [label=""startRareRaffle""];
""957_assignRafflePrize"" [label=""assignRafflePrize""];
""957_drawRandomWinner"" [label=""drawRandomWinner""];
""957_awardRafflePrize"" [label=""awardRafflePrize""];
""957_getPlayersTickets"" [label=""getPlayersTickets""];
""957_CardsRaffle"" [label=""CardsRaffle""];
""957_awardRafflePrize"" -> ""957_drawRandomWinner"";
""957_CardsRaffle"" -> ""957_setAdminContract"";
""957_setRareAddress"" -> ""957_onlyOwner"";
""957_awardRafflePrize"" -> ""957_assignRafflePrize"";
""957_startRareRaffle"" -> ""957_onlyAdmin"";
""957_startRareRaffle"" -> ""957_getRareAddress"";
""957_drawRandomWinner"" -> ""957_onlyAdmin"";
""957_CardsRaffle"" -> ""957_setActionContract"";
""957_setCardsAddress"" -> ""957_onlyOwner"";
""957_awardRafflePrize"" -> ""957_getRareAddress"";
}
"
0x0000009a317684a5f840484357fa587aca76454c.sol,BurnableToken,"contract BurnableToken is BasicToken { event Burn(address indexed burner, uint256 value); function burn(uint256 _value) public { require(_value <= balances.balanceOf(msg.sender)); address burner = msg.sender; balances.subBalance(burner, _value); totalSupply_ = totalSupply_.sub(_value); Burn(burner, _value); Transfer(burner, address(0), _value); }",1,"subgraph cluster_1429_BurnableToken {
label=""BurnableToken"";
""1429_burn"" [label=""burn""];
}
"
0x0000009a317684a5f840484357fa587aca76454c.sol,BurnableToken,"contract BurnableToken is BasicToken { event Burn(address indexed burner, uint256 value); function burn(uint256 _value) public { require(_value <= balances.balanceOf(msg.sender)); address burner = msg.sender; balances.subBalance(burner, _value); totalSupply_ = totalSupply_.sub(_value); Burn(burner, _value); Transfer(burner, address(0), _value); }",1,"subgraph cluster_1429_BurnableToken {
label=""BurnableToken"";
""1429_burn"" [label=""burn""];
}
"
0x174bb5d84b78e9e2248e7aa2c789aeba82f72f68.sol,LuckyTree,"contract LuckyTree is Owned, SafeMath{ uint public leafPrice; uint public gameStart; uint public gameDuration; uint public tokenLockDuration; uint public totalParticipationAmount; uint public totalLockedAmount; uint public numberOfLeafs; uint public participantIndex; bool public fundsTransfered; address public winner; mapping(uint => address) public participants; mapping(uint => uint) public participationAmount; mapping(address => bool) public hasParticipated; mapping(address => bool) public hasWithdrawn; mapping(address => uint) public participantIndexes; mapping(uint => address) public leafOwners; event GameWinner(address winner); event GameEnded(uint block); event GameStarted(uint block); event GameFailed(uint block); event GameLocked(uint block); event GameUnlocked(uint block); enum state{ pending, running, paused, finished, closed, claimed }",1,"subgraph cluster_1043_LuckyTree {
label=""LuckyTree"";
""1043_random"" [label=""random""];
""1043_lockFunds"" [label=""lockFunds""];
""1043_processTransaction"" [label=""processTransaction""];
""1043_closeGame"" [label=""closeGame""];
""1043_pickWinner"" [label=""pickWinner""];
""1043_manuallyProcessTransaction"" [label=""manuallyProcessTransaction""];
""1043_unlockFunds"" [label=""unlockFunds""];
""1043_setCreditGameAddress"" [label=""setCreditGameAddress""];
""1043_checkInternalBalance"" [label=""checkInternalBalance""];
""1043_salvageTokensFromContract"" [label=""salvageTokensFromContract""];
""1043_setTokenAddress"" [label=""setTokenAddress""];
""1043_receiveApproval"" [label=""receiveApproval""];
""1043_LuckyTree"" [label=""LuckyTree""];
""1043_getVariablesForDapp"" [label=""getVariablesForDapp""];
""1043_manualLockFunds"" [label=""manualLockFunds""];
""1043_killContract"" [label=""killContract""];
""1043_salvageTokensFromContract"" -> ""1043_onlyOwner"";
""1043_manuallyProcessTransaction"" -> ""1043_onlyOwner"";
""1043_manualLockFunds"" -> ""1043_onlyOwner"";
""1043_setCreditGameAddress"" -> ""1043_onlyOwner"";
""1043_setTokenAddress"" -> ""1043_onlyOwner"";
""1043_pickWinner"" -> ""1043_random"";
""1043_closeGame"" -> ""1043_onlyOwner"";
""1043_killContract"" -> ""1043_onlyOwner"";
""1043_receiveApproval"" -> ""1043_processTransaction"";
""1043_manualLockFunds"" -> ""1043_pickWinner"";
""1043_pickWinner"" -> ""1043_lockFunds"";
""1043_processTransaction"" -> ""1043_pickWinner"";
""1043_manuallyProcessTransaction"" -> ""1043_processTransaction"";
}
"
0x750c1d91864171d7e1715a6b53ee28c72b8faa09.sol,EthicHubUser,"contract EthicHubUser is Ownable, EthicHubBase { event UserStatusChanged(address target, string profile, bool isRegistered); constructor(address _storageAddress) EthicHubBase(_storageAddress) public { version = 3; }",1,"subgraph cluster_660_EthicHubUser {
label=""EthicHubUser"";
""660_deleteUserStatus"" [label=""deleteUserStatus""];
""660_registerPaymentGateway"" [label=""registerPaymentGateway""];
""660_registerLocalNode"" [label=""registerLocalNode""];
""660_unregisterLocalNode"" [label=""unregisterLocalNode""];
""660_registerRepresentative"" [label=""registerRepresentative""];
""660_constructor"" [label=""constructor""];
""660_unregisterPaymentGateway"" [label=""unregisterPaymentGateway""];
""660_changeUserStatus"" [label=""changeUserStatus""];
""660_unregisterCommunity"" [label=""unregisterCommunity""];
""660_unregisterRepresentative"" [label=""unregisterRepresentative""];
""660_unregisterInvestor"" [label=""unregisterInvestor""];
""660_registerInvestor"" [label=""registerInvestor""];
""660_viewRegistrationStatus"" [label=""viewRegistrationStatus""];
""660_registerCommunity"" [label=""registerCommunity""];
""660_unregisterCommunity"" -> ""660_onlyOwner"";
""660_registerLocalNode"" -> ""660_changeUserStatus"";
""660_constructor"" -> ""660_constructor"";
""660_registerInvestor"" -> ""660_onlyOwner"";
""660_unregisterInvestor"" -> ""660_deleteUserStatus"";
""660_unregisterLocalNode"" -> ""660_onlyOwner"";
""660_unregisterInvestor"" -> ""660_onlyOwner"";
""660_unregisterRepresentative"" -> ""660_onlyOwner"";
""660_registerCommunity"" -> ""660_changeUserStatus"";
""660_registerLocalNode"" -> ""660_onlyOwner"";
""660_unregisterLocalNode"" -> ""660_deleteUserStatus"";
""660_registerCommunity"" -> ""660_onlyOwner"";
""660_unregisterPaymentGateway"" -> ""660_onlyOwner"";
""660_registerRepresentative"" -> ""660_onlyOwner"";
""660_unregisterPaymentGateway"" -> ""660_deleteUserStatus"";
""660_unregisterCommunity"" -> ""660_deleteUserStatus"";
""660_unregisterRepresentative"" -> ""660_deleteUserStatus"";
""660_deleteUserStatus"" -> ""660_onlyOwner"";
""660_registerPaymentGateway"" -> ""660_changeUserStatus"";
""660_registerRepresentative"" -> ""660_changeUserStatus"";
""660_changeUserStatus"" -> ""660_onlyOwner"";
""660_registerPaymentGateway"" -> ""660_onlyOwner"";
""660_registerInvestor"" -> ""660_changeUserStatus"";
}
"
0xc58f1f3ec051b51f10c4feb0cfd10d811d055ef5.sol,ldoh,"contract ldoh is EthereumSmartContract { event onCashbackCode (address indexed hodler, address cashbackcode); event onAffiliateBonus (address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime); event onClaimTokens (address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime); event onHoldplatform (address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime); event onAddContractAddress(address indexed contracthodler, bool contractstatus, uint256 _maxcontribution, string _ContractSymbol, uint256 _PercentPermonth, uint256 _HodlingTime); event onHoldplatformsetting(address indexed Tokenairdrop, bool HPM_status, uint256 HPM_divider, uint256 HPM_ratio, uint256 datetime); event onHoldplatformdeposit(uint256 amount, uint256 newbalance, uint256 datetime); event onHoldplatformwithdraw(uint256 amount, uint256 newbalance, uint256 datetime); event onReceiveAirdrop(uint256 amount, uint256 datetime); address public DefaultToken; struct Safe { uint256 id; uint256 amount; uint256 endtime; address user; address tokenAddress; string tokenSymbol; uint256 amountbalance; uint256 cashbackbalance; uint256 lasttime; uint256 percentage; uint256 percentagereceive; uint256 tokenreceive; uint256 lastwithdraw; address referrer; bool cashbackstatus; }",1,"subgraph cluster_2349_ldoh {
label=""ldoh"";
""2349_WithdrawAffiliate"" [label=""WithdrawAffiliate""];
""2349_HodlTokens4"" [label=""HodlTokens4""];
""2349_GetUserSafesLength"" [label=""GetUserSafesLength""];
""2349_TokenPrice"" [label=""TokenPrice""];
""2349_div"" [label=""div""];
""2349_AddContractAddress"" [label=""AddContractAddress""];
""2349_fallback"" [label=""fallback""];
""2349_Holdplatform"" [label=""Holdplatform""];
""2349_UnlockToken2"" [label=""UnlockToken2""];
""2349_Holdplatform_Airdrop"" [label=""Holdplatform_Airdrop""];
""2349_UnlockToken3"" [label=""UnlockToken3""];
""2349_mul"" [label=""mul""];
""2349_CashbackCode"" [label=""CashbackCode""];
""2349_GetTotalAffiliate"" [label=""GetTotalAffiliate""];
""2349_constructor"" [label=""constructor""];
""2349_ClaimTokens"" [label=""ClaimTokens""];
""2349_ReturnAllTokens"" [label=""ReturnAllTokens""];
""2349_Holdplatform_Withdraw"" [label=""Holdplatform_Withdraw""];
""2349_Holdplatform_Deposit"" [label=""Holdplatform_Deposit""];
""2349_UnlockToken4"" [label=""UnlockToken4""];
""2349_HodlTokens3"" [label=""HodlTokens3""];
""2349_AirdropToken"" [label=""AirdropToken""];
""2349_GetSafe"" [label=""GetSafe""];
""2349_sub"" [label=""sub""];
""2349_add"" [label=""add""];
""2349_HodlTokens2"" [label=""HodlTokens2""];
""2349_PayToken"" [label=""PayToken""];
""2349_UnlockToken4"" -> ""2349_sub"";
""2349_Holdplatform_Airdrop"" -> ""2349_div"";
""2349_AirdropToken"" -> ""2349_div"";
""2349_Holdplatform_Deposit"" -> ""2349_restricted"";
""2349_HodlTokens2"" -> ""2349_HodlTokens3"";
""2349_HodlTokens3"" -> ""2349_sub"";
""2349_AddContractAddress"" -> ""2349_restricted"";
""2349_Holdplatform"" -> ""2349_HodlTokens2"";
""2349_HodlTokens2"" -> ""2349_div"";
""2349_Holdplatform_Withdraw"" -> ""2349_restricted"";
""2349_ReturnAllTokens"" -> ""2349_add"";
""2349_HodlTokens2"" -> ""2349_sub"";
""2349_UnlockToken2"" -> ""2349_mul"";
""2349_UnlockToken2"" -> ""2349_sub"";
""2349_UnlockToken3"" -> ""2349_mul"";
""2349_AddContractAddress"" -> ""2349_mul"";
""2349_TokenPrice"" -> ""2349_restricted"";
""2349_WithdrawAffiliate"" -> ""2349_add"";
""2349_UnlockToken4"" -> ""2349_PayToken"";
""2349_HodlTokens4"" -> ""2349_add"";
""2349_UnlockToken4"" -> ""2349_mul"";
""2349_Holdplatform_Airdrop"" -> ""2349_restricted"";
""2349_UnlockToken3"" -> ""2349_div"";
""2349_AddContractAddress"" -> ""2349_div"";
""2349_HodlTokens3"" -> ""2349_mul"";
""2349_UnlockToken4"" -> ""2349_div"";
""2349_Holdplatform"" -> ""2349_add"";
""2349_Holdplatform_Deposit"" -> ""2349_add"";
""2349_UnlockToken2"" -> ""2349_add"";
""2349_PayToken"" -> ""2349_AirdropToken"";
""2349_Holdplatform_Withdraw"" -> ""2349_sub"";
""2349_UnlockToken3"" -> ""2349_add"";
""2349_WithdrawAffiliate"" -> ""2349_sub"";
""2349_ReturnAllTokens"" -> ""2349_PayToken"";
""2349_UnlockToken2"" -> ""2349_UnlockToken3"";
""2349_UnlockToken2"" -> ""2349_PayToken"";
""2349_ReturnAllTokens"" -> ""2349_restricted"";
""2349_UnlockToken2"" -> ""2349_div"";
""2349_ClaimTokens"" -> ""2349_UnlockToken2"";
""2349_UnlockToken3"" -> ""2349_UnlockToken4"";
""2349_HodlTokens3"" -> ""2349_add"";
""2349_AirdropToken"" -> ""2349_sub"";
""2349_UnlockToken3"" -> ""2349_sub"";
""2349_HodlTokens3"" -> ""2349_HodlTokens4"";
""2349_HodlTokens3"" -> ""2349_div"";
""2349_PayToken"" -> ""2349_sub"";
""2349_PayToken"" -> ""2349_add"";
}
"
0xf0ef703a04cf96212031b51d373e8469687f308e.sol,ESCToken,contract ESCToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 1000000000 * (10**18); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; function ESCToken () { owner = msg.sender; },1,"subgraph cluster_756_ESCToken {
label=""ESCToken"";
""756_ESCToken"" [label=""ESCToken""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_approve"" [label=""approve""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_refundTokens"" [label=""refundTokens""];
""756_totalSupply"" [label=""totalSupply""];
""756_createTokens"" [label=""createTokens""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_transfer"" [label=""transfer""];
""756_transferFrom"" [label=""transferFrom""];
""756_setOwner"" [label=""setOwner""];
""756_transfer"" -> ""756_transfer"";
""756_transferFrom"" -> ""756_transferFrom"";
""756_approve"" -> ""756_approve"";
""756_createTokens"" -> ""756_safeAdd"";
""756_approve"" -> ""756_allowance"";
""756_createTokens"" -> ""756_safeSub"";
}
"
0x0356e14c2f8de339131c668c1747def594467a9a.sol,Club1VIT,"contract Club1VIT is Ownable { using SafeMath for uint256; string public name = ; string public symbol = ; uint8 public decimals = 0; uint256 public initialSupply = 1; mapping(address => uint256) balances; mapping (address => mapping (address => uint256)) internal allowed; event Transfer(address indexed from, address indexed to); function totalSupply() public view returns (uint256) { return initialSupply; }",1,"subgraph cluster_329_Club1VIT {
label=""Club1VIT"";
""329_transfer"" [label=""transfer""];
""329_Club1VIT"" [label=""Club1VIT""];
""329_transferFrom"" [label=""transferFrom""];
""329_totalSupply"" [label=""totalSupply""];
""329_balanceOf"" [label=""balanceOf""];
""329_transferFrom"" -> ""329_onlyOwner"";
}
"
0xed3762edcc5820a5587105d7b9f574c711c4a700.sol,FoMo3Dshort,"contract FoMo3Dshort is modularShort { using SafeMath for *; using NameFilter for string; using F3DKeysCalcShort for uint256; PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0xF6b8836492f8332D17B1496828d2bEE71ad511DA); address private admin = msg.sender; string constant public name = ; string constant public symbol = ; uint256 public rndExtra_ = 30 minutes; uint256 public rndGap_ = 1 hours; uint256 constant private rndInit_ = 1 hours; uint256 constant private rndInc_ = 5 seconds; uint256 constant private rndMax_ = 10 minutes; uint256 public airDropPot_; uint256 public airDropTracker_ = 0; uint256 public rID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => F3Ddatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => F3Ddatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => F3Ddatasets.Round) public round_; mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping (uint256 => F3Ddatasets.TeamFee) public fees_; mapping (uint256 => F3Ddatasets.PotSplit) public potSplit_; constructor() public { fees_[0] = F3Ddatasets.TeamFee(30,6); fees_[1] = F3Ddatasets.TeamFee(43,0); fees_[2] = F3Ddatasets.TeamFee(56,10); fees_[3] = F3Ddatasets.TeamFee(43,8); potSplit_[0] = F3Ddatasets.PotSplit(15,10); potSplit_[1] = F3Ddatasets.PotSplit(25,0); potSplit_[2] = F3Ddatasets.PotSplit(20,20); potSplit_[3] = F3Ddatasets.PotSplit(30,10); }",1,"subgraph cluster_4199_FoMo3Dshort {
label=""FoMo3Dshort"";
""4199_iWantXKeys"" [label=""iWantXKeys""];
""4199_getBuyPrice"" [label=""getBuyPrice""];
""4199_registerNameXID"" [label=""registerNameXID""];
""4199_withdraw"" [label=""withdraw""];
""4199_endTx"" [label=""endTx""];
""4199_buyXid"" [label=""buyXid""];
""4199_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""4199_buyXname"" [label=""buyXname""];
""4199_registerNameXaddr"" [label=""registerNameXaddr""];
""4199_airdrop"" [label=""airdrop""];
""4199_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""4199_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""4199_updateGenVault"" [label=""updateGenVault""];
""4199_updateMasks"" [label=""updateMasks""];
""4199_activate"" [label=""activate""];
""4199_updateTimer"" [label=""updateTimer""];
""4199_buyCore"" [label=""buyCore""];
""4199_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""4199_reLoadXname"" [label=""reLoadXname""];
""4199_withdrawEarnings"" [label=""withdrawEarnings""];
""4199_distributeExternal"" [label=""distributeExternal""];
""4199_determinePID"" [label=""determinePID""];
""4199_verifyTeam"" [label=""verifyTeam""];
""4199_endRound"" [label=""endRound""];
""4199_calcKeysReceived"" [label=""calcKeysReceived""];
""4199_reLoadCore"" [label=""reLoadCore""];
""4199_fallback"" [label=""fallback""];
""4199_getTimeLeft"" [label=""getTimeLeft""];
""4199_receivePlayerInfo"" [label=""receivePlayerInfo""];
""4199_core"" [label=""core""];
""4199_buyXaddr"" [label=""buyXaddr""];
""4199_registerNameXname"" [label=""registerNameXname""];
""4199_constructor"" [label=""constructor""];
""4199_reLoadXaddr"" [label=""reLoadXaddr""];
""4199_reLoadXid"" [label=""reLoadXid""];
""4199_managePlayer"" [label=""managePlayer""];
""4199_potSwap"" [label=""potSwap""];
""4199_distributeInternal"" [label=""distributeInternal""];
""4199_receivePlayerNameList"" [label=""receivePlayerNameList""];
""4199_getPlayerVaults"" [label=""getPlayerVaults""];
""4199_core"" -> ""4199_airdrop"";
""4199_withdraw"" -> ""4199_withdrawEarnings"";
""4199_reLoadXid"" -> ""4199_reLoadCore"";
""4199_reLoadXname"" -> ""4199_isActivated"";
""4199_reLoadXid"" -> ""4199_isActivated"";
""4199_fallback"" -> ""4199_determinePID"";
""4199_buyXid"" -> ""4199_isWithinLimits"";
""4199_buyXaddr"" -> ""4199_isWithinLimits"";
""4199_buyXaddr"" -> ""4199_determinePID"";
""4199_reLoadXname"" -> ""4199_reLoadCore"";
""4199_reLoadXname"" -> ""4199_isHuman"";
""4199_buyXid"" -> ""4199_verifyTeam"";
""4199_getPlayerInfoByAddress"" -> ""4199_calcUnMaskedEarnings"";
""4199_buyCore"" -> ""4199_endRound"";
""4199_buyXaddr"" -> ""4199_buyCore"";
""4199_fallback"" -> ""4199_buyCore"";
""4199_buyXid"" -> ""4199_buyCore"";
""4199_withdraw"" -> ""4199_endRound"";
""4199_core"" -> ""4199_managePlayer"";
""4199_reLoadXaddr"" -> ""4199_isHuman"";
""4199_buyXid"" -> ""4199_isHuman"";
""4199_managePlayer"" -> ""4199_updateGenVault"";
""4199_registerNameXaddr"" -> ""4199_isHuman"";
""4199_distributeInternal"" -> ""4199_updateMasks"";
""4199_core"" -> ""4199_updateTimer"";
""4199_updateGenVault"" -> ""4199_calcUnMaskedEarnings"";
""4199_buyXname"" -> ""4199_determinePID"";
""4199_core"" -> ""4199_distributeExternal"";
""4199_fallback"" -> ""4199_isActivated"";
""4199_reLoadXname"" -> ""4199_verifyTeam"";
""4199_buyXname"" -> ""4199_isActivated"";
""4199_reLoadCore"" -> ""4199_core"";
""4199_registerNameXname"" -> ""4199_isHuman"";
""4199_reLoadCore"" -> ""4199_withdrawEarnings"";
""4199_reLoadXaddr"" -> ""4199_reLoadCore"";
""4199_withdraw"" -> ""4199_isActivated"";
""4199_core"" -> ""4199_distributeInternal"";
""4199_buyXaddr"" -> ""4199_isActivated"";
""4199_buyXname"" -> ""4199_isWithinLimits"";
""4199_buyXid"" -> ""4199_isActivated"";
""4199_core"" -> ""4199_endTx"";
""4199_getPlayerVaults"" -> ""4199_getPlayerVaultsHelper"";
""4199_getPlayerVaults"" -> ""4199_calcUnMaskedEarnings"";
""4199_buyXname"" -> ""4199_verifyTeam"";
""4199_reLoadXid"" -> ""4199_verifyTeam"";
""4199_fallback"" -> ""4199_isWithinLimits"";
""4199_buyXid"" -> ""4199_determinePID"";
""4199_registerNameXID"" -> ""4199_isHuman"";
""4199_reLoadXaddr"" -> ""4199_verifyTeam"";
""4199_buyXname"" -> ""4199_isHuman"";
""4199_reLoadXaddr"" -> ""4199_isActivated"";
""4199_fallback"" -> ""4199_isHuman"";
""4199_withdrawEarnings"" -> ""4199_updateGenVault"";
""4199_buyXname"" -> ""4199_buyCore"";
""4199_reLoadXname"" -> ""4199_isWithinLimits"";
""4199_reLoadCore"" -> ""4199_endRound"";
""4199_reLoadXid"" -> ""4199_isHuman"";
""4199_buyXaddr"" -> ""4199_verifyTeam"";
""4199_reLoadXid"" -> ""4199_isWithinLimits"";
""4199_buyCore"" -> ""4199_core"";
""4199_buyXaddr"" -> ""4199_isHuman"";
""4199_withdraw"" -> ""4199_isHuman"";
""4199_reLoadXaddr"" -> ""4199_isWithinLimits"";
}
"
0x292d448b46f5419387e3886e89680ed4b7d62d09.sol,RegistrationBonus,"contract RegistrationBonus is Ownable { address public tokenAddr; uint256 constant bonusAmount = 1 * 1 ether; mapping (address => uint) public beneficiaryAddresses; mapping (uint => address) public beneficiaryUserIds; AbstractMintableToken token; event BonusEnrolled(address beneficiary, uint userId, uint256 amount); function RegistrationBonus(address _token){ tokenAddr = _token; token = AbstractMintableToken(tokenAddr); }",1,"subgraph cluster_155_RegistrationBonus {
label=""RegistrationBonus"";
""155_RegistrationBonus"" [label=""RegistrationBonus""];
""155_addBonusToken"" [label=""addBonusToken""];
""155_addBonusToken"" -> ""155_onlyOwner"";
}
"
0x56ffb3c578906ba9658fccb052fc1a5672275b6a.sol,OpiriaCrowdsale,"contract OpiriaCrowdsale is TimedPresaleCrowdsale, MintedCrowdsale, TokenCappedCrowdsale { using SafeMath for uint256; uint256 public presaleWeiLimit; address public tokensWallet; uint256 public totalBonus = 0; bool public hiddenCapTriggered; uint16 public additionalBonusPercent = 0; mapping(address => uint256) public bonusOf; constructor(ERC20 _token, uint16 _initialEtherUsdRate, address _wallet, address _tokensWallet, uint256 _presaleOpeningTime, uint256 _presaleClosingTime, uint256 _openingTime, uint256 _closingTime ) public TimedPresaleCrowdsale(_presaleOpeningTime, _presaleClosingTime, _openingTime, _closingTime) Crowdsale(_initialEtherUsdRate, _wallet, _token) { setEtherUsdRate(_initialEtherUsdRate); tokensWallet = _tokensWallet; require(PausableToken(token).paused()); }",1,"subgraph cluster_2370_OpiriaCrowdsale {
label=""OpiriaCrowdsale"";
""2370_claimReservedTokens"" [label=""claimReservedTokens""];
""2370_setEtherUsdRate"" [label=""setEtherUsdRate""];
""2370__getTokenAmount"" [label=""_getTokenAmount""];
""2370_constructor"" [label=""constructor""];
""2370_addBonusBatch"" [label=""addBonusBatch""];
""2370__preValidatePurchase"" [label=""_preValidatePurchase""];
""2370_triggerHiddenCap"" [label=""triggerHiddenCap""];
""2370_sendTokensTo"" [label=""sendTokensTo""];
""2370_increaseCap"" [label=""increaseCap""];
""2370_withdrawBonus"" [label=""withdrawBonus""];
""2370__getBonusAmount"" [label=""_getBonusAmount""];
""2370_unlockTokenTransfers"" [label=""unlockTokenTransfers""];
""2370_distributeBonus"" [label=""distributeBonus""];
""2370__processPurchase"" [label=""_processPurchase""];
""2370_sendTokensToBatch"" [label=""sendTokensToBatch""];
""2370__saveBonus"" [label=""_saveBonus""];
""2370__getBonusPercent"" [label=""_getBonusPercent""];
""2370_finalization"" [label=""finalization""];
""2370_setAdditionalBonusPercent"" [label=""setAdditionalBonusPercent""];
""2370__preValidatePurchase"" -> ""2370__getBonusAmount"";
""2370_claimReservedTokens"" -> ""2370_onlyOwner"";
""2370__preValidatePurchase"" -> ""2370__getTokenAmount"";
""2370_unlockTokenTransfers"" -> ""2370_onlyOwner"";
""2370_increaseCap"" -> ""2370_onlyOwner"";
""2370_triggerHiddenCap"" -> ""2370_onlyOwner"";
""2370_sendTokensToBatch"" -> ""2370_sendTokensTo"";
""2370_setEtherUsdRate"" -> ""2370_onlyOwner"";
""2370_addBonusBatch"" -> ""2370_notExceedingSaleCap"";
""2370_distributeBonus"" -> ""2370_onlyOwner"";
""2370_sendTokensTo"" -> ""2370_onlyOwner"";
""2370_finalization"" -> ""2370_finalization"";
""2370__preValidatePurchase"" -> ""2370_isPresale"";
""2370_setAdditionalBonusPercent"" -> ""2370_onlyOwner"";
""2370__saveBonus"" -> ""2370__getBonusAmount"";
""2370__preValidatePurchase"" -> ""2370_notExceedingSaleCap"";
""2370__getBonusAmount"" -> ""2370__getBonusPercent"";
""2370_addBonusBatch"" -> ""2370_onlyOwner"";
""2370_constructor"" -> ""2370_constructor"";
""2370__getBonusPercent"" -> ""2370_isPresale"";
""2370__processPurchase"" -> ""2370__deliverTokens"";
""2370__preValidatePurchase"" -> ""2370__preValidatePurchase"";
""2370_finalization"" -> ""2370__deliverTokens"";
""2370_constructor"" -> ""2370_setEtherUsdRate"";
""2370_withdrawBonus"" -> ""2370__deliverTokens"";
""2370_sendTokensTo"" -> ""2370_notExceedingSaleCap"";
""2370_sendTokensToBatch"" -> ""2370_onlyOwner"";
""2370__processPurchase"" -> ""2370__saveBonus"";
""2370_distributeBonus"" -> ""2370__deliverTokens"";
""2370_claimReservedTokens"" -> ""2370__deliverTokens"";
}
"
0xef86db910c71ffa3c80233bc9108dc51ad1e008a.sol,CommonWallet,"contract CommonWallet { mapping(address => mapping (address => uint256)) public tokenBalance; mapping(address => uint) etherBalance; address owner = msg.sender; function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) { uint256 z = _x + _y; assert(z >= _x); return z; }",1,"subgraph cluster_387_CommonWallet {
label=""CommonWallet"";
""387_sendTokenTo"" [label=""sendTokenTo""];
""387_wdEther"" [label=""wdEther""];
""387_safeAdd"" [label=""safeAdd""];
""387_wdToken"" [label=""wdToken""];
""387_sendEtherTo"" [label=""sendEtherTo""];
""387_depoEther"" [label=""depoEther""];
""387_getEtherBalance"" [label=""getEtherBalance""];
""387_safeSub"" [label=""safeSub""];
""387_depoToken"" [label=""depoToken""];
""387_getTokenBalance"" [label=""getTokenBalance""];
""387_sendEtherTo"" -> ""387_safeSub"";
""387_wdEther"" -> ""387_safeSub"";
""387_wdToken"" -> ""387_safeSub"";
""387_depoToken"" -> ""387_safeAdd"";
""387_sendTokenTo"" -> ""387_safeSub"";
}
"
0x6d4106c5c6cddeb5e0bbda23c4555a45dfaa92d7.sol,CucuSale,"contract CucuSale { address public beneficiary; uint public amountRaised; uint public price; uint public dynamicLocktime; uint public globalLocktime; uint public lockType = 0; token public tokenReward; uint public exchangeRate; mapping(address => uint256) public balanceOf; mapping(address => uint256) public tokenBalanceOf; mapping(address => uint256) public timelocksOf; address[] public founders; address public owner; event FundTransfer(address backer, uint amount, uint exchangeRate, uint token, uint time, uint timelock, bool isContribution); event IsCharged(bool isCharged); event TokensClaimed(address founder, uint tokens); event TransferOwnership(); event ChangeExchangeRate(uint oldExchangeRate, uint newExchangeRate); event NewGlobalLocktime(uint timelockUntil); event NewDynamicLocktime(uint timelockUntil); uint public tokenAvailable = 0; bool public charged = false; uint lastActionId = 0; constructor( address _beneficiary, address _addressOfTokenUsedAsReward, uint _globalLocktime, uint _dynamicLocktime, uint _exchangeRate ) public { beneficiary = _beneficiary; dynamicLocktime = _dynamicLocktime; tokenReward = token(_addressOfTokenUsedAsReward); globalLocktime = now + _globalLocktime * 1 minutes; exchangeRate = _exchangeRate; owner = msg.sender; }",1,"subgraph cluster_548_CucuSale {
label=""CucuSale"";
""548_transferRaisedFunds"" [label=""transferRaisedFunds""];
""548_setDynamicLocktime"" [label=""setDynamicLocktime""];
""548_transferOwnership"" [label=""transferOwnership""];
""548_constructor"" [label=""constructor""];
""548_setExchangeRate"" [label=""setExchangeRate""];
""548_unlockTokensFor"" [label=""unlockTokensFor""];
""548_doChargeCrowdsale"" [label=""doChargeCrowdsale""];
""548_resetLockFor"" [label=""resetLockFor""];
""548_setGlobalLocktime"" [label=""setGlobalLocktime""];
""548_fallback"" [label=""fallback""];
""548_setLockType"" [label=""setLockType""];
""548_claimTokens"" [label=""claimTokens""];
""548_getLeftOver"" [label=""getLeftOver""];
""548_unlockTokensFor"" -> ""548_onlyOwner"";
""548_getLeftOver"" -> ""548_onlyOwner"";
""548_doChargeCrowdsale"" -> ""548_onlyOwner"";
""548_setGlobalLocktime"" -> ""548_onlyOwner"";
""548_setDynamicLocktime"" -> ""548_onlyOwner"";
""548_transferRaisedFunds"" -> ""548_onlyOwner"";
""548_setLockType"" -> ""548_onlyOwner"";
""548_resetLockFor"" -> ""548_onlyOwner"";
""548_transferOwnership"" -> ""548_onlyOwner"";
""548_setExchangeRate"" -> ""548_onlyOwner"";
}
"
0x4c84949b55f21a376dba12e732958ede8b033b0e.sol,TokenVesting,contract TokenVesting { using SafeMath for uint256; struct VestingGrant { bool isGranted; address issuer; address beneficiary; uint256 grantJiffys; uint256 startTimestamp; uint256 cliffTimestamp; uint256 endTimestamp; bool isRevocable; uint256 releasedJiffys; },1,"subgraph cluster_591_TokenVesting {
label=""TokenVesting"";
""591_initialize"" [label=""initialize""];
""591_TokenVesting"" [label=""TokenVesting""];
""591_getGrantBalanceOf"" [label=""getGrantBalanceOf""];
""591_getGrantBeneficiaries"" [label=""getGrantBeneficiaries""];
""591_fallback"" [label=""fallback""];
""591_revoke"" [label=""revoke""];
""591_getGrantBalance"" [label=""getGrantBalance""];
""591_release"" [label=""release""];
""591_grant"" [label=""grant""];
""591_releaseFor"" [label=""releaseFor""];
""591_releaseFor"" -> ""591_requireIsOperational"";
""591_getGrantBalance"" -> ""591_getGrantBalanceOf"";
""591_grant"" -> ""591_releaseFor"";
""591_release"" -> ""591_releaseFor"";
""591_initialize"" -> ""591_grant"";
""591_revoke"" -> ""591_requireIsOperational"";
""591_grant"" -> ""591_requireIsOperational"";
}
"
0x174bb5d84b78e9e2248e7aa2c789aeba82f72f68.sol,LuckyTree,"contract LuckyTree is Owned, SafeMath{ uint public leafPrice; uint public gameStart; uint public gameDuration; uint public tokenLockDuration; uint public totalParticipationAmount; uint public totalLockedAmount; uint public numberOfLeafs; uint public participantIndex; bool public fundsTransfered; address public winner; mapping(uint => address) public participants; mapping(uint => uint) public participationAmount; mapping(address => bool) public hasParticipated; mapping(address => bool) public hasWithdrawn; mapping(address => uint) public participantIndexes; mapping(uint => address) public leafOwners; event GameWinner(address winner); event GameEnded(uint block); event GameStarted(uint block); event GameFailed(uint block); event GameLocked(uint block); event GameUnlocked(uint block); enum state{ pending, running, paused, finished, closed, claimed }",1,"subgraph cluster_1043_LuckyTree {
label=""LuckyTree"";
""1043_random"" [label=""random""];
""1043_lockFunds"" [label=""lockFunds""];
""1043_processTransaction"" [label=""processTransaction""];
""1043_closeGame"" [label=""closeGame""];
""1043_pickWinner"" [label=""pickWinner""];
""1043_manuallyProcessTransaction"" [label=""manuallyProcessTransaction""];
""1043_unlockFunds"" [label=""unlockFunds""];
""1043_setCreditGameAddress"" [label=""setCreditGameAddress""];
""1043_checkInternalBalance"" [label=""checkInternalBalance""];
""1043_salvageTokensFromContract"" [label=""salvageTokensFromContract""];
""1043_setTokenAddress"" [label=""setTokenAddress""];
""1043_receiveApproval"" [label=""receiveApproval""];
""1043_LuckyTree"" [label=""LuckyTree""];
""1043_getVariablesForDapp"" [label=""getVariablesForDapp""];
""1043_manualLockFunds"" [label=""manualLockFunds""];
""1043_killContract"" [label=""killContract""];
""1043_salvageTokensFromContract"" -> ""1043_onlyOwner"";
""1043_manuallyProcessTransaction"" -> ""1043_onlyOwner"";
""1043_manualLockFunds"" -> ""1043_onlyOwner"";
""1043_setCreditGameAddress"" -> ""1043_onlyOwner"";
""1043_setTokenAddress"" -> ""1043_onlyOwner"";
""1043_pickWinner"" -> ""1043_random"";
""1043_closeGame"" -> ""1043_onlyOwner"";
""1043_killContract"" -> ""1043_onlyOwner"";
""1043_receiveApproval"" -> ""1043_processTransaction"";
""1043_manualLockFunds"" -> ""1043_pickWinner"";
""1043_pickWinner"" -> ""1043_lockFunds"";
""1043_processTransaction"" -> ""1043_pickWinner"";
""1043_manuallyProcessTransaction"" -> ""1043_processTransaction"";
}
"
0x2682e3ad5358932ac5cd8f8616912cec76ad680c.sol,CupExchange,"contract CupExchange { using SafeMath for uint256; using SafeMath for int256; address public owner; token internal teamCup; token internal cup; uint256 public exchangePrice; bool public halting = true; event Halted(bool halting); event Exchange(address user, uint256 distributedAmount, uint256 collectedAmount); constructor(address cupToken, address teamCupToken) public { owner = msg.sender; teamCup = token(teamCupToken); cup = token(cupToken); }",1,"subgraph cluster_373_CupExchange {
label=""CupExchange"";
""373_exchange"" [label=""exchange""];
""373_safeWithdrawal"" [label=""safeWithdrawal""];
""373_setExchangePrice"" [label=""setExchangePrice""];
""373_constructor"" [label=""constructor""];
""373_halt"" [label=""halt""];
""373_unhalt"" [label=""unhalt""];
""373_safeWithdrawal"" -> ""373_onlyOwner"";
""373_unhalt"" -> ""373_onlyOwner"";
""373_halt"" -> ""373_onlyOwner"";
""373_setExchangePrice"" -> ""373_onlyOwner"";
}
"
0x2e59c87e9349242063793761780550374a3146cf.sol,THORToken,contract THORToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 500000000 * (10**8); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; function THORToken () { owner = msg.sender; },1,"subgraph cluster_756_THORToken {
label=""THORToken"";
""756_transfer"" [label=""transfer""];
""756_setOwner"" [label=""setOwner""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_transferFrom"" [label=""transferFrom""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_totalSupply"" [label=""totalSupply""];
""756_createTokens"" [label=""createTokens""];
""756_approve"" [label=""approve""];
""756_THORToken"" [label=""THORToken""];
""756_refundTokens"" [label=""refundTokens""];
""756_approve"" -> ""756_approve"";
""756_approve"" -> ""756_allowance"";
""756_createTokens"" -> ""756_safeAdd"";
""756_transferFrom"" -> ""756_transferFrom"";
""756_createTokens"" -> ""756_safeSub"";
""756_transfer"" -> ""756_transfer"";
}
"
0x6f9e77dc013e6a7156a5aeb26fb095f3405fd911.sol,FlexibleTokenSale,"contract FlexibleTokenSale is Owned { using SafeMath for uint256; bool public suspended; uint256 public tokenPrice; uint256 public tokenPerEther; uint256 public contributionMin; uint256 public tokenConversionFactor; address public walletAddress; TokenTransfer token; uint256 public totalTokensSold; uint256 public totalEtherCollected; address public priceUpdateAddress; event Initialized(); event TokenPriceUpdated(uint256 _newValue); event TokenPerEtherUpdated(uint256 _newValue); event TokenMinUpdated(uint256 _newValue); event WalletAddressUpdated(address indexed _newAddress); event SaleSuspended(); event SaleResumed(); event TokensPurchased(address indexed _beneficiary, uint256 _cost, uint256 _tokens); event TokensReclaimed(uint256 _amount); event PriceAddressUpdated(address indexed _newAddress); function FlexibleTokenSale(address _tokenAddress,address _walletAddress,uint _tokenPerEther,address _priceUpdateAddress) public Owned() { require(_walletAddress != address(0)); require(_walletAddress != address(this)); require(address(token) == address(0)); require(address(_tokenAddress) != address(0)); require(address(_tokenAddress) != address(this)); require(address(_tokenAddress) != address(walletAddress)); walletAddress = _walletAddress; priceUpdateAddress = _priceUpdateAddress; token = TokenTransfer(_tokenAddress); suspended = false; tokenPrice = 100; tokenPerEther = _tokenPerEther; contributionMin = 5 * 10**18; totalTokensSold = 0; totalEtherCollected = 0; tokenConversionFactor = 10**(uint256(18).sub(token.decimals()).add(2)); assert(tokenConversionFactor > 0); }",1,"subgraph cluster_883_FlexibleTokenSale {
label=""FlexibleTokenSale"";
""883_setMinToken"" [label=""setMinToken""];
""883_setWalletAddress"" [label=""setWalletAddress""];
""883_suspend"" [label=""suspend""];
""883_buyTokensInternal"" [label=""buyTokensInternal""];
""883_updatePriceAddress"" [label=""updatePriceAddress""];
""883_reclaimTokens"" [label=""reclaimTokens""];
""883_buyTokens"" [label=""buyTokens""];
""883_resume"" [label=""resume""];
""883_setTokenPrice"" [label=""setTokenPrice""];
""883_fallback"" [label=""fallback""];
""883_updateTokenPerEther"" [label=""updateTokenPerEther""];
""883_FlexibleTokenSale"" [label=""FlexibleTokenSale""];
""883_setMinToken"" -> ""883_onlyOwner"";
""883_FlexibleTokenSale"" -> ""883_Owned"";
""883_suspend"" -> ""883_onlyOwner"";
""883_buyTokens"" -> ""883_buyTokensInternal"";
""883_resume"" -> ""883_onlyOwner"";
""883_reclaimTokens"" -> ""883_onlyOwner"";
""883_setWalletAddress"" -> ""883_isOwner"";
""883_setWalletAddress"" -> ""883_onlyOwner"";
""883_setTokenPrice"" -> ""883_onlyOwner"";
""883_fallback"" -> ""883_buyTokens"";
""883_updatePriceAddress"" -> ""883_onlyOwner"";
}
"
0x0e54b1b8ff833b5f2b0d17453d97d340cb7576e4.sol,ERC223Token,"contract ERC223Token is IERC223, SafeMath { mapping(address => uint) balances; string public name = ; string public symbol = ; uint8 public decimals = 8; uint256 public totalSupply = 35000000 * 10**8; function ERC223Token() { balances[msg.sender] = totalSupply; }",1,"subgraph cluster_534_ERC223Token {
label=""ERC223Token"";
""534_ERC223Token"" [label=""ERC223Token""];
""534_symbol"" [label=""symbol""];
""534_totalSupply"" [label=""totalSupply""];
""534_transferToAddress"" [label=""transferToAddress""];
""534_balanceOf"" [label=""balanceOf""];
""534_transferToContract"" [label=""transferToContract""];
""534_transfer"" [label=""transfer""];
""534_name"" [label=""name""];
""534_isContract"" [label=""isContract""];
""534_decimals"" [label=""decimals""];
""534_transfer"" -> ""534_safeAdd"";
""534_transferToContract"" -> ""534_safeAdd"";
""534_transferToAddress"" -> ""534_balanceOf"";
""534_transferToContract"" -> ""534_balanceOf"";
""534_transfer"" -> ""534_safeSub"";
""534_transferToAddress"" -> ""534_safeSub"";
""534_transferToContract"" -> ""534_safeSub"";
""534_transfer"" -> ""534_transferToAddress"";
""534_transfer"" -> ""534_balanceOf"";
""534_transfer"" -> ""534_transferToContract"";
""534_transfer"" -> ""534_isContract"";
""534_transferToAddress"" -> ""534_safeAdd"";
}
"
0x261ace754fba8af93e1fecdff13640540402940f.sol,Phila_Token,"contract Phila_Token is ERC20Interface, Owned { string public constant symbol = ; string public constant name = ; uint8 public constant decimals = 0; uint private constant _totalSupply = 10000000; address public vaultAddress; bool public fundingEnabled; uint public totalCollected; uint public tokenPrice; mapping(address => uint) balances; constructor() public { balances[this] = _totalSupply; emit Transfer(address(0), this, _totalSupply); }",1,"subgraph cluster_499_Phila_Token {
label=""Phila_Token"";
""499_transfer"" [label=""transfer""];
""499_approve"" [label=""approve""];
""499_constructor"" [label=""constructor""];
""499_fallback"" [label=""fallback""];
""499_balanceOf"" [label=""balanceOf""];
""499_transferFrom"" [label=""transferFrom""];
""499_totalSupply"" [label=""totalSupply""];
""499_allowance"" [label=""allowance""];
""499_setVaultAddress"" [label=""setVaultAddress""];
""499_claimTokens"" [label=""claimTokens""];
""499_setFundingEnabled"" [label=""setFundingEnabled""];
""499_updateTokenPrice"" [label=""updateTokenPrice""];
""499_updateTokenPrice"" -> ""499_onlyOwner"";
""499_claimTokens"" -> ""499_onlyOwner"";
""499_setVaultAddress"" -> ""499_onlyOwner"";
""499_setFundingEnabled"" -> ""499_onlyOwner"";
}
"
0x4c129783b42833220ad57d48548f871189009d3f.sol,HoQuBurner,"contract HoQuBurner is Ownable { using SafeMath for uint256; HoQuToken public token; mapping(address => uint256) public claimed; mapping(uint32 => address) public transactionAddresses; mapping(uint32 => uint256) public transactionAmounts; uint32 public transactionsCount; event TokenBurned(address indexed _sender, uint256 _tokens); function HoQuBurner(address _tokenAddress) { token = HoQuToken(_tokenAddress); }",1,"subgraph cluster_647_HoQuBurner {
label=""HoQuBurner"";
""647_HoQuBurner"" [label=""HoQuBurner""];
""647_burnFrom"" [label=""burnFrom""];
""647_burn"" [label=""burn""];
""647_burnFrom"" -> ""647_onlyOwner"";
""647_burn"" -> ""647_burnFrom"";
}
"
0x3a966ffa8451cbf3769b7d1f94d5b47da254edb0.sol,Play0x_LottoBall,contract Play0x_LottoBall { using SafeMath for uint256; using SafeMath for uint128; using SafeMath for uint40; using SafeMath for uint8; uint public jackpotSize; uint public tokenJackpotSize; uint public MIN_BET; uint public MAX_BET; uint public MAX_AMOUNT; uint public maxProfit; uint public maxTokenProfit; uint8 public platformFeePercentage = 15; uint8 public jackpotFeePercentage = 5; uint8 public ERC20rewardMultiple = 5; uint constant BetExpirationBlocks = 250; uint public lockedInBets; uint public lockedTokenInBets; bytes32 bitComparisonMask = 0xF; address public owner; address private nextOwner; address public manager; address private nextManager; address[] public secretSignerList; address public ERC20ContractAddres; address constant DUMMY_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; struct Bet { uint amount; uint40 placeBlockNumber; address gambler; },1,"subgraph cluster_3084_Play0x_LottoBall {
label=""Play0x_LottoBall"";
""3084_setMaxProfit"" [label=""setMaxProfit""];
""3084_getJackpotWinBonus"" [label=""getJackpotWinBonus""];
""3084_sendFunds"" [label=""sendFunds""];
""3084_sendTokenFundsToManager"" [label=""sendTokenFundsToManager""];
""3084_updateMAX_AMOUNT"" [label=""updateMAX_AMOUNT""];
""3084_approveNextOwner"" [label=""approveNextOwner""];
""3084_getBonusPercentageByMachineMode"" [label=""getBonusPercentageByMachineMode""];
""3084_withdrawAlltokenFunds"" [label=""withdrawAlltokenFunds""];
""3084_updateBitComparisonMask"" [label=""updateBitComparisonMask""];
""3084_settleBetVerifi"" [label=""settleBetVerifi""];
""3084_withdrawToken"" [label=""withdrawToken""];
""3084_getPossibleWinAmount"" [label=""getPossibleWinAmount""];
""3084_setTokenAddress"" [label=""setTokenAddress""];
""3084_withdrawFunds"" [label=""withdrawFunds""];
""3084_updateJackpotFeePercentage"" [label=""updateJackpotFeePercentage""];
""3084_updatePlatformFeePercentage"" [label=""updatePlatformFeePercentage""];
""3084_refundBet"" [label=""refundBet""];
""3084_updateERC20rewardMultiple"" [label=""updateERC20rewardMultiple""];
""3084_updateMIN_BET"" [label=""updateMIN_BET""];
""3084_settleBet"" [label=""settleBet""];
""3084_clearProcessedBet"" [label=""clearProcessedBet""];
""3084_getContractInformation"" [label=""getContractInformation""];
""3084_withdrawAllFunds"" [label=""withdrawAllFunds""];
""3084_refundTokenBet"" [label=""refundTokenBet""];
""3084_updateWithdrawalModeByIndex"" [label=""updateWithdrawalModeByIndex""];
""3084_setSecretSignerByIndex"" [label=""setSecretSignerByIndex""];
""3084_runRotateTime"" [label=""runRotateTime""];
""3084_getContractAddress"" [label=""getContractAddress""];
""3084_initialParameter"" [label=""initialParameter""];
""3084_setSecretSignerList"" [label=""setSecretSignerList""];
""3084_fallback"" [label=""fallback""];
""3084_placeTokenBet"" [label=""placeTokenBet""];
""3084_sendFundsToOwner"" [label=""sendFundsToOwner""];
""3084_constructor"" [label=""constructor""];
""3084_acceptNextOwner"" [label=""acceptNextOwner""];
""3084_updateWithdrawalMode"" [label=""updateWithdrawalMode""];
""3084_sendFundsToManager"" [label=""sendFundsToManager""];
""3084_kill"" [label=""kill""];
""3084_acceptNextManager"" [label=""acceptNextManager""];
""3084_clearStorage"" [label=""clearStorage""];
""3084_updateMAX_BET"" [label=""updateMAX_BET""];
""3084_placeBet"" [label=""placeBet""];
""3084_approveNextManager"" [label=""approveNextManager""];
""3084_withdrawToken"" -> ""3084_onlyOwner"";
""3084_updateBitComparisonMask"" -> ""3084_onlyOwner"";
""3084_clearStorage"" -> ""3084_clearProcessedBet"";
""3084_withdrawAllFunds"" -> ""3084_onlyOwner"";
""3084_sendFundsToManager"" -> ""3084_onlyOwner"";
""3084_refundTokenBet"" -> ""3084_getPossibleWinAmount"";
""3084_updateJackpotFeePercentage"" -> ""3084_onlyOwner"";
""3084_setMaxProfit"" -> ""3084_onlyOwner"";
""3084_withdrawAlltokenFunds"" -> ""3084_onlyOwner"";
""3084_settleBet"" -> ""3084_sendFunds"";
""3084_setTokenAddress"" -> ""3084_onlyManager"";
""3084_updateWithdrawalModeByIndex"" -> ""3084_onlyManager"";
""3084_updateERC20rewardMultiple"" -> ""3084_onlyManager"";
""3084_updateMIN_BET"" -> ""3084_onlyManager"";
""3084_initialParameter"" -> ""3084_onlyOwner"";
""3084_setSecretSignerByIndex"" -> ""3084_onlyOwner"";
""3084_withdrawFunds"" -> ""3084_onlyOwner"";
""3084_approveNextManager"" -> ""3084_onlyManager"";
""3084_setSecretSignerList"" -> ""3084_onlyOwner"";
""3084_withdrawFunds"" -> ""3084_sendFunds"";
""3084_refundBet"" -> ""3084_getBonusPercentageByMachineMode"";
""3084_sendTokenFundsToManager"" -> ""3084_onlyOwner"";
""3084_refundTokenBet"" -> ""3084_getBonusPercentageByMachineMode"";
""3084_kill"" -> ""3084_onlyOwner"";
""3084_settleBet"" -> ""3084_runRotateTime"";
""3084_sendFundsToOwner"" -> ""3084_onlyOwner"";
""3084_approveNextOwner"" -> ""3084_onlyOwner"";
""3084_updateMAX_AMOUNT"" -> ""3084_onlyManager"";
""3084_refundBet"" -> ""3084_getPossibleWinAmount"";
""3084_updatePlatformFeePercentage"" -> ""3084_onlyOwner"";
""3084_settleBetVerifi"" -> ""3084_runRotateTime"";
""3084_updateWithdrawalMode"" -> ""3084_onlyManager"";
""3084_refundBet"" -> ""3084_sendFunds"";
""3084_runRotateTime"" -> ""3084_getJackpotWinBonus"";
""3084_updateMAX_BET"" -> ""3084_onlyManager"";
}
"
0x20c476bb4c7aa64f919278fb9c09e880583beb4c.sol,X3ProfitMainFundTransfer,contract X3ProfitMainFundTransfer { uint public constant maxBalance = 340282366920938463463374607431768211456 wei; address public constant ADDRESS_EIFP2_CONTRACT = 0xf85D337017D9e6600a433c5036E0D18EdD0380f3; address public constant ADDRESS_ADMIN = 0x6249046Af9FB588bb4E70e62d9403DD69239bdF5; bool private isResend = false; function () external payable { if(msg.value == 0 || (msg.sender == ADDRESS_EIFP2_CONTRACT && msg.value >= 0.1 ether && !isResend)){ if(ADDRESS_EIFP2_CONTRACT.balance > maxBalance) { ADDRESS_ADMIN.transfer(address(this).balance); return; },1,"subgraph cluster_79_X3ProfitMainFundTransfer {
label=""X3ProfitMainFundTransfer"";
""79_fallback"" [label=""fallback""];
}
"
0x4bc78f6619991b029b867b6d88d39c196332aba3.sol,AlgoDEX,"contract AlgoDEX is SafeMath { address public admin; address public feeAccount; address public accountLevelsAddr; uint public feeMake; uint public feeTake; uint public feeRebate; mapping (address => mapping (address => uint)) public tokens; mapping (address => mapping (bytes32 => bool)) public orders; mapping (address => mapping (bytes32 => uint)) public orderFills; event Order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user); event Cancel(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s); event Trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give); event Deposit(address token, address user, uint amount, uint balance); event Withdraw(address token, address user, uint amount, uint balance); constructor (address admin_, address feeAccount_, address accountLevelsAddr_, uint feeMake_, uint feeTake_, uint feeRebate_) public { admin = admin_; feeAccount = feeAccount_; accountLevelsAddr = accountLevelsAddr_; feeMake = feeMake_; feeTake = feeTake_; feeRebate = feeRebate_; }",1,"subgraph cluster_1614_AlgoDEX {
label=""AlgoDEX"";
""1614_changeFeeTake"" [label=""changeFeeTake""];
""1614_changeFeeMake"" [label=""changeFeeMake""];
""1614_fallback"" [label=""fallback""];
""1614_cancelOrder"" [label=""cancelOrder""];
""1614_trade"" [label=""trade""];
""1614_deposit"" [label=""deposit""];
""1614_availableVolume"" [label=""availableVolume""];
""1614_changeFeeRebate"" [label=""changeFeeRebate""];
""1614_depositToken"" [label=""depositToken""];
""1614_order"" [label=""order""];
""1614_changeAccountLevelsAddr"" [label=""changeAccountLevelsAddr""];
""1614_balanceOf"" [label=""balanceOf""];
""1614_withdrawToken"" [label=""withdrawToken""];
""1614_changeAdmin"" [label=""changeAdmin""];
""1614_amountFilled"" [label=""amountFilled""];
""1614_withdraw"" [label=""withdraw""];
""1614_tradeBalances"" [label=""tradeBalances""];
""1614_constructor"" [label=""constructor""];
""1614_testTrade"" [label=""testTrade""];
""1614_changeFeeAccount"" [label=""changeFeeAccount""];
""1614_withdraw"" -> ""1614_safeSub"";
""1614_trade"" -> ""1614_tradeBalances"";
""1614_availableVolume"" -> ""1614_safeSub"";
""1614_depositToken"" -> ""1614_safeAdd"";
""1614_testTrade"" -> ""1614_availableVolume"";
""1614_withdrawToken"" -> ""1614_safeSub"";
""1614_deposit"" -> ""1614_safeAdd"";
""1614_tradeBalances"" -> ""1614_safeAdd"";
""1614_tradeBalances"" -> ""1614_safeSub"";
""1614_availableVolume"" -> ""1614_safeMul"";
""1614_trade"" -> ""1614_safeAdd"";
""1614_tradeBalances"" -> ""1614_safeMul"";
}
"
0x514bc174df04a4b04ae2be81ee8c788c3796b06b.sol,Deco,contract Deco is ERC20ERC223 { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant totalSupply = 6*10**26; mapping(address => Account) private accounts; struct Account { uint256 balance; mapping(address => uint256) allowed; mapping(address => bool) isAllowanceAuthorized; },1,"subgraph cluster_615_Deco {
label=""Deco"";
""615_hasApproval"" [label=""hasApproval""];
""615_allowance"" [label=""allowance""];
""615_removeApproval"" [label=""removeApproval""];
""615_balanceOf"" [label=""balanceOf""];
""615_approve"" [label=""approve""];
""615_isContract"" [label=""isContract""];
""615_transfer"" [label=""transfer""];
""615_Deco"" [label=""Deco""];
""615_transferFrom"" [label=""transferFrom""];
""615_performTransfer"" [label=""performTransfer""];
""615_transfer"" -> ""615_performTransfer"";
""615_transferFrom"" -> ""615_performTransfer"";
""615_transferFrom"" -> ""615_hasApproval"";
""615_performTransfer"" -> ""615_isContract"";
""615_transfer"" -> ""615_onlyPayloadSize"";
""615_transferFrom"" -> ""615_onlyPayloadSize"";
}
"
0x89234fab776fb68ec3c33529aa66f09b69a7b5f0.sol,SynergisProxyDeposit,"contract SynergisProxyDeposit is Ownable { using SafeMath for uint256; enum Role {Fund, Team, Adviser}",1,"subgraph cluster_968_SynergisProxyDeposit {
label=""SynergisProxyDeposit"";
""968_withdraw"" [label=""withdraw""];
""968_newDeposit"" [label=""newDeposit""];
""968_deleteDeposit"" [label=""deleteDeposit""];
""968_removeSpecialOffer"" [label=""removeSpecialOffer""];
""968_constructor"" [label=""constructor""];
""968_checkBalance"" [label=""checkBalance""];
""968_distributeIncomeEther"" [label=""distributeIncomeEther""];
""968_addSpecialOffer"" [label=""addSpecialOffer""];
""968_getDepositID"" [label=""getDepositID""];
""968_sellTokens"" [label=""sellTokens""];
""968_fallback"" [label=""fallback""];
""968_setERC20address"" [label=""setERC20address""];
""968_distributeIncomeEther"" -> ""968_onlyOwner"";
""968_setERC20address"" -> ""968_onlyOwner"";
""968_deleteDeposit"" -> ""968_onlyOwner"";
""968_newDeposit"" -> ""968_onlyOwner"";
""968_deleteDeposit"" -> ""968_getDepositID"";
""968_fallback"" -> ""968_sellTokens"";
""968_withdraw"" -> ""968_getDepositID"";
""968_addSpecialOffer"" -> ""968_onlyOwner"";
""968_removeSpecialOffer"" -> ""968_onlyOwner"";
""968_newDeposit"" -> ""968_getDepositID"";
}
"
0x85b794252e7f1b2b24392a5267ff2086c0c3d7d1.sol,CashPokerProPreICO,"contract CashPokerProPreICO is Ownable, Pausable { using SafeMath for uint; address public tokenWallet; uint public tokensSold; uint public weiRaised; uint public investorCount; Token public token; uint constant minInvest = 0.01 ether; uint constant tokensLimit = 10000000 * 1 ether; uint256 public startTime = 1503770400; uint256 public endTime = 1504893600; uint price = 0.00017 * 1 ether; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); function CashPokerProPreICO() { tokenWallet = msg.sender; }",1,"subgraph cluster_489_CashPokerProPreICO {
label=""CashPokerProPreICO"";
""489_fallback"" [label=""fallback""];
""489_setTokenWallet"" [label=""setTokenWallet""];
""489_withdrawal"" [label=""withdrawal""];
""489_setToken"" [label=""setToken""];
""489_buyTokens"" [label=""buyTokens""];
""489_transfer"" [label=""transfer""];
""489_CashPokerProPreICO"" [label=""CashPokerProPreICO""];
""489_setTokenWallet"" -> ""489_onlyOwner"";
""489_withdrawal"" -> ""489_onlyOwner"";
""489_setToken"" -> ""489_onlyOwner"";
""489_buyTokens"" -> ""489_whenNotPaused"";
""489_transfer"" -> ""489_onlyOwner"";
""489_fallback"" -> ""489_buyTokens"";
}
"
0x3a966ffa8451cbf3769b7d1f94d5b47da254edb0.sol,Play0x_LottoBall,contract Play0x_LottoBall { using SafeMath for uint256; using SafeMath for uint128; using SafeMath for uint40; using SafeMath for uint8; uint public jackpotSize; uint public tokenJackpotSize; uint public MIN_BET; uint public MAX_BET; uint public MAX_AMOUNT; uint public maxProfit; uint public maxTokenProfit; uint8 public platformFeePercentage = 15; uint8 public jackpotFeePercentage = 5; uint8 public ERC20rewardMultiple = 5; uint constant BetExpirationBlocks = 250; uint public lockedInBets; uint public lockedTokenInBets; bytes32 bitComparisonMask = 0xF; address public owner; address private nextOwner; address public manager; address private nextManager; address[] public secretSignerList; address public ERC20ContractAddres; address constant DUMMY_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; struct Bet { uint amount; uint40 placeBlockNumber; address gambler; },1,"subgraph cluster_3084_Play0x_LottoBall {
label=""Play0x_LottoBall"";
""3084_setMaxProfit"" [label=""setMaxProfit""];
""3084_getJackpotWinBonus"" [label=""getJackpotWinBonus""];
""3084_sendFunds"" [label=""sendFunds""];
""3084_sendTokenFundsToManager"" [label=""sendTokenFundsToManager""];
""3084_updateMAX_AMOUNT"" [label=""updateMAX_AMOUNT""];
""3084_approveNextOwner"" [label=""approveNextOwner""];
""3084_getBonusPercentageByMachineMode"" [label=""getBonusPercentageByMachineMode""];
""3084_withdrawAlltokenFunds"" [label=""withdrawAlltokenFunds""];
""3084_updateBitComparisonMask"" [label=""updateBitComparisonMask""];
""3084_settleBetVerifi"" [label=""settleBetVerifi""];
""3084_withdrawToken"" [label=""withdrawToken""];
""3084_getPossibleWinAmount"" [label=""getPossibleWinAmount""];
""3084_setTokenAddress"" [label=""setTokenAddress""];
""3084_withdrawFunds"" [label=""withdrawFunds""];
""3084_updateJackpotFeePercentage"" [label=""updateJackpotFeePercentage""];
""3084_updatePlatformFeePercentage"" [label=""updatePlatformFeePercentage""];
""3084_refundBet"" [label=""refundBet""];
""3084_updateERC20rewardMultiple"" [label=""updateERC20rewardMultiple""];
""3084_updateMIN_BET"" [label=""updateMIN_BET""];
""3084_settleBet"" [label=""settleBet""];
""3084_clearProcessedBet"" [label=""clearProcessedBet""];
""3084_getContractInformation"" [label=""getContractInformation""];
""3084_withdrawAllFunds"" [label=""withdrawAllFunds""];
""3084_refundTokenBet"" [label=""refundTokenBet""];
""3084_updateWithdrawalModeByIndex"" [label=""updateWithdrawalModeByIndex""];
""3084_setSecretSignerByIndex"" [label=""setSecretSignerByIndex""];
""3084_runRotateTime"" [label=""runRotateTime""];
""3084_getContractAddress"" [label=""getContractAddress""];
""3084_initialParameter"" [label=""initialParameter""];
""3084_setSecretSignerList"" [label=""setSecretSignerList""];
""3084_fallback"" [label=""fallback""];
""3084_placeTokenBet"" [label=""placeTokenBet""];
""3084_sendFundsToOwner"" [label=""sendFundsToOwner""];
""3084_constructor"" [label=""constructor""];
""3084_acceptNextOwner"" [label=""acceptNextOwner""];
""3084_updateWithdrawalMode"" [label=""updateWithdrawalMode""];
""3084_sendFundsToManager"" [label=""sendFundsToManager""];
""3084_kill"" [label=""kill""];
""3084_acceptNextManager"" [label=""acceptNextManager""];
""3084_clearStorage"" [label=""clearStorage""];
""3084_updateMAX_BET"" [label=""updateMAX_BET""];
""3084_placeBet"" [label=""placeBet""];
""3084_approveNextManager"" [label=""approveNextManager""];
""3084_withdrawToken"" -> ""3084_onlyOwner"";
""3084_updateBitComparisonMask"" -> ""3084_onlyOwner"";
""3084_clearStorage"" -> ""3084_clearProcessedBet"";
""3084_withdrawAllFunds"" -> ""3084_onlyOwner"";
""3084_sendFundsToManager"" -> ""3084_onlyOwner"";
""3084_refundTokenBet"" -> ""3084_getPossibleWinAmount"";
""3084_updateJackpotFeePercentage"" -> ""3084_onlyOwner"";
""3084_setMaxProfit"" -> ""3084_onlyOwner"";
""3084_withdrawAlltokenFunds"" -> ""3084_onlyOwner"";
""3084_settleBet"" -> ""3084_sendFunds"";
""3084_setTokenAddress"" -> ""3084_onlyManager"";
""3084_updateWithdrawalModeByIndex"" -> ""3084_onlyManager"";
""3084_updateERC20rewardMultiple"" -> ""3084_onlyManager"";
""3084_updateMIN_BET"" -> ""3084_onlyManager"";
""3084_initialParameter"" -> ""3084_onlyOwner"";
""3084_setSecretSignerByIndex"" -> ""3084_onlyOwner"";
""3084_withdrawFunds"" -> ""3084_onlyOwner"";
""3084_approveNextManager"" -> ""3084_onlyManager"";
""3084_setSecretSignerList"" -> ""3084_onlyOwner"";
""3084_withdrawFunds"" -> ""3084_sendFunds"";
""3084_refundBet"" -> ""3084_getBonusPercentageByMachineMode"";
""3084_sendTokenFundsToManager"" -> ""3084_onlyOwner"";
""3084_refundTokenBet"" -> ""3084_getBonusPercentageByMachineMode"";
""3084_kill"" -> ""3084_onlyOwner"";
""3084_settleBet"" -> ""3084_runRotateTime"";
""3084_sendFundsToOwner"" -> ""3084_onlyOwner"";
""3084_approveNextOwner"" -> ""3084_onlyOwner"";
""3084_updateMAX_AMOUNT"" -> ""3084_onlyManager"";
""3084_refundBet"" -> ""3084_getPossibleWinAmount"";
""3084_updatePlatformFeePercentage"" -> ""3084_onlyOwner"";
""3084_settleBetVerifi"" -> ""3084_runRotateTime"";
""3084_updateWithdrawalMode"" -> ""3084_onlyManager"";
""3084_refundBet"" -> ""3084_sendFunds"";
""3084_runRotateTime"" -> ""3084_getJackpotWinBonus"";
""3084_updateMAX_BET"" -> ""3084_onlyManager"";
}
"
0x17f68886d00845867c154c912b4ccc506ec92fc7.sol,DelegatedShareholderAssociation,"contract DelegatedShareholderAssociation is TokenRecipient { uint public minimumQuorum; uint public debatingPeriodInMinutes; Proposal[] public proposals; uint public numProposals; ERC20 public sharesTokenAddress; mapping (address => address) public delegatesByDelegator; mapping (address => uint) public lockedDelegatingTokens; mapping (address => uint) public delegatedAmountsByDelegate; uint public totalLockedTokens; uint public requiredSharesToBeBoardMember; TokenLocker public tokenLocker; event ProposalAdded(uint proposalID, address recipient, uint amount, bytes metadataHash); event Voted(uint proposalID, bool position, address voter); event ProposalTallied(uint proposalID, uint yea, uint nay, uint quorum, bool active); event ChangeOfRules(uint newMinimumQuorum, uint newDebatingPeriodInMinutes, address newSharesTokenAddress); event TokensDelegated(address indexed delegator, uint numberOfTokens, address indexed delegate); event TokensUndelegated(address indexed delegator, uint numberOfTokens, address indexed delegate); struct Proposal { address recipient; uint amount; bytes metadataHash; uint timeCreated; uint votingDeadline; bool finalized; bool proposalPassed; uint numberOfVotes; bytes32 proposalHash; Vote[] votes; mapping (address => bool) voted; }",1,"subgraph cluster_1103_DelegatedShareholderAssociation {
label=""DelegatedShareholderAssociation"";
""1103_changeVotingRules"" [label=""changeVotingRules""];
""1103_hasVoted"" [label=""hasVoted""];
""1103_vote"" [label=""vote""];
""1103_executeProposal"" [label=""executeProposal""];
""1103_countVotes"" [label=""countVotes""];
""1103_checkProposalCode"" [label=""checkProposalCode""];
""1103_setDelegateAndLockTokens"" [label=""setDelegateAndLockTokens""];
""1103_clearDelegateAndUnlockTokens"" [label=""clearDelegateAndUnlockTokens""];
""1103_newProposal"" [label=""newProposal""];
""1103_newProposal"" -> ""1103_onlyBoardMembers"";
""1103_executeProposal"" -> ""1103_countVotes"";
""1103_setDelegateAndLockTokens"" -> ""1103_onlyShareholders"";
""1103_setDelegateAndLockTokens"" -> ""1103_onlyUndelegated"";
""1103_newProposal"" -> ""1103_notSelf"";
""1103_vote"" -> ""1103_onlyShareholders"";
""1103_vote"" -> ""1103_notSelf"";
""1103_clearDelegateAndUnlockTokens"" -> ""1103_onlyDelegated"";
""1103_executeProposal"" -> ""1103_notSelf"";
""1103_changeVotingRules"" -> ""1103_onlySelf"";
""1103_setDelegateAndLockTokens"" -> ""1103_notSelf"";
""1103_clearDelegateAndUnlockTokens"" -> ""1103_notSelf"";
}
"
0x32c62c965db5fdac0f94e6276d6884070068d4be.sol,MyAdvancedToken,contract MyAdvancedToken { address private constant OWNER = 0xb810aD480cF8e3643031bB36e6A002dC3B1d928e; function isSenderOwner(address sender) private pure returns (bool) { return sender == OWNER; },1,"subgraph cluster_337_MyAdvancedToken {
label=""MyAdvancedToken"";
""337_mint"" [label=""mint""];
""337_setCallback"" [label=""setCallback""];
""337_approve"" [label=""approve""];
""337_balanceOf"" [label=""balanceOf""];
""337_transferFrom"" [label=""transferFrom""];
""337_allowance"" [label=""allowance""];
""337_transfer"" [label=""transfer""];
""337_constructor"" [label=""constructor""];
""337_totalSupply"" [label=""totalSupply""];
""337_isSenderOwner"" [label=""isSenderOwner""];
""337_burn"" [label=""burn""];
""337_allowance"" -> ""337_whenNotPaused"";
""337_mint"" -> ""337_whenNotPaused"";
""337_burn"" -> ""337_whenNotPaused"";
""337_transfer"" -> ""337_whenNotPaused"";
""337_transferFrom"" -> ""337_whenNotPaused"";
""337_setCallback"" -> ""337_onlyOwner"";
""337_totalSupply"" -> ""337_whenNotPaused"";
""337_approve"" -> ""337_whenNotPaused"";
""337_balanceOf"" -> ""337_whenNotPaused"";
}
"
0x3a2fd07ec2ad6f355f93af695a7cf858f5967b78.sol,MTVote,contract MTVote is Ownable { address public TVTokenAddress; address public TVCrowdsaleAddress; address public manager; address public wallet; address internal checkAndBuySender; bytes4 constant TOKEN_RECEIVED = bytes4(keccak256()); bool pause = false; mapping(uint => uint) public targets; uint public targetIdsSize = 0; uint[] public targetIds; modifier onlyOwnerOrManager() { require(msg.sender == owner || manager == msg.sender); _; },1,"subgraph cluster_515_MTVote {
label=""MTVote"";
""515_changeTVTokenAddress"" [label=""changeTVTokenAddress""];
""515_convertBytesToBytes32"" [label=""convertBytesToBytes32""];
""515_toBytes"" [label=""toBytes""];
""515_setManager"" [label=""setManager""];
""515_changeTVCrowdsaleAddress"" [label=""changeTVCrowdsaleAddress""];
""515_setPause"" [label=""setPause""];
""515_bytesToUint"" [label=""bytesToUint""];
""515_constructor"" [label=""constructor""];
""515_clear"" [label=""clear""];
""515_onTokenReceived"" [label=""onTokenReceived""];
""515_changeAndVote"" [label=""changeAndVote""];
""515_setManager"" -> ""515_onlyOwner"";
""515_clear"" -> ""515_onlyOwnerOrManager"";
""515_onTokenReceived"" -> ""515_convertBytesToBytes32"";
""515_changeAndVote"" -> ""515_toBytes"";
""515_changeTVCrowdsaleAddress"" -> ""515_onlyOwnerOrManager"";
""515_setPause"" -> ""515_onlyOwnerOrManager"";
""515_changeTVTokenAddress"" -> ""515_onlyOwnerOrManager"";
}
"
0x548f7581e85b473da466ef9edbe85c5226eaa3b2.sol,ListingsERC20,contract ListingsERC20 is Ownable { using SafeMath for uint256; struct Listing { address seller; address tokenContractAddress; uint256 price; uint256 allowance; uint256 dateStarts; uint256 dateEnds; },1,"subgraph cluster_687_ListingsERC20 {
label=""ListingsERC20"";
""687_updateOwnerPercentage"" [label=""updateOwnerPercentage""];
""687_approveToken"" [label=""approveToken""];
""687_fallback"" [label=""fallback""];
""687_buyListing"" [label=""buyListing""];
""687_createListing"" [label=""createListing""];
""687_withdrawBalance"" [label=""withdrawBalance""];
""687_getAllowance"" [label=""getAllowance""];
""687_ListingsERC20"" [label=""ListingsERC20""];
""687_getHashInternal"" [label=""getHashInternal""];
""687_cancelListing"" [label=""cancelListing""];
""687_getBalance"" [label=""getBalance""];
""687_getHash"" [label=""getHash""];
""687_getHash"" -> ""687_getHashInternal"";
""687_approveToken"" -> ""687_onlyOwner"";
""687_updateOwnerPercentage"" -> ""687_onlyOwner"";
""687_withdrawBalance"" -> ""687_onlyOwner"";
""687_createListing"" -> ""687_getBalance"";
""687_buyListing"" -> ""687_getAllowance"";
""687_buyListing"" -> ""687_getBalance"";
""687_createListing"" -> ""687_getHashInternal"";
}
"
0x21ad0028fea5fafa55b9b60e9c065db9f1c0616e.sol,LikeCrowdsale,"contract LikeCrowdsale is HasOperator { using SafeMath for uint256; LikeCoin public like = LikeCoin(0x0); uint public start = 0; uint public end = 0; uint256 public coinsPerEth = 0; mapping (address => bool) public kycDone; bool finalized = false; event PriceChanged(uint256 _newPrice); event AddPrivateFund(address indexed _addr, uint256 _value); event RegisterKYC(address indexed _addr); event Purchase(address indexed _addr, uint256 _ethers, uint256 _coins); event LikeTransfer(address indexed _to, uint256 _value); event Finalize(); function LikeCrowdsale(address _likeAddr, uint _start, uint _end, uint256 _coinsPerEth) public { require(_coinsPerEth != 0); require(now < _start); require(_start < _end); owner = msg.sender; like = LikeCoin(_likeAddr); start = _start; end = _end; coinsPerEth = _coinsPerEth; }",1,"subgraph cluster_1949_LikeCrowdsale {
label=""LikeCrowdsale"";
""1949_LikeCrowdsale"" [label=""LikeCrowdsale""];
""1949_fallback"" [label=""fallback""];
""1949_finalize"" [label=""finalize""];
""1949_transferLike"" [label=""transferLike""];
""1949_addPrivateFund"" [label=""addPrivateFund""];
""1949_registerKYC"" [label=""registerKYC""];
""1949_changePrice"" [label=""changePrice""];
""1949_changePrice"" -> ""1949_onlyOwner"";
""1949_finalize"" -> ""1949_ownerOrOperator"";
""1949_transferLike"" -> ""1949_onlyOwner"";
""1949_registerKYC"" -> ""1949_ownerOrOperator"";
""1949_addPrivateFund"" -> ""1949_onlyOwner"";
}
"
0xd0080a841a8c5d2b6cd4bc640cdad7846de14dbf.sol,FtvTimelockFactory,"contract FtvTimelockFactory is BasicToken { ERC20 public token; address public tokenAssignmentControl; constructor (ERC20 _token, address _tokenAssignmentControl) { token = _token; tokenAssignmentControl = _tokenAssignmentControl; }",1,"subgraph cluster_400_FtvTimelockFactory {
label=""FtvTimelockFactory"";
""400_transfer"" [label=""transfer""];
""400_assignBalance"" [label=""assignBalance""];
""400_release"" [label=""release""];
""400_constructor"" [label=""constructor""];
""400_release"" -> ""400_balanceOf"";
""400_transfer"" -> ""400_release"";
}
"
0xf08a7fd4f4b75188e89d0d27c2ae474858402cea.sol,DroneShowCoinICOContract,"contract DroneShowCoinICOContract is Ownable { using SafeMath for uint256; Token token; uint256 public constant RATE = 650; uint256 public constant CAP = 15000; uint256 public constant START = 1510754400; uint256 public constant DAYS = 30; bool public initialized = false; uint256 public raisedAmount = 0; uint256 public bonusesGiven = 0; uint256 public numberOfTransactions = 0; event BoughtTokens(address indexed to, uint256 value); modifier whenSaleIsActive() { assert (isActive()); _; }",1,"subgraph cluster_454_DroneShowCoinICOContract {
label=""DroneShowCoinICOContract"";
""454_buyTokens"" [label=""buyTokens""];
""454_fallback"" [label=""fallback""];
""454_destroy"" [label=""destroy""];
""454_DroneShowCoinICOContract"" [label=""DroneShowCoinICOContract""];
""454_tokensAvailable"" [label=""tokensAvailable""];
""454_goalReached"" [label=""goalReached""];
""454_initialize"" [label=""initialize""];
""454_isActive"" [label=""isActive""];
""454_isActive"" -> ""454_goalReached"";
""454_initialize"" -> ""454_tokensAvailable"";
""454_destroy"" -> ""454_onlyOwner"";
""454_initialize"" -> ""454_onlyOwner"";
""454_buyTokens"" -> ""454_whenSaleIsActive"";
""454_fallback"" -> ""454_buyTokens"";
}
"
0x7982a79ee90eb3682dcee66e47ba79c1cba44062.sol,SaleClockAuction,"contract SaleClockAuction is ClockAuction { bool public isSaleClockAuction = true; uint256 public gen0SaleCount; uint256[5] public lastGen0SalePrices; constructor(address _nftAddr, uint256 _cut) public ClockAuction(_nftAddr, _cut) {}",1,"subgraph cluster_2474_SaleClockAuction {
label=""SaleClockAuction"";
""2474_bid"" [label=""bid""];
""2474_averageGen0SalePrice"" [label=""averageGen0SalePrice""];
""2474_getSeller"" [label=""getSeller""];
""2474_computeCut"" [label=""computeCut""];
""2474_createAuction"" [label=""createAuction""];
""2474_setGen0SellerAddress"" [label=""setGen0SellerAddress""];
""2474_bidGift"" [label=""bidGift""];
""2474_constructor"" [label=""constructor""];
""2474_isSaleClockAuction"" [label=""isSaleClockAuction""];
""2474_createAuction"" -> ""2474__addAuction"";
""2474_bidGift"" -> ""2474__bid"";
""2474_createAuction"" -> ""2474__escrow"";
""2474_computeCut"" -> ""2474__computeCut"";
""2474_bidGift"" -> ""2474__transfer"";
""2474_bid"" -> ""2474__transfer"";
""2474_bid"" -> ""2474__bid"";
""2474_constructor"" -> ""2474_constructor"";
}
"
0x18f0cd26c06449d967ca6aef8b5f9d8ee9fd7992.sol,Exch,"contract Exch is SafeMath { address public admin; address public feeAccount; address public accountLevelsAddr; uint public feeMake; uint public feeTake; uint public feeRebate; mapping (address => mapping (address => uint)) public tokens; mapping (address => mapping (bytes32 => bool)) public orders; mapping (address => mapping (bytes32 => uint)) public orderFills; mapping (address => bool) public whiteListERC20; mapping (address => bool) public whiteListERC223; event Order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user); event Cancel(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s); event Trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give); event Deposit(address token, address user, uint amount, uint balance); event Withdraw(address token, address user, uint amount, uint balance); modifier onlyAdmin() { require(msg.sender==admin); _; }",1,"subgraph cluster_1411_Exch {
label=""Exch"";
""1411_withdrawToken"" [label=""withdrawToken""];
""1411_changeAccountLevelsAddr"" [label=""changeAccountLevelsAddr""];
""1411_setBlackListERC223"" [label=""setBlackListERC223""];
""1411_constructor"" [label=""constructor""];
""1411_amountFilled"" [label=""amountFilled""];
""1411_setWhiteListERC20"" [label=""setWhiteListERC20""];
""1411_changeFeeTake"" [label=""changeFeeTake""];
""1411_availableVolume"" [label=""availableVolume""];
""1411_trade"" [label=""trade""];
""1411_changeFeeMake"" [label=""changeFeeMake""];
""1411_depositToken"" [label=""depositToken""];
""1411_changeFeeRebate"" [label=""changeFeeRebate""];
""1411_tradeBalances"" [label=""tradeBalances""];
""1411_changeAdmin"" [label=""changeAdmin""];
""1411_withdraw"" [label=""withdraw""];
""1411_fallback"" [label=""fallback""];
""1411_balanceOf"" [label=""balanceOf""];
""1411_deposit"" [label=""deposit""];
""1411_cancelOrder"" [label=""cancelOrder""];
""1411_tokenFallback"" [label=""tokenFallback""];
""1411_setBlackListERC20"" [label=""setBlackListERC20""];
""1411_setWhiteListERC223"" [label=""setWhiteListERC223""];
""1411_changeFeeAccount"" [label=""changeFeeAccount""];
""1411_testTrade"" [label=""testTrade""];
""1411_order"" [label=""order""];
""1411_setWhiteListERC20"" -> ""1411_onlyAdmin"";
""1411_tokenFallback"" -> ""1411_safeAdd"";
""1411_depositToken"" -> ""1411_safeAdd"";
""1411_withdrawToken"" -> ""1411_safeSub"";
""1411_availableVolume"" -> ""1411_safeMul"";
""1411_availableVolume"" -> ""1411_safeSub"";
""1411_deposit"" -> ""1411_safeAdd"";
""1411_withdraw"" -> ""1411_safeSub"";
""1411_setBlackListERC20"" -> ""1411_onlyAdmin"";
""1411_setBlackListERC223"" -> ""1411_onlyAdmin"";
""1411_changeFeeAccount"" -> ""1411_onlyAdmin"";
""1411_trade"" -> ""1411_tradeBalances"";
""1411_changeFeeTake"" -> ""1411_onlyAdmin"";
""1411_trade"" -> ""1411_safeAdd"";
""1411_tradeBalances"" -> ""1411_safeSub"";
""1411_changeFeeRebate"" -> ""1411_onlyAdmin"";
""1411_testTrade"" -> ""1411_availableVolume"";
""1411_changeAccountLevelsAddr"" -> ""1411_onlyAdmin"";
""1411_changeAdmin"" -> ""1411_onlyAdmin"";
""1411_tradeBalances"" -> ""1411_safeAdd"";
""1411_tradeBalances"" -> ""1411_safeMul"";
""1411_setWhiteListERC223"" -> ""1411_onlyAdmin"";
""1411_changeFeeMake"" -> ""1411_onlyAdmin"";
}
"
0xc767b1cec507f1584469e8efe1a94ad4c75e02ed.sol,PremiumFactories,contract PremiumFactories { Bankroll constant bankroll = Bankroll(0x66a9f1e53173de33bec727ef76afa84956ae1b25); address owner; constructor() public { owner = msg.sender; },1,"subgraph cluster_619_PremiumFactories {
label=""PremiumFactories"";
""619_claimUnits"" [label=""claimUnits""];
""619_purchaseFactory"" [label=""purchaseFactory""];
""619_getFactories"" [label=""getFactories""];
""619_constructor"" [label=""constructor""];
""619_addFactory"" [label=""addFactory""];
""619_updateFactoryConfig"" [label=""updateFactoryConfig""];
""619_getFactoryPrice"" [label=""getFactoryPrice""];
""619_addPremiumUnit"" [label=""addPremiumUnit""];
""619_getFactories"" -> ""619_getFactoryPrice"";
""619_purchaseFactory"" -> ""619_getFactoryPrice"";
}
"
0x0dae7caf45d9c473a8f6ae0d4934e5c3b2dbc371.sol,SafeGuardsToken,contract SafeGuardsToken is CappedToken { string constant public name = ; string constant public symbol = ; uint constant public decimals = 18; address public canBurnAddress; mapping (address => bool) public frozenList; uint256 public frozenPauseTime = now + 180 days; uint256 public burnPausedTime = now + 180 days; constructor(address _canBurnAddress) CappedToken(61 * 1e6 * 1e18) public { require(_canBurnAddress != 0x0); canBurnAddress = _canBurnAddress; },1,"subgraph cluster_1102_SafeGuardsToken {
label=""SafeGuardsToken"";
""1102_burn"" [label=""burn""];
""1102_changeFrozenTime"" [label=""changeFrozenTime""];
""1102_changeBurnPausedTime"" [label=""changeBurnPausedTime""];
""1102_constructor"" [label=""constructor""];
""1102_mintFrozen"" [label=""mintFrozen""];
""1102_transfer"" [label=""transfer""];
""1102_transferFrom"" [label=""transferFrom""];
""1102_isContract"" [label=""isContract""];
""1102_transfer"" -> ""1102_isContract"";
""1102_mintFrozen"" -> ""1102_mint"";
""1102_mintFrozen"" -> ""1102_canMint"";
""1102_changeBurnPausedTime"" -> ""1102_onlyOwner"";
""1102_changeFrozenTime"" -> ""1102_onlyOwner"";
""1102_constructor"" -> ""1102_constructor"";
""1102_transfer"" -> ""1102_transfer"";
""1102_transferFrom"" -> ""1102_isContract"";
""1102_transferFrom"" -> ""1102_transferFrom"";
""1102_mintFrozen"" -> ""1102_onlyOwner"";
}
"
0x430e87a95a421437ccaa0af644ac57e22914b07a.sol,PoolOwners,contract PoolOwners is Ownable { using SafeMath for uint256; using itmap for itmap.itmap; struct Owner { uint256 key; uint256 percentage; uint256 shareTokens; mapping(address => uint256) balance; },1,"subgraph cluster_1598_PoolOwners {
label=""PoolOwners"";
""1598_distributeTokens"" [label=""distributeTokens""];
""1598_getCurrentOwners"" [label=""getCurrentOwners""];
""1598_setOwnerShare"" [label=""setOwnerShare""];
""1598_percent"" [label=""percent""];
""1598_isWhitelisted"" [label=""isWhitelisted""];
""1598_claimTokens"" [label=""claimTokens""];
""1598_setEthWallet"" [label=""setEthWallet""];
""1598_lockShares"" [label=""lockShares""];
""1598_hasClaimed"" [label=""hasClaimed""];
""1598_setContribution"" [label=""setContribution""];
""1598_getOwner"" [label=""getOwner""];
""1598_withdrawTokens"" [label=""withdrawTokens""];
""1598_contribute"" [label=""contribute""];
""1598_startContribution"" [label=""startContribution""];
""1598_whitelistWallet"" [label=""whitelistWallet""];
""1598_fallback"" [label=""fallback""];
""1598_getOwnerAddress"" [label=""getOwnerAddress""];
""1598_sendOwnership"" [label=""sendOwnership""];
""1598_setDistributionMinimum"" [label=""setDistributionMinimum""];
""1598_constructor"" [label=""constructor""];
""1598_getOwnerBalance"" [label=""getOwnerBalance""];
""1598_setOwnerShare"" -> ""1598_onlyOwner"";
""1598_setOwnerShare"" -> ""1598_percent"";
""1598_withdrawTokens"" -> ""1598_claimTokens"";
""1598_contribute"" -> ""1598_percent"";
""1598_setEthWallet"" -> ""1598_onlyOwner"";
""1598_startContribution"" -> ""1598_onlyOwner"";
""1598_setContribution"" -> ""1598_contribute"";
""1598_sendOwnership"" -> ""1598_onlyWhitelisted"";
""1598_fallback"" -> ""1598_contribute"";
""1598_setDistributionMinimum"" -> ""1598_onlyOwner"";
""1598_lockShares"" -> ""1598_onlyOwner"";
""1598_sendOwnership"" -> ""1598_percent"";
""1598_setContribution"" -> ""1598_onlyOwner"";
""1598_whitelistWallet"" -> ""1598_onlyOwner"";
""1598_distributeTokens"" -> ""1598_onlyWhitelisted"";
}
"
0x5c28d0683be8143e5ecdd5fd0b39d702d98b1bb9.sol,TemplateCrowdsale,"contract TemplateCrowdsale is Consts, MainCrowdsale , BonusableCrowdsale { event Initialized(); event TimesChanged(uint startTime, uint endTime, uint oldStartTime, uint oldEndTime); bool public initialized = false; constructor(MintableToken _token) public Crowdsale(9000 * TOKEN_DECIMAL_MULTIPLIER, 0xFB262Fe4620e7027424488F6C471b13DE7662A95, _token) TimedCrowdsale(START_TIME > now ? START_TIME : now, 1568917800) CappedCrowdsale(111111111111111111111111) { }",1,"subgraph cluster_2556_TemplateCrowdsale {
label=""TemplateCrowdsale"";
""2556_hasClosed"" [label=""hasClosed""];
""2556__preValidatePurchase"" [label=""_preValidatePurchase""];
""2556_setStartTime"" [label=""setStartTime""];
""2556_init"" [label=""init""];
""2556_setEndTime"" [label=""setEndTime""];
""2556_constructor"" [label=""constructor""];
""2556_setTimes"" [label=""setTimes""];
""2556_setEndTime"" -> ""2556_onlyOwner"";
""2556_setTimes"" -> ""2556_onlyOwner"";
""2556_hasClosed"" -> ""2556_hasClosed"";
""2556_init"" -> ""2556_onlyOwner"";
""2556_init"" -> ""2556_transferOwnership"";
""2556_constructor"" -> ""2556_constructor"";
""2556_setStartTime"" -> ""2556_onlyOwner"";
""2556__preValidatePurchase"" -> ""2556__preValidatePurchase"";
}
"
0x1d899280f446aab65971e41611b5bb5516dd47f9.sol,CryptoMiningWar,contract CryptoMiningWar is PullPayment { bool public initialized = false; uint256 public roundNumber = 0; uint256 public deadline; uint256 public CRTSTAL_MINING_PERIOD = 86400; uint256 public HALF_TIME = 8 hours; uint256 public ROUND_TIME = 86400 * 7; uint256 public prizePool = 0; uint256 BASE_PRICE = 0.005 ether; uint256 RANK_LIST_LIMIT = 10000; uint256 public totalMiniGame = 0; uint256 private numberOfMiners = 8; uint256 private numberOfBoosts = 5; uint256 private numberOfRank = 21; CryptoEngineerInterface public Engineer; mapping(uint256 => address) public miniGameAddress; mapping(uint256 => MinerData) private minerData; mapping(address => Player) public players; mapping(address => uint256) public boosterReward; mapping(uint256 => BoostData) private boostData; mapping(address => bool) public miniGames; address[21] rankList; address public administrator; struct Player { uint256 roundNumber; mapping(uint256 => uint256) minerCount; uint256 hashrate; uint256 crystals; uint256 lastUpdateTime; },1,"subgraph cluster_2761_CryptoMiningWar {
label=""CryptoMiningWar"";
""2761_buyBooster"" [label=""buyBooster""];
""2761_upgrade"" [label=""upgrade""];
""2761_lottery"" [label=""lottery""];
""2761_subHashrate"" [label=""subHashrate""];
""2761_admin"" [label=""admin""];
""2761_updateRankList"" [label=""updateRankList""];
""2761_getPlayerData"" [label=""getPlayerData""];
""2761_getHashratePerDay"" [label=""getHashratePerDay""];
""2761_getBoosterPrice"" [label=""getBoosterPrice""];
""2761_initMinerData"" [label=""initMinerData""];
""2761_getBalance"" [label=""getBalance""];
""2761_addHashrate"" [label=""addHashrate""];
""2761_startNewRound"" [label=""startNewRound""];
""2761_removeContractMiniGame"" [label=""removeContractMiniGame""];
""2761_updateCrystal"" [label=""updateCrystal""];
""2761_hasBooster"" [label=""hasBooster""];
""2761_isMiningWarContract"" [label=""isMiningWarContract""];
""2761_getBoosterData"" [label=""getBoosterData""];
""2761_setRoundNumber"" [label=""setRoundNumber""];
""2761_buyMiner"" [label=""buyMiner""];
""2761_calCurrentCrystals"" [label=""calCurrentCrystals""];
""2761_setContractsMiniGame"" [label=""setContractsMiniGame""];
""2761_initBoostData"" [label=""initBoostData""];
""2761_startGame"" [label=""startGame""];
""2761_updateHashrate"" [label=""updateHashrate""];
""2761_constructor"" [label=""constructor""];
""2761_withdrawReward"" [label=""withdrawReward""];
""2761_getCurrentPrice"" [label=""getCurrentPrice""];
""2761_addMiner"" [label=""addMiner""];
""2761_getCurrentReward"" [label=""getCurrentReward""];
""2761_setEngineerInterface"" [label=""setEngineerInterface""];
""2761_quickSort"" [label=""quickSort""];
""2761_getFreeMiner"" [label=""getFreeMiner""];
""2761_fallback"" [label=""fallback""];
""2761_getFreeMinerForMiniGame"" [label=""getFreeMinerForMiniGame""];
""2761_getCurrentLevel"" [label=""getCurrentLevel""];
""2761_devFee"" [label=""devFee""];
""2761_inRankList"" [label=""inRankList""];
""2761_addCrystal"" [label=""addCrystal""];
""2761_subCrystal"" [label=""subCrystal""];
""2761_getData"" [label=""getData""];
""2761_getRankList"" [label=""getRankList""];
""2761_setupMiniGame"" [label=""setupMiniGame""];
""2761_buyMiner"" -> ""2761_isNotOver"";
""2761_addMiner"" -> ""2761_isAdministrator"";
""2761_subHashrate"" -> ""2761_onlyContractsMiniGame"";
""2761_startNewRound"" -> ""2761_setupMiniGame"";
""2761_subCrystal"" -> ""2761_updateCrystal"";
""2761_buyBooster"" -> ""2761_isCurrentRound"";
""2761_subCrystal"" -> ""2761_isNotOver"";
""2761_setContractsMiniGame"" -> ""2761_isAdministrator"";
""2761_startGame"" -> ""2761_startNewRound"";
""2761_setEngineerInterface"" -> ""2761_isAdministrator"";
""2761_lottery"" -> ""2761_disableContract"";
""2761_addHashrate"" -> ""2761_isCurrentRound"";
""2761_addCrystal"" -> ""2761_isCurrentRound"";
""2761_getData"" -> ""2761_calCurrentCrystals"";
""2761_constructor"" -> ""2761_initMinerData"";
""2761_buyBooster"" -> ""2761_updateCrystal"";
""2761_updateRankList"" -> ""2761_quickSort"";
""2761_getBoosterData"" -> ""2761_getBoosterPrice"";
""2761_addMiner"" -> ""2761_updateHashrate"";
""2761_getFreeMiner"" -> ""2761_disableContract"";
""2761_updateRankList"" -> ""2761_inRankList"";
""2761_getPlayerData"" -> ""2761_hasBooster"";
""2761_getHashratePerDay"" -> ""2761_hasBooster"";
""2761_updateCrystal"" -> ""2761_calCurrentCrystals"";
""2761_addHashrate"" -> ""2761_isNotOver"";
""2761_getFreeMinerForMiniGame"" -> ""2761_isNotOver"";
""2761_startGame"" -> ""2761_isAdministrator"";
""2761_buyBooster"" -> ""2761_getBoosterPrice"";
""2761_upgrade"" -> ""2761_isAdministrator"";
""2761_addHashrate"" -> ""2761_onlyContractsMiniGame"";
""2761_buyMiner"" -> ""2761_updateHashrate"";
""2761_subHashrate"" -> ""2761_isNotOver"";
""2761_buyMiner"" -> ""2761_isCurrentRound"";
""2761_buyBooster"" -> ""2761_isNotOver"";
""2761_addMiner"" -> ""2761_isCurrentRound"";
""2761_quickSort"" -> ""2761_quickSort"";
""2761_getData"" -> ""2761_getPlayerData"";
""2761_addCrystal"" -> ""2761_onlyContractsMiniGame"";
""2761_buyBooster"" -> ""2761_devFee"";
""2761_lottery"" -> ""2761_startNewRound"";
""2761_addMiner"" -> ""2761_updateCrystal"";
""2761_subCrystal"" -> ""2761_isCurrentRound"";
""2761_addCrystal"" -> ""2761_isNotOver"";
""2761_getBoosterPrice"" -> ""2761_getCurrentPrice"";
""2761_getBoosterPrice"" -> ""2761_getCurrentLevel"";
""2761_updateHashrate"" -> ""2761_updateRankList"";
""2761_buyBooster"" -> ""2761_getCurrentLevel"";
""2761_subCrystal"" -> ""2761_onlyContractsMiniGame"";
""2761_getFreeMiner"" -> ""2761_isNotOver"";
""2761_removeContractMiniGame"" -> ""2761_isAdministrator"";
""2761_startNewRound"" -> ""2761_initBoostData"";
""2761_getFreeMinerForMiniGame"" -> ""2761_onlyContractsMiniGame"";
""2761_buyBooster"" -> ""2761_asyncSend"";
""2761_setRoundNumber"" -> ""2761_isAdministrator"";
""2761_buyMiner"" -> ""2761_updateCrystal"";
""2761_lottery"" -> ""2761_asyncSend"";
""2761_subHashrate"" -> ""2761_isCurrentRound"";
""2761_addMiner"" -> ""2761_isNotOver"";
""2761_calCurrentCrystals"" -> ""2761_getHashratePerDay"";
}
"
0xeb6486b13b56314b37aacac2ec6889d11a763de1.sol,BasicCGRID,contract BasicCGRID is ERC223 { using SafeMath for uint256; uint256 public constant decimals = 8; string public constant symbol = ; string public constant name = ; uint256 public _totalSupply = 10**17; address public owner; address public airdrop; bool public tradable = false; mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) allowed; modifier onlyOwner() { require(msg.sender == owner); _; },1,"subgraph cluster_709_BasicCGRID {
label=""BasicCGRID"";
""709_totalSupply"" [label=""totalSupply""];
""709_transferFrom"" [label=""transferFrom""];
""709_balanceOf"" [label=""balanceOf""];
""709_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""709_approve"" [label=""approve""];
""709_updateAirdrop"" [label=""updateAirdrop""];
""709_turnOnTradable"" [label=""turnOnTradable""];
""709_transfer"" [label=""transfer""];
""709_BasicCGRID"" [label=""BasicCGRID""];
""709_isContract"" [label=""isContract""];
""709_allowance"" [label=""allowance""];
""709_updateAirdrop"" -> ""709_onlyOwner"";
""709_transfer"" -> ""709_isContract"";
""709_turnOnTradable"" -> ""709_onlyOwner"";
""709_transferFrom"" -> ""709_isTradable"";
""709_transfer"" -> ""709_isTradable"";
""709_transfer"" -> ""709_balanceOf"";
}
"
0x0da76de0916ef2da3c58a97e4d09d501c56a9f15.sol,Piggy_Bank,"contract Piggy_Bank { function Put(uint _unlockTime) public payable { var acc = Acc[msg.sender]; acc.balance += msg.value; acc.unlockTime = _unlockTime>now?_unlockTime:now; LogFile.AddMessage(msg.sender,msg.value,); }",1,"subgraph cluster_128_Piggy_Bank {
label=""Piggy_Bank"";
""128_fallback"" [label=""fallback""];
""128_Put"" [label=""Put""];
""128_Piggy_Bank"" [label=""Piggy_Bank""];
""128_Collect"" [label=""Collect""];
""128_fallback"" -> ""128_Put"";
}
"
0x5b3c6ac07f3729534b7483d31e48f15e6ce7c6e9.sol,Crowdsale,"contract Crowdsale is Ownable { using SafeMath for uint256; uint256 public constant rate = 17000; uint256 public constant cap = 80000000 ether / rate; bool public isFinalized = false; uint256 public endTime = 1522540800; ALT1Token public token; address public wallet; uint256 public weiRaised; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); event Finalized(); function Crowdsale (ALT1Token _ALT1, address _wallet) public { assert(address(_ALT1) != address(0)); assert(_wallet != address(0)); assert(endTime > now); assert(rate > 0); assert(cap > 0); token = _ALT1; wallet = _wallet; }",1,"subgraph cluster_591_Crowdsale {
label=""Crowdsale"";
""591_Crowdsale"" [label=""Crowdsale""];
""591_finalization"" [label=""finalization""];
""591_buyTokens"" [label=""buyTokens""];
""591_forwardFunds"" [label=""forwardFunds""];
""591_hasEnded"" [label=""hasEnded""];
""591_validPurchase"" [label=""validPurchase""];
""591_fallback"" [label=""fallback""];
""591_finalize"" [label=""finalize""];
""591_buyTokens"" -> ""591_forwardFunds"";
""591_fallback"" -> ""591_buyTokens"";
""591_buyTokens"" -> ""591_validPurchase"";
""591_finalize"" -> ""591_onlyOwner"";
""591_finalize"" -> ""591_finalization"";
}
"
0x74ceda99c44da280f2fd8ea8b5dd43f8b66912a8.sol,BasicToken,contract BasicToken is ERC20Basic { using SafeMath for uint256; mapping(address => uint256) balances; uint256 totalSupply_; function totalSupply() public view returns (uint256) { return totalSupply_; },1,"subgraph cluster_1975_ERC223BasicToken {
label=""ERC223BasicToken"";
""1975_transfer"" [label=""transfer""];
""1975_transfer"" -> ""1975_transfer"";
}
"
0x7982a79ee90eb3682dcee66e47ba79c1cba44062.sol,SaleClockAuction,"contract SaleClockAuction is ClockAuction { bool public isSaleClockAuction = true; uint256 public gen0SaleCount; uint256[5] public lastGen0SalePrices; constructor(address _nftAddr, uint256 _cut) public ClockAuction(_nftAddr, _cut) {}",1,"subgraph cluster_2474_SaleClockAuction {
label=""SaleClockAuction"";
""2474_bid"" [label=""bid""];
""2474_averageGen0SalePrice"" [label=""averageGen0SalePrice""];
""2474_getSeller"" [label=""getSeller""];
""2474_computeCut"" [label=""computeCut""];
""2474_createAuction"" [label=""createAuction""];
""2474_setGen0SellerAddress"" [label=""setGen0SellerAddress""];
""2474_bidGift"" [label=""bidGift""];
""2474_constructor"" [label=""constructor""];
""2474_isSaleClockAuction"" [label=""isSaleClockAuction""];
""2474_createAuction"" -> ""2474__addAuction"";
""2474_bidGift"" -> ""2474__bid"";
""2474_createAuction"" -> ""2474__escrow"";
""2474_computeCut"" -> ""2474__computeCut"";
""2474_bidGift"" -> ""2474__transfer"";
""2474_bid"" -> ""2474__transfer"";
""2474_bid"" -> ""2474__bid"";
""2474_constructor"" -> ""2474_constructor"";
}
"
0x58bd394f3dfd9bbc15f4bc662b2def3e597e4e90.sol,AceTokenDistribution,"contract AceTokenDistribution is Ownable { using SafeMath for uint256; StarTokenInterface public token; event DistributionMint(address indexed to, uint256 amount); event ExtraMint(); function AceTokenDistribution (address _tokenAddress) { require(_tokenAddress != 0); token = StarTokenInterface(_tokenAddress); }",1,"subgraph cluster_632_AceTokenDistribution {
label=""AceTokenDistribution"";
""632_AceTokenDistribution"" [label=""AceTokenDistribution""];
""632_returnOwnership"" [label=""returnOwnership""];
""632_extraMint"" [label=""extraMint""];
""632_bulkMint"" [label=""bulkMint""];
""632_extraMint"" -> ""632_onlyOwner"";
""632_returnOwnership"" -> ""632_onlyOwner"";
""632_bulkMint"" -> ""632_onlyOwner"";
}
"
0xd95f7070c4d4abb344f79bb48ee22e751901d8df.sol,SingularDTVLaunch,"contract SingularDTVLaunch { string public version = ; event Contributed(address indexed contributor, uint contribution, uint tokens); AbstractSingularDTVToken public singularDTVToken; address public workshop; address public SingularDTVWorkshop = 0xc78310231aA53bD3D0FEA2F8c705C67730929D8f; uint public SingularDTVWorkshopFee; uint public CAP; uint public DURATION; uint public TOKEN_TARGET; enum Stages { Deployed, GoingAndGoalNotReached, EndedAndGoalNotReached, GoingAndGoalReached, EndedAndGoalReached }",1,"subgraph cluster_745_SingularDTVLaunch {
label=""SingularDTVLaunch"";
""745_start"" [label=""start""];
""745_updateStage"" [label=""updateStage""];
""745_changeValuePerToken"" [label=""changeValuePerToken""];
""745_withdrawContribution"" [label=""withdrawContribution""];
""745_checkInvariants"" [label=""checkInvariants""];
""745_fallback"" [label=""fallback""];
""745_withdrawUnsentTokensForOwner"" [label=""withdrawUnsentTokensForOwner""];
""745_fund"" [label=""fund""];
""745_withdrawForWorkshop"" [label=""withdrawForWorkshop""];
""745_SingularDTVLaunch"" [label=""SingularDTVLaunch""];
""745_emergencyCall"" [label=""emergencyCall""];
""745_withdrawContribution"" -> ""745_checkInvariants"";
""745_withdrawContribution"" -> ""745_atStage"";
""745_fallback"" -> ""745_withdrawContribution"";
""745_fund"" -> ""745_atStageOR"";
""745_fund"" -> ""745_checkInvariants"";
""745_withdrawUnsentTokensForOwner"" -> ""745_checkInvariants"";
""745_changeValuePerToken"" -> ""745_onlyOwner"";
""745_withdrawForWorkshop"" -> ""745_timedTransitions"";
""745_start"" -> ""745_onlyOwner"";
""745_start"" -> ""745_atStage"";
""745_fallback"" -> ""745_fund"";
""745_fund"" -> ""745_timedTransitions"";
""745_changeValuePerToken"" -> ""745_atStage"";
""745_withdrawUnsentTokensForOwner"" -> ""745_atStage"";
""745_withdrawContribution"" -> ""745_timedTransitions"";
""745_withdrawUnsentTokensForOwner"" -> ""745_timedTransitions"";
""745_withdrawForWorkshop"" -> ""745_checkInvariants"";
""745_withdrawForWorkshop"" -> ""745_atStage"";
""745_updateStage"" -> ""745_timedTransitions"";
""745_start"" -> ""745_checkInvariants"";
}
"
0x4cd988afbad37289baaf53c13e98e2bd46aaea8c.sol,DSToken,"contract DSToken is DSTokenBase(0), DSStop { bytes32 public symbol; uint256 public decimals = 18; address public generator; modifier onlyGenerator { if(msg.sender!=generator) throw; _; }",1,"subgraph cluster_1440_DSToken {
label=""DSToken"";
""1440_setName"" [label=""setName""];
""1440_push"" [label=""push""];
""1440_burn"" [label=""burn""];
""1440_DSToken"" [label=""DSToken""];
""1440_transferFrom"" [label=""transferFrom""];
""1440_transfer"" [label=""transfer""];
""1440_generatorTransfer"" [label=""generatorTransfer""];
""1440_approve"" [label=""approve""];
""1440_pull"" [label=""pull""];
""1440_mint"" [label=""mint""];
""1440_mint"" -> ""1440_stoppable"";
""1440_burn"" -> ""1440_sub"";
""1440_transferFrom"" -> ""1440_transferFrom"";
""1440_pull"" -> ""1440_transferFrom"";
""1440_transfer"" -> ""1440_transfer"";
""1440_approve"" -> ""1440_approve"";
""1440_generatorTransfer"" -> ""1440_onlyGenerator"";
""1440_burn"" -> ""1440_stoppable"";
""1440_transfer"" -> ""1440_note"";
""1440_generatorTransfer"" -> ""1440_transfer"";
""1440_generatorTransfer"" -> ""1440_note"";
""1440_setName"" -> ""1440_auth"";
""1440_push"" -> ""1440_transfer"";
""1440_approve"" -> ""1440_note"";
""1440_approve"" -> ""1440_stoppable"";
""1440_transfer"" -> ""1440_stoppable"";
""1440_mint"" -> ""1440_note"";
""1440_mint"" -> ""1440_add"";
""1440_mint"" -> ""1440_auth"";
""1440_transferFrom"" -> ""1440_stoppable"";
""1440_burn"" -> ""1440_auth"";
""1440_burn"" -> ""1440_note"";
""1440_transferFrom"" -> ""1440_note"";
}
"
0x475a8101fdde7f7246e31be77dd7dcb80f25d735.sol,Exchange,contract Exchange { struct Order { address creator; address token; bool buy; uint price; uint amount; },1,"subgraph cluster_1099_Exchange {
label=""Exchange"";
""1099_cancelOrder"" [label=""cancelOrder""];
""1099_depositToken"" [label=""depositToken""];
""1099_Exchange"" [label=""Exchange""];
""1099_balanceAdd"" [label=""balanceAdd""];
""1099_safeAdd"" [label=""safeAdd""];
""1099_decFeeDeposit"" [label=""decFeeDeposit""];
""1099_fillOrder"" [label=""fillOrder""];
""1099_balanceSub"" [label=""balanceSub""];
""1099_placeBuy"" [label=""placeBuy""];
""1099_placeSell"" [label=""placeSell""];
""1099_withdrawToken"" [label=""withdrawToken""];
""1099_fallback"" [label=""fallback""];
""1099_withdrawEther"" [label=""withdrawEther""];
""1099_transferOwnership"" [label=""transferOwnership""];
""1099_safeSub"" [label=""safeSub""];
""1099_safeMul"" [label=""safeMul""];
""1099_calcAmountEther"" [label=""calcAmountEther""];
""1099_cancelOrder"" -> ""1099_balanceAdd"";
""1099_placeSell"" -> ""1099_calcAmountEther"";
""1099_fillOrder"" -> ""1099_balanceSub"";
""1099_decFeeDeposit"" -> ""1099_onlyOwner"";
""1099_fillOrder"" -> ""1099_calcAmountEther"";
""1099_withdrawEther"" -> ""1099_balanceSub"";
""1099_transferOwnership"" -> ""1099_onlyOwner"";
""1099_placeBuy"" -> ""1099_calcAmountEther"";
""1099_placeBuy"" -> ""1099_balanceSub"";
""1099_decFeeDeposit"" -> ""1099_safeSub"";
""1099_depositToken"" -> ""1099_balanceAdd"";
""1099_fillOrder"" -> ""1099_balanceAdd"";
""1099_placeSell"" -> ""1099_balanceSub"";
""1099_withdrawToken"" -> ""1099_balanceSub"";
""1099_balanceAdd"" -> ""1099_safeAdd"";
""1099_calcAmountEther"" -> ""1099_safeMul"";
""1099_cancelOrder"" -> ""1099_calcAmountEther"";
""1099_balanceSub"" -> ""1099_safeSub"";
""1099_fallback"" -> ""1099_balanceAdd"";
}
"
0x00f634a0bb03416816f8829928ef7d776f798414.sol,KiOS,"contract KiOS { address public admin; mapping(address => uint) public rates; event Purchase(address indexed payer, address indexed token, uint price, uint amount); event Received(address indexed sender, address indexed token, uint amount); event Sent(address indexed recipient, address indexed token, uint amount); constructor() public { admin = msg.sender; }",1,"subgraph cluster_371_KiOS {
label=""KiOS"";
""371_changeAdmin"" [label=""changeAdmin""];
""371_getBalance"" [label=""getBalance""];
""371_fallback"" [label=""fallback""];
""371_payment"" [label=""payment""];
""371_check"" [label=""check""];
""371_pay"" [label=""pay""];
""371_setRate"" [label=""setRate""];
""371_buy"" [label=""buy""];
""371_constructor"" [label=""constructor""];
""371_pay"" -> ""371_getBalance"";
""371_pay"" -> ""371_check"";
""371_fallback"" -> ""371_payment"";
""371_buy"" -> ""371_getBalance"";
""371_buy"" -> ""371_check"";
""371_pay"" -> ""371_restrict"";
""371_setRate"" -> ""371_restrict"";
""371_changeAdmin"" -> ""371_check"";
""371_changeAdmin"" -> ""371_restrict"";
""371_setRate"" -> ""371_check"";
}
"
0x1f52b87c3503e537853e160adbf7e330ea0be7c4.sol,SaleClockAuction,contract SaleClockAuction is ClockAuction { function SaleClockAuction(uint256 _cut) public ClockAuction(_cut) {},1,"subgraph cluster_1012_SaleClockAuction {
label=""SaleClockAuction"";
""1012_bid"" [label=""bid""];
""1012_SaleClockAuction"" [label=""SaleClockAuction""];
""1012_createAuction"" [label=""createAuction""];
""1012_bid"" -> ""1012__bid"";
""1012_createAuction"" -> ""1012_canBeStoredWith128Bits"";
""1012_SaleClockAuction"" -> ""1012_ClockAuction"";
""1012_createAuction"" -> ""1012__escrow"";
""1012_bid"" -> ""1012__transfer"";
""1012_createAuction"" -> ""1012_canBeStoredWith64Bits"";
""1012_createAuction"" -> ""1012__addAuction"";
}
"
0x25d3b337e17ad34dbc8cb97d1a724545d90478fa.sol,AirdropiRide,contract AirdropiRide { Token public tokenReward; address public creator; address public owner = 0xd430B6C9706345760D94c4A8A14Cfa0164B04167; uint256 public startDate; uint256 public amount; modifier isCreator() { require(msg.sender == creator); _; },1,"subgraph cluster_238_AirdropiRide {
label=""AirdropiRide"";
""238_setCreator"" [label=""setCreator""];
""238_dropToken"" [label=""dropToken""];
""238_dropTokenV2"" [label=""dropTokenV2""];
""238_setAmount"" [label=""setAmount""];
""238_constructor"" [label=""constructor""];
""238_setStartDate"" [label=""setStartDate""];
""238_setOwner"" [label=""setOwner""];
""238_kill"" [label=""kill""];
""238_setToken"" [label=""setToken""];
""238_setToken"" -> ""238_isCreator"";
""238_dropToken"" -> ""238_isCreator"";
""238_setCreator"" -> ""238_isCreator"";
""238_setOwner"" -> ""238_isCreator"";
""238_setStartDate"" -> ""238_isCreator"";
""238_kill"" -> ""238_isCreator"";
""238_dropTokenV2"" -> ""238_isCreator"";
""238_setAmount"" -> ""238_isCreator"";
}
"
0x5165db3dffd92454c2d59faa8e2d907e54f174d3.sol,ViewlyBountyRewards,"contract ViewlyBountyRewards is DSAuth, DSMath { uint constant public MAX_TOKEN_REWARDS = 3000000 ether; DSToken public viewToken; uint public totalTokenRewards; mapping (address => uint) public tokenRewards; event LogTokenReward( address recipient, uint tokens ); function ViewlyBountyRewards(DSToken viewToken_) { viewToken = viewToken_; }",1,"subgraph cluster_1206_ViewlyBountyRewards {
label=""ViewlyBountyRewards"";
""1206_sendTokenReward"" [label=""sendTokenReward""];
""1206_ViewlyBountyRewards"" [label=""ViewlyBountyRewards""];
""1206_sendTokenReward"" -> ""1206_auth"";
""1206_sendTokenReward"" -> ""1206_add"";
}
"
0xaa652d53909b01c5a6b8e7cd814f9adea18c08f7.sol,TCRSale,"contract TCRSale is Pausable { using SafeMath for uint256; address public beneficiary; uint public fundingGoal; uint public fundingCap; uint public minContribution; bool public fundingGoalReached = false; bool public fundingCapReached = false; bool public saleClosed = false; uint public startTime; uint public endTime; uint public amountRaised; uint public refundAmount; uint public rate = 10000; uint public constant LOW_RANGE_RATE = 500; uint public constant HIGH_RANGE_RATE = 20000; bool private rentrancy_lock = false; TCRToken public tokenReward; mapping(address => uint256) public balanceOf; event GoalReached(address _beneficiary, uint _amountRaised); event CapReached(address _beneficiary, uint _amountRaised); event FundTransfer(address _backer, uint _amount, bool _isContribution); modifier beforeDeadline() { require (currentTime() < endTime); _; }",1,"subgraph cluster_1585_TCRSale {
label=""TCRSale"";
""1585_convertToMiniTcr"" [label=""convertToMiniTcr""];
""1585_terminate"" [label=""terminate""];
""1585_changeEndTime"" [label=""changeEndTime""];
""1585_safeWithdrawal"" [label=""safeWithdrawal""];
""1585_setRate"" [label=""setRate""];
""1585_ownerSafeWithdrawal"" [label=""ownerSafeWithdrawal""];
""1585_changeStartTime"" [label=""changeStartTime""];
""1585_checkFundingGoal"" [label=""checkFundingGoal""];
""1585_checkFundingCap"" [label=""checkFundingCap""];
""1585_ownerUnlockFund"" [label=""ownerUnlockFund""];
""1585_ownerAllocateTokens"" [label=""ownerAllocateTokens""];
""1585_TCRSale"" [label=""TCRSale""];
""1585_fallback"" [label=""fallback""];
""1585_currentTime"" [label=""currentTime""];
""1585_fallback"" -> ""1585_whenNotPaused"";
""1585_ownerAllocateTokens"" -> ""1585_checkFundingGoal"";
""1585_fallback"" -> ""1585_beforeDeadline"";
""1585_fallback"" -> ""1585_checkFundingCap"";
""1585_ownerUnlockFund"" -> ""1585_onlyOwner"";
""1585_ownerSafeWithdrawal"" -> ""1585_onlyOwner"";
""1585_fallback"" -> ""1585_nonReentrant"";
""1585_ownerAllocateTokens"" -> ""1585_nonReentrant"";
""1585_ownerAllocateTokens"" -> ""1585_onlyOwner"";
""1585_setRate"" -> ""1585_onlyOwner"";
""1585_TCRSale"" -> ""1585_setRate"";
""1585_changeEndTime"" -> ""1585_onlyOwner"";
""1585_safeWithdrawal"" -> ""1585_afterDeadline"";
""1585_ownerAllocateTokens"" -> ""1585_checkFundingCap"";
""1585_fallback"" -> ""1585_checkFundingGoal"";
""1585_terminate"" -> ""1585_onlyOwner"";
""1585_ownerUnlockFund"" -> ""1585_afterDeadline"";
""1585_fallback"" -> ""1585_afterStartTime"";
""1585_changeStartTime"" -> ""1585_onlyOwner"";
""1585_safeWithdrawal"" -> ""1585_nonReentrant"";
""1585_ownerSafeWithdrawal"" -> ""1585_nonReentrant"";
""1585_fallback"" -> ""1585_saleNotClosed"";
}
"
0x3a266f97425cd281c1770b71662fcf4415c29190.sol,CryptoProgramFactory,contract CryptoProgramFactory { bool status = false; using SafeMath for uint256; address public administrator; uint256 private BASE_PRICE = 0.1 ether; uint256 private BASE_TIME = 4 hours; MemoryFactoryInterface public Memory; CryptoMiningWarInterface public MiningWar; CryptoEngineerInterface public Engineer; mapping(uint256 => Factory) public factories; mapping(address => bool) public miniGames; struct Factory { uint256 level; uint256 crystals; uint256 programPriceByCrystals; uint256 programPriceByDarkCrystals; uint256 programValue; uint256 eth; uint256 time; },1,"subgraph cluster_1129_CryptoProgramFactory {
label=""CryptoProgramFactory"";
""1129_isContractMiniGame"" [label=""isContractMiniGame""];
""1129_setProgramValue"" [label=""setProgramValue""];
""1129_upgrade"" [label=""upgrade""];
""1129_setMemoryInterface"" [label=""setMemoryInterface""];
""1129_setEngineerInterface"" [label=""setEngineerInterface""];
""1129_setupMiniGame"" [label=""setupMiniGame""];
""1129_getProgramsValue"" [label=""getProgramsValue""];
""1129_setContractMiniGame"" [label=""setContractMiniGame""];
""1129_constructor"" [label=""constructor""];
""1129_setProgramPriceByDarkCrystals"" [label=""setProgramPriceByDarkCrystals""];
""1129_updateFactory"" [label=""updateFactory""];
""1129_fallback"" [label=""fallback""];
""1129_setProgramPriceByCrystals"" [label=""setProgramPriceByCrystals""];
""1129_devFee"" [label=""devFee""];
""1129_startGame"" [label=""startGame""];
""1129_subPrograms"" [label=""subPrograms""];
""1129_setMiningWarInterface"" [label=""setMiningWarInterface""];
""1129_getData"" [label=""getData""];
""1129_initFactory"" [label=""initFactory""];
""1129_buyProgarams"" [label=""buyProgarams""];
""1129_addFactory"" [label=""addFactory""];
""1129_removeContractMiniGame"" [label=""removeContractMiniGame""];
""1129_setContractMiniGame"" -> ""1129_isAdministrator"";
""1129_updateFactory"" -> ""1129_devFee"";
""1129_constructor"" -> ""1129_setEngineerInterface"";
""1129_constructor"" -> ""1129_setMiningWarInterface"";
""1129_setEngineerInterface"" -> ""1129_isAdministrator"";
""1129_constructor"" -> ""1129_setMemoryInterface"";
""1129_setProgramPriceByDarkCrystals"" -> ""1129_isAdministrator"";
""1129_setMemoryInterface"" -> ""1129_isAdministrator"";
""1129_startGame"" -> ""1129_initFactory"";
""1129_subPrograms"" -> ""1129_onlyContractsMiniGame"";
""1129_setMiningWarInterface"" -> ""1129_isAdministrator"";
""1129_setProgramValue"" -> ""1129_isAdministrator"";
""1129_addFactory"" -> ""1129_isAdministrator"";
""1129_setProgramPriceByCrystals"" -> ""1129_isAdministrator"";
""1129_removeContractMiniGame"" -> ""1129_isAdministrator"";
""1129_upgrade"" -> ""1129_isAdministrator"";
}
"
0x74a12ce6eebc23c3f785c0ab50d02228587dcc1a.sol,FrozenToken,"contract FrozenToken is ERC20Token, ITokenRecipient { mapping (address => bool) frozeds; uint256 public frozedCount; bool public freezeEnabled = false; bool public autoFreeze = false; bool public mintFinished = false; event Freeze(address indexed wallet); event UnFreeze(address indexed wallet); event PropsChanged(address indexed sender, string props, bool oldValue, bool newValue); event Mint(address indexed sender, address indexed wallet, uint256 amount); event ReceiveTokens(address indexed spender, address indexed token, uint256 value, bytes extraData); event ApproveAndCall(address indexed spender, uint256 value, bytes extraData); event Burn(address indexed sender, uint256 amount); event MintFinished(address indexed spender); modifier notFreeze { require(frozeds[msg.sender] == false || freezeEnabled == false); _; }",1,"subgraph cluster_1883_FrozenToken {
label=""FrozenToken"";
""1883_unFreeze"" [label=""unFreeze""];
""1883_transfer"" [label=""transfer""];
""1883_increaseApproval"" [label=""increaseApproval""];
""1883_decreaseApproval"" [label=""decreaseApproval""];
""1883_approveAndCall"" [label=""approveAndCall""];
""1883_mint"" [label=""mint""];
""1883_approve"" [label=""approve""];
""1883_freeze"" [label=""freeze""];
""1883_mintFinish"" [label=""mintFinish""];
""1883_isFreeze"" [label=""isFreeze""];
""1883_updAutoFreeze"" [label=""updAutoFreeze""];
""1883_burn"" [label=""burn""];
""1883_updFreezeEnabled"" [label=""updFreezeEnabled""];
""1883_receiveApproval"" [label=""receiveApproval""];
""1883_transferFrom"" [label=""transferFrom""];
""1883_mint"" -> ""1883_canMint"";
""1883_freeze"" -> ""1883_notOwner"";
""1883_transferFrom"" -> ""1883_transferFrom"";
""1883_approve"" -> ""1883_approve"";
""1883_mint"" -> ""1883_validAddress"";
""1883_increaseApproval"" -> ""1883_notFreezeFrom"";
""1883_approveAndCall"" -> ""1883_validAddress"";
""1883_unFreeze"" -> ""1883_validAddress"";
""1883_decreaseApproval"" -> ""1883_notFreezeFrom"";
""1883_freeze"" -> ""1883_authLevel"";
""1883_mintFinish"" -> ""1883_onlyOwner"";
""1883_transfer"" -> ""1883_transfer"";
""1883_receiveApproval"" -> ""1883_validAddress"";
""1883_approveAndCall"" -> ""1883_approve"";
""1883_receiveApproval"" -> ""1883_greaterThanZero"";
""1883_burn"" -> ""1883_validBalance"";
""1883_burn"" -> ""1883_greaterThanZero"";
""1883_increaseApproval"" -> ""1883_increaseApproval"";
""1883_transfer"" -> ""1883_notFreeze"";
""1883_mint"" -> ""1883_isAuthorized"";
""1883_isFreeze"" -> ""1883_validAddress"";
""1883_freeze"" -> ""1883_notThis"";
""1883_approve"" -> ""1883_notFreezeFrom"";
""1883_freeze"" -> ""1883_validAddress"";
""1883_transferFrom"" -> ""1883_notFreezeFrom"";
""1883_updFreezeEnabled"" -> ""1883_authLevel"";
""1883_unFreeze"" -> ""1883_authLevel"";
""1883_mint"" -> ""1883_isFreeze"";
""1883_updAutoFreeze"" -> ""1883_authLevel"";
""1883_mint"" -> ""1883_greaterThanZero"";
""1883_decreaseApproval"" -> ""1883_decreaseApproval"";
""1883_approveAndCall"" -> ""1883_greaterThanZero"";
""1883_burn"" -> ""1883_isFreeze"";
""1883_mint"" -> ""1883_authLevel"";
}
"
0x485b224c97ad56dc5b145eafdee71a7b5163f735.sol,PonziBet,contract PonziBet { using SafeMath for uint; EthPyramid public pyramid; address public admin; address public contractAddress; uint public minBet; uint public roundTime; uint public startPrice; uint public endPrice; uint[] public upBetRecords; uint[] public downBetRecords; mapping (address => uint) lastBet; mapping (address => bool) userBet; mapping (bool => uint) totalBalance; mapping (address => uint) feeBalance; mapping (address => mapping (bool => uint)) userBalances; function PonziBet() public { admin = msg.sender; },1,"subgraph cluster_599_PonziBet {
label=""PonziBet"";
""599_getUserBalances"" [label=""getUserBalances""];
""599_changeMinBet"" [label=""changeMinBet""];
""599_PonziBet"" [label=""PonziBet""];
""599_getUserBet"" [label=""getUserBet""];
""599_recordBet"" [label=""recordBet""];
""599_totalBalanceDown"" [label=""totalBalanceDown""];
""599_enterRound"" [label=""enterRound""];
""599_getUserBalancesLastBet"" [label=""getUserBalancesLastBet""];
""599_withdrawFromFeeBalance"" [label=""withdrawFromFeeBalance""];
""599_totalBalanceUp"" [label=""totalBalanceUp""];
""599_changeContractAddress"" [label=""changeContractAddress""];
""599_placeBet"" [label=""placeBet""];
""599_settleBet"" [label=""settleBet""];
""599_changeMinBet"" -> ""599_onlyAdmin"";
""599_enterRound"" -> ""599_recordBet"";
""599_withdrawFromFeeBalance"" -> ""599_onlyAdmin"";
""599_changeContractAddress"" -> ""599_onlyAdmin"";
""599_placeBet"" -> ""599_settleBet"";
}
"
0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol,FundingVault,contract FundingVault { bool public _initialized = false; address public vaultOwner ; address public outputAddress; address public managerAddress; bool public allFundingProcessed = false; bool public DirectFundingProcessed = false; ABIFunding FundingEntity; ABIFundingManager FundingManagerEntity; ABIMilestones MilestonesEntity; ABIProposals ProposalsEntity; ABITokenSCADAVariable TokenSCADAEntity; ABIToken TokenEntity ; uint256 public amount_direct = 0; uint256 public amount_milestone = 0; bool public emergencyFundReleased = false; uint8 emergencyFundPercentage = 0; uint256 BylawsCashBackOwnerMiaDuration; uint256 BylawsCashBackVoteRejectedDuration; uint256 BylawsProposalVotingDuration; struct PurchaseStruct { uint256 unix_time; uint8 payment_method; uint256 amount; uint8 funding_stage; uint16 index; },1,"subgraph cluster_2703_FundingVault {
label=""FundingVault"";
""2703_BalanceNum"" [label=""BalanceNum""];
""2703_checkFundingStateFailed"" [label=""checkFundingStateFailed""];
""2703_allFundingProcessed"" [label=""allFundingProcessed""];
""2703_tokenBalances"" [label=""tokenBalances""];
""2703_checkMilestoneStateInvestorVotedNoVotingEndedNo"" [label=""checkMilestoneStateInvestorVotedNoVotingEndedNo""];
""2703_releaseTokensAndEtherForEmergencyFund"" [label=""releaseTokensAndEtherForEmergencyFund""];
""2703_addPayment"" [label=""addPayment""];
""2703_initMilestoneTokenAndEtherBalances"" [label=""initMilestoneTokenAndEtherBalances""];
""2703_initialize"" [label=""initialize""];
""2703_ReleaseFundsAndTokens"" [label=""ReleaseFundsAndTokens""];
""2703_canCashBack"" [label=""canCashBack""];
""2703_checkOwnerFailedToSetTimeOnMeeting"" [label=""checkOwnerFailedToSetTimeOnMeeting""];
""2703_emergencyFundReleased"" [label=""emergencyFundReleased""];
""2703_getDirectBoughtTokens"" [label=""getDirectBoughtTokens""];
""2703_getBoughtTokens"" [label=""getBoughtTokens""];
""2703_ReleaseFundsToInvestor"" [label=""ReleaseFundsToInvestor""];
""2703_ReleaseFundsToInvestor"" -> ""2703_isOwner"";
""2703_releaseTokensAndEtherForEmergencyFund"" -> ""2703_onlyManager"";
""2703_ReleaseFundsAndTokens"" -> ""2703_canCashBack"";
""2703_addPayment"" -> ""2703_requireInitialised"";
""2703_releaseTokensAndEtherForEmergencyFund"" -> ""2703_requireInitialised"";
""2703_ReleaseFundsAndTokens"" -> ""2703_requireInitialised"";
""2703_ReleaseFundsToInvestor"" -> ""2703_canCashBack"";
""2703_canCashBack"" -> ""2703_checkFundingStateFailed"";
""2703_ReleaseFundsAndTokens"" -> ""2703_initMilestoneTokenAndEtherBalances"";
""2703_canCashBack"" -> ""2703_requireInitialised"";
""2703_ReleaseFundsAndTokens"" -> ""2703_getDirectBoughtTokens"";
""2703_ReleaseFundsToInvestor"" -> ""2703_requireInitialised"";
""2703_canCashBack"" -> ""2703_checkOwnerFailedToSetTimeOnMeeting"";
""2703_ReleaseFundsAndTokens"" -> ""2703_onlyManager"";
""2703_canCashBack"" -> ""2703_checkMilestoneStateInvestorVotedNoVotingEndedNo"";
""2703_addPayment"" -> ""2703_onlyManager"";
""2703_initialize"" -> ""2703_requireNotInitialised"";
}
"
0xebf0027ef3b4b7a742a148cddb0f2b14e5d8f0e9.sol,Crowdsale,"contract Crowdsale { using SafeMath for uint256; ERC20 public token; address public wallet; uint256 public rate; uint256 public weiRaised; event TokenPurchase( address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount ); constructor(uint256 _rate, address _wallet, ERC20 _token) public { require(_rate > 0); require(_wallet != address(0)); require(_token != address(0)); rate = _rate; wallet = _wallet; token = _token; }",1,"subgraph cluster_706_Crowdsale {
label=""Crowdsale"";
""706__preValidatePurchase"" [label=""_preValidatePurchase""];
""706_fallback"" [label=""fallback""];
""706__postValidatePurchase"" [label=""_postValidatePurchase""];
""706__forwardFunds"" [label=""_forwardFunds""];
""706__processPurchase"" [label=""_processPurchase""];
""706__updatePurchasingState"" [label=""_updatePurchasingState""];
""706__deliverTokens"" [label=""_deliverTokens""];
""706__getTokenAmount"" [label=""_getTokenAmount""];
""706_constructor"" [label=""constructor""];
""706_buyTokens"" [label=""buyTokens""];
""706_buyTokens"" -> ""706__getTokenAmount"";
""706_buyTokens"" -> ""706__processPurchase"";
""706_buyTokens"" -> ""706__updatePurchasingState"";
""706_buyTokens"" -> ""706__forwardFunds"";
""706_buyTokens"" -> ""706__postValidatePurchase"";
""706_fallback"" -> ""706_buyTokens"";
""706__processPurchase"" -> ""706__deliverTokens"";
""706_buyTokens"" -> ""706__preValidatePurchase"";
}
"
0x58b334f15d7c7e08287b4ae57d11f35e0c2ad497.sol,LockinManager,contract LockinManager { using SafeMath for uint256; struct Lock { uint256 amount; uint256 unlockDate; uint256 lockedFor; },1,"subgraph cluster_1738_LockinManager {
label=""LockinManager"";
""1738_lockIt"" [label=""lockIt""];
""1738_getLocksLockedFor"" [label=""getLocksLockedFor""];
""1738_getLock"" [label=""getLock""];
""1738_ifInAllowedLocks"" [label=""ifInAllowedLocks""];
""1738_getLocks"" [label=""getLocks""];
""1738_removeAllowedLock"" [label=""removeAllowedLock""];
""1738_setDefaultAllowedLock"" [label=""setDefaultAllowedLock""];
""1738_LockinManager"" [label=""LockinManager""];
""1738_lockForDays"" [label=""lockForDays""];
""1738_addValidContract"" [label=""addValidContract""];
""1738_removeValidContract"" [label=""removeValidContract""];
""1738_defaultLockin"" [label=""defaultLockin""];
""1738_getLocksAmount"" [label=""getLocksAmount""];
""1738_addAllowedLock"" [label=""addAllowedLock""];
""1738_getLocksUnlockDate"" [label=""getLocksUnlockDate""];
""1738_getLocksUnlockDate"" -> ""1738_validContractOnly"";
""1738_removeValidContract"" -> ""1738_adminOnly"";
""1738_setDefaultAllowedLock"" -> ""1738_adminOnly"";
""1738_getLocksAmount"" -> ""1738_validContractOnly"";
""1738_getLocksLockedFor"" -> ""1738_validContractOnly"";
""1738_getLocks"" -> ""1738_validContractOnly"";
""1738_removeAllowedLock"" -> ""1738_adminOnly"";
""1738_getLock"" -> ""1738_validContractOnly"";
""1738_addAllowedLock"" -> ""1738_adminOnly"";
""1738_defaultLockin"" -> ""1738_lockIt"";
""1738_lockForDays"" -> ""1738_ifInAllowedLocks"";
""1738_lockForDays"" -> ""1738_lockIt"";
""1738_addValidContract"" -> ""1738_adminOnly"";
""1738_defaultLockin"" -> ""1738_validContractOnly"";
}
"
0xc4ab0f59c4d8bb15e237906a06a736d965a2c390.sol,AirdropLibraToken,"contract AirdropLibraToken is Ownable { using SafeMath for uint256; uint256 decimal = 10**uint256(18); uint256 distributedTotal = 0; uint256 airdropStartTime; uint256 airdropEndTime; LibraToken private token; mapping (address => bool) public airdropAdmins; mapping(address => uint256) public airdropDoneAmountMap; address[] public airdropDoneList; event Airdrop(address _receiver, uint256 amount); event AddAdmin(address _admin); event RemoveAdmin(address _admin); event UpdateEndTime(address _operator, uint256 _oldTime, uint256 _newTime); modifier onlyOwnerOrAdmin() { require(msg.sender == owner || airdropAdmins[msg.sender]); _; }",1,"subgraph cluster_1009_AirdropLibraToken {
label=""AirdropLibraToken"";
""1009_getDistributedTotal"" [label=""getDistributedTotal""];
""1009_getDoneAddresses"" [label=""getDoneAddresses""];
""1009_isAdmin"" [label=""isAdmin""];
""1009_airdropTokens"" [label=""airdropTokens""];
""1009_transferOutBalance"" [label=""transferOutBalance""];
""1009_getDoneAirdropAmount"" [label=""getDoneAirdropAmount""];
""1009_removeAdmin"" [label=""removeAdmin""];
""1009_airdropTokensBatch"" [label=""airdropTokensBatch""];
""1009_addAdmin"" [label=""addAdmin""];
""1009_AirdropLibraToken"" [label=""AirdropLibraToken""];
""1009_updateAirdropEndTime"" [label=""updateAirdropEndTime""];
""1009_balanceOfThis"" [label=""balanceOfThis""];
""1009_airdropTokensBatch"" -> ""1009_onlyWhileAirdropPhaseOpen"";
""1009_transferOutBalance"" -> ""1009_onlyOwner"";
""1009_removeAdmin"" -> ""1009_onlyOwner"";
""1009_airdropTokens"" -> ""1009_onlyOwnerOrAdmin"";
""1009_addAdmin"" -> ""1009_onlyOwner"";
""1009_removeAdmin"" -> ""1009_isAdmin"";
""1009_airdropTokensBatch"" -> ""1009_onlyOwnerOrAdmin"";
""1009_airdropTokens"" -> ""1009_onlyWhileAirdropPhaseOpen"";
""1009_updateAirdropEndTime"" -> ""1009_onlyOwnerOrAdmin"";
""1009_airdropTokensBatch"" -> ""1009_airdropTokens"";
}
"
0x000000c96e715a5b8cd3beaea66bdb749225fa2f.sol,BurnableToken,"contract BurnableToken is BasicToken { event Burn(address indexed burner, uint256 value); function burn(uint256 _value) public { require(_value <= balances.balanceOf(msg.sender)); address burner = msg.sender; balances.subBalance(burner, _value); totalSupply_ = totalSupply_.sub(_value); Burn(burner, _value); Transfer(burner, address(0), _value); }",1,"subgraph cluster_1429_BurnableToken {
label=""BurnableToken"";
""1429_burn"" [label=""burn""];
}
"
0x0e8175729e02db48ca0e2ca80efb72fe84a7dedd.sol,MechanicKittyUnit,"contract MechanicKittyUnit is ERC20, PremiumUnit { using SafeMath for uint; string public constant name = ; string public constant symbol = ; uint256 public constant unitId = 3; uint256 public unitProductionSeconds = 43200; uint8 public constant decimals = 0; Units constant units = Units(0xf936AA9e1f22C915Abf4A66a5a6e94eb8716BA5e); address constant factories = 0xC767B1CEc507f1584469E8efE1a94AD4c75e02ed; mapping(address => uint256) balances; mapping(address => uint256) lastEquipTime; mapping(address => mapping(address => uint256)) allowed; uint256 public totalSupply; function totalSupply() external view returns (uint) { return totalSupply.sub(balances[address(0)]); }",1,"subgraph cluster_501_MechanicKittyUnit {
label=""MechanicKittyUnit"";
""501_transfer"" [label=""transfer""];
""501_approveAndCall"" [label=""approveAndCall""];
""501_allowance"" [label=""allowance""];
""501_approve"" [label=""approve""];
""501_mintUnit"" [label=""mintUnit""];
""501_unequipUnit"" [label=""unequipUnit""];
""501_totalSupply"" [label=""totalSupply""];
""501_balanceOf"" [label=""balanceOf""];
""501_transferFrom"" [label=""transferFrom""];
""501_equipUnit"" [label=""equipUnit""];
}
"
0xeda8b016efa8b1161208cf041cd86972eee0f31e.sol,BonusFinalizeAgent,"contract BonusFinalizeAgent is FinalizeAgent, SafeMathLib { CrowdsaleToken public token; Crowdsale public crowdsale; uint256 public allocatedTokens; uint256 tokenCap; address walletAddress; function BonusFinalizeAgent(CrowdsaleToken _token, Crowdsale _crowdsale, uint256 _tokenCap, address _walletAddress) public { token = _token; crowdsale = _crowdsale; require(address(crowdsale) != 0); tokenCap = _tokenCap; walletAddress = _walletAddress; }",1,"subgraph cluster_2784_BonusFinalizeAgent {
label=""BonusFinalizeAgent"";
""2784_isSane"" [label=""isSane""];
""2784_finalizeCrowdsale"" [label=""finalizeCrowdsale""];
""2784_BonusFinalizeAgent"" [label=""BonusFinalizeAgent""];
""2784_finalizeCrowdsale"" -> ""2784_safeSub"";
}
"
0x57ae3a491f4555e1eed37338d1b8b5222935f28a.sol,PreSale,"contract PreSale is Ownable, ReentrancyGuard { using SafeMath for uint256; RicoToken public token; address tokenContractAddress; uint256 public startTime; uint256 public endTime; address public wallet; uint256 public rate; uint256 public minimumInvest; uint256 public softCap; uint256 public hardCap; mapping(address => uint) public balances; uint256 public weiRaised; uint256 bonusPercent; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); function PreSale( uint256 _startTime, uint256 _period, address _wallet, address _token, uint256 _minimumInvest) public { require(_period != 0); require(_token != address(0)); startTime = _startTime; endTime = startTime + _period * 1 days; wallet = _wallet; token = RicoToken(_token); tokenContractAddress = _token; minimumInvest = _minimumInvest; rate = 1000; softCap = 150 * 1 ether; hardCap = 1500 * 1 ether; bonusPercent = 50; }",1,"subgraph cluster_1352_PreSale {
label=""PreSale"";
""1352_weiRaised"" [label=""weiRaised""];
""1352_finishPreSale"" [label=""finishPreSale""];
""1352_buyTokens"" [label=""buyTokens""];
""1352_PreSale"" [label=""PreSale""];
""1352_forwardFunds"" [label=""forwardFunds""];
""1352_fallback"" [label=""fallback""];
""1352_getTokenAmount"" [label=""getTokenAmount""];
""1352_refund"" [label=""refund""];
""1352_hasEnded"" [label=""hasEnded""];
""1352_changeTokenOwner"" [label=""changeTokenOwner""];
""1352_buyTokens"" -> ""1352_saleIsOn"";
""1352_finishPreSale"" -> ""1352_onlyOwner"";
""1352_buyTokens"" -> ""1352_isUnderHardCap"";
""1352_changeTokenOwner"" -> ""1352_onlyOwner"";
""1352_refund"" -> ""1352_refundAllowed"";
""1352_buyTokens"" -> ""1352_getTokenAmount"";
""1352_fallback"" -> ""1352_buyTokens"";
""1352_finishPreSale"" -> ""1352_forwardFunds"";
""1352_buyTokens"" -> ""1352_nonReentrant"";
}
"
0x470142a1834438515b757118f322703aba6e1e05.sol,PolicyPalNetworkAirdrop,contract PolicyPalNetworkAirdrop { struct BountyType { bool twitter; bool signature; },1,"subgraph cluster_662_PolicyPalNetworkAirdrop {
label=""PolicyPalNetworkAirdrop"";
""662_signatureDropMultipleAmount"" [label=""signatureDropMultipleAmount""];
""662_airDropSingleAmount"" [label=""airDropSingleAmount""];
""662_twitterDropSingleAmount"" [label=""twitterDropSingleAmount""];
""662_signatureDropSingleAmount"" [label=""signatureDropSingleAmount""];
""662_emergencyDrain"" [label=""emergencyDrain""];
""662_twitterDropMultipleAmount"" [label=""twitterDropMultipleAmount""];
""662_PolicyPalNetworkAirdrop"" [label=""PolicyPalNetworkAirdrop""];
""662_airDropMultipleAmount"" [label=""airDropMultipleAmount""];
""662_twitterDropSingleAmount"" -> ""662_onlyAdmin"";
""662_signatureDropSingleAmount"" -> ""662_validBalance"";
""662_airDropSingleAmount"" -> ""662_onlyAdmin"";
""662_emergencyDrain"" -> ""662_onlyAdmin"";
""662_signatureDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_airDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropSingleAmount"" -> ""662_validBalance"";
""662_signatureDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_signatureDropSingleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropSingleAmount"" -> ""662_validBalance"";
""662_PolicyPalNetworkAirdrop"" -> ""662_validAddress"";
""662_twitterDropMultipleAmount"" -> ""662_onlyAdmin"";
}
"
0xeee7c7e228eafb0f8945c5dbaa8ea4f6ee12b36d.sol,Crowdsale,"contract Crowdsale { using SafeMath for uint256; address public wallet; address public addressOfTokenUsedAsReward; uint256 public price = 1818; token tokenReward; uint256 public weiRaised; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); function Crowdsale() { wallet = 0x5d467Dfc5e3FcA3ea4bd6C312275ca930d2f3E19; addressOfTokenUsedAsReward = 0xB6eC8C3a347f66a3d7C4F39D6DD68A422E69E81d ; tokenReward = token(addressOfTokenUsedAsReward); }",1,"subgraph cluster_347_Crowdsale {
label=""Crowdsale"";
""347_stopSale"" [label=""stopSale""];
""347_changeWallet"" [label=""changeWallet""];
""347_changeTokenReward"" [label=""changeTokenReward""];
""347_validPurchase"" [label=""validPurchase""];
""347_fallback"" [label=""fallback""];
""347_withdrawTokens"" [label=""withdrawTokens""];
""347_buyTokens"" [label=""buyTokens""];
""347_setPrice"" [label=""setPrice""];
""347_Crowdsale"" [label=""Crowdsale""];
""347_startSale"" [label=""startSale""];
""347_forwardFunds"" [label=""forwardFunds""];
""347_fallback"" -> ""347_buyTokens"";
""347_buyTokens"" -> ""347_validPurchase"";
""347_buyTokens"" -> ""347_forwardFunds"";
}
"
0x25cf23787ac0f92a3eafa61f458ad0b7c4b27c3d.sol,Zethroll,"contract Zethroll is ZTHReceivingContract { using SafeMath for uint; modifier betIsValid(uint _betSize, uint _playerNumber) { require( calculateProfit(_betSize, _playerNumber) < maxProfit && _betSize >= minBet && _playerNumber > minNumber && _playerNumber < maxNumber); _; }",1,"subgraph cluster_899_Zethroll {
label=""Zethroll"";
""899_constructor"" [label=""constructor""];
""899_ownerSetMinBet"" [label=""ownerSetMinBet""];
""899_ownerSetBankroll"" [label=""ownerSetBankroll""];
""899_random"" [label=""random""];
""899_maxRandom"" [label=""maxRandom""];
""899_tokenFallback"" [label=""tokenFallback""];
""899_fallback"" [label=""fallback""];
""899_ownerSetMaxProfitAsPercentOfHouse"" [label=""ownerSetMaxProfitAsPercentOfHouse""];
""899__zthToken"" [label=""_zthToken""];
""899_ownerPauseGame"" [label=""ownerPauseGame""];
""899_ownerTransferZTH"" [label=""ownerTransferZTH""];
""899_setMaxProfit"" [label=""setMaxProfit""];
""899_dumpdivs"" [label=""dumpdivs""];
""899_ownerChangeOwner"" [label=""ownerChangeOwner""];
""899_finishBet"" [label=""finishBet""];
""899_calculateProfit"" [label=""calculateProfit""];
""899_ownerUpdateContractBalance"" [label=""ownerUpdateContractBalance""];
""899__finishBet"" [label=""_finishBet""];
""899_ownerkill"" [label=""ownerkill""];
""899__playerRollDice"" [label=""_playerRollDice""];
""899_tokenFallback"" -> ""899__playerRollDice"";
""899_ownerTransferZTH"" -> ""899_setMaxProfit"";
""899_random"" -> ""899_maxRandom"";
""899_ownerSetBankroll"" -> ""899_onlyOwner"";
""899_constructor"" -> ""899_ownerSetMaxProfitAsPercentOfHouse"";
""899_ownerPauseGame"" -> ""899_onlyOwner"";
""899_ownerChangeOwner"" -> ""899_onlyOwner"";
""899_ownerSetMaxProfitAsPercentOfHouse"" -> ""899_onlyOwner"";
""899_ownerkill"" -> ""899_onlyOwner"";
""899_ownerSetMinBet"" -> ""899_onlyOwner"";
""899_tokenFallback"" -> ""899_setMaxProfit"";
""899_ownerTransferZTH"" -> ""899_onlyOwner"";
""899_finishBet"" -> ""899_gameIsActive"";
""899__playerRollDice"" -> ""899_betIsValid"";
""899__finishBet"" -> ""899_calculateProfit"";
""899__playerRollDice"" -> ""899__finishBet"";
""899__finishBet"" -> ""899_setMaxProfit"";
""899__playerRollDice"" -> ""899_gameIsActive"";
""899_finishBet"" -> ""899__finishBet"";
""899_ownerSetMaxProfitAsPercentOfHouse"" -> ""899_setMaxProfit"";
""899__finishBet"" -> ""899_random"";
""899_ownerUpdateContractBalance"" -> ""899_onlyOwner"";
""899__playerRollDice"" -> ""899__zthToken"";
""899_constructor"" -> ""899_ownerSetMinBet"";
}
"
0x6b62f10b1d042d3ed601899ca25f80f9dbc92644.sol,TwoCoinsOneMoonGame,contract TwoCoinsOneMoonGame { struct Bettor { address account; uint256 amount; },1,"subgraph cluster_536_TwoCoinsOneMoonGame {
label=""TwoCoinsOneMoonGame"";
""536_getBetAmount"" [label=""getBetAmount""];
""536_constructor"" [label=""constructor""];
""536_addEvent"" [label=""addEvent""];
""536_depositBalance"" [label=""depositBalance""];
""536_putMessage"" [label=""putMessage""];
""536_checkMoon"" [label=""checkMoon""];
""536_withdraw"" [label=""withdraw""];
""536_betRedCoin"" [label=""betRedCoin""];
""536_betBlueCoin"" [label=""betBlueCoin""];
""536_burstBubble"" [label=""burstBubble""];
""536_checkMoon"" -> ""536_addEvent"";
""536_betBlueCoin"" -> ""536_getBetAmount"";
""536_burstBubble"" -> ""536_depositBalance"";
""536_burstBubble"" -> ""536_addEvent"";
""536_betRedCoin"" -> ""536_checkMoon"";
""536_checkMoon"" -> ""536_burstBubble"";
""536_betBlueCoin"" -> ""536_checkMoon"";
""536_betRedCoin"" -> ""536_getBetAmount"";
}
"
0xf244176246168f24e3187f7288edbca29267739b.sol,EtherNomin,"contract EtherNomin is ExternStateProxyFeeToken { address public oracle; Court public court; address public beneficiary; uint public nominPool; uint public poolFeeRate = UNIT / 200; uint constant MINIMUM_PURCHASE = UNIT / 100; uint constant MINIMUM_ISSUANCE_RATIO = 2 * UNIT; uint constant AUTO_LIQUIDATION_RATIO = UNIT; uint constant DEFAULT_LIQUIDATION_PERIOD = 90 days; uint constant MAX_LIQUIDATION_PERIOD = 180 days; uint public liquidationPeriod = DEFAULT_LIQUIDATION_PERIOD; uint public liquidationTimestamp = ~uint(0); uint public etherPrice; uint public lastPriceUpdate; uint public stalePeriod = 2 days; mapping(address => bool) public frozen; function EtherNomin(address _havven, address _oracle, address _beneficiary, uint initialEtherPrice, address _owner, TokenState initialState) ExternStateProxyFeeToken(, , 15 * UNIT / 10000, _havven, initialState, _owner) public { oracle = _oracle; beneficiary = _beneficiary; etherPrice = initialEtherPrice; lastPriceUpdate = now; emit PriceUpdated(etherPrice); frozen[this] = true; }",1,"subgraph cluster_3176_EtherNomin {
label=""EtherNomin"";
""3176_etherValue"" [label=""etherValue""];
""3176_frozen"" [label=""frozen""];
""3176_purchaseCostEther"" [label=""purchaseCostEther""];
""3176_etherValueAllowStale"" [label=""etherValueAllowStale""];
""3176_collateralisationRatio"" [label=""collateralisationRatio""];
""3176_fallback"" [label=""fallback""];
""3176_saleProceedsEtherAllowStale"" [label=""saleProceedsEtherAllowStale""];
""3176_poolFeeIncurred"" [label=""poolFeeIncurred""];
""3176_buy"" [label=""buy""];
""3176_sell"" [label=""sell""];
""3176_beginLiquidation"" [label=""beginLiquidation""];
""3176_updatePrice"" [label=""updatePrice""];
""3176_isLiquidating"" [label=""isLiquidating""];
""3176_terminateLiquidation"" [label=""terminateLiquidation""];
""3176_saleProceedsFiat"" [label=""saleProceedsFiat""];
""3176_EtherNomin"" [label=""EtherNomin""];
""3176_unfreezeAccount"" [label=""unfreezeAccount""];
""3176_confiscateBalance"" [label=""confiscateBalance""];
""3176_setStalePeriod"" [label=""setStalePeriod""];
""3176_setCourt"" [label=""setCourt""];
""3176_replenishPool"" [label=""replenishPool""];
""3176_fiatBalance"" [label=""fiatBalance""];
""3176_canSelfDestruct"" [label=""canSelfDestruct""];
""3176_transfer"" [label=""transfer""];
""3176_purchaseCostFiat"" [label=""purchaseCostFiat""];
""3176_setPoolFeeRate"" [label=""setPoolFeeRate""];
""3176_setBeneficiary"" [label=""setBeneficiary""];
""3176_transferFrom"" [label=""transferFrom""];
""3176_forceLiquidation"" [label=""forceLiquidation""];
""3176_selfDestruct"" [label=""selfDestruct""];
""3176__nominCap"" [label=""_nominCap""];
""3176_saleProceedsEther"" [label=""saleProceedsEther""];
""3176_diminishPool"" [label=""diminishPool""];
""3176_priceIsStale"" [label=""priceIsStale""];
""3176_setOracle"" [label=""setOracle""];
""3176_extendLiquidationPeriod"" [label=""extendLiquidationPeriod""];
""3176_fiatValue"" [label=""fiatValue""];
""3176_extendLiquidationPeriod"" -> ""3176_safeAdd"";
""3176_buy"" -> ""3176_safeAdd"";
""3176_poolFeeIncurred"" -> ""3176_safeMul_dec"";
""3176_sell"" -> ""3176_saleProceedsEtherAllowStale"";
""3176_buy"" -> ""3176_safeSub"";
""3176_replenishPool"" -> ""3176_safeMul_dec"";
""3176_forceLiquidation"" -> ""3176_notLiquidating"";
""3176_purchaseCostFiat"" -> ""3176_poolFeeIncurred"";
""3176_saleProceedsFiat"" -> ""3176_poolFeeIncurred"";
""3176_collateralisationRatio"" -> ""3176__nominCap"";
""3176_priceIsStale"" -> ""3176_safeAdd"";
""3176_setOracle"" -> ""3176_optionalProxy_onlyOwner"";
""3176_terminateLiquidation"" -> ""3176_isLiquidating"";
""3176_forceLiquidation"" -> ""3176_beginLiquidation"";
""3176_unfreezeAccount"" -> ""3176_optionalProxy_onlyOwner"";
""3176_saleProceedsEther"" -> ""3176_saleProceedsFiat"";
""3176_buy"" -> ""3176_notLiquidating"";
""3176_saleProceedsEtherAllowStale"" -> ""3176_saleProceedsFiat"";
""3176_collateralisationRatio"" -> ""3176_fiatBalance"";
""3176_buy"" -> ""3176_optionalProxy"";
""3176_canSelfDestruct"" -> ""3176_isLiquidating"";
""3176_etherValue"" -> ""3176_safeDiv_dec"";
""3176_transferFrom"" -> ""3176_optionalProxy"";
""3176_replenishPool"" -> ""3176_safeAdd"";
""3176_confiscateBalance"" -> ""3176_safeAdd"";
""3176_saleProceedsEtherAllowStale"" -> ""3176_etherValueAllowStale"";
""3176_buy"" -> ""3176_purchaseCostEther"";
""3176_fiatBalance"" -> ""3176_fiatValue"";
""3176_terminateLiquidation"" -> ""3176_priceNotStale"";
""3176_selfDestruct"" -> ""3176_optionalProxy_onlyOwner"";
""3176_setPoolFeeRate"" -> ""3176_optionalProxy_onlyOwner"";
""3176_transfer"" -> ""3176_optionalProxy"";
""3176_terminateLiquidation"" -> ""3176_optionalProxy_onlyOwner"";
""3176_etherValueAllowStale"" -> ""3176_safeDiv_dec"";
""3176_transferFrom"" -> ""3176__transferFrom_byProxy"";
""3176_replenishPool"" -> ""3176_fiatBalance"";
""3176_replenishPool"" -> ""3176_optionalProxy_onlyOwner"";
""3176_replenishPool"" -> ""3176__nominCap"";
""3176_sell"" -> ""3176_isLiquidating"";
""3176_fiatValue"" -> ""3176_priceNotStale"";
""3176_terminateLiquidation"" -> ""3176_collateralisationRatio"";
""3176_saleProceedsEther"" -> ""3176_etherValue"";
""3176_terminateLiquidation"" -> ""3176__nominCap"";
""3176_setCourt"" -> ""3176_optionalProxy_onlyOwner"";
""3176_sell"" -> ""3176_safeSub"";
""3176_EtherNomin"" -> ""3176_ExternStateProxyFeeToken"";
""3176_selfDestruct"" -> ""3176_canSelfDestruct"";
""3176__nominCap"" -> ""3176_safeAdd"";
""3176_diminishPool"" -> ""3176_optionalProxy_onlyOwner"";
""3176_updatePrice"" -> ""3176_postCheckAutoLiquidate"";
""3176_diminishPool"" -> ""3176_safeSub"";
""3176_setBeneficiary"" -> ""3176_optionalProxy_onlyOwner"";
""3176_sell"" -> ""3176_safeAdd"";
""3176_purchaseCostFiat"" -> ""3176_safeAdd"";
""3176_collateralisationRatio"" -> ""3176_safeDiv_dec"";
""3176_etherValue"" -> ""3176_priceNotStale"";
""3176_forceLiquidation"" -> ""3176_optionalProxy_onlyOwner"";
""3176_sell"" -> ""3176_saleProceedsEther"";
""3176_saleProceedsFiat"" -> ""3176_safeSub"";
""3176_sell"" -> ""3176_optionalProxy"";
""3176_fiatValue"" -> ""3176_safeMul_dec"";
""3176_purchaseCostEther"" -> ""3176_etherValue"";
""3176_extendLiquidationPeriod"" -> ""3176_isLiquidating"";
""3176_replenishPool"" -> ""3176_notLiquidating"";
""3176_extendLiquidationPeriod"" -> ""3176_optionalProxy_onlyOwner"";
""3176_setStalePeriod"" -> ""3176_optionalProxy_onlyOwner"";
""3176_purchaseCostEther"" -> ""3176_purchaseCostFiat"";
""3176_transfer"" -> ""3176__transfer_byProxy"";
}
"
0xc767b1cec507f1584469e8efe1a94ad4c75e02ed.sol,PremiumFactories,contract PremiumFactories { Bankroll constant bankroll = Bankroll(0x66a9f1e53173de33bec727ef76afa84956ae1b25); address owner; constructor() public { owner = msg.sender; },1,"subgraph cluster_619_PremiumFactories {
label=""PremiumFactories"";
""619_claimUnits"" [label=""claimUnits""];
""619_purchaseFactory"" [label=""purchaseFactory""];
""619_getFactories"" [label=""getFactories""];
""619_constructor"" [label=""constructor""];
""619_addFactory"" [label=""addFactory""];
""619_updateFactoryConfig"" [label=""updateFactoryConfig""];
""619_getFactoryPrice"" [label=""getFactoryPrice""];
""619_addPremiumUnit"" [label=""addPremiumUnit""];
""619_getFactories"" -> ""619_getFactoryPrice"";
""619_purchaseFactory"" -> ""619_getFactoryPrice"";
}
"
0x0002325fcaaac6ebf1254a626589147bde1a2394.sol,HorseyToken,"contract HorseyToken is EthorseHelpers,Pausable { using SafeMath for uint256; event Claimed(address raceAddress, address eth_address, uint256 tokenId); event Feeding(uint256 tokenId); event ReceivedCarrot(uint256 tokenId, bytes32 newDna); event FeedingFailed(uint256 tokenId); event HorseyRenamed(uint256 tokenId, string newName); event HorseyFreed(uint256 tokenId); RoyalStablesInterface public stables; uint8 public carrotsMultiplier = 1; uint8 public rarityMultiplier = 1; uint256 public claimingFee = 0.008 ether; struct FeedingData { uint256 blockNumber; uint256 horsey; }",1,"subgraph cluster_2145_HorseyToken {
label=""HorseyToken"";
""2145_addLegitDevAddress"" [label=""addLegitDevAddress""];
""2145_setClaimingCosts"" [label=""setClaimingCosts""];
""2145__feed"" [label=""_feed""];
""2145__shiftRight"" [label=""_shiftRight""];
""2145_getOwnedTokens"" [label=""getOwnedTokens""];
""2145_claim"" [label=""claim""];
""2145_addHorseIndex"" [label=""addHorseIndex""];
""2145_fallback"" [label=""fallback""];
""2145_freeForCarrots"" [label=""freeForCarrots""];
""2145_can_claim"" [label=""can_claim""];
""2145_feed"" [label=""feed""];
""2145_constructor"" [label=""constructor""];
""2145_getCarrotCredits"" [label=""getCarrotCredits""];
""2145__increaseRarity"" [label=""_increaseRarity""];
""2145_renameHorsey"" [label=""renameHorsey""];
""2145_setRarityMultiplier"" [label=""setRarityMultiplier""];
""2145__generate_special_horsey"" [label=""_generate_special_horsey""];
""2145_stopFeeding"" [label=""stopFeeding""];
""2145_withdraw"" [label=""withdraw""];
""2145_getHorsey"" [label=""getHorsey""];
""2145_setCarrotsMultiplier"" [label=""setCarrotsMultiplier""];
""2145__makeSpecialId"" [label=""_makeSpecialId""];
""2145__shiftLeft"" [label=""_shiftLeft""];
""2145_setRenamingCosts"" [label=""setRenamingCosts""];
""2145_withdraw"" -> ""2145_onlyOwner"";
""2145_freeForCarrots"" -> ""2145_onlyOwnerOf"";
""2145_addLegitDevAddress"" -> ""2145__addLegitOwner"";
""2145__generate_special_horsey"" -> ""2145__shiftRight"";
""2145_renameHorsey"" -> ""2145_costs"";
""2145_feed"" -> ""2145_onlyOwnerOf"";
""2145_setRarityMultiplier"" -> ""2145_onlyOwner"";
""2145_claim"" -> ""2145_whenNotPaused"";
""2145_claim"" -> ""2145_costs"";
""2145_freeForCarrots"" -> ""2145_whenNotPaused"";
""2145_stopFeeding"" -> ""2145__feed"";
""2145_feed"" -> ""2145_noFeedingInProgress"";
""2145_setRenamingCosts"" -> ""2145_onlyOwner"";
""2145_claim"" -> ""2145_can_claim"";
""2145_stopFeeding"" -> ""2145_feedingInProgress"";
""2145_addHorseIndex"" -> ""2145__addHorse"";
""2145_renameHorsey"" -> ""2145_whenNotPaused"";
""2145_claim"" -> ""2145__isWinnerOf"";
""2145_setClaimingCosts"" -> ""2145_onlyOwner"";
""2145_claim"" -> ""2145__generate_special_horsey"";
""2145__generate_special_horsey"" -> ""2145__makeSpecialId"";
""2145_setCarrotsMultiplier"" -> ""2145_onlyOwner"";
""2145_can_claim"" -> ""2145__isWinnerOf"";
""2145_feed"" -> ""2145_carrotsMeetLevel"";
""2145__feed"" -> ""2145__increaseRarity"";
""2145__increaseRarity"" -> ""2145__shiftLeft"";
""2145_addLegitDevAddress"" -> ""2145_onlyOwner"";
""2145_feed"" -> ""2145_whenNotPaused"";
""2145_addHorseIndex"" -> ""2145_onlyOwner"";
""2145_renameHorsey"" -> ""2145_onlyOwnerOf"";
""2145_constructor"" -> ""2145_constructor"";
}
"
0x574fb6d9d090042a04d0d12a4e87217f8303a5ca.sol,GoldBackedToken,"contract GoldBackedToken is Ownable, SafeMath, ERC20, Pausable { event Transfer(address indexed from, address indexed to, uint value); event Approval(address indexed owner, address indexed spender, uint value); event DeductFees(address indexed owner,uint256 amount); event TokenMinted(address destination, uint256 amount); event TokenBurned(address source, uint256 amount); string public name = ; string public symbol = ; uint256 constant public decimals = 18; uint256 constant public hgtDecimals = 8; uint256 constant public allocationPool = 1 * 10**9 * 10**hgtDecimals; uint256 constant public maxAllocation = 38 * 10**5 * 10**decimals; uint256 public totAllocation; address public feeCalculator; address public HGT; function setFeeCalculator(address newFC) onlyOwner { feeCalculator = newFC; }",1,"subgraph cluster_2164_GoldBackedToken {
label=""GoldBackedToken"";
""2164_update"" [label=""update""];
""2164_mintTokens"" [label=""mintTokens""];
""2164_updatedBalance"" [label=""updatedBalance""];
""2164_balanceOf"" [label=""balanceOf""];
""2164_GoldBackedToken"" [label=""GoldBackedToken""];
""2164_calcFees"" [label=""calcFees""];
""2164_burnTokens"" [label=""burnTokens""];
""2164_approve"" [label=""approve""];
""2164_addAllocationPartOne"" [label=""addAllocationPartOne""];
""2164_allowance"" [label=""allowance""];
""2164_transfer"" [label=""transfer""];
""2164_addAllocationPartTwo"" [label=""addAllocationPartTwo""];
""2164_setHGT"" [label=""setHGT""];
""2164_setMinter"" [label=""setMinter""];
""2164_aotLength"" [label=""aotLength""];
""2164_parentFees"" [label=""parentFees""];
""2164_parentChange"" [label=""parentChange""];
""2164_currentAllocationLength"" [label=""currentAllocationLength""];
""2164_setFeeCalculator"" [label=""setFeeCalculator""];
""2164_transferFrom"" [label=""transferFrom""];
""2164_partAllocationLength"" [label=""partAllocationLength""];
""2164_mintTokens"" -> ""2164_update"";
""2164_mintTokens"" -> ""2164_safeAdd"";
""2164_approve"" -> ""2164_whenNotPaused"";
""2164_transfer"" -> ""2164_safeAdd"";
""2164_transfer"" -> ""2164_update"";
""2164_transferFrom"" -> ""2164_whenNotPaused"";
""2164_addAllocationPartTwo"" -> ""2164_calcFees"";
""2164_transfer"" -> ""2164_safeSub"";
""2164_setFeeCalculator"" -> ""2164_onlyOwner"";
""2164_parentChange"" -> ""2164_whenNotPaused"";
""2164_addAllocationPartTwo"" -> ""2164_onlyOwner"";
""2164_setHGT"" -> ""2164_onlyOwner"";
""2164_addAllocationPartOne"" -> ""2164_onlyOwner"";
""2164_transfer"" -> ""2164_whenNotPaused"";
""2164_addAllocationPartOne"" -> ""2164_calcFees"";
""2164_update"" -> ""2164_updatedBalance"";
""2164_parentFees"" -> ""2164_whenNotPaused"";
""2164_transferFrom"" -> ""2164_update"";
""2164_updatedBalance"" -> ""2164_calcFees"";
""2164_burnTokens"" -> ""2164_safeSub"";
""2164_burnTokens"" -> ""2164_update"";
""2164_transferFrom"" -> ""2164_safeAdd"";
""2164_transferFrom"" -> ""2164_safeSub"";
""2164_parentFees"" -> ""2164_update"";
""2164_balanceOf"" -> ""2164_updatedBalance"";
""2164_setMinter"" -> ""2164_onlyOwner"";
}
"
0x4802fe0bf7eb3b3b0dce3ede89c575341f10e3e0.sol,SynergisProxyDeposit,"contract SynergisProxyDeposit is Ownable { using SafeMath for uint256; enum Role {Fund, Team, Adviser}",1,"subgraph cluster_968_SynergisProxyDeposit {
label=""SynergisProxyDeposit"";
""968_withdraw"" [label=""withdraw""];
""968_newDeposit"" [label=""newDeposit""];
""968_deleteDeposit"" [label=""deleteDeposit""];
""968_setERC20address"" [label=""setERC20address""];
""968_checkBalance"" [label=""checkBalance""];
""968_constructor"" [label=""constructor""];
""968_getDepositID"" [label=""getDepositID""];
""968_distributeIncomeEther"" [label=""distributeIncomeEther""];
""968_fallback"" [label=""fallback""];
""968_addSpecialOffer"" [label=""addSpecialOffer""];
""968_sellTokens"" [label=""sellTokens""];
""968_removeSpecialOffer"" [label=""removeSpecialOffer""];
""968_fallback"" -> ""968_sellTokens"";
""968_distributeIncomeEther"" -> ""968_onlyOwner"";
""968_setERC20address"" -> ""968_onlyOwner"";
""968_withdraw"" -> ""968_getDepositID"";
""968_deleteDeposit"" -> ""968_onlyOwner"";
""968_newDeposit"" -> ""968_getDepositID"";
""968_addSpecialOffer"" -> ""968_onlyOwner"";
""968_deleteDeposit"" -> ""968_getDepositID"";
""968_newDeposit"" -> ""968_onlyOwner"";
""968_removeSpecialOffer"" -> ""968_onlyOwner"";
}
"
0x6543cde961213e82001594bf4c34706579ce34ec.sol,ClinicAllCrowdsale,"contract ClinicAllCrowdsale is Crowdsale, FinalizableCrowdsale, MintedCrowdsale, ManagedWhitelist, Limited { constructor ( uint256 _tokenLimitSupply, uint256 _rate, address _wallet, address _privateSaleWallet, ERC20 _token, uint256 _openingTime, uint256 _closingTime, uint256 _discountTokenAmount, uint256 _discountTokenPercent, uint256 _preSaleClosingTime, uint256 _softCapLimit, ClinicAllRefundEscrow _vault, uint256 _buyLimitSupplyMin, uint256 _buyLimitSupplyMax, uint256 _kycLimitEliminator ) Crowdsale(_rate, _wallet, _token) TimedCrowdsale(_openingTime, _closingTime) public { privateSaleWallet = _privateSaleWallet; tokenSupplyLimit = _tokenLimitSupply; discountTokenAmount = _discountTokenAmount; discountTokenPercent = _discountTokenPercent; preSaleClosingTime = _preSaleClosingTime; softCapLimit = _softCapLimit; vault = _vault; buyLimitSupplyMin = _buyLimitSupplyMin; buyLimitSupplyMax = _buyLimitSupplyMax; kycLimitEliminator = _kycLimitEliminator; }",1,"subgraph cluster_4170_ClinicAllCrowdsale {
label=""ClinicAllCrowdsale"";
""4170_getRate"" [label=""getRate""];
""4170_getTokenAmount"" [label=""getTokenAmount""];
""4170_hasClosed"" [label=""hasClosed""];
""4170__preValidatePurchase"" [label=""_preValidatePurchase""];
""4170_beneficiaryWithdrawChunk"" [label=""beneficiaryWithdrawChunk""];
""4170_transferToPrivateInvestor"" [label=""transferToPrivateInvestor""];
""4170_beneficiaryWithdrawAll"" [label=""beneficiaryWithdrawAll""];
""4170_claimRefund"" [label=""claimRefund""];
""4170__getDiscountRate"" [label=""_getDiscountRate""];
""4170_manualRefund"" [label=""manualRefund""];
""4170_constructor"" [label=""constructor""];
""4170_goalReached"" [label=""goalReached""];
""4170_transferOff"" [label=""transferOff""];
""4170_allocatePrivateSaleFunds"" [label=""allocatePrivateSaleFunds""];
""4170_updateRate"" [label=""updateRate""];
""4170__getDiscountTokenAmount"" [label=""_getDiscountTokenAmount""];
""4170_redeemPrivateSaleFunds"" [label=""redeemPrivateSaleFunds""];
""4170_claimRefundChunk"" [label=""claimRefundChunk""];
""4170__getTokenAmount"" [label=""_getTokenAmount""];
""4170_updateKycLimitEliminator"" [label=""updateKycLimitEliminator""];
""4170__forwardFunds"" [label=""_forwardFunds""];
""4170_transferOn"" [label=""transferOn""];
""4170_supplyRest"" [label=""supplyRest""];
""4170_finalization"" [label=""finalization""];
""4170__processPurchase"" [label=""_processPurchase""];
""4170_isDiscount"" [label=""isDiscount""];
""4170_updateBuyLimitRange"" [label=""updateBuyLimitRange""];
""4170_transferTokensToReserve"" [label=""transferTokensToReserve""];
""4170_refundeesListLength"" [label=""refundeesListLength""];
""4170__getTokensWithDiscount"" [label=""_getTokensWithDiscount""];
""4170__getTokensWithDiscount"" -> ""4170__getDiscountRate"";
""4170__preValidatePurchase"" -> ""4170_isLimited"";
""4170_finalization"" -> ""4170_transferTokensToReserve"";
""4170_transferOn"" -> ""4170_onlyOwner"";
""4170_claimRefundChunk"" -> ""4170_onlyOwner"";
""4170_allocatePrivateSaleFunds"" -> ""4170__deliverTokens"";
""4170__forwardFunds"" -> ""4170__forwardFunds"";
""4170_transferTokensToReserve"" -> ""4170__deliverTokens"";
""4170_beneficiaryWithdrawAll"" -> ""4170_onlyOwner"";
""4170_claimRefund"" -> ""4170_goalReached"";
""4170_claimRefundChunk"" -> ""4170_goalReached"";
""4170__processPurchase"" -> ""4170_doesNotExceedLimit"";
""4170__preValidatePurchase"" -> ""4170_onlyIfWhitelisted"";
""4170_beneficiaryWithdrawChunk"" -> ""4170_onlyOwner"";
""4170__processPurchase"" -> ""4170__processPurchase"";
""4170_manualRefund"" -> ""4170_onlyOwner"";
""4170_updateRate"" -> ""4170_onlyManager"";
""4170__getTokenAmount"" -> ""4170_isDiscount"";
""4170_finalization"" -> ""4170_goalReached"";
""4170_refundeesListLength"" -> ""4170_onlyOwner"";
""4170_getTokenAmount"" -> ""4170__getTokenAmount"";
""4170__getDiscountTokenAmount"" -> ""4170__getDiscountRate"";
""4170_getRate"" -> ""4170__getDiscountRate"";
""4170_transferToPrivateInvestor"" -> ""4170_onlyPrivateSaleWallet"";
""4170_redeemPrivateSaleFunds"" -> ""4170_onlyPrivateSaleWallet"";
""4170__preValidatePurchase"" -> ""4170__getTokenAmount"";
""4170__getDiscountRate"" -> ""4170_isDiscount"";
""4170_constructor"" -> ""4170_constructor"";
""4170__getTokenAmount"" -> ""4170__getTokensWithDiscount"";
""4170_getRate"" -> ""4170_isDiscount"";
""4170__getTokensWithDiscount"" -> ""4170__getDiscountTokenAmount"";
""4170_finalization"" -> ""4170_finalization"";
""4170_transferOff"" -> ""4170_onlyOwner"";
""4170_updateKycLimitEliminator"" -> ""4170_onlyOwner"";
""4170__preValidatePurchase"" -> ""4170__preValidatePurchase"";
""4170_updateBuyLimitRange"" -> ""4170_onlyOwner"";
""4170_transferToPrivateInvestor"" -> ""4170_onlyIfWhitelisted"";
""4170_allocatePrivateSaleFunds"" -> ""4170_onlyOwner"";
}
"
0x6fc22d1f6852af2bcea6cb749033ccb6b4d3177a.sol,BitSTDView,"contract BitSTDView { BitSTDLogic private logic; address public owner; event Transfer(address indexed from, address indexed to, uint256 value); event FrozenFunds(address target, bool frozen); event Burn(address indexed from, uint256 value); function balanceOf(address add)constant public returns (uint256) { return logic.balanceOf(add); }",1,"subgraph cluster_1510_BitSTDView {
label=""BitSTDView"";
""1510_frozenAccount"" [label=""frozenAccount""];
""1510_decimals"" [label=""decimals""];
""1510_transferFrom"" [label=""transferFrom""];
""1510_buy"" [label=""buy""];
""1510_symbol"" [label=""symbol""];
""1510_mintToken"" [label=""mintToken""];
""1510_buyPrice"" [label=""buyPrice""];
""1510_freezeAccount"" [label=""freezeAccount""];
""1510_transferDataAuthority"" [label=""transferDataAuthority""];
""1510_transferAuthority"" [label=""transferAuthority""];
""1510_approve"" [label=""approve""];
""1510_sellPrice"" [label=""sellPrice""];
""1510_constructor"" [label=""constructor""];
""1510_burn"" [label=""burn""];
""1510_transferLogicAuthority"" [label=""transferLogicAuthority""];
""1510_totalSupply"" [label=""totalSupply""];
""1510_balanceOf"" [label=""balanceOf""];
""1510_migration"" [label=""migration""];
""1510_setBitSTD"" [label=""setBitSTD""];
""1510_transfer"" [label=""transfer""];
""1510_sell"" [label=""sell""];
""1510_allowance"" [label=""allowance""];
""1510_name"" [label=""name""];
""1510_burnFrom"" [label=""burnFrom""];
""1510_approveAndCall"" [label=""approveAndCall""];
""1510_mintToken"" -> ""1510_onlyOwner"";
""1510_transferAuthority"" -> ""1510_onlyOwner"";
""1510_transferLogicAuthority"" -> ""1510_onlyOwner"";
""1510_freezeAccount"" -> ""1510_onlyOwner"";
""1510_setBitSTD"" -> ""1510_onlyOwner"";
""1510_transferDataAuthority"" -> ""1510_onlyOwner"";
}
"
0x655f1cb6616d7f0550007498113e72d7d5c5d4bb.sol,MedalClaim,"contract MedalClaim is AccessControl, SafeMath { address public angelCardDataContract = 0x6D2E76213615925c5fc436565B5ee788Ee0E86DC; address public petCardDataContract = 0xB340686da996b8B3d486b4D27E38E38500A9E926; address public accessoryDataContract = 0x466c44812835f57b736ef9F63582b8a6693A14D0; address public leaderboardDataContract = 0x9A1C755305c6fbf361B4856c9b6b6Bbfe3aCE738; address public medalDataContract = 0x33A104dCBEd81961701900c06fD14587C908EAa3; event EventMedalSuccessful(address owner,uint64 Medal); struct Angel { uint64 angelId; uint8 angelCardSeriesId; address owner; uint16 battlePower; uint8 aura; uint16 experience; }",1,"subgraph cluster_2300_MedalClaim {
label=""MedalClaim"";
""2300_checkExistsOwnedPet"" [label=""checkExistsOwnedPet""];
""2300_claim1Ply"" [label=""claim1Ply""];
""2300_DataContacts"" [label=""DataContacts""];
""2300_claimPlatinum"" [label=""claimPlatinum""];
""2300_getAngelClaims"" [label=""getAngelClaims""];
""2300_getAddressClaims"" [label=""getAddressClaims""];
""2300_getPetCardSeries"" [label=""getPetCardSeries""];
""2300_claimSilver"" [label=""claimSilver""];
""2300_ClaimOrichalcum"" [label=""ClaimOrichalcum""];
""2300_claim2Ply"" [label=""claim2Ply""];
""2300_claimCardboard"" [label=""claimCardboard""];
""2300_claimStupidFluffyPink"" [label=""claimStupidFluffyPink""];
""2300_kill"" [label=""kill""];
""2300_claimGold"" [label=""claimGold""];
""2300_checkExistsOwnedAngel"" [label=""checkExistsOwnedAngel""];
""2300_getPetClaims"" [label=""getPetClaims""];
""2300_kill"" -> ""2300_onlyCREATOR"";
""2300_DataContacts"" -> ""2300_onlyCREATOR"";
""2300_claimStupidFluffyPink"" -> ""2300_getPetCardSeries"";
""2300_claimGold"" -> ""2300_getPetCardSeries"";
""2300_claimStupidFluffyPink"" -> ""2300_checkExistsOwnedPet"";
""2300_claimSilver"" -> ""2300_checkExistsOwnedAngel"";
""2300_claim2Ply"" -> ""2300_getPetCardSeries"";
""2300_claimPlatinum"" -> ""2300_checkExistsOwnedAngel"";
""2300_claimCardboard"" -> ""2300_checkExistsOwnedAngel"";
""2300_claim2Ply"" -> ""2300_checkExistsOwnedPet"";
""2300_claim1Ply"" -> ""2300_checkExistsOwnedAngel"";
""2300_claimGold"" -> ""2300_checkExistsOwnedPet"";
}
"
0xc710772a16fd040ed9c63de0679a57410981e3fc.sol,TokenVault,"contract TokenVault is Ownable { address owner; event TokenTransfer(address indexed to, address token, uint amount); function withdrawTokenTo(address token, address to) public onlyOwner returns (bool) { uint amount = balanceOfToken(token); if (amount > 0) { TokenTransfer(to, token, amount); return Token(token).transfer(to, amount); }",1,"subgraph cluster_122_TokenVault {
label=""TokenVault"";
""122_balanceOfToken"" [label=""balanceOfToken""];
""122_withdrawTokenTo"" [label=""withdrawTokenTo""];
""122_withdrawTokenTo"" -> ""122_onlyOwner"";
""122_withdrawTokenTo"" -> ""122_balanceOfToken"";
}
"
0xeb36a7650ef32f0643d39cf5b7fcefd4319febb9.sol,Arbitration,contract Arbitration is Owned { address public operator; uint public quorum = 3; struct Dispute { address icoRoundAddress; address investorAddress; bool pending; uint timestamp; uint milestone; string reason; uint votesForProject; uint votesForInvestor; mapping(address => bool) voters; },1,"subgraph cluster_2992_Arbitration {
label=""Arbitration"";
""2992_openDispute"" [label=""openDispute""];
""2992_setArbiters"" [label=""setArbiters""];
""2992_constructor"" [label=""constructor""];
""2992_isPending"" [label=""isPending""];
""2992_executeVerdict"" [label=""executeVerdict""];
""2992_vote"" [label=""vote""];
""2992_vote"" -> ""2992_executeVerdict"";
""2992_setArbiters"" -> ""2992_only"";
}
"
0x359a46571d4bc22a6a9310038b51e2d91163412f.sol,TokenSale,"contract TokenSale is Pausable { using SafeMath for uint256; ServusTokenInterface public servusToken; uint256 public totalWeiRaised; uint256 public tokensMinted; uint256 public totalSupply; uint256 public contributors; uint256 public decimalsMultiplier; uint256 public startTime; uint256 public endTime; uint256 public remainingTokens; uint256 public allocatedTokens; bool public finalized; bool public servusTokensAllocated; address public servusMultiSig = 0x0cc3e09c8a52fa0313154321be706635cdbdec37; uint256 public constant BASE_PRICE_IN_WEI = 1000000000000000; uint256 public constant PUBLIC_TOKENS = 100000000 * (10 ** 6); uint256 public constant TOTAL_PRESALE_TOKENS = 50000000 * (10 ** 6); uint256 public constant TOKENS_ALLOCATED_TO_SERVUS = 100000000 * (10 ** 6); uint256 public tokenCap = PUBLIC_TOKENS - TOTAL_PRESALE_TOKENS; uint256 public cap = tokenCap; uint256 public weiCap = cap * BASE_PRICE_IN_WEI; uint256 public firstDiscountPrice = (BASE_PRICE_IN_WEI * 85) / 100; uint256 public secondDiscountPrice = (BASE_PRICE_IN_WEI * 90) / 100; uint256 public thirdDiscountPrice = (BASE_PRICE_IN_WEI * 95) / 100; uint256 public firstDiscountCap = (weiCap * 5) / 100; uint256 public secondDiscountCap = (weiCap * 10) / 100; uint256 public thirdDiscountCap = (weiCap * 20) / 100; bool public started = false; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); event NewClonedToken(address indexed _cloneToken); event OnTransfer(address _from, address _to, uint _amount); event OnApprove(address _owner, address _spender, uint _amount); event LogInt(string _name, uint256 _value); event Finalized(); function TokenSale(address _tokenAddress, uint256 _startTime, uint256 _endTime) public { require(_tokenAddress != 0x0); require(_startTime > 0); require(_endTime > _startTime); startTime = _startTime; endTime = _endTime; servusToken = ServusTokenInterface(_tokenAddress); decimalsMultiplier = (10 ** 6); }",1,"subgraph cluster_2025_TokenSale {
label=""TokenSale"";
""2025_finalize"" [label=""finalize""];
""2025_getPriceInWei"" [label=""getPriceInWei""];
""2025_enableMasterTransfers"" [label=""enableMasterTransfers""];
""2025_buyTokens"" [label=""buyTokens""];
""2025_enableTransfers"" [label=""enableTransfers""];
""2025_lockTransfers"" [label=""lockTransfers""];
""2025_forwardFunds"" [label=""forwardFunds""];
""2025_isContract"" [label=""isContract""];
""2025_TokenSale"" [label=""TokenSale""];
""2025_changeController"" [label=""changeController""];
""2025_validPurchase"" [label=""validPurchase""];
""2025_balanceOf"" [label=""balanceOf""];
""2025_allocateServusTokens"" [label=""allocateServusTokens""];
""2025_totalSupply"" [label=""totalSupply""];
""2025_fallback"" [label=""fallback""];
""2025_lockMasterTransfers"" [label=""lockMasterTransfers""];
""2025_forceStart"" [label=""forceStart""];
""2025_buyTokens"" -> ""2025_validPurchase"";
""2025_forceStart"" -> ""2025_onlyOwner"";
""2025_buyTokens"" -> ""2025_forwardFunds"";
""2025_buyTokens"" -> ""2025_whenNotFinalized"";
""2025_lockMasterTransfers"" -> ""2025_onlyOwner"";
""2025_buyTokens"" -> ""2025_getPriceInWei"";
""2025_allocateServusTokens"" -> ""2025_whenNotFinalized"";
""2025_buyTokens"" -> ""2025_whenNotPaused"";
""2025_finalize"" -> ""2025_onlyOwner"";
""2025_changeController"" -> ""2025_isContract"";
""2025_enableMasterTransfers"" -> ""2025_onlyOwner"";
""2025_fallback"" -> ""2025_buyTokens"";
""2025_lockTransfers"" -> ""2025_onlyOwner"";
""2025_allocateServusTokens"" -> ""2025_onlyOwner"";
}
"
0x74f887f5b336704be1591f8a2f2e419767134316.sol,ERC20,contract ERC20 is IERC20 { using SafeMath for uint256; using Address for address; mapping(address => uint256) internal _balances; mapping(address => mapping(address => uint256)) private _allowed; uint256 internal _totalSupply; function totalSupply() public view returns (uint256) { return _totalSupply; },1,"subgraph cluster_552_ERC20 {
label=""ERC20"";
""552__burn"" [label=""_burn""];
""552__transfer"" [label=""_transfer""];
""552_totalSupply"" [label=""totalSupply""];
""552_allowance"" [label=""allowance""];
""552_increaseAllowance"" [label=""increaseAllowance""];
""552_transfer"" [label=""transfer""];
""552_balanceOf"" [label=""balanceOf""];
""552_decreaseAllowance"" [label=""decreaseAllowance""];
""552__burnFrom"" [label=""_burnFrom""];
""552_burn"" [label=""burn""];
""552_approve"" [label=""approve""];
""552__approve"" [label=""_approve""];
""552_transferFrom"" [label=""transferFrom""];
""552_transferFrom"" -> ""552__approve"";
""552_transferFrom"" -> ""552__transfer"";
""552_approve"" -> ""552__approve"";
""552__burnFrom"" -> ""552__approve"";
""552_transfer"" -> ""552__transfer"";
""552_increaseAllowance"" -> ""552__approve"";
""552__burnFrom"" -> ""552__burn"";
""552_decreaseAllowance"" -> ""552__approve"";
""552_burn"" -> ""552__burn"";
}
"
0x33b7a018934c6e90fd63189d7c4517f0f776142f.sol,ChronoBankAssetProxy,"contract ChronoBankAssetProxy is ERC20 { uint constant OK = 1; ChronoBankPlatform public chronoBankPlatform; bytes32 public smbl; string public name; string public symbol; function init(ChronoBankPlatform _chronoBankPlatform, string _symbol, string _name) returns(bool) { if (address(chronoBankPlatform) != 0x0) { return false; }",1,"subgraph cluster_966_ChronoBankAssetProxy {
label=""ChronoBankAssetProxy"";
""966_balanceOf"" [label=""balanceOf""];
""966_emitTransfer"" [label=""emitTransfer""];
""966_getLatestVersion"" [label=""getLatestVersion""];
""966_commitUpgrade"" [label=""commitUpgrade""];
""966_optIn"" [label=""optIn""];
""966_allowance"" [label=""allowance""];
""966_init"" [label=""init""];
""966_transferWithReference"" [label=""transferWithReference""];
""966_emitApprove"" [label=""emitApprove""];
""966_totalSupply"" [label=""totalSupply""];
""966___transferWithReference"" [label=""__transferWithReference""];
""966_proposeUpgrade"" [label=""proposeUpgrade""];
""966__getAsset"" [label=""_getAsset""];
""966___approve"" [label=""__approve""];
""966_transferFrom"" [label=""transferFrom""];
""966_stringToBytes32"" [label=""stringToBytes32""];
""966___transferFromWithReference"" [label=""__transferFromWithReference""];
""966_fallback"" [label=""fallback""];
""966_getPendingVersionTimestamp"" [label=""getPendingVersionTimestamp""];
""966_getVersionFor"" [label=""getVersionFor""];
""966_getPendingVersion"" [label=""getPendingVersion""];
""966_approve"" [label=""approve""];
""966_optOut"" [label=""optOut""];
""966_decimals"" [label=""decimals""];
""966_purgeUpgrade"" [label=""purgeUpgrade""];
""966__transferWithReference"" [label=""_transferWithReference""];
""966_transfer"" [label=""transfer""];
""966___transferWithReference"" -> ""966_onlyAccess"";
""966_emitApprove"" -> ""966_onlyChronoBankPlatform"";
""966_transferFrom"" -> ""966__getAsset"";
""966_init"" -> ""966_stringToBytes32"";
""966__getAsset"" -> ""966_getVersionFor"";
""966_approve"" -> ""966__getAsset"";
""966_transfer"" -> ""966__transferWithReference"";
""966__transferWithReference"" -> ""966__getAsset"";
""966_emitTransfer"" -> ""966_onlyChronoBankPlatform"";
""966_proposeUpgrade"" -> ""966_onlyAssetOwner"";
""966___transferFromWithReference"" -> ""966_onlyAccess"";
""966_transferWithReference"" -> ""966__transferWithReference"";
""966_purgeUpgrade"" -> ""966_onlyAssetOwner"";
""966___approve"" -> ""966_onlyAccess"";
""966_fallback"" -> ""966__getAsset"";
}
"
0xb4a3fb248d39370c1f8081b73fa7098167c8142b.sol,DSValue,"contract DSValue is DSThing { bool has; bytes32 val; function peek() public view returns (bytes32, bool) { return (val,has); }",1,"subgraph cluster_1193_DSValue {
label=""DSValue"";
""1193_void"" [label=""void""];
""1193_poke"" [label=""poke""];
""1193_peek"" [label=""peek""];
""1193_read"" [label=""read""];
""1193_poke"" -> ""1193_note"";
""1193_read"" -> ""1193_peek"";
""1193_void"" -> ""1193_auth"";
""1193_void"" -> ""1193_note"";
""1193_poke"" -> ""1193_auth"";
}
"
0x4c13184721de2d1b47a8875775ba3ce0b2e00ee0.sol,SharkPool,"contract SharkPool is Ownable, ReentrancyGuard { string constant public pool_name = ; uint256 public pool_percentage = 5; uint256 constant public max_users = 100; uint256 public total_users = 0; uint256 public constant divisible_units = 10000000; uint256 public contract_period = 100; uint256 public mined_blocks = 1; uint256 public claimed_blocks = 1; uint256 public blockCreationRate = 0; BitcoineumInterface base_contract; struct user { uint256 start_block; uint256 end_block; uint256 proportional_contribution; }",1,"subgraph cluster_893_SharkPool {
label=""SharkPool"";
""893_current_external_block"" [label=""current_external_block""];
""893_SharkPool"" [label=""SharkPool""];
""893_find_contribution"" [label=""find_contribution""];
""893_mine"" [label=""mine""];
""893_checkMiningAttempt"" [label=""checkMiningAttempt""];
""893_checkWinning"" [label=""checkWinning""];
""893_allocate_slot"" [label=""allocate_slot""];
""893_fallback"" [label=""fallback""];
""893_available_slots"" [label=""available_slots""];
""893_get_bitcoineum_contract_address"" [label=""get_bitcoineum_contract_address""];
""893_external_to_internal_block_number"" [label=""external_to_internal_block_number""];
""893_do_redemption"" [label=""do_redemption""];
""893_redeem"" [label=""redeem""];
""893_set_pool_percentage"" [label=""set_pool_percentage""];
""893_balanceOf"" [label=""balanceOf""];
""893_distribute_reward"" [label=""distribute_reward""];
""893_calculate_minimum_contribution"" [label=""calculate_minimum_contribution""];
""893_claim"" [label=""claim""];
""893_SharkPool"" -> ""893_get_bitcoineum_contract_address"";
""893_redeem"" -> ""893_do_redemption"";
""893_set_pool_percentage"" -> ""893_nonReentrant"";
""893_redeem"" -> ""893_nonReentrant"";
""893_set_pool_percentage"" -> ""893_onlyOwner"";
""893_mine"" -> ""893_external_to_internal_block_number"";
""893_fallback"" -> ""893_do_redemption"";
""893_claim"" -> ""893_distribute_reward"";
""893_mine"" -> ""893_current_external_block"";
""893_fallback"" -> ""893_allocate_slot"";
""893_fallback"" -> ""893_calculate_minimum_contribution"";
""893_claim"" -> ""893_nonReentrant"";
""893_mine"" -> ""893_nonReentrant"";
}
"
0x1d1811189e2a8dd8d5f22cdc164273bf3d6fdd43.sol,BasicToken,contract BasicToken is ERC20Basic { using SafeMath for uint256; mapping(address => uint256) balances; uint256 totalSupply_; function totalSupply() public view returns (uint256) { return totalSupply_; },1,"subgraph cluster_523_BasicToken {
label=""BasicToken"";
""523_balanceOf"" [label=""balanceOf""];
""523_transfer"" [label=""transfer""];
""523_totalSupply"" [label=""totalSupply""];
""523_isContract"" [label=""isContract""];
""523_transferToContract"" [label=""transferToContract""];
""523_transfer"" -> ""523_balanceOf"";
""523_transferToContract"" -> ""523_isContract"";
""523_transfer"" -> ""523_isContract"";
""523_transferToContract"" -> ""523_balanceOf"";
}
"
0x2791528f5617e187a6d73c30034ac211b2f47042.sol,CardsRaffle,"contract CardsRaffle is AccessAdmin { using SafeMath for SafeMath; function CardsRaffle() public { setAdminContract(msg.sender,true); setActionContract(msg.sender,true); }",1,"subgraph cluster_957_CardsRaffle {
label=""CardsRaffle"";
""957_setCardsAddress"" [label=""setCardsAddress""];
""957_buyRaffleTicket"" [label=""buyRaffleTicket""];
""957_getLatestRaffleInfo"" [label=""getLatestRaffleInfo""];
""957_getRafflePlayers"" [label=""getRafflePlayers""];
""957_setRareAddress"" [label=""setRareAddress""];
""957_getRareAddress"" [label=""getRareAddress""];
""957_startRareRaffle"" [label=""startRareRaffle""];
""957_assignRafflePrize"" [label=""assignRafflePrize""];
""957_drawRandomWinner"" [label=""drawRandomWinner""];
""957_awardRafflePrize"" [label=""awardRafflePrize""];
""957_getPlayersTickets"" [label=""getPlayersTickets""];
""957_CardsRaffle"" [label=""CardsRaffle""];
""957_awardRafflePrize"" -> ""957_drawRandomWinner"";
""957_CardsRaffle"" -> ""957_setAdminContract"";
""957_setRareAddress"" -> ""957_onlyOwner"";
""957_awardRafflePrize"" -> ""957_assignRafflePrize"";
""957_startRareRaffle"" -> ""957_onlyAdmin"";
""957_startRareRaffle"" -> ""957_getRareAddress"";
""957_drawRandomWinner"" -> ""957_onlyAdmin"";
""957_CardsRaffle"" -> ""957_setActionContract"";
""957_setCardsAddress"" -> ""957_onlyOwner"";
""957_awardRafflePrize"" -> ""957_getRareAddress"";
}
"
0x4d7edd5f94515b0f35b38f6fb2ea975a20823465.sol,CryptoSprites,contract CryptoSprites is ERC721 { address public owner; address KittyCoreAddress = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d; address SaleClockAuctionAddress = 0xb1690C08E213a35Ed9bAb7B318DE14420FB57d8C; address charityAddress = 0xb30cb3b3E03A508Db2A0a3e07BA1297b47bb0fb1; uint public etherForOwner; uint public etherForCharity; uint public ownerCut = 15; uint public charityCut = 15; uint public featurePrice = 10**16; uint public priceMultiplier = 1; uint public priceDivider = 10; modifier onlyOwner { require(msg.sender == owner); _; },1,"subgraph cluster_1456_CryptoSprites {
label=""CryptoSprites"";
""1456_lookupKittyDetails1"" [label=""lookupKittyDetails1""];
""1456_balanceOf"" [label=""balanceOf""];
""1456_listSpriteForSale"" [label=""listSpriteForSale""];
""1456_transfer"" [label=""transfer""];
""1456_transferFrom"" [label=""transferFrom""];
""1456_lookupKitty"" [label=""lookupKitty""];
""1456_lookupFeaturedSprites"" [label=""lookupFeaturedSprites""];
""1456_usersSpriteOwningHistory"" [label=""usersSpriteOwningHistory""];
""1456_fallback"" [label=""fallback""];
""1456_approve"" [label=""approve""];
""1456_lookupKittyDetails2"" [label=""lookupKittyDetails2""];
""1456_featuredSpritesLength"" [label=""featuredSpritesLength""];
""1456_calculatePrice"" [label=""calculatePrice""];
""1456_lookupSprite"" [label=""lookupSprite""];
""1456_removeSpriteFromSale"" [label=""removeSpriteFromSale""];
""1456_lookupAllSprites"" [label=""lookupAllSprites""];
""1456_supportsInterface"" [label=""supportsInterface""];
""1456_totalSupply"" [label=""totalSupply""];
""1456_adjustCut"" [label=""adjustCut""];
""1456_withdraw"" [label=""withdraw""];
""1456_ownerOf"" [label=""ownerOf""];
""1456_allowance"" [label=""allowance""];
""1456_adjustDefaultSpritePrice"" [label=""adjustDefaultSpritePrice""];
""1456_adjustFeaturePrice"" [label=""adjustFeaturePrice""];
""1456_name"" [label=""name""];
""1456_CryptoSprites"" [label=""CryptoSprites""];
""1456_symbol"" [label=""symbol""];
""1456_featureSprite"" [label=""featureSprite""];
""1456_buySprite"" [label=""buySprite""];
""1456_adjustDefaultSpritePrice"" -> ""1456_onlyOwner"";
""1456_withdraw"" -> ""1456_onlyOwner"";
""1456_adjustCut"" -> ""1456_onlyOwner"";
""1456_adjustFeaturePrice"" -> ""1456_onlyOwner"";
}
"
0xb4a3fb248d39370c1f8081b73fa7098167c8142b.sol,DSToken,"contract DSToken is DSTokenBase(0), DSStop { bytes32 public symbol; uint256 public decimals = 18; function DSToken(bytes32 symbol_) public { symbol = symbol_; }",1,"subgraph cluster_1098_DSToken {
label=""DSToken"";
""1098_burn"" [label=""burn""];
""1098_transferFrom"" [label=""transferFrom""];
""1098_mint"" [label=""mint""];
""1098_approve"" [label=""approve""];
""1098_move"" [label=""move""];
""1098_DSToken"" [label=""DSToken""];
""1098_push"" [label=""push""];
""1098_setName"" [label=""setName""];
""1098_pull"" [label=""pull""];
""1098_approve"" -> ""1098_approve"";
""1098_burn"" -> ""1098_auth"";
""1098_pull"" -> ""1098_transferFrom"";
""1098_move"" -> ""1098_transferFrom"";
""1098_mint"" -> ""1098_mint"";
""1098_push"" -> ""1098_transferFrom"";
""1098_burn"" -> ""1098_sub"";
""1098_setName"" -> ""1098_auth"";
""1098_burn"" -> ""1098_burn"";
""1098_mint"" -> ""1098_add"";
""1098_transferFrom"" -> ""1098_sub"";
""1098_transferFrom"" -> ""1098_stoppable"";
""1098_mint"" -> ""1098_auth"";
""1098_burn"" -> ""1098_stoppable"";
""1098_transferFrom"" -> ""1098_add"";
""1098_mint"" -> ""1098_stoppable"";
""1098_approve"" -> ""1098_stoppable"";
}
"
0x1a661224edc279a3844ecd8bd0cd715daafb9cf7.sol,lockEtherPay,"contract lockEtherPay is Ownable { using SafeMath for uint256; token token_reward; address public beneficiary; bool public isLocked = false; bool public isReleased = false; uint256 public start_time; uint256 public end_time; uint256 public fifty_two_weeks = 27820800; event TokenReleased(address beneficiary, uint256 token_amount); constructor() public{ token_reward = token(0xAa1ae5e57dc05981D83eC7FcA0b3c7ee2565B7D6); beneficiary = 0x7eB71add7482F3462BAA46328f58a235E33dbD0e; }",1,"subgraph cluster_309_lockEtherPay {
label=""lockEtherPay"";
""309_lockOver"" [label=""lockOver""];
""309_release"" [label=""release""];
""309_constructor"" [label=""constructor""];
""309_tokenBalance"" [label=""tokenBalance""];
""309_lock"" [label=""lock""];
""309_release"" -> ""309_onlyOwner"";
""309_lock"" -> ""309_tokenBalance"";
""309_lock"" -> ""309_onlyOwner"";
""309_release"" -> ""309_lockOver"";
""309_release"" -> ""309_tokenBalance"";
}
"
0xd1569ffd7ca4393311f66110e6f87184c4817113.sol,LudumAirdrop,"contract LudumAirdrop is Ownable { Token token; event TransferredToken(address indexed to, uint256 value); event FailedTransfer(address indexed to, uint256 value); modifier whenDropIsActive() { assert(isActive()); _; }",1,"subgraph cluster_281_LudumAirdrop {
label=""LudumAirdrop"";
""281_sendInternally"" [label=""sendInternally""];
""281_sendLudumToSingle"" [label=""sendLudumToSingle""];
""281_isActive"" [label=""isActive""];
""281_LudumAirdrop"" [label=""LudumAirdrop""];
""281_tokensAvailable"" [label=""tokensAvailable""];
""281_sendLudumToMany"" [label=""sendLudumToMany""];
""281_sendRemainsToOwner"" [label=""sendRemainsToOwner""];
""281_sendLudumToMany"" -> ""281_onlyOwner"";
""281_sendLudumToSingle"" -> ""281_onlyOwner"";
""281_sendInternally"" -> ""281_tokensAvailable"";
""281_sendRemainsToOwner"" -> ""281_onlyOwner"";
""281_sendLudumToMany"" -> ""281_whenDropIsActive"";
""281_sendRemainsToOwner"" -> ""281_tokensAvailable"";
""281_sendLudumToMany"" -> ""281_sendInternally"";
""281_sendLudumToSingle"" -> ""281_whenDropIsActive"";
""281_isActive"" -> ""281_tokensAvailable"";
""281_sendLudumToSingle"" -> ""281_sendInternally"";
}
"
0xb4a3fb248d39370c1f8081b73fa7098167c8142b.sol,DSStop,"contract DSStop is DSNote, DSAuth { bool public stopped; modifier stoppable { require(!stopped); _; }",1,"subgraph cluster_509_DSStop {
label=""DSStop"";
""509_stop"" [label=""stop""];
""509_start"" [label=""start""];
""509_start"" -> ""509_auth"";
""509_start"" -> ""509_note"";
""509_stop"" -> ""509_auth"";
""509_stop"" -> ""509_note"";
}
"
0x5c89736e9454200141b80c37eb28eaceca2ce8cb.sol,CherryToken,"contract CherryToken is ERC223, ERCAddressFrozenFund { using SafeMath for uint; string internal _name; string internal _symbol; uint8 internal _decimals; uint256 internal _totalSupply; address public fundsWallet; uint256 internal fundsWalletChanged; mapping (address => uint256) internal balances; mapping (address => mapping (address => uint256)) internal allowed; constructor() public { _symbol = ; _name = ; _decimals = 8; _totalSupply = 10000000000000000; balances[msg.sender] = _totalSupply; fundsWallet = msg.sender; owner = msg.sender; fundsWalletChanged = 0; }",1,"subgraph cluster_1340_CherryToken {
label=""CherryToken"";
""1340_transferFrom"" [label=""transferFrom""];
""1340_totalSupply"" [label=""totalSupply""];
""1340_decreaseApproval"" [label=""decreaseApproval""];
""1340_changeFundsWallet"" [label=""changeFundsWallet""];
""1340_fallback"" [label=""fallback""];
""1340_mintToken"" [label=""mintToken""];
""1340_burnToken"" [label=""burnToken""];
""1340_name"" [label=""name""];
""1340_approve"" [label=""approve""];
""1340_decimals"" [label=""decimals""];
""1340_allowance"" [label=""allowance""];
""1340_increaseApproval"" [label=""increaseApproval""];
""1340_isContract"" [label=""isContract""];
""1340_transferdata"" [label=""transferdata""];
""1340_transferMultiple"" [label=""transferMultiple""];
""1340_transfer"" [label=""transfer""];
""1340_symbol"" [label=""symbol""];
""1340_balanceOf"" [label=""balanceOf""];
""1340_constructor"" [label=""constructor""];
""1340_transfer"" -> ""1340_isContract"";
""1340_transferFrom"" -> ""1340_isContract"";
""1340_transferdata"" -> ""1340_isContract"";
""1340_transferMultiple"" -> ""1340_isContract"";
}
"
0xec841c878435ba4f28bf305a00c1483db0d96a20.sol,Events,contract Events { DBInterface public database; constructor(address _database) public{ database = DBInterface(_database); },1,"subgraph cluster_1000_Events {
label=""Events"";
""1000_escrow"" [label=""escrow""];
""1000_contractChange"" [label=""contractChange""];
""1000_consensus"" [label=""consensus""];
""1000_registration"" [label=""registration""];
""1000_operator"" [label=""operator""];
""1000_transaction"" [label=""transaction""];
""1000_asset"" [label=""asset""];
""1000_order"" [label=""order""];
""1000_message"" [label=""message""];
""1000_constructor"" [label=""constructor""];
""1000_exchange"" [label=""exchange""];
""1000_message"" -> ""1000_onlyApprovedContract"";
""1000_escrow"" -> ""1000_onlyApprovedContract"";
""1000_contractChange"" -> ""1000_onlyApprovedContract"";
""1000_exchange"" -> ""1000_onlyApprovedContract"";
""1000_registration"" -> ""1000_onlyApprovedContract"";
""1000_consensus"" -> ""1000_onlyApprovedContract"";
""1000_order"" -> ""1000_onlyApprovedContract"";
""1000_transaction"" -> ""1000_onlyApprovedContract"";
""1000_asset"" -> ""1000_onlyApprovedContract"";
""1000_operator"" -> ""1000_onlyApprovedContract"";
}
"
0x17a03553719001e05dc19a20f5e82ee76923a985.sol,Auction,"contract Auction is Pausable, AuctionBase { function withdrawBalance() external { address nftAddress = address(nonFungibleContract); require( msg.sender == owner || msg.sender == nftAddress ); nftAddress.transfer(address(this).balance); }",1,"subgraph cluster_641_AuctionBase {
label=""AuctionBase"";
""641__isOnAuction"" [label=""_isOnAuction""];
""641__currentPrice"" [label=""_currentPrice""];
""641__transfer"" [label=""_transfer""];
""641__addAuction"" [label=""_addAuction""];
""641__computeCut"" [label=""_computeCut""];
""641__escrow"" [label=""_escrow""];
""641_fallback"" [label=""fallback""];
""641__cancelAuction"" [label=""_cancelAuction""];
""641__owns"" [label=""_owns""];
""641__bid"" [label=""_bid""];
""641__removeAuction"" [label=""_removeAuction""];
""641__bid"" -> ""641__computeCut"";
""641__bid"" -> ""641__isOnAuction"";
""641__cancelAuction"" -> ""641__removeAuction"";
""641__bid"" -> ""641__currentPrice"";
""641__cancelAuction"" -> ""641__transfer"";
""641__bid"" -> ""641__removeAuction"";
}
"
0x4b958074cee6546e29cdb3c43494e7425b85f59c.sol,Crowdsale,"contract Crowdsale { using SafeMath for uint256; ERC20 public token; address public wallet; uint256 public rate; uint256 public weiRaised; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); function Crowdsale(uint256 _rate, address _wallet, ERC20 _token) public { require(_rate > 0); require(_wallet != address(0)); require(_token != address(0)); rate = _rate; wallet = _wallet; token = _token; }",1,"subgraph cluster_1189_TimedCrowdsale {
label=""TimedCrowdsale"";
""1189_hasClosed"" [label=""hasClosed""];
""1189_TimedCrowdsale"" [label=""TimedCrowdsale""];
""1189__preValidatePurchase"" [label=""_preValidatePurchase""];
""1189__preValidatePurchase"" -> ""1189_onlyWhileOpen"";
""1189__preValidatePurchase"" -> ""1189__preValidatePurchase"";
}
"
0xb4a3fb248d39370c1f8081b73fa7098167c8142b.sol,DSToken,"contract DSToken is DSTokenBase(0), DSStop { bytes32 public symbol; uint256 public decimals = 18; function DSToken(bytes32 symbol_) public { symbol = symbol_; }",1,"subgraph cluster_1098_DSToken {
label=""DSToken"";
""1098_burn"" [label=""burn""];
""1098_transferFrom"" [label=""transferFrom""];
""1098_mint"" [label=""mint""];
""1098_approve"" [label=""approve""];
""1098_move"" [label=""move""];
""1098_DSToken"" [label=""DSToken""];
""1098_push"" [label=""push""];
""1098_setName"" [label=""setName""];
""1098_pull"" [label=""pull""];
""1098_approve"" -> ""1098_approve"";
""1098_burn"" -> ""1098_auth"";
""1098_pull"" -> ""1098_transferFrom"";
""1098_move"" -> ""1098_transferFrom"";
""1098_mint"" -> ""1098_mint"";
""1098_push"" -> ""1098_transferFrom"";
""1098_burn"" -> ""1098_sub"";
""1098_setName"" -> ""1098_auth"";
""1098_burn"" -> ""1098_burn"";
""1098_mint"" -> ""1098_add"";
""1098_transferFrom"" -> ""1098_sub"";
""1098_transferFrom"" -> ""1098_stoppable"";
""1098_mint"" -> ""1098_auth"";
""1098_burn"" -> ""1098_stoppable"";
""1098_transferFrom"" -> ""1098_add"";
""1098_mint"" -> ""1098_stoppable"";
""1098_approve"" -> ""1098_stoppable"";
}
"
0x78a06472d78bfef33270654319b6373d51cf0575.sol,EasyMineTokenWallet,contract EasyMineTokenWallet { uint256 constant public VESTING_PERIOD = 180 days; uint256 constant public DAILY_FUNDS_RELEASE = 15000 * 10**18; address public owner; address public withdrawalAddress; Token public easyMineToken; uint256 public startTime; uint256 public totalWithdrawn; modifier isOwner() { require(msg.sender == owner); _; },1,"subgraph cluster_609_EasyMineTokenWallet {
label=""EasyMineTokenWallet"";
""609_EasyMineTokenWallet"" [label=""EasyMineTokenWallet""];
""609_maxPossibleWithdrawal"" [label=""maxPossibleWithdrawal""];
""609_setup"" [label=""setup""];
""609_withdraw"" [label=""withdraw""];
""609_withdraw"" -> ""609_maxPossibleWithdrawal"";
""609_withdraw"" -> ""609_isOwner"";
""609_setup"" -> ""609_isOwner"";
}
"
0x18f0cd26c06449d967ca6aef8b5f9d8ee9fd7992.sol,Exch,"contract Exch is SafeMath { address public admin; address public feeAccount; address public accountLevelsAddr; uint public feeMake; uint public feeTake; uint public feeRebate; mapping (address => mapping (address => uint)) public tokens; mapping (address => mapping (bytes32 => bool)) public orders; mapping (address => mapping (bytes32 => uint)) public orderFills; mapping (address => bool) public whiteListERC20; mapping (address => bool) public whiteListERC223; event Order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user); event Cancel(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s); event Trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give); event Deposit(address token, address user, uint amount, uint balance); event Withdraw(address token, address user, uint amount, uint balance); modifier onlyAdmin() { require(msg.sender==admin); _; }",1,"subgraph cluster_1411_Exch {
label=""Exch"";
""1411_withdrawToken"" [label=""withdrawToken""];
""1411_changeAccountLevelsAddr"" [label=""changeAccountLevelsAddr""];
""1411_setBlackListERC223"" [label=""setBlackListERC223""];
""1411_constructor"" [label=""constructor""];
""1411_amountFilled"" [label=""amountFilled""];
""1411_setWhiteListERC20"" [label=""setWhiteListERC20""];
""1411_changeFeeTake"" [label=""changeFeeTake""];
""1411_availableVolume"" [label=""availableVolume""];
""1411_trade"" [label=""trade""];
""1411_changeFeeMake"" [label=""changeFeeMake""];
""1411_depositToken"" [label=""depositToken""];
""1411_changeFeeRebate"" [label=""changeFeeRebate""];
""1411_tradeBalances"" [label=""tradeBalances""];
""1411_changeAdmin"" [label=""changeAdmin""];
""1411_withdraw"" [label=""withdraw""];
""1411_fallback"" [label=""fallback""];
""1411_balanceOf"" [label=""balanceOf""];
""1411_deposit"" [label=""deposit""];
""1411_cancelOrder"" [label=""cancelOrder""];
""1411_tokenFallback"" [label=""tokenFallback""];
""1411_setBlackListERC20"" [label=""setBlackListERC20""];
""1411_setWhiteListERC223"" [label=""setWhiteListERC223""];
""1411_changeFeeAccount"" [label=""changeFeeAccount""];
""1411_testTrade"" [label=""testTrade""];
""1411_order"" [label=""order""];
""1411_setWhiteListERC20"" -> ""1411_onlyAdmin"";
""1411_tokenFallback"" -> ""1411_safeAdd"";
""1411_depositToken"" -> ""1411_safeAdd"";
""1411_withdrawToken"" -> ""1411_safeSub"";
""1411_availableVolume"" -> ""1411_safeMul"";
""1411_availableVolume"" -> ""1411_safeSub"";
""1411_deposit"" -> ""1411_safeAdd"";
""1411_withdraw"" -> ""1411_safeSub"";
""1411_setBlackListERC20"" -> ""1411_onlyAdmin"";
""1411_setBlackListERC223"" -> ""1411_onlyAdmin"";
""1411_changeFeeAccount"" -> ""1411_onlyAdmin"";
""1411_trade"" -> ""1411_tradeBalances"";
""1411_changeFeeTake"" -> ""1411_onlyAdmin"";
""1411_trade"" -> ""1411_safeAdd"";
""1411_tradeBalances"" -> ""1411_safeSub"";
""1411_changeFeeRebate"" -> ""1411_onlyAdmin"";
""1411_testTrade"" -> ""1411_availableVolume"";
""1411_changeAccountLevelsAddr"" -> ""1411_onlyAdmin"";
""1411_changeAdmin"" -> ""1411_onlyAdmin"";
""1411_tradeBalances"" -> ""1411_safeAdd"";
""1411_tradeBalances"" -> ""1411_safeMul"";
""1411_setWhiteListERC223"" -> ""1411_onlyAdmin"";
""1411_changeFeeMake"" -> ""1411_onlyAdmin"";
}
"
0x750c1d91864171d7e1715a6b53ee28c72b8faa09.sol,EthicHubUser,"contract EthicHubUser is Ownable, EthicHubBase { event UserStatusChanged(address target, string profile, bool isRegistered); constructor(address _storageAddress) EthicHubBase(_storageAddress) public { version = 3; }",1,"subgraph cluster_660_EthicHubUser {
label=""EthicHubUser"";
""660_deleteUserStatus"" [label=""deleteUserStatus""];
""660_registerPaymentGateway"" [label=""registerPaymentGateway""];
""660_registerLocalNode"" [label=""registerLocalNode""];
""660_unregisterLocalNode"" [label=""unregisterLocalNode""];
""660_registerRepresentative"" [label=""registerRepresentative""];
""660_constructor"" [label=""constructor""];
""660_unregisterPaymentGateway"" [label=""unregisterPaymentGateway""];
""660_changeUserStatus"" [label=""changeUserStatus""];
""660_unregisterCommunity"" [label=""unregisterCommunity""];
""660_unregisterRepresentative"" [label=""unregisterRepresentative""];
""660_unregisterInvestor"" [label=""unregisterInvestor""];
""660_registerInvestor"" [label=""registerInvestor""];
""660_viewRegistrationStatus"" [label=""viewRegistrationStatus""];
""660_registerCommunity"" [label=""registerCommunity""];
""660_unregisterCommunity"" -> ""660_onlyOwner"";
""660_registerLocalNode"" -> ""660_changeUserStatus"";
""660_constructor"" -> ""660_constructor"";
""660_registerInvestor"" -> ""660_onlyOwner"";
""660_unregisterInvestor"" -> ""660_deleteUserStatus"";
""660_unregisterLocalNode"" -> ""660_onlyOwner"";
""660_unregisterInvestor"" -> ""660_onlyOwner"";
""660_unregisterRepresentative"" -> ""660_onlyOwner"";
""660_registerCommunity"" -> ""660_changeUserStatus"";
""660_registerLocalNode"" -> ""660_onlyOwner"";
""660_unregisterLocalNode"" -> ""660_deleteUserStatus"";
""660_registerCommunity"" -> ""660_onlyOwner"";
""660_unregisterPaymentGateway"" -> ""660_onlyOwner"";
""660_registerRepresentative"" -> ""660_onlyOwner"";
""660_unregisterPaymentGateway"" -> ""660_deleteUserStatus"";
""660_unregisterCommunity"" -> ""660_deleteUserStatus"";
""660_unregisterRepresentative"" -> ""660_deleteUserStatus"";
""660_deleteUserStatus"" -> ""660_onlyOwner"";
""660_registerPaymentGateway"" -> ""660_changeUserStatus"";
""660_registerRepresentative"" -> ""660_changeUserStatus"";
""660_changeUserStatus"" -> ""660_onlyOwner"";
""660_registerPaymentGateway"" -> ""660_onlyOwner"";
""660_registerInvestor"" -> ""660_changeUserStatus"";
}
"
0xef86db910c71ffa3c80233bc9108dc51ad1e008a.sol,CommonWallet,"contract CommonWallet { mapping(address => mapping (address => uint256)) public tokenBalance; mapping(address => uint) etherBalance; address owner = msg.sender; function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) { uint256 z = _x + _y; assert(z >= _x); return z; }",1,"subgraph cluster_387_CommonWallet {
label=""CommonWallet"";
""387_sendTokenTo"" [label=""sendTokenTo""];
""387_wdEther"" [label=""wdEther""];
""387_safeAdd"" [label=""safeAdd""];
""387_wdToken"" [label=""wdToken""];
""387_sendEtherTo"" [label=""sendEtherTo""];
""387_depoEther"" [label=""depoEther""];
""387_getEtherBalance"" [label=""getEtherBalance""];
""387_safeSub"" [label=""safeSub""];
""387_depoToken"" [label=""depoToken""];
""387_getTokenBalance"" [label=""getTokenBalance""];
""387_sendEtherTo"" -> ""387_safeSub"";
""387_wdEther"" -> ""387_safeSub"";
""387_wdToken"" -> ""387_safeSub"";
""387_depoToken"" -> ""387_safeAdd"";
""387_sendTokenTo"" -> ""387_safeSub"";
}
"
0x70cdbd16575651e3b78fa869a51eb8e991e079bb.sol,PRVTSToken,contract PRVTSToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 555000000 * (10**2); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; function PRVTSToken () { owner = msg.sender; },1,"subgraph cluster_756_PRVTSToken {
label=""PRVTSToken"";
""756_transferFrom"" [label=""transferFrom""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_PRVTSToken"" [label=""PRVTSToken""];
""756_transfer"" [label=""transfer""];
""756_refundTokens"" [label=""refundTokens""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_createTokens"" [label=""createTokens""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_setOwner"" [label=""setOwner""];
""756_totalSupply"" [label=""totalSupply""];
""756_approve"" [label=""approve""];
""756_approve"" -> ""756_approve"";
""756_approve"" -> ""756_allowance"";
""756_transferFrom"" -> ""756_transferFrom"";
""756_createTokens"" -> ""756_safeAdd"";
""756_createTokens"" -> ""756_safeSub"";
""756_transfer"" -> ""756_transfer"";
}
"
0xc849a5fff9befa297d1c3a772bafac9f3c9004ec.sol,Bounty0xEscrow,"contract Bounty0xEscrow is Ownable, ERC223ReceivingContract, Pausable { using SafeMath for uint256; mapping (address => mapping (address => uint)) public tokens; event Deposit(address indexed token, address indexed user, uint amount, uint balance); event Distribution(address indexed token, address indexed host, address indexed hunter, uint256 amount); constructor() public { }",1,"subgraph cluster_1018_Bounty0xEscrow {
label=""Bounty0xEscrow"";
""1018_distributeTokenToAddressesAndAmountsWithoutHost"" [label=""distributeTokenToAddressesAndAmountsWithoutHost""];
""1018_approveToPullOutTokens"" [label=""approveToPullOutTokens""];
""1018_distributeTokenToAddressesAndAmounts"" [label=""distributeTokenToAddressesAndAmounts""];
""1018_distributeTokenToAddress"" [label=""distributeTokenToAddress""];
""1018_constructor"" [label=""constructor""];
""1018_tokenFallback"" [label=""tokenFallback""];
""1018_distributeWithTransferFrom"" [label=""distributeWithTransferFrom""];
""1018_depositToken"" [label=""depositToken""];
""1018_depositEther"" [label=""depositEther""];
""1018_approveToPullOutTokens"" -> ""1018_onlyOwner"";
""1018_distributeTokenToAddressesAndAmountsWithoutHost"" -> ""1018_onlyOwner"";
""1018_distributeTokenToAddressesAndAmounts"" -> ""1018_onlyOwner"";
""1018_distributeWithTransferFrom"" -> ""1018_onlyOwner"";
""1018_tokenFallback"" -> ""1018_whenNotPaused"";
""1018_depositEther"" -> ""1018_whenNotPaused"";
""1018_depositToken"" -> ""1018_whenNotPaused"";
""1018_distributeTokenToAddress"" -> ""1018_onlyOwner"";
}
"
0x0002325fcaaac6ebf1254a626589147bde1a2394.sol,HorseyPilot,"contract HorseyPilot { using SafeMath for uint256; event NewProposal(uint8 methodId, uint parameter, address proposer); event ProposalPassed(uint8 methodId, uint parameter, address proposer); uint8 constant votingThreshold = 2; uint256 constant proposalLife = 7 days; uint256 constant proposalCooldown = 1 days; uint256 cooldownStart; address public jokerAddress; address public knightAddress; address public paladinAddress; address[3] public voters; uint8 constant public knightEquity = 40; uint8 constant public paladinEquity = 10; address public exchangeAddress; address public tokenAddress; mapping(address => uint) internal _cBalance; struct Proposal{ address proposer; uint256 timestamp; uint256 parameter; uint8 methodId; address[] yay; address[] nay; }",1,"subgraph cluster_3096_HorseyPilot {
label=""HorseyPilot"";
""3096_transferKnightOwnership"" [label=""transferKnightOwnership""];
""3096__updateDistribution"" [label=""_updateDistribution""];
""3096_voteOnProposal"" [label=""voteOnProposal""];
""3096_constructor"" [label=""constructor""];
""3096_withdrawCeo"" [label=""withdrawCeo""];
""3096_transferJokerOwnership"" [label=""transferJokerOwnership""];
""3096_transferPaladinOwnership"" [label=""transferPaladinOwnership""];
""3096_deployChildren"" [label=""deployChildren""];
""3096_syncFunds"" [label=""syncFunds""];
""3096_getNobleBalance"" [label=""getNobleBalance""];
""3096_makeProposal"" [label=""makeProposal""];
""3096__moveBalance"" [label=""_moveBalance""];
""3096__doProposal"" [label=""_doProposal""];
""3096_transferKnightOwnership"" -> ""3096_validAddress"";
""3096_makeProposal"" -> ""3096_proposalAvailable"";
""3096_makeProposal"" -> ""3096_cooledDown"";
""3096_transferPaladinOwnership"" -> ""3096_validAddress"";
""3096_voteOnProposal"" -> ""3096__doProposal"";
""3096_transferJokerOwnership"" -> ""3096_validAddress"";
""3096_withdrawCeo"" -> ""3096_onlyCLevelAccess"";
""3096_getNobleBalance"" -> ""3096_onlyCLevelAccess"";
""3096_voteOnProposal"" -> ""3096_onlyVoters"";
""3096_voteOnProposal"" -> ""3096_notVoted"";
""3096_makeProposal"" -> ""3096_onlyCLevelAccess"";
""3096_withdrawCeo"" -> ""3096_validAddress"";
""3096_transferPaladinOwnership"" -> ""3096__moveBalance"";
""3096_withdrawCeo"" -> ""3096__updateDistribution"";
""3096__moveBalance"" -> ""3096_validAddress"";
""3096_transferJokerOwnership"" -> ""3096__moveBalance"";
""3096_transferKnightOwnership"" -> ""3096__moveBalance"";
""3096_voteOnProposal"" -> ""3096_proposalPending"";
}
"
0x00676065a7854163c6a4d5f474496514d03e31c4.sol,CrystalDeposit,contract CrystalDeposit { using SafeMath for uint256; address public administrator; uint256 public HALF_TIME = 48 hours; uint256 public MIN_TIME_WITH_DEADLINE = 12 hours; uint256 public round = 0; CryptoEngineerInterface public Engineer; CryptoMiningWarInterface public MiningWar; address miningWarAddress; uint256 miningWarDeadline; uint256 constant private CRTSTAL_MINING_PERIOD = 86400; mapping(uint256 => Game) public games; mapping(address => Player) public players; mapping(address => bool) public miniGames; struct Game { uint256 round; uint256 crystals; uint256 prizePool; uint256 startTime; uint256 endTime; bool ended; },1,"subgraph cluster_1066_CrystalDeposit {
label=""CrystalDeposit"";
""1066_endRound"" [label=""endRound""];
""1066_upgrade"" [label=""upgrade""];
""1066_startRound"" [label=""startRound""];
""1066_getData"" [label=""getData""];
""1066_setupMiniGame"" [label=""setupMiniGame""];
""1066_calculateReward"" [label=""calculateReward""];
""1066_setMiningWarInterface"" [label=""setMiningWarInterface""];
""1066_getPlayerData"" [label=""getPlayerData""];
""1066_setEngineerInterface"" [label=""setEngineerInterface""];
""1066_constructor"" [label=""constructor""];
""1066_removeContractMiniGame"" [label=""removeContractMiniGame""];
""1066_startGame"" [label=""startGame""];
""1066_getCurrentGame"" [label=""getCurrentGame""];
""1066_updateReward"" [label=""updateReward""];
""1066_isDepositContract"" [label=""isDepositContract""];
""1066_share"" [label=""share""];
""1066_fallback"" [label=""fallback""];
""1066_getEngineerPrizePool"" [label=""getEngineerPrizePool""];
""1066_setContractsMiniGame"" [label=""setContractsMiniGame""];
""1066_withdrawReward"" [label=""withdrawReward""];
""1066_isContractMiniGame"" [label=""isContractMiniGame""];
""1066_getCurrentReward"" [label=""getCurrentReward""];
""1066_setContractsMiniGame"" -> ""1066_isAdministrator"";
""1066_withdrawReward"" -> ""1066_endRound"";
""1066_endRound"" -> ""1066_startRound"";
""1066_startGame"" -> ""1066_startRound"";
""1066_getData"" -> ""1066_getCurrentGame"";
""1066_withdrawReward"" -> ""1066_updateReward"";
""1066_upgrade"" -> ""1066_isAdministrator"";
""1066_setMiningWarInterface"" -> ""1066_isAdministrator"";
""1066_updateReward"" -> ""1066_calculateReward"";
""1066_share"" -> ""1066_updateReward"";
""1066_startRound"" -> ""1066_getEngineerPrizePool"";
""1066_setEngineerInterface"" -> ""1066_isAdministrator"";
""1066_getCurrentReward"" -> ""1066_calculateReward"";
""1066_share"" -> ""1066_endRound"";
""1066_share"" -> ""1066_disableContract"";
""1066_getData"" -> ""1066_getPlayerData"";
""1066_startGame"" -> ""1066_isAdministrator"";
""1066_constructor"" -> ""1066_setMiningWarInterface"";
""1066_getPlayerData"" -> ""1066_calculateReward"";
""1066_constructor"" -> ""1066_setEngineerInterface"";
""1066_removeContractMiniGame"" -> ""1066_isAdministrator"";
}
"
0x74ceda99c44da280f2fd8ea8b5dd43f8b66912a8.sol,DisbursementHandler,contract DisbursementHandler is Ownable { struct Disbursement { uint256 timestamp; uint256 tokens; },1,"subgraph cluster_962_DisbursementHandler {
label=""DisbursementHandler"";
""962_changeTimestamp"" [label=""changeTimestamp""];
""962_DisbursementHandler"" [label=""DisbursementHandler""];
""962_withdraw"" [label=""withdraw""];
""962_setupDisbursement"" [label=""setupDisbursement""];
""962_calcMaxWithdraw"" [label=""calcMaxWithdraw""];
""962_changeTimestamp"" -> ""962_onlyOwner"";
""962_setupDisbursement"" -> ""962_onlyOwner"";
""962_withdraw"" -> ""962_calcMaxWithdraw"";
}
"
0xec841c878435ba4f28bf305a00c1483db0d96a20.sol,Events,contract Events { DBInterface public database; constructor(address _database) public{ database = DBInterface(_database); },1,"subgraph cluster_1000_Events {
label=""Events"";
""1000_escrow"" [label=""escrow""];
""1000_contractChange"" [label=""contractChange""];
""1000_consensus"" [label=""consensus""];
""1000_registration"" [label=""registration""];
""1000_operator"" [label=""operator""];
""1000_transaction"" [label=""transaction""];
""1000_asset"" [label=""asset""];
""1000_order"" [label=""order""];
""1000_message"" [label=""message""];
""1000_constructor"" [label=""constructor""];
""1000_exchange"" [label=""exchange""];
""1000_message"" -> ""1000_onlyApprovedContract"";
""1000_escrow"" -> ""1000_onlyApprovedContract"";
""1000_contractChange"" -> ""1000_onlyApprovedContract"";
""1000_exchange"" -> ""1000_onlyApprovedContract"";
""1000_registration"" -> ""1000_onlyApprovedContract"";
""1000_consensus"" -> ""1000_onlyApprovedContract"";
""1000_order"" -> ""1000_onlyApprovedContract"";
""1000_transaction"" -> ""1000_onlyApprovedContract"";
""1000_asset"" -> ""1000_onlyApprovedContract"";
""1000_operator"" -> ""1000_onlyApprovedContract"";
}
"
0x27e1d539cb59518bf14e4525b1c3b4721aaa9080.sol,FourCrowdsale,"contract FourCrowdsale is TokenCappedCrowdsale, WhitelistCrowdsale, FinalizableCrowdsale { event RateChanged(uint256 newRate, string name); uint256 private constant E18 = 10**18; uint256 private TOKEN_SALE_CAP = 152000000 * E18; uint256 public constant TEAM_TOKENS = 50000000 * E18; address public constant TEAM_ADDRESS = 0x3EC2fC20c04656F4B0AA7372258A36FAfB1EF427; uint256 public constant ADVISORS_AND_CONTRIBUTORS_TOKENS = 39000000 * E18; address public constant ADVISORS_AND_CONTRIBUTORS_ADDRESS = 0x90adab6891514DC24411B9Adf2e11C0eD7739999; address public constant UNSOLD_ADDRESS = 0x4eC155995211C8639375Ae3106187bff3FF5DB46; uint256 public bonus; function FourCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, uint256 _bonus, address _wallet, address _token) TokenCappedCrowdsale(TOKEN_SALE_CAP) Crowdsale(_startTime, _endTime, _rate, _wallet, _token) public { bonus = _bonus; }",1,"subgraph cluster_2547_FourCrowdsale {
label=""FourCrowdsale"";
""2547_finalization"" [label=""finalization""];
""2547_processPresaleOrEarlyContributors"" [label=""processPresaleOrEarlyContributors""];
""2547_FourCrowdsale"" [label=""FourCrowdsale""];
""2547_changeStartAndEndTime"" [label=""changeStartAndEndTime""];
""2547_setRate"" [label=""setRate""];
""2547_releaseTokenOwnership"" [label=""releaseTokenOwnership""];
""2547_recoverERC20Tokens"" [label=""recoverERC20Tokens""];
""2547_setCrowdsaleWallet"" [label=""setCrowdsaleWallet""];
""2547_changeEndTime"" [label=""changeEndTime""];
""2547_getTokenAmount"" [label=""getTokenAmount""];
""2547_setBonus"" [label=""setBonus""];
""2547_setRate"" -> ""2547_onlyOwner"";
""2547_FourCrowdsale"" -> ""2547_TokenCappedCrowdsale"";
""2547_setCrowdsaleWallet"" -> ""2547_onlyOwner"";
""2547_recoverERC20Tokens"" -> ""2547_onlyOwner"";
""2547_processPresaleOrEarlyContributors"" -> ""2547_onlyOwner"";
""2547_changeEndTime"" -> ""2547_onlyOwner"";
""2547_setBonus"" -> ""2547_onlyOwner"";
""2547_changeStartAndEndTime"" -> ""2547_onlyOwner"";
""2547_FourCrowdsale"" -> ""2547_Crowdsale"";
""2547_releaseTokenOwnership"" -> ""2547_onlyOwner"";
""2547_finalization"" -> ""2547_finalization"";
}
"
0xf244176246168f24e3187f7288edbca29267739b.sol,Havven,"contract Havven is ExternStateProxyToken, SelfDestructible { mapping(address => uint) public currentBalanceSum; mapping(address => uint) public lastAverageBalance; mapping(address => uint) public penultimateAverageBalance; mapping(address => uint) public lastTransferTimestamp; uint public feePeriodStartTime = 3; uint public lastFeePeriodStartTime = 2; uint public penultimateFeePeriodStartTime = 1; uint public targetFeePeriodDurationSeconds = 4 weeks; uint constant MIN_FEE_PERIOD_DURATION_SECONDS = 1 days; uint constant MAX_FEE_PERIOD_DURATION_SECONDS = 26 weeks; uint public lastFeesCollected; mapping(address => bool) public hasWithdrawnLastPeriodFees; EtherNomin public nomin; HavvenEscrow public escrow; function Havven(TokenState initialState, address _owner) ExternStateProxyToken(, , 1e8 * UNIT, address(this), initialState, _owner) SelfDestructible(_owner, _owner) public { lastTransferTimestamp[this] = now; feePeriodStartTime = now; lastFeePeriodStartTime = now - targetFeePeriodDurationSeconds; penultimateFeePeriodStartTime = now - 2*targetFeePeriodDurationSeconds; }",1,"subgraph cluster_4834_Havven {
label=""Havven"";
""4834_totalSupply"" [label=""totalSupply""];
""4834_endow"" [label=""endow""];
""4834_setEscrow"" [label=""setEscrow""];
""4834_rolloverFeePeriod"" [label=""rolloverFeePeriod""];
""4834_setTargetFeePeriodDuration"" [label=""setTargetFeePeriodDuration""];
""4834_recomputeLastAverageBalance"" [label=""recomputeLastAverageBalance""];
""4834_adjustFeeEntitlement"" [label=""adjustFeeEntitlement""];
""4834_emitTransferEvents"" [label=""emitTransferEvents""];
""4834_targetFeePeriodDurationSeconds"" [label=""targetFeePeriodDurationSeconds""];
""4834_rolloverFee"" [label=""rolloverFee""];
""4834__recomputeAccountLastAverageBalance"" [label=""_recomputeAccountLastAverageBalance""];
""4834_transfer"" [label=""transfer""];
""4834_feePeriodStartTime"" [label=""feePeriodStartTime""];
""4834_recomputeAccountLastAverageBalance"" [label=""recomputeAccountLastAverageBalance""];
""4834_transferFrom"" [label=""transferFrom""];
""4834_Havven"" [label=""Havven""];
""4834_checkFeePeriodRollover"" [label=""checkFeePeriodRollover""];
""4834_withdrawFeeEntitlement"" [label=""withdrawFeeEntitlement""];
""4834_penultimateAverageBalance"" [label=""penultimateAverageBalance""];
""4834_setNomin"" [label=""setNomin""];
""4834_lastAverageBalance"" [label=""lastAverageBalance""];
""4834__transfer"" [label=""_transfer""];
""4834_withdrawFeeEntitlement"" -> ""4834_safeAdd"";
""4834_withdrawFeeEntitlement"" -> ""4834_safeMul_dec"";
""4834_withdrawFeeEntitlement"" -> ""4834_preCheckFeePeriodRollover"";
""4834__recomputeAccountLastAverageBalance"" -> ""4834_preCheckFeePeriodRollover"";
""4834__transfer"" -> ""4834_adjustFeeEntitlement"";
""4834_setTargetFeePeriodDuration"" -> ""4834_postCheckFeePeriodRollover"";
""4834_transferFrom"" -> ""4834__transferFrom_byProxy"";
""4834_transfer"" -> ""4834__transfer"";
""4834_withdrawFeeEntitlement"" -> ""4834_optionalProxy"";
""4834_recomputeLastAverageBalance"" -> ""4834__recomputeAccountLastAverageBalance"";
""4834_rolloverFee"" -> ""4834_safeMul"";
""4834_transferFrom"" -> ""4834_preCheckFeePeriodRollover"";
""4834_rolloverFeePeriod"" -> ""4834_checkFeePeriodRollover"";
""4834_transferFrom"" -> ""4834_optionalProxy"";
""4834_recomputeAccountLastAverageBalance"" -> ""4834__recomputeAccountLastAverageBalance"";
""4834_Havven"" -> ""4834_ExternStateProxyToken"";
""4834__recomputeAccountLastAverageBalance"" -> ""4834_adjustFeeEntitlement"";
""4834_emitTransferEvents"" -> ""4834_onlyOwner"";
""4834_withdrawFeeEntitlement"" -> ""4834_rolloverFee"";
""4834__transfer"" -> ""4834__transfer_byProxy"";
""4834_transferFrom"" -> ""4834_adjustFeeEntitlement"";
""4834_adjustFeeEntitlement"" -> ""4834_rolloverFee"";
""4834_rolloverFee"" -> ""4834_safeAdd"";
""4834_setEscrow"" -> ""4834_optionalProxy_onlyOwner"";
""4834_adjustFeeEntitlement"" -> ""4834_safeAdd"";
""4834_setNomin"" -> ""4834_optionalProxy_onlyOwner"";
""4834_recomputeLastAverageBalance"" -> ""4834_optionalProxy"";
""4834_Havven"" -> ""4834_SelfDestructible"";
""4834_withdrawFeeEntitlement"" -> ""4834_safeDiv_dec"";
""4834_endow"" -> ""4834__transfer"";
""4834_adjustFeeEntitlement"" -> ""4834_safeMul"";
""4834_transfer"" -> ""4834_optionalProxy"";
""4834_rolloverFee"" -> ""4834_safeDiv"";
""4834__transfer"" -> ""4834_preCheckFeePeriodRollover"";
""4834_endow"" -> ""4834_optionalProxy_onlyOwner"";
""4834_setTargetFeePeriodDuration"" -> ""4834_optionalProxy_onlyOwner"";
}
"
0x6bd33d49d48f76abcd96652e5347e398aa3fda96.sol,BancorBuyer,contract BancorBuyer { mapping (address => uint) public balances; uint public reward; bool public bought_tokens; uint public time_bought; address sale = 0xBbc79794599b19274850492394004087cBf89710; address token = 0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C; address developer = 0x4e6A1c57CdBfd97e8efe831f8f4418b1F2A09e6e; function withdraw(){ uint amount = balances[msg.sender]; balances[msg.sender] = 0; msg.sender.transfer(amount); },1,"subgraph cluster_189_BancorBuyer {
label=""BancorBuyer"";
""189_withdraw"" [label=""withdraw""];
""189_buy"" [label=""buy""];
""189_default_helper"" [label=""default_helper""];
""189_fallback"" [label=""fallback""];
""189_add_reward"" [label=""add_reward""];
""189_fallback"" -> ""189_default_helper"";
}
"
0x0ee14f47320604d894fffffc8639772382937bee.sol,OpportyWhiteListHold,contract OpportyWhiteListHold is Ownable { using SafeMath for uint256; OpportyToken public OppToken; struct Holder { bool isActive; uint tokens; uint8 holdPeriod; uint holdPeriodTimestamp; bool withdrawed; },1,"subgraph cluster_1043_OpportyWhiteListHold {
label=""OpportyWhiteListHold"";
""1043_setToken"" [label=""setToken""];
""1043_unlockTokens"" [label=""unlockTokens""];
""1043_addHolder"" [label=""addHolder""];
""1043_getBalance"" [label=""getBalance""];
""1043_removeAssetsOwner"" [label=""removeAssetsOwner""];
""1043_getAssetsOwners"" [label=""getAssetsOwners""];
""1043_returnTokens"" [label=""returnTokens""];
""1043_changeHold"" [label=""changeHold""];
""1043_addAssetsOwner"" [label=""addAssetsOwner""];
""1043_getBalanceContract"" [label=""getBalanceContract""];
""1043_setToken"" -> ""1043_onlyOwner"";
""1043_returnTokens"" -> ""1043_onlyOwner"";
""1043_returnTokens"" -> ""1043_getBalance"";
""1043_changeHold"" -> ""1043_onlyAssetsOwners"";
""1043_getAssetsOwners"" -> ""1043_onlyOwner"";
""1043_addHolder"" -> ""1043_onlyAssetsOwners"";
""1043_removeAssetsOwner"" -> ""1043_onlyOwner"";
""1043_addAssetsOwner"" -> ""1043_onlyOwner"";
}
"
0x6b4df2aa3d64d8dc06120ef4391513e4170af4a7.sol,GeneralTransferManager,contract GeneralTransferManager is ITransferManager { using SafeMath for uint256; address public issuanceAddress = address(0); address public signingAddress = address(0); bytes32 public constant WHITELIST = ; bytes32 public constant FLAGS = ; struct TimeRestriction { uint256 fromTime; uint256 toTime; uint256 expiryTime; bool canBuyFromSTO; },1,"subgraph cluster_1917_GeneralTransferManager {
label=""GeneralTransferManager"";
""1917_changeAllowAllWhitelistTransfers"" [label=""changeAllowAllWhitelistTransfers""];
""1917_changeAllowAllTransfers"" [label=""changeAllowAllTransfers""];
""1917_isSTOAttached"" [label=""isSTOAttached""];
""1917_changeSigningAddress"" [label=""changeSigningAddress""];
""1917_checkSig"" [label=""checkSig""];
""1917_changeAllowAllWhitelistIssuances"" [label=""changeAllowAllWhitelistIssuances""];
""1917_getPermissions"" [label=""getPermissions""];
""1917_constructor"" [label=""constructor""];
""1917_onWhitelist"" [label=""onWhitelist""];
""1917_changeIssuanceAddress"" [label=""changeIssuanceAddress""];
""1917_modifyWhitelist"" [label=""modifyWhitelist""];
""1917_verifyTransfer"" [label=""verifyTransfer""];
""1917_modifyWhitelistMulti"" [label=""modifyWhitelistMulti""];
""1917_modifyWhitelistSigned"" [label=""modifyWhitelistSigned""];
""1917_changeAllowAllBurnTransfers"" [label=""changeAllowAllBurnTransfers""];
""1917_getInitFunction"" [label=""getInitFunction""];
""1917_changeSigningAddress"" -> ""1917_withPerm"";
""1917_verifyTransfer"" -> ""1917_isSTOAttached"";
""1917_changeAllowAllWhitelistTransfers"" -> ""1917_withPerm"";
""1917_changeAllowAllWhitelistIssuances"" -> ""1917_withPerm"";
""1917_modifyWhitelistMulti"" -> ""1917_withPerm"";
""1917_modifyWhitelistSigned"" -> ""1917_checkSig"";
""1917_constructor"" -> ""1917_constructor"";
""1917_changeIssuanceAddress"" -> ""1917_withPerm"";
""1917_modifyWhitelist"" -> ""1917_withPerm"";
""1917_modifyWhitelistMulti"" -> ""1917_modifyWhitelist"";
""1917_verifyTransfer"" -> ""1917_onWhitelist"";
""1917_changeAllowAllTransfers"" -> ""1917_withPerm"";
""1917_changeAllowAllBurnTransfers"" -> ""1917_withPerm"";
}
"
0x39e8082b00c9f19ebf553e40feb7cf8459acc693.sol,DSToken,"contract DSToken is DSTokenBase(0), DSStop { string public symbol = ; string public name = ; uint256 public decimals = 18; function DSToken( string symbol_, string name_ ) public { symbol = symbol_; name = name_; }",1,"subgraph cluster_1105_DSToken {
label=""DSToken"";
""1105_move"" [label=""move""];
""1105_owner"" [label=""owner""];
""1105_push"" [label=""push""];
""1105_DSToken"" [label=""DSToken""];
""1105_transferFrom"" [label=""transferFrom""];
""1105_approve"" [label=""approve""];
""1105_setName"" [label=""setName""];
""1105_burn"" [label=""burn""];
""1105_pull"" [label=""pull""];
""1105_mint"" [label=""mint""];
""1105_mint"" -> ""1105_add"";
""1105_transferFrom"" -> ""1105_stoppable"";
""1105_mint"" -> ""1105_auth"";
""1105_burn"" -> ""1105_sub"";
""1105_setName"" -> ""1105_auth"";
""1105_push"" -> ""1105_transferFrom"";
""1105_move"" -> ""1105_transferFrom"";
""1105_burn"" -> ""1105_auth"";
""1105_mint"" -> ""1105_mint"";
""1105_burn"" -> ""1105_burn"";
""1105_approve"" -> ""1105_stoppable"";
""1105_burn"" -> ""1105_stoppable"";
""1105_transferFrom"" -> ""1105_add"";
""1105_pull"" -> ""1105_transferFrom"";
""1105_mint"" -> ""1105_stoppable"";
""1105_approve"" -> ""1105_approve"";
""1105_transferFrom"" -> ""1105_sub"";
}
"
0x17a03553719001e05dc19a20f5e82ee76923a985.sol,Auction,"contract Auction is Pausable, AuctionBase { function withdrawBalance() external { address nftAddress = address(nonFungibleContract); require( msg.sender == owner || msg.sender == nftAddress ); nftAddress.transfer(address(this).balance); }",1,"subgraph cluster_641_AuctionBase {
label=""AuctionBase"";
""641__isOnAuction"" [label=""_isOnAuction""];
""641__currentPrice"" [label=""_currentPrice""];
""641__transfer"" [label=""_transfer""];
""641__addAuction"" [label=""_addAuction""];
""641__computeCut"" [label=""_computeCut""];
""641__escrow"" [label=""_escrow""];
""641_fallback"" [label=""fallback""];
""641__cancelAuction"" [label=""_cancelAuction""];
""641__owns"" [label=""_owns""];
""641__bid"" [label=""_bid""];
""641__removeAuction"" [label=""_removeAuction""];
""641__bid"" -> ""641__computeCut"";
""641__bid"" -> ""641__isOnAuction"";
""641__cancelAuction"" -> ""641__removeAuction"";
""641__bid"" -> ""641__currentPrice"";
""641__cancelAuction"" -> ""641__transfer"";
""641__bid"" -> ""641__removeAuction"";
}
"
0x797d713d8d7a2815ccf3dcf9719e3e9f1712c370.sol,Trustee,contract Trustee is Ownable { using SaferMath for uint256; StoxSmartToken public stox; struct Grant { uint256 value; uint256 start; uint256 cliff; uint256 end; uint256 transferred; bool revokable; },1,"subgraph cluster_1489_Trustee {
label=""Trustee"";
""1489_vestedTokens"" [label=""vestedTokens""];
""1489_revoke"" [label=""revoke""];
""1489_unlockVestedTokens"" [label=""unlockVestedTokens""];
""1489_grant"" [label=""grant""];
""1489_Trustee"" [label=""Trustee""];
""1489_calculateVestedTokens"" [label=""calculateVestedTokens""];
""1489_unlockVestedTokens"" -> ""1489_calculateVestedTokens"";
""1489_vestedTokens"" -> ""1489_calculateVestedTokens"";
""1489_grant"" -> ""1489_onlyOwner"";
""1489_revoke"" -> ""1489_onlyOwner"";
}
"
0x18f0cd26c06449d967ca6aef8b5f9d8ee9fd7992.sol,Exch,"contract Exch is SafeMath { address public admin; address public feeAccount; address public accountLevelsAddr; uint public feeMake; uint public feeTake; uint public feeRebate; mapping (address => mapping (address => uint)) public tokens; mapping (address => mapping (bytes32 => bool)) public orders; mapping (address => mapping (bytes32 => uint)) public orderFills; mapping (address => bool) public whiteListERC20; mapping (address => bool) public whiteListERC223; event Order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user); event Cancel(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s); event Trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give); event Deposit(address token, address user, uint amount, uint balance); event Withdraw(address token, address user, uint amount, uint balance); modifier onlyAdmin() { require(msg.sender==admin); _; }",1,"subgraph cluster_1411_Exch {
label=""Exch"";
""1411_withdrawToken"" [label=""withdrawToken""];
""1411_changeAccountLevelsAddr"" [label=""changeAccountLevelsAddr""];
""1411_setBlackListERC223"" [label=""setBlackListERC223""];
""1411_constructor"" [label=""constructor""];
""1411_amountFilled"" [label=""amountFilled""];
""1411_setWhiteListERC20"" [label=""setWhiteListERC20""];
""1411_changeFeeTake"" [label=""changeFeeTake""];
""1411_availableVolume"" [label=""availableVolume""];
""1411_trade"" [label=""trade""];
""1411_changeFeeMake"" [label=""changeFeeMake""];
""1411_depositToken"" [label=""depositToken""];
""1411_changeFeeRebate"" [label=""changeFeeRebate""];
""1411_tradeBalances"" [label=""tradeBalances""];
""1411_changeAdmin"" [label=""changeAdmin""];
""1411_withdraw"" [label=""withdraw""];
""1411_fallback"" [label=""fallback""];
""1411_balanceOf"" [label=""balanceOf""];
""1411_deposit"" [label=""deposit""];
""1411_cancelOrder"" [label=""cancelOrder""];
""1411_tokenFallback"" [label=""tokenFallback""];
""1411_setBlackListERC20"" [label=""setBlackListERC20""];
""1411_setWhiteListERC223"" [label=""setWhiteListERC223""];
""1411_changeFeeAccount"" [label=""changeFeeAccount""];
""1411_testTrade"" [label=""testTrade""];
""1411_order"" [label=""order""];
""1411_setWhiteListERC20"" -> ""1411_onlyAdmin"";
""1411_tokenFallback"" -> ""1411_safeAdd"";
""1411_depositToken"" -> ""1411_safeAdd"";
""1411_withdrawToken"" -> ""1411_safeSub"";
""1411_availableVolume"" -> ""1411_safeMul"";
""1411_availableVolume"" -> ""1411_safeSub"";
""1411_deposit"" -> ""1411_safeAdd"";
""1411_withdraw"" -> ""1411_safeSub"";
""1411_setBlackListERC20"" -> ""1411_onlyAdmin"";
""1411_setBlackListERC223"" -> ""1411_onlyAdmin"";
""1411_changeFeeAccount"" -> ""1411_onlyAdmin"";
""1411_trade"" -> ""1411_tradeBalances"";
""1411_changeFeeTake"" -> ""1411_onlyAdmin"";
""1411_trade"" -> ""1411_safeAdd"";
""1411_tradeBalances"" -> ""1411_safeSub"";
""1411_changeFeeRebate"" -> ""1411_onlyAdmin"";
""1411_testTrade"" -> ""1411_availableVolume"";
""1411_changeAccountLevelsAddr"" -> ""1411_onlyAdmin"";
""1411_changeAdmin"" -> ""1411_onlyAdmin"";
""1411_tradeBalances"" -> ""1411_safeAdd"";
""1411_tradeBalances"" -> ""1411_safeMul"";
""1411_setWhiteListERC223"" -> ""1411_onlyAdmin"";
""1411_changeFeeMake"" -> ""1411_onlyAdmin"";
}
"
0x211f01e59b425253c0a0e9a7bf612605b42ce82c.sol,Kleros,"contract Kleros is Arbitrator, ApproveAndCallFallBack { Pinakion public pinakion; uint public constant NON_PAYABLE_AMOUNT = (2**256 - 2) / 2; RNG public rng; uint public arbitrationFeePerJuror = 0.05 ether; uint16 public defaultNumberJuror = 3; uint public minActivatedToken = 0.1 * 1e18; uint[5] public timePerPeriod; uint public alpha = 2000; uint constant ALPHA_DIVISOR = 1e4; uint public maxAppeals = 5; address public governor; uint public session = 1; uint public lastPeriodChange; uint public segmentSize; uint public rnBlock; uint public randomNumber; enum Period { Activation, Draw, Vote, Appeal, Execution }",1,"subgraph cluster_4054_Kleros {
label=""Kleros"";
""4054_currentRuling"" [label=""currentRuling""];
""4054_isDrawn"" [label=""isDrawn""];
""4054_penalizeInactiveJuror"" [label=""penalizeInactiveJuror""];
""4054_setArbitrationFeePerJuror"" [label=""setArbitrationFeePerJuror""];
""4054_validDraws"" [label=""validDraws""];
""4054_createDispute"" [label=""createDispute""];
""4054_getLastSessionVote"" [label=""getLastSessionVote""];
""4054_appealCost"" [label=""appealCost""];
""4054_voteRuling"" [label=""voteRuling""];
""4054_setMaxAppeals"" [label=""setMaxAppeals""];
""4054_getVoteRuling"" [label=""getVoteRuling""];
""4054_getVoteCount"" [label=""getVoteCount""];
""4054_setAlpha"" [label=""setAlpha""];
""4054_disputeStatus"" [label=""disputeStatus""];
""4054_getStakePerDraw"" [label=""getStakePerDraw""];
""4054_withdraw"" [label=""withdraw""];
""4054_amountJurors"" [label=""amountJurors""];
""4054_setDefaultNumberJuror"" [label=""setDefaultNumberJuror""];
""4054_appeal"" [label=""appeal""];
""4054_setMinActivatedToken"" [label=""setMinActivatedToken""];
""4054_setGovernor"" [label=""setGovernor""];
""4054_activateTokens"" [label=""activateTokens""];
""4054_constructor"" [label=""constructor""];
""4054_getVoteAccount"" [label=""getVoteAccount""];
""4054_extraDataToNbJurors"" [label=""extraDataToNbJurors""];
""4054_setTimePerPeriod"" [label=""setTimePerPeriod""];
""4054_setRng"" [label=""setRng""];
""4054_multipleShotTokenRepartition"" [label=""multipleShotTokenRepartition""];
""4054_oneShotTokenRepartition"" [label=""oneShotTokenRepartition""];
""4054_executeOrder"" [label=""executeOrder""];
""4054_getWinningCount"" [label=""getWinningCount""];
""4054_passPeriod"" [label=""passPeriod""];
""4054_executeRuling"" [label=""executeRuling""];
""4054_arbitrationCost"" [label=""arbitrationCost""];
""4054_getWinningChoice"" [label=""getWinningChoice""];
""4054_receiveApproval"" [label=""receiveApproval""];
""4054_setGovernor"" -> ""4054_onlyGovernor"";
""4054_voteRuling"" -> ""4054_onlyDuring"";
""4054_multipleShotTokenRepartition"" -> ""4054_onlyDuring"";
""4054_oneShotTokenRepartition"" -> ""4054_onlyDuring"";
""4054_setMaxAppeals"" -> ""4054_onlyGovernor"";
""4054_createDispute"" -> ""4054_extraDataToNbJurors"";
""4054_receiveApproval"" -> ""4054_onlyBy"";
""4054_appealCost"" -> ""4054_amountJurors"";
""4054_voteRuling"" -> ""4054_getStakePerDraw"";
""4054_appeal"" -> ""4054_appeal"";
""4054_voteRuling"" -> ""4054_validDraws"";
""4054_setRng"" -> ""4054_onlyGovernor"";
""4054_validDraws"" -> ""4054_amountJurors"";
""4054_multipleShotTokenRepartition"" -> ""4054_getStakePerDraw"";
""4054_appeal"" -> ""4054_onlyDuring"";
""4054_executeOrder"" -> ""4054_onlyGovernor"";
""4054_penalizeInactiveJuror"" -> ""4054_validDraws"";
""4054_setTimePerPeriod"" -> ""4054_onlyGovernor"";
""4054_setAlpha"" -> ""4054_onlyGovernor"";
""4054_createDispute"" -> ""4054_arbitrationCost"";
""4054_setDefaultNumberJuror"" -> ""4054_onlyGovernor"";
""4054_appeal"" -> ""4054_appealCost"";
""4054_setArbitrationFeePerJuror"" -> ""4054_onlyGovernor"";
""4054_oneShotTokenRepartition"" -> ""4054_getStakePerDraw"";
""4054_setMinActivatedToken"" -> ""4054_onlyGovernor"";
""4054_isDrawn"" -> ""4054_amountJurors"";
""4054_activateTokens"" -> ""4054_onlyDuring"";
""4054_arbitrationCost"" -> ""4054_extraDataToNbJurors"";
}
"
0x58b334f15d7c7e08287b4ae57d11f35e0c2ad497.sol,LockinManager,contract LockinManager { using SafeMath for uint256; struct Lock { uint256 amount; uint256 unlockDate; uint256 lockedFor; },1,"subgraph cluster_1738_LockinManager {
label=""LockinManager"";
""1738_lockIt"" [label=""lockIt""];
""1738_getLocksLockedFor"" [label=""getLocksLockedFor""];
""1738_getLock"" [label=""getLock""];
""1738_ifInAllowedLocks"" [label=""ifInAllowedLocks""];
""1738_getLocks"" [label=""getLocks""];
""1738_removeAllowedLock"" [label=""removeAllowedLock""];
""1738_setDefaultAllowedLock"" [label=""setDefaultAllowedLock""];
""1738_LockinManager"" [label=""LockinManager""];
""1738_lockForDays"" [label=""lockForDays""];
""1738_addValidContract"" [label=""addValidContract""];
""1738_removeValidContract"" [label=""removeValidContract""];
""1738_defaultLockin"" [label=""defaultLockin""];
""1738_getLocksAmount"" [label=""getLocksAmount""];
""1738_addAllowedLock"" [label=""addAllowedLock""];
""1738_getLocksUnlockDate"" [label=""getLocksUnlockDate""];
""1738_getLocksUnlockDate"" -> ""1738_validContractOnly"";
""1738_removeValidContract"" -> ""1738_adminOnly"";
""1738_setDefaultAllowedLock"" -> ""1738_adminOnly"";
""1738_getLocksAmount"" -> ""1738_validContractOnly"";
""1738_getLocksLockedFor"" -> ""1738_validContractOnly"";
""1738_getLocks"" -> ""1738_validContractOnly"";
""1738_removeAllowedLock"" -> ""1738_adminOnly"";
""1738_getLock"" -> ""1738_validContractOnly"";
""1738_addAllowedLock"" -> ""1738_adminOnly"";
""1738_defaultLockin"" -> ""1738_lockIt"";
""1738_lockForDays"" -> ""1738_ifInAllowedLocks"";
""1738_lockForDays"" -> ""1738_lockIt"";
""1738_addValidContract"" -> ""1738_adminOnly"";
""1738_defaultLockin"" -> ""1738_validContractOnly"";
}
"
0x4cd988afbad37289baaf53c13e98e2bd46aaea8c.sol,DSStop,"contract DSStop is DSAuth, DSNote { bool public stopped; modifier stoppable { assert (!stopped); _; }",1,"subgraph cluster_1208_DSStop {
label=""DSStop"";
""1208_start"" [label=""start""];
""1208_stop"" [label=""stop""];
""1208_start"" -> ""1208_auth"";
""1208_start"" -> ""1208_note"";
""1208_stop"" -> ""1208_auth"";
""1208_stop"" -> ""1208_note"";
}
"
0x6f8544edb3f513845135b0efa907f4b6b9c2c92e.sol,BW,contract BW { address public owner; BWService private bwService; BWData private bwData; bool public paused = false; modifier isOwner { if (msg.sender != owner) { revert(); },1,"subgraph cluster_2976_BW {
label=""BW"";
""2976_depositBattleValue"" [label=""depositBattleValue""];
""2976_fallback"" [label=""fallback""];
""2976_moveBlockValue"" [label=""moveBlockValue""];
""2976_setPaused"" [label=""setPaused""];
""2976_transferTokens"" [label=""transferTokens""];
""2976_withdrawValue"" [label=""withdrawValue""];
""2976_updateUser"" [label=""updateUser""];
""2976_claimTilesForExistingUser"" [label=""claimTilesForExistingUser""];
""2976_transferTileFromOwner"" [label=""transferTileFromOwner""];
""2976_attackTileForExistingUser"" [label=""attackTileForExistingUser""];
""2976_kill"" [label=""kill""];
""2976_censorUser"" [label=""censorUser""];
""2976_attackTileForNewUser"" [label=""attackTileForNewUser""];
""2976_withdrawBattleValue"" [label=""withdrawBattleValue""];
""2976_createNewUser"" [label=""createNewUser""];
""2976_fortifyClaims"" [label=""fortifyClaims""];
""2976_claimTilesForNewUser"" [label=""claimTilesForNewUser""];
""2976_constructor"" [label=""constructor""];
""2976_attackTileForNewUser"" -> ""2976_isNotContractCaller"";
""2976_fortifyClaims"" -> ""2976_isNotContractCaller"";
""2976_createNewUser"" -> ""2976_isOwner"";
""2976_updateUser"" -> ""2976_isNotPaused"";
""2976_setPaused"" -> ""2976_isOwner"";
""2976_kill"" -> ""2976_isOwner"";
""2976_claimTilesForExistingUser"" -> ""2976_isNotPaused"";
""2976_attackTileForExistingUser"" -> ""2976_isNotContractCaller"";
""2976_withdrawValue"" -> ""2976_isOwner"";
""2976_fortifyClaims"" -> ""2976_isNotPaused"";
""2976_censorUser"" -> ""2976_isOwner"";
""2976_claimTilesForExistingUser"" -> ""2976_isNotContractCaller"";
""2976_claimTilesForNewUser"" -> ""2976_isNotPaused"";
""2976_transferTileFromOwner"" -> ""2976_isOwner"";
""2976_updateUser"" -> ""2976_isNotContractCaller"";
""2976_claimTilesForNewUser"" -> ""2976_isNotContractCaller"";
""2976_moveBlockValue"" -> ""2976_isNotPaused"";
""2976_depositBattleValue"" -> ""2976_isOwner"";
""2976_transferTokens"" -> ""2976_isOwner"";
""2976_withdrawBattleValue"" -> ""2976_isNotContractCaller"";
""2976_attackTileForNewUser"" -> ""2976_isNotPaused"";
""2976_attackTileForExistingUser"" -> ""2976_isNotPaused"";
""2976_moveBlockValue"" -> ""2976_isNotContractCaller"";
}
"
0x3ac86159fad58c90aaea1c61974d69d4f8ce8e77.sol,Crowdsale,contract Crowdsale is Ownable { using SafeMath for uint256; SingleTokenCoin public token; WrapperOraclize private wrapper = WrapperOraclize(0xfC484c66daE464CC6055d7a4782Ec8761dc9842F); uint256 private angel_sale_start; uint256 private angel_sale_finish; uint256 private pre_sale_start; uint256 private pre_sale_finish; uint256 private public_sale_start; uint256 private public_sale_finish; bool private isAngel; bool private isPreSale; bool private isPublic; uint256 private angel_rate; uint256 private public_rate; uint256 private decimals; uint256 private totalETH; address public coreTeamAddr; address public itDevAddr; address public futDevAddr; address public commFoundAddr; address public socWarefareAddr; address public marketingAddr; address public unsoldAddr; address public collectAddr; bool public mintingFinished = false; mapping(address => uint256) private founding_buyers_token; mapping(address => uint256) private angel_buyers_eth; mapping(address => uint256) private angel_buyers_token; mapping(address => uint256) private pre_sale_buyers_eth; mapping(address => uint256) private pre_sale_buyers_token; mapping(address => uint256) private pe_buyers_token; mapping(address => uint256) private public_buyers_eth; mapping(address => uint256) private public_buyers_token; address[] private founding_investors; address[] private pre_sale_investors; address[] private angel_investors; address[] private pe_investors; address[] private public_investors; uint256 private soldTokens; uint256 private maxcup; uint256 private totalAmount; uint256 private foundingAmount; uint256 private angelAmount; uint256 private preSaleAmount; uint256 private PEInvestorAmount; uint256 private publicSaleAmount; uint256 private coreTeamAmount; uint256 private coreTeamAuto; uint256 private coreTeamManual; uint256 private itDevAmount; uint256 private futDevAmount; uint256 private commFoundAmount; uint256 private socWarefareAmount; uint256 private marketingAmount; uint256 private angel_sale_sold; uint256 private pre_sale_sold; uint256 private public_sale_sold; uint256 private founding_sold; uint256 private peInvestors_sold; uint256 private angel_sale_totalETH; uint256 private pre_sale_totalETH; uint256 private public_sale_totalETH; uint256 private firstPhaseAmount; uint256 private secondPhaseAmount; uint256 private thirdPhaseAmount; uint256 private fourPhaseAmount; uint256 private firstPhaseDiscount; uint256 private secondPhaseDiscount; uint256 private thirdPhaseDiscount; uint256 private fourPhaseDiscount; uint256 private currentPhase; bool private moveTokens; bool withdrowTokensComplete = false; function Crowdsale(address token_addr) { token = SingleTokenCoin(token_addr); public_rate = 3546099290780141; angel_rate = 20; decimals = 35460992907801; angel_sale_start = now - 3 days; angel_sale_finish = 1510488000; pre_sale_start = 1510491600; pre_sale_finish = 1512561600; public_sale_start = 1512565200; public_sale_finish = public_sale_start + 14 days; moveTokens = false; isAngel = true; isPreSale = false; isPublic = false; currentPhase = 1; founding_sold = 0; peInvestors_sold = 0; angel_sale_sold = 0; pre_sale_sold = 0; public_sale_sold = 0; angel_sale_totalETH = 0; pre_sale_totalETH = 0; public_sale_totalETH = 0; firstPhaseAmount = 18750000E18; secondPhaseAmount = 37500000E18; thirdPhaseAmount = 56250000E18; fourPhaseAmount = 75000000E18; firstPhaseDiscount = 30; secondPhaseDiscount = 40; thirdPhaseDiscount = 50; fourPhaseDiscount = 60; totalAmount = 500000000E18; foundingAmount = 10000000E18; angelAmount = 25000000E18; preSaleAmount = 75000000E18; PEInvestorAmount = 50000000E18; publicSaleAmount = 100000000E18; coreTeamAmount = 100000000E18; coreTeamAuto = 60000000E18; coreTeamManual = 40000000E18; itDevAmount = 50000000E18; futDevAmount = 50000000E18; commFoundAmount = 15000000E18; socWarefareAmount = 10000000E18; marketingAmount = 15000000E18; mintingFinished = false; coreTeamAddr = 0xB0A3A845cfA5e2baCD3925Af85c59dE4D32D874f; itDevAddr = 0x61528ffdCd4BC26c81c88423018780b399Fbb8e7; futDevAddr = 0xA1f9C3F137496e6b8bA4445d15b0986CaA22FDe3; commFoundAddr = 0xC30a0E7FFad754A9AD2A1C1cFeB10e05f7C7aB6A; socWarefareAddr = 0xd5d692C89C83313579d02C94F4faE600fe30D1d9; marketingAddr = 0x5490510072b929273F65dba4B72c96cd45A99b5A; unsoldAddr = 0x18051b5b0F1FDb4D44eACF2FA49f19bB80105Fc1; collectAddr = 0xB338121B8e5dA0900a6E8580321293f3CF52E58D; },1,"subgraph cluster_2629_Crowdsale {
label=""Crowdsale"";
""2629_withdrowTokens"" [label=""withdrowTokens""];
""2629_getFinishStatus"" [label=""getFinishStatus""];
""2629_removeFreeze"" [label=""removeFreeze""];
""2629_getFinishDates"" [label=""getFinishDates""];
""2629_getTotalETH"" [label=""getTotalETH""];
""2629_finishMinting"" [label=""finishMinting""];
""2629_saveInfoAboutInvestors"" [label=""saveInfoAboutInvestors""];
""2629_getStartDates"" [label=""getStartDates""];
""2629_getWrapperData"" [label=""getWrapperData""];
""2629_sendToAddress"" [label=""sendToAddress""];
""2629_setTransferOwnership"" [label=""setTransferOwnership""];
""2629_getInvestorsCount"" [label=""getInvestorsCount""];
""2629_calculatePrice"" [label=""calculatePrice""];
""2629_calculateRate"" [label=""calculateRate""];
""2629_getCurrentPrice"" [label=""getCurrentPrice""];
""2629_getInvestorByIndex"" [label=""getInvestorByIndex""];
""2629_withdrowETH"" [label=""withdrowETH""];
""2629_setAngelDate"" [label=""setAngelDate""];
""2629_getOwner"" [label=""getOwner""];
""2629_fallback"" [label=""fallback""];
""2629_setFreeze"" [label=""setFreeze""];
""2629_getSoldToken"" [label=""getSoldToken""];
""2629_mint"" [label=""mint""];
""2629_setPublicSaleFinishDate"" [label=""setPublicSaleFinishDate""];
""2629_getBalanceContract"" [label=""getBalanceContract""];
""2629_getContractAddress"" [label=""getContractAddress""];
""2629_setPublicSaleDate"" [label=""setPublicSaleDate""];
""2629_moveUnsold"" [label=""moveUnsold""];
""2629_refund"" [label=""refund""];
""2629_sendOracleData"" [label=""sendOracleData""];
""2629_Crowdsale"" [label=""Crowdsale""];
""2629_getTotalToken"" [label=""getTotalToken""];
""2629_getInvestorsTokens"" [label=""getInvestorsTokens""];
""2629_getLeftToken"" [label=""getLeftToken""];
""2629_newTransferManualTokensnewTransfer"" [label=""newTransferManualTokensnewTransfer""];
""2629_setPreSaleDate"" [label=""setPreSaleDate""];
""2629_calculateMinorRefund"" [label=""calculateMinorRefund""];
""2629_setPreSaleFinishDate"" [label=""setPreSaleFinishDate""];
""2629_bytesToUInt"" [label=""bytesToUInt""];
""2629_setAngelFinishDate"" [label=""setAngelFinishDate""];
""2629_finishMinting"" -> ""2629_onlyOwner"";
""2629_setPublicSaleFinishDate"" -> ""2629_onlyOwner"";
""2629_mint"" -> ""2629_isICOFinished"";
""2629_sendToAddress"" -> ""2629_onlyOwner"";
""2629_calculateRate"" -> ""2629_getWrapperData"";
""2629_sendToAddress"" -> ""2629_canMint"";
""2629_setPreSaleDate"" -> ""2629_onlyOwner"";
""2629_setAngelFinishDate"" -> ""2629_onlyOwner"";
""2629_fallback"" -> ""2629_mint"";
""2629_getCurrentPrice"" -> ""2629_calculatePrice"";
""2629_mint"" -> ""2629_isAnyStage"";
""2629_mint"" -> ""2629_saveInfoAboutInvestors"";
""2629_mint"" -> ""2629_refund"";
""2629_mint"" -> ""2629_calculatePrice"";
""2629_setAngelDate"" -> ""2629_onlyOwner"";
""2629_mint"" -> ""2629_canMint"";
""2629_getCurrentPrice"" -> ""2629_calculateRate"";
""2629_mint"" -> ""2629_calculateMinorRefund"";
""2629_setTransferOwnership"" -> ""2629_onlyOwner"";
""2629_withdrowTokens"" -> ""2629_onlyOwner"";
""2629_withdrowETH"" -> ""2629_onlyOwner"";
""2629_moveUnsold"" -> ""2629_onlyOwner"";
""2629_newTransferManualTokensnewTransfer"" -> ""2629_onlyOwner"";
""2629_setPublicSaleDate"" -> ""2629_onlyOwner"";
""2629_setTransferOwnership"" -> ""2629_transferOwnership"";
""2629_setFreeze"" -> ""2629_onlyOwner"";
""2629_removeFreeze"" -> ""2629_onlyOwner"";
""2629_calculateRate"" -> ""2629_bytesToUInt"";
""2629_mint"" -> ""2629_calculateRate"";
""2629_setPreSaleFinishDate"" -> ""2629_onlyOwner"";
}
"
0xaf8eabf89f5664a2bc82ca415a4337821cd54d65.sol,Crowdsale,"contract Crowdsale is Bonus { using SafeMath for uint256; ERC20 public token; address public wallet; uint256 public rate; uint256 public openingTimePeriodOne; uint256 public closingTimePeriodOne; uint256 public openingTimePeriodTwo; uint256 public closingTimePeriodTwo; uint256 public bonusDeliverTime; uint256 public bonusRatePrivateSale; uint256 public bonusRatePeriodOne; uint256 public bonusRatePeriodTwo; uint256 decimals; uint256 public tokenUnsold; uint256 public bonusUnsold; uint256 public constant minPurchaseAmount = 0.1 ether; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); event TokenBonus(address indexed purchaser, address indexed beneficiary, uint256 bonus); modifier onlyWhileOpen { require(block.timestamp <= closingTimePeriodTwo); _; }",1,"subgraph cluster_945_Crowdsale {
label=""Crowdsale"";
""945_returnBonus"" [label=""returnBonus""];
""945_returnToken"" [label=""returnToken""];
""945__validateMaxSellAmount"" [label=""_validateMaxSellAmount""];
""945__processPurchase"" [label=""_processPurchase""];
""945__deliverTokens"" [label=""_deliverTokens""];
""945__getTokenAmount"" [label=""_getTokenAmount""];
""945__forwardFunds"" [label=""_forwardFunds""];
""945_constructor"" [label=""constructor""];
""945__preValidatePurchase"" [label=""_preValidatePurchase""];
""945_isClosed"" [label=""isClosed""];
""945_privateCrowdsale"" [label=""privateCrowdsale""];
""945_isOpened"" [label=""isOpened""];
""945__getTokenBonus"" [label=""_getTokenBonus""];
""945_deliverBonus"" [label=""deliverBonus""];
""945_fallback"" [label=""fallback""];
""945_buyTokens"" [label=""buyTokens""];
""945__processPurchase"" -> ""945__validateMaxSellAmount"";
""945_fallback"" -> ""945_buyTokens"";
""945_buyTokens"" -> ""945__preValidatePurchase"";
""945_buyTokens"" -> ""945__addBonus"";
""945_buyTokens"" -> ""945__forwardFunds"";
""945_buyTokens"" -> ""945__processPurchase"";
""945__validateMaxSellAmount"" -> ""945_onlyWhileOpen"";
""945_privateCrowdsale"" -> ""945__getTokenAmount"";
""945_privateCrowdsale"" -> ""945_onlyOwner"";
""945_returnToken"" -> ""945_onlyOwner"";
""945_buyTokens"" -> ""945__getTokenAmount"";
""945_buyTokens"" -> ""945__getTokenBonus"";
""945_privateCrowdsale"" -> ""945__processPurchase"";
""945_deliverBonus"" -> ""945_onlyOwner"";
""945__processPurchase"" -> ""945__deliverTokens"";
""945_returnBonus"" -> ""945_onlyOwner"";
""945_privateCrowdsale"" -> ""945__addBonus"";
""945__preValidatePurchase"" -> ""945_onlyWhileOpen"";
""945_privateCrowdsale"" -> ""945__preValidatePurchase"";
}
"
0x3fe1bd3f808682e10cc16ccfc0e9476555ed93a7.sol,WFCToken,"contract WFCToken is StandardToken, SafeMath { string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 18; string public version = ; address public ethFundDeposit; address public newContractAddr; bool public isFunding; uint256 public fundingStartBlock; uint256 public fundingStopBlock; uint256 public currentSupply; uint256 public tokenRaised = 0; uint256 public tokenMigrated = 0; uint256 public tokenExchangeRate = 625; event AllocateToken(address indexed _to, uint256 _value); event IssueToken(address indexed _to, uint256 _value); event IncreaseSupply(uint256 _value); event DecreaseSupply(uint256 _value); event Migrate(address indexed _to, uint256 _value); function formatDecimals(uint256 _value) internal returns (uint256 ) { return _value * 10 ** decimals; }",1,"subgraph cluster_817_WFCToken {
label=""WFCToken"";
""817_startFunding"" [label=""startFunding""];
""817_allocateToken"" [label=""allocateToken""];
""817_changeOwner"" [label=""changeOwner""];
""817_formatDecimals"" [label=""formatDecimals""];
""817_setMigrateContract"" [label=""setMigrateContract""];
""817_stopFunding"" [label=""stopFunding""];
""817_transferETH"" [label=""transferETH""];
""817_fallback"" [label=""fallback""];
""817_migrate"" [label=""migrate""];
""817_WFCToken"" [label=""WFCToken""];
""817_decreaseSupply"" [label=""decreaseSupply""];
""817_setTokenExchangeRate"" [label=""setTokenExchangeRate""];
""817_WFCToken"" -> ""817_formatDecimals"";
""817_startFunding"" -> ""817_isOwner"";
""817_setTokenExchangeRate"" -> ""817_isOwner"";
""817_allocateToken"" -> ""817_formatDecimals"";
""817_allocateToken"" -> ""817_safeAdd"";
""817_fallback"" -> ""817_safeAdd"";
""817_allocateToken"" -> ""817_isOwner"";
""817_allocateToken"" -> ""817_safeMult"";
""817_migrate"" -> ""817_safeAdd"";
""817_transferETH"" -> ""817_isOwner"";
""817_stopFunding"" -> ""817_isOwner"";
""817_decreaseSupply"" -> ""817_formatDecimals"";
""817_decreaseSupply"" -> ""817_safeSubtract"";
""817_fallback"" -> ""817_safeMult"";
""817_changeOwner"" -> ""817_isOwner"";
""817_decreaseSupply"" -> ""817_isOwner"";
""817_setMigrateContract"" -> ""817_isOwner"";
}
"
0x01d6208f95cf2292c350fc8bb1b1f29230352675.sol,DRCWalletManager,"contract DRCWalletManager is OwnerContract, Withdrawable, TokenDestructible { using SafeMath for uint256; struct WithdrawWallet { bytes32 name; address walletAddr; }",1,"subgraph cluster_1903_DRCWalletManager {
label=""DRCWalletManager"";
""1903_freezeTokens"" [label=""freezeTokens""];
""1903_withdrawWithFee"" [label=""withdrawWithFee""];
""1903_bindToken"" [label=""bindToken""];
""1903_getDepositInfo"" [label=""getDepositInfo""];
""1903_changeDefaultWithdraw"" [label=""changeDefaultWithdraw""];
""1903_getDepositWithdrawCount"" [label=""getDepositWithdrawCount""];
""1903_checkWithdrawAddress"" [label=""checkWithdrawAddress""];
""1903_withdrawFromThis"" [label=""withdrawFromThis""];
""1903_createDepositContract"" [label=""createDepositContract""];
""1903_getDepositWithdrawList"" [label=""getDepositWithdrawList""];
""1903_withdrawWithFee"" -> ""1903_onlyOwner"";
""1903_bindToken"" -> ""1903_onlyOwner"";
""1903_getDepositWithdrawCount"" -> ""1903_onlyOwner"";
""1903_freezeTokens"" -> ""1903_onlyOwner"";
""1903_withdrawWithFee"" -> ""1903_checkWithdrawAddress"";
""1903_withdrawWithFee"" -> ""1903_withdrawFromThis"";
""1903_getDepositWithdrawList"" -> ""1903_onlyOwner"";
""1903_createDepositContract"" -> ""1903_onlyOwner"";
""1903_withdrawWithFee"" -> ""1903_withdrawWithFee"";
""1903_getDepositInfo"" -> ""1903_onlyOwner"";
""1903_changeDefaultWithdraw"" -> ""1903_onlyOwner"";
}
"
0x1dd6363c7f7a3150fb7ab13c29fe92f5bab23457.sol,CharityProject,"contract CharityProject is RBACManager { using SafeMath for uint256; modifier canWithdraw() { require( canWithdrawBeforeEnd || closingTime == 0 || block.timestamp > closingTime, ); _; }",1,"subgraph cluster_758_CharityProject {
label=""CharityProject"";
""758_constructor"" [label=""constructor""];
""758_setTimes"" [label=""setTimes""];
""758_setCanWithdrawBeforeEnd"" [label=""setCanWithdrawBeforeEnd""];
""758_hasClosed"" [label=""hasClosed""];
""758_hasStarted"" [label=""hasStarted""];
""758_withdrawTokens"" [label=""withdrawTokens""];
""758_maxGoalReached"" [label=""maxGoalReached""];
""758_setMaxGoal"" [label=""setMaxGoal""];
""758_totalRaised"" [label=""totalRaised""];
""758_maxGoalReached"" -> ""758_totalRaised"";
""758_withdrawTokens"" -> ""758_canWithdraw"";
""758_withdrawTokens"" -> ""758_onlyOwnerOrManager"";
""758_setMaxGoal"" -> ""758_onlyOwner"";
""758_setCanWithdrawBeforeEnd"" -> ""758_onlyOwner"";
""758_constructor"" -> ""758_addManager"";
""758_setTimes"" -> ""758_onlyOwner"";
}
"
0x486681bb877703e4385c8fe9688bff776cbc11c4.sol,Escapable,"contract Escapable is Owned { address public escapeHatchCaller; address public escapeHatchDestination; mapping (address=>bool) private escapeBlacklist; function Escapable(address _escapeHatchCaller, address _escapeHatchDestination) { escapeHatchCaller = _escapeHatchCaller; escapeHatchDestination = _escapeHatchDestination; }",1,"subgraph cluster_1503_Escapable {
label=""Escapable"";
""1503_changeHatchEscapeCaller"" [label=""changeHatchEscapeCaller""];
""1503_Escapable"" [label=""Escapable""];
""1503_escapeHatch"" [label=""escapeHatch""];
""1503_blacklistEscapeToken"" [label=""blacklistEscapeToken""];
""1503_isTokenEscapable"" [label=""isTokenEscapable""];
""1503_escapeHatch"" -> ""1503_onlyEscapeHatchCallerOrOwner"";
""1503_changeHatchEscapeCaller"" -> ""1503_onlyEscapeHatchCallerOrOwner"";
}
"
0x0e54b1b8ff833b5f2b0d17453d97d340cb7576e4.sol,ERC223Token,"contract ERC223Token is IERC223, SafeMath { mapping(address => uint) balances; string public name = ; string public symbol = ; uint8 public decimals = 8; uint256 public totalSupply = 35000000 * 10**8; function ERC223Token() { balances[msg.sender] = totalSupply; }",1,"subgraph cluster_534_ERC223Token {
label=""ERC223Token"";
""534_ERC223Token"" [label=""ERC223Token""];
""534_symbol"" [label=""symbol""];
""534_totalSupply"" [label=""totalSupply""];
""534_transferToAddress"" [label=""transferToAddress""];
""534_balanceOf"" [label=""balanceOf""];
""534_transferToContract"" [label=""transferToContract""];
""534_transfer"" [label=""transfer""];
""534_name"" [label=""name""];
""534_isContract"" [label=""isContract""];
""534_decimals"" [label=""decimals""];
""534_transfer"" -> ""534_safeAdd"";
""534_transferToContract"" -> ""534_safeAdd"";
""534_transferToAddress"" -> ""534_balanceOf"";
""534_transferToContract"" -> ""534_balanceOf"";
""534_transfer"" -> ""534_safeSub"";
""534_transferToAddress"" -> ""534_safeSub"";
""534_transferToContract"" -> ""534_safeSub"";
""534_transfer"" -> ""534_transferToAddress"";
""534_transfer"" -> ""534_balanceOf"";
""534_transfer"" -> ""534_transferToContract"";
""534_transfer"" -> ""534_isContract"";
""534_transferToAddress"" -> ""534_safeAdd"";
}
"
0xaa63c8683647ef91b3fdab4b4989ee9588da297b.sol,DSProxy,"contract DSProxy is DSAuth, DSNote { DSProxyCache public cache; function DSProxy(address _cacheAddr) public { require(setCache(_cacheAddr)); }",1,"subgraph cluster_390_DSProxyCache {
label=""DSProxyCache"";
""390_read"" [label=""read""];
""390_write"" [label=""write""];
}
"
0xef86db910c71ffa3c80233bc9108dc51ad1e008a.sol,CommonWallet,"contract CommonWallet { mapping(address => mapping (address => uint256)) public tokenBalance; mapping(address => uint) etherBalance; address owner = msg.sender; function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) { uint256 z = _x + _y; assert(z >= _x); return z; }",1,"subgraph cluster_387_CommonWallet {
label=""CommonWallet"";
""387_sendTokenTo"" [label=""sendTokenTo""];
""387_wdEther"" [label=""wdEther""];
""387_safeAdd"" [label=""safeAdd""];
""387_wdToken"" [label=""wdToken""];
""387_sendEtherTo"" [label=""sendEtherTo""];
""387_depoEther"" [label=""depoEther""];
""387_getEtherBalance"" [label=""getEtherBalance""];
""387_safeSub"" [label=""safeSub""];
""387_depoToken"" [label=""depoToken""];
""387_getTokenBalance"" [label=""getTokenBalance""];
""387_sendEtherTo"" -> ""387_safeSub"";
""387_wdEther"" -> ""387_safeSub"";
""387_wdToken"" -> ""387_safeSub"";
""387_depoToken"" -> ""387_safeAdd"";
""387_sendTokenTo"" -> ""387_safeSub"";
}
"
0xcef8feebbdc278c0c81e07b87abf96b22d08fa6e.sol,UnicornRefunds,"contract UnicornRefunds { using SafeMath for uint; address public cardboardUnicornTokenAddress; address public unicornRanchAddress; address public owner = msg.sender; uint public pricePerUnicorn = 1 finney; uint public rewardUnicornAmount = 100; mapping(address => uint) allowedAmounts; mapping(address => bool) rewardClaimed; event RewardClaimed(address indexed _who, uint _bookingIndex); event UnicornsSold(address indexed _who, uint _unicornCount, uint _unicornCost, uint _paymentTotal); modifier onlyOwner { require(msg.sender == owner); _; }",1,"subgraph cluster_534_UnicornRefunds {
label=""UnicornRefunds"";
""534_sell"" [label=""sell""];
""534_changeRewardAmount"" [label=""changeRewardAmount""];
""534_changeOwner"" [label=""changeOwner""];
""534_changeUnicornRanchAddress"" [label=""changeUnicornRanchAddress""];
""534_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""534_claimReward"" [label=""claimReward""];
""534_withdraw"" [label=""withdraw""];
""534_changePricePerUnicorn"" [label=""changePricePerUnicorn""];
""534_fallback"" [label=""fallback""];
""534_setAllowance"" [label=""setAllowance""];
""534_changeCardboardUnicornTokenAddress"" [label=""changeCardboardUnicornTokenAddress""];
""534_changeOwner"" -> ""534_onlyOwner"";
""534_changeUnicornRanchAddress"" -> ""534_onlyOwner"";
""534_changeRewardAmount"" -> ""534_onlyOwner"";
""534_changePricePerUnicorn"" -> ""534_onlyOwner"";
""534_changeCardboardUnicornTokenAddress"" -> ""534_onlyOwner"";
""534_setAllowance"" -> ""534_onlyOwner"";
""534_withdraw"" -> ""534_onlyOwner"";
""534_withdrawForeignTokens"" -> ""534_onlyOwner"";
}
"
0x58c3069023ed736f430d585003715058c2e3c671.sol,BTCPayment,"contract BTCPayment is Ownable, PresaleFallbackReceiver { using SafeMath for uint256; PaymentFallbackReceiver public presale; PaymentFallbackReceiver public mainsale; event NewPayment(address _beneficiary, uint256 _tokens); function addPayment(address _beneficiary, uint256 _tokens) public onlyOwner { if (!presaleFallBackCalled) { presale.paymentFallBack(_beneficiary, _tokens); }",1,"subgraph cluster_619_BTCPayment {
label=""BTCPayment"";
""619_setMainsale"" [label=""setMainsale""];
""619_setPresale"" [label=""setPresale""];
""619_addPayment"" [label=""addPayment""];
""619_presaleFallBack"" [label=""presaleFallBack""];
""619_setPresale"" -> ""619_onlyOwner"";
""619_addPayment"" -> ""619_onlyOwner"";
""619_setMainsale"" -> ""619_onlyOwner"";
}
"
0x5a6d9a69408ce19df15eb40347ded3028a77fcca.sol,EthicHubLending,"contract EthicHubLending is EthicHubBase, Ownable, Pausable { using SafeMath for uint256; enum LendingState { Uninitialized, AcceptingContributions, ExchangingToFiat, AwaitingReturn, ProjectNotFunded, ContributionReturned, Default }",1,"subgraph cluster_2464_EthicHubLending {
label=""EthicHubLending"";
""2464_getMaxDelayDays"" [label=""getMaxDelayDays""];
""2464_reclaimLeftoverEth"" [label=""reclaimLeftoverEth""];
""2464_saveInitialParametersToStorage"" [label=""saveInitialParametersToStorage""];
""2464_calculatePaymentGoal"" [label=""calculatePaymentGoal""];
""2464_declareProjectNotFunded"" [label=""declareProjectNotFunded""];
""2464_sendFundsToBorrower"" [label=""sendFundsToBorrower""];
""2464_setBorrower"" [label=""setBorrower""];
""2464_contributeForAddress"" [label=""contributeForAddress""];
""2464_reclaimLocalNodeFee"" [label=""reclaimLocalNodeFee""];
""2464_doReclaim"" [label=""doReclaim""];
""2464_reclaimSurplusEth"" [label=""reclaimSurplusEth""];
""2464_reclaimEthicHubTeamFee"" [label=""reclaimEthicHubTeamFee""];
""2464_getUserContributionReclaimStatus"" [label=""getUserContributionReclaimStatus""];
""2464_getDelayDays"" [label=""getDelayDays""];
""2464_declareProjectDefault"" [label=""declareProjectDefault""];
""2464_constructor"" [label=""constructor""];
""2464_checkInvestorReturns"" [label=""checkInvestorReturns""];
""2464_contributeWithAddress"" [label=""contributeWithAddress""];
""2464_returnBorrowedEth"" [label=""returnBorrowedEth""];
""2464_borrowerReturnFiatAmount"" [label=""borrowerReturnFiatAmount""];
""2464_setBorrowerReturnEthPerFiatRate"" [label=""setBorrowerReturnEthPerFiatRate""];
""2464_isContribPeriodRunning"" [label=""isContribPeriodRunning""];
""2464_reclaimContributionDefault"" [label=""reclaimContributionDefault""];
""2464_changeInvestorAddress"" [label=""changeInvestorAddress""];
""2464_fallback"" [label=""fallback""];
""2464_checkInvestorContribution"" [label=""checkInvestorContribution""];
""2464_sendBackSurplusEth"" [label=""sendBackSurplusEth""];
""2464_reclaimContribution"" [label=""reclaimContribution""];
""2464_investorInterest"" [label=""investorInterest""];
""2464_reclaimContributionWithInterest"" [label=""reclaimContributionWithInterest""];
""2464_lendingInterestRatePercentage"" [label=""lendingInterestRatePercentage""];
""2464_finishInitialExchangingPeriod"" [label=""finishInitialExchangingPeriod""];
""2464_borrowerReturnAmount"" [label=""borrowerReturnAmount""];
""2464_updateReputation"" [label=""updateReputation""];
""2464_borrowerReturnFiatAmount"" -> ""2464_lendingInterestRatePercentage"";
""2464_borrowerReturnAmount"" -> ""2464_borrowerReturnFiatAmount"";
""2464_reclaimSurplusEth"" -> ""2464_doReclaim"";
""2464_setBorrowerReturnEthPerFiatRate"" -> ""2464_onlyOwnerOrLocalNode"";
""2464_reclaimLeftoverEth"" -> ""2464_checkIfArbiter"";
""2464_investorInterest"" -> ""2464_getDelayDays"";
""2464_contributeForAddress"" -> ""2464_whenNotPaused"";
""2464_declareProjectDefault"" -> ""2464_onlyOwnerOrLocalNode"";
""2464_returnBorrowedEth"" -> ""2464_borrowerReturnAmount"";
""2464_reclaimContributionDefault"" -> ""2464_doReclaim"";
""2464_contributeForAddress"" -> ""2464_contributeWithAddress"";
""2464_returnBorrowedEth"" -> ""2464_calculatePaymentGoal"";
""2464_reclaimContributionWithInterest"" -> ""2464_checkInvestorReturns"";
""2464_declareProjectDefault"" -> ""2464_getMaxDelayDays"";
""2464_declareProjectNotFunded"" -> ""2464_onlyOwnerOrLocalNode"";
""2464_reclaimLocalNodeFee"" -> ""2464_doReclaim"";
""2464_contributeWithAddress"" -> ""2464_calculatePaymentGoal"";
""2464_contributeWithAddress"" -> ""2464_isContribPeriodRunning"";
""2464_fallback"" -> ""2464_returnBorrowedEth"";
""2464_lendingInterestRatePercentage"" -> ""2464_getDelayDays"";
""2464_fallback"" -> ""2464_sendBackSurplusEth"";
""2464_sendFundsToBorrower"" -> ""2464_onlyOwnerOrLocalNode"";
""2464_reclaimContribution"" -> ""2464_doReclaim"";
""2464_constructor"" -> ""2464_constructor"";
""2464_contributeWithAddress"" -> ""2464_whenNotPaused"";
""2464_setBorrower"" -> ""2464_checkIfArbiter"";
""2464_fallback"" -> ""2464_whenNotPaused"";
""2464_checkInvestorReturns"" -> ""2464_investorInterest"";
""2464_reclaimContributionDefault"" -> ""2464_checkInvestorReturns"";
""2464_reclaimEthicHubTeamFee"" -> ""2464_doReclaim"";
""2464_reclaimContributionWithInterest"" -> ""2464_doReclaim"";
""2464_changeInvestorAddress"" -> ""2464_checkIfArbiter"";
""2464_fallback"" -> ""2464_contributeWithAddress"";
""2464_declareProjectDefault"" -> ""2464_getDelayDays"";
""2464_saveInitialParametersToStorage"" -> ""2464_onlyOwnerOrLocalNode"";
""2464_finishInitialExchangingPeriod"" -> ""2464_onlyOwnerOrLocalNode"";
""2464_reclaimLeftoverEth"" -> ""2464_doReclaim"";
""2464_returnBorrowedEth"" -> ""2464_updateReputation"";
""2464_contributeForAddress"" -> ""2464_checkProfileRegistered"";
""2464_updateReputation"" -> ""2464_getDelayDays"";
}
"
0x750c1d91864171d7e1715a6b53ee28c72b8faa09.sol,EthicHubUser,"contract EthicHubUser is Ownable, EthicHubBase { event UserStatusChanged(address target, string profile, bool isRegistered); constructor(address _storageAddress) EthicHubBase(_storageAddress) public { version = 3; }",1,"subgraph cluster_660_EthicHubUser {
label=""EthicHubUser"";
""660_deleteUserStatus"" [label=""deleteUserStatus""];
""660_registerPaymentGateway"" [label=""registerPaymentGateway""];
""660_registerLocalNode"" [label=""registerLocalNode""];
""660_unregisterLocalNode"" [label=""unregisterLocalNode""];
""660_registerRepresentative"" [label=""registerRepresentative""];
""660_constructor"" [label=""constructor""];
""660_unregisterPaymentGateway"" [label=""unregisterPaymentGateway""];
""660_changeUserStatus"" [label=""changeUserStatus""];
""660_unregisterCommunity"" [label=""unregisterCommunity""];
""660_unregisterRepresentative"" [label=""unregisterRepresentative""];
""660_unregisterInvestor"" [label=""unregisterInvestor""];
""660_registerInvestor"" [label=""registerInvestor""];
""660_viewRegistrationStatus"" [label=""viewRegistrationStatus""];
""660_registerCommunity"" [label=""registerCommunity""];
""660_unregisterCommunity"" -> ""660_onlyOwner"";
""660_registerLocalNode"" -> ""660_changeUserStatus"";
""660_constructor"" -> ""660_constructor"";
""660_registerInvestor"" -> ""660_onlyOwner"";
""660_unregisterInvestor"" -> ""660_deleteUserStatus"";
""660_unregisterLocalNode"" -> ""660_onlyOwner"";
""660_unregisterInvestor"" -> ""660_onlyOwner"";
""660_unregisterRepresentative"" -> ""660_onlyOwner"";
""660_registerCommunity"" -> ""660_changeUserStatus"";
""660_registerLocalNode"" -> ""660_onlyOwner"";
""660_unregisterLocalNode"" -> ""660_deleteUserStatus"";
""660_registerCommunity"" -> ""660_onlyOwner"";
""660_unregisterPaymentGateway"" -> ""660_onlyOwner"";
""660_registerRepresentative"" -> ""660_onlyOwner"";
""660_unregisterPaymentGateway"" -> ""660_deleteUserStatus"";
""660_unregisterCommunity"" -> ""660_deleteUserStatus"";
""660_unregisterRepresentative"" -> ""660_deleteUserStatus"";
""660_deleteUserStatus"" -> ""660_onlyOwner"";
""660_registerPaymentGateway"" -> ""660_changeUserStatus"";
""660_registerRepresentative"" -> ""660_changeUserStatus"";
""660_changeUserStatus"" -> ""660_onlyOwner"";
""660_registerPaymentGateway"" -> ""660_onlyOwner"";
""660_registerInvestor"" -> ""660_changeUserStatus"";
}
"
0x330bebabc9a2a4136e3d1cb38ca521f5a95aec2e.sol,KoreaShow,"contract KoreaShow is TokenController, Controlled { using SafeMath for uint256; uint256 public startFundingTime; uint256 public endFundingTime; uint256 constant public maximumFunding = 100 ether; uint256 public tokensPerEther = 31000; uint256 constant oneDay = 86400; uint256 public totalCollected = 0; bool public paused; string public techProvider = ; Token public tokenContract; bool public finalized = false; bool public allowChange = true; bool private transfersEnabled = true; address private vaultAddress; bool private initialed = false; event Payment(address indexed _sender, uint256 _ethAmount, uint256 _tokenAmount); function KoreaShow( uint _startFundingTime, uint _endFundingTime, address _vaultAddress, address _tokenAddress ) public { require(_endFundingTime > now); require(_endFundingTime >= _startFundingTime); require(_vaultAddress != 0); require(_tokenAddress != 0); require(!initialed); startFundingTime = _startFundingTime; endFundingTime = _endFundingTime; vaultAddress = _vaultAddress; tokenContract = Token(_tokenAddress); paused = false; initialed = true; }",1,"subgraph cluster_1713_KoreaShow {
label=""KoreaShow"";
""1713_pauseContribution"" [label=""pauseContribution""];
""1713_claimTokens"" [label=""claimTokens""];
""1713_KoreaShow"" [label=""KoreaShow""];
""1713_fallback"" [label=""fallback""];
""1713_changeToken"" [label=""changeToken""];
""1713_allowTransfersEnabled"" [label=""allowTransfersEnabled""];
""1713_proxyPayment"" [label=""proxyPayment""];
""1713_doPayment"" [label=""doPayment""];
""1713_finalizeSale"" [label=""finalizeSale""];
""1713_resumeContribution"" [label=""resumeContribution""];
""1713_setTime"" [label=""setTime""];
""1713_isContract"" [label=""isContract""];
""1713_onApprove"" [label=""onApprove""];
""1713_onTransfer"" [label=""onTransfer""];
""1713_changeTokenController"" [label=""changeTokenController""];
""1713_changeTokensPerEther"" [label=""changeTokensPerEther""];
""1713_setTime"" -> ""1713_onlyController"";
""1713_proxyPayment"" -> ""1713_notPaused"";
""1713_claimTokens"" -> ""1713_onlyController"";
""1713_changeToken"" -> ""1713_onlyController"";
""1713_pauseContribution"" -> ""1713_onlyController"";
""1713_changeTokenController"" -> ""1713_onlyController"";
""1713_fallback"" -> ""1713_notPaused"";
""1713_changeTokensPerEther"" -> ""1713_onlyController"";
""1713_proxyPayment"" -> ""1713_doPayment"";
""1713_resumeContribution"" -> ""1713_onlyController"";
""1713_finalizeSale"" -> ""1713_onlyController"";
""1713_fallback"" -> ""1713_doPayment"";
""1713_allowTransfersEnabled"" -> ""1713_onlyController"";
}
"
0x025dce2d39a46296766db7cac8c322e8f59cd5d9.sol,EthToSmthSwaps,contract EthToSmthSwaps { using SafeMath for uint; address public owner; address public ratingContractAddress; uint256 SafeTime = 1 hours; struct Swap { bytes32 secret; bytes20 secretHash; uint256 createdAt; uint256 balance; },1,"subgraph cluster_679_EthToSmthSwaps {
label=""EthToSmthSwaps"";
""679_withdr"" [label=""withdr""];
""679_withdraw"" [label=""withdraw""];
""679_getSecret"" [label=""getSecret""];
""679_close"" [label=""close""];
""679_abort"" [label=""abort""];
""679_checkSign"" [label=""checkSign""];
""679_clean"" [label=""clean""];
""679_getBalance"" [label=""getBalance""];
""679_sign"" [label=""sign""];
""679_setReputationAddress"" [label=""setReputationAddress""];
""679_createSwap"" [label=""createSwap""];
""679_refund"" [label=""refund""];
""679_constructor"" [label=""constructor""];
""679_abort"" -> ""679_clean"";
""679_refund"" -> ""679_clean"";
""679_close"" -> ""679_clean"";
}
"
0x486cf19a550e2814aef970b14e509e93209a0151.sol,EventChainCrowdsale,"contract EventChainCrowdsale is Haltable { using SafeMath for uint256; enum State{Preparing, Prepared, Presale, Phase1, Phase2, Closed}",1,"subgraph cluster_1228_EventChainCrowdsale {
label=""EventChainCrowdsale"";
""1228_closeCrowdsale"" [label=""closeCrowdsale""];
""1228_startPhase2"" [label=""startPhase2""];
""1228_startPresale"" [label=""startPresale""];
""1228_EventChainCrowdsale"" [label=""EventChainCrowdsale""];
""1228_fallback"" [label=""fallback""];
""1228_mintFounderTokens"" [label=""mintFounderTokens""];
""1228_startPhase1"" [label=""startPhase1""];
""1228_currentStateToString"" [label=""currentStateToString""];
""1228_closeCrowdsale"" -> ""1228_inState"";
""1228_startPresale"" -> ""1228_inState"";
""1228_fallback"" -> ""1228_onlyWhenCrowdsaleIsOpen"";
""1228_fallback"" -> ""1228_requiresMinimumInvest"";
""1228_fallback"" -> ""1228_currentStateToString"";
""1228_startPhase1"" -> ""1228_onlyOwner"";
""1228_mintFounderTokens"" -> ""1228_inState"";
""1228_fallback"" -> ""1228_stopInEmergency"";
""1228_mintFounderTokens"" -> ""1228_onlyOwner"";
""1228_startPhase2"" -> ""1228_onlyOwner"";
""1228_closeCrowdsale"" -> ""1228_onlyOwner"";
""1228_startPhase2"" -> ""1228_inState"";
""1228_startPresale"" -> ""1228_onlyOwner"";
""1228_startPhase1"" -> ""1228_inState"";
}
"
0x020ddc98365d0199b4c7a2d769d685480789f67e.sol,EOSclassic,"contract EOSclassic is StandardToken, HasNoEther { string public constant NAME = ; string public constant SYMBOL = ; uint8 public constant DECIMALS = 18; uint public constant TOTAL_SUPPLY = 1000000000 * (10 ** uint(DECIMALS)); uint public constant foundersAllocation = 100000000 * (10 ** uint(DECIMALS)); address public constant eosTokenAddress = 0x86Fa049857E0209aa7D9e616F7eb3b3B78ECfdb0; address public constant eosCrowdsaleAddress = 0xd0a6E6C54DbC68Db5db3A091B171A77407Ff7ccf; mapping (address => string) public keys; mapping (address => bool) public eosClassicClaimed; event LogClaim (address user, uint amount); event LogRegister (address user, string key); constructor() public { totalSupply_ = TOTAL_SUPPLY; balances[address(this)] = TOTAL_SUPPLY; emit Transfer(0x0, address(this), TOTAL_SUPPLY); balances[address(this)] = balances[address(this)].sub(foundersAllocation); balances[msg.sender] = balances[msg.sender].add(foundersAllocation); emit Transfer(address(this), msg.sender, foundersAllocation); }",1,"subgraph cluster_947_EOSclassic {
label=""EOSclassic"";
""947_queryEOSTokenBalance"" [label=""queryEOSTokenBalance""];
""947_constructor"" [label=""constructor""];
""947_register"" [label=""register""];
""947_getEOSKeyFor"" [label=""getEOSKeyFor""];
""947_isClaimed"" [label=""isClaimed""];
""947_getMyEOSKey"" [label=""getMyEOSKey""];
""947_queryEOSCrowdsaleKey"" [label=""queryEOSCrowdsaleKey""];
""947_claimEOSclassicFor"" [label=""claimEOSclassicFor""];
""947_claimEOSclassic"" [label=""claimEOSclassic""];
""947_claimEOSclassic"" -> ""947_claimEOSclassicFor"";
""947_claimEOSclassicFor"" -> ""947_queryEOSTokenBalance"";
""947_getEOSKeyFor"" -> ""947_queryEOSCrowdsaleKey"";
""947_claimEOSclassicFor"" -> ""947_isClaimed"";
""947_getMyEOSKey"" -> ""947_getEOSKeyFor"";
}
"
0x486681bb877703e4385c8fe9688bff776cbc11c4.sol,Escapable,"contract Escapable is Owned { address public escapeHatchCaller; address public escapeHatchDestination; mapping (address=>bool) private escapeBlacklist; function Escapable(address _escapeHatchCaller, address _escapeHatchDestination) { escapeHatchCaller = _escapeHatchCaller; escapeHatchDestination = _escapeHatchDestination; }",1,"subgraph cluster_1503_Escapable {
label=""Escapable"";
""1503_changeHatchEscapeCaller"" [label=""changeHatchEscapeCaller""];
""1503_Escapable"" [label=""Escapable""];
""1503_escapeHatch"" [label=""escapeHatch""];
""1503_blacklistEscapeToken"" [label=""blacklistEscapeToken""];
""1503_isTokenEscapable"" [label=""isTokenEscapable""];
""1503_escapeHatch"" -> ""1503_onlyEscapeHatchCallerOrOwner"";
""1503_changeHatchEscapeCaller"" -> ""1503_onlyEscapeHatchCallerOrOwner"";
}
"
0x4d2d7ea45162b91f0e584463ed2afb54ca558cb4.sol,Crowdsale,"contract Crowdsale { using SafeMath for uint256; address public wallet; address public addressOfTokenUsedAsReward; uint256 public price = 2000; token tokenReward; uint256 public weiRaised; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); constructor () public { wallet = 0x9F1D5D27c7FD3EaB394b65B6c06e4Ef22F333210; addressOfTokenUsedAsReward = 0x4bF62424385ddcD858535cAa1878e512314a9Aeb; tokenReward = token(addressOfTokenUsedAsReward); }",1,"subgraph cluster_327_Crowdsale {
label=""Crowdsale"";
""327_fallback"" [label=""fallback""];
""327_buyTokens"" [label=""buyTokens""];
""327_constructor"" [label=""constructor""];
""327_forwardFunds"" [label=""forwardFunds""];
""327_stopSale"" [label=""stopSale""];
""327_changeWallet"" [label=""changeWallet""];
""327_startSale"" [label=""startSale""];
""327_setPrice"" [label=""setPrice""];
""327_withdrawTokens"" [label=""withdrawTokens""];
""327_validPurchase"" [label=""validPurchase""];
""327_buyTokens"" -> ""327_validPurchase"";
""327_buyTokens"" -> ""327_forwardFunds"";
""327_fallback"" -> ""327_buyTokens"";
}
"
0x574fb6d9d090042a04d0d12a4e87217f8303a5ca.sol,GoldBackedToken,"contract GoldBackedToken is Ownable, SafeMath, ERC20, Pausable { event Transfer(address indexed from, address indexed to, uint value); event Approval(address indexed owner, address indexed spender, uint value); event DeductFees(address indexed owner,uint256 amount); event TokenMinted(address destination, uint256 amount); event TokenBurned(address source, uint256 amount); string public name = ; string public symbol = ; uint256 constant public decimals = 18; uint256 constant public hgtDecimals = 8; uint256 constant public allocationPool = 1 * 10**9 * 10**hgtDecimals; uint256 constant public maxAllocation = 38 * 10**5 * 10**decimals; uint256 public totAllocation; address public feeCalculator; address public HGT; function setFeeCalculator(address newFC) onlyOwner { feeCalculator = newFC; }",1,"subgraph cluster_2164_GoldBackedToken {
label=""GoldBackedToken"";
""2164_update"" [label=""update""];
""2164_mintTokens"" [label=""mintTokens""];
""2164_updatedBalance"" [label=""updatedBalance""];
""2164_balanceOf"" [label=""balanceOf""];
""2164_GoldBackedToken"" [label=""GoldBackedToken""];
""2164_calcFees"" [label=""calcFees""];
""2164_burnTokens"" [label=""burnTokens""];
""2164_approve"" [label=""approve""];
""2164_addAllocationPartOne"" [label=""addAllocationPartOne""];
""2164_allowance"" [label=""allowance""];
""2164_transfer"" [label=""transfer""];
""2164_addAllocationPartTwo"" [label=""addAllocationPartTwo""];
""2164_setHGT"" [label=""setHGT""];
""2164_setMinter"" [label=""setMinter""];
""2164_aotLength"" [label=""aotLength""];
""2164_parentFees"" [label=""parentFees""];
""2164_parentChange"" [label=""parentChange""];
""2164_currentAllocationLength"" [label=""currentAllocationLength""];
""2164_setFeeCalculator"" [label=""setFeeCalculator""];
""2164_transferFrom"" [label=""transferFrom""];
""2164_partAllocationLength"" [label=""partAllocationLength""];
""2164_mintTokens"" -> ""2164_update"";
""2164_mintTokens"" -> ""2164_safeAdd"";
""2164_approve"" -> ""2164_whenNotPaused"";
""2164_transfer"" -> ""2164_safeAdd"";
""2164_transfer"" -> ""2164_update"";
""2164_transferFrom"" -> ""2164_whenNotPaused"";
""2164_addAllocationPartTwo"" -> ""2164_calcFees"";
""2164_transfer"" -> ""2164_safeSub"";
""2164_setFeeCalculator"" -> ""2164_onlyOwner"";
""2164_parentChange"" -> ""2164_whenNotPaused"";
""2164_addAllocationPartTwo"" -> ""2164_onlyOwner"";
""2164_setHGT"" -> ""2164_onlyOwner"";
""2164_addAllocationPartOne"" -> ""2164_onlyOwner"";
""2164_transfer"" -> ""2164_whenNotPaused"";
""2164_addAllocationPartOne"" -> ""2164_calcFees"";
""2164_update"" -> ""2164_updatedBalance"";
""2164_parentFees"" -> ""2164_whenNotPaused"";
""2164_transferFrom"" -> ""2164_update"";
""2164_updatedBalance"" -> ""2164_calcFees"";
""2164_burnTokens"" -> ""2164_safeSub"";
""2164_burnTokens"" -> ""2164_update"";
""2164_transferFrom"" -> ""2164_safeAdd"";
""2164_transferFrom"" -> ""2164_safeSub"";
""2164_parentFees"" -> ""2164_update"";
""2164_balanceOf"" -> ""2164_updatedBalance"";
""2164_setMinter"" -> ""2164_onlyOwner"";
}
"
0x1b6c5864375b34af3ff5bd2e5f40bc425b4a8d79.sol,TopChainCoinDistribution,"contract TopChainCoinDistribution is Ownable, Authorizable { using SafeMath for uint; event AuthorizedCreateToPrivate(address recipient, uint pay_amount); event GameMining(address recipient, uint pay_amount); event CreateTokenToTeam(address recipient, uint pay_amount); event CreateTokenToMarket(address recipient, uint pay_amount); event CreateTokenToOperation(address recipient, uint pay_amount); event TopChainCoinMintFinished(); TopChainCoin public token = new TopChainCoin(); DateTime internal dateTime = new DateTime(); uint totalToken = 2100000000 * (10 ** 6); uint public privateTokenCap = 210000000 * (10 ** 6); uint public marketToken = 315000000 * (10 ** 6); uint public operationToken = 210000000 * (10 ** 6); uint public gameMiningTokenCap = 1155000000 * (10 ** 6); uint public teamToken2018 = 105000000 * (10 ** 6); uint public teamToken2019 = 105000000 * (10 ** 6); uint public privateToken = 0; address public teamAddress; address public operationAddress; address public marketAddress; bool public team2018TokenCreated = false; bool public team2019TokenCreated = false; bool public operationTokenCreated = false; bool public marketTokenCreated = false; mapping(uint16 => uint) public gameMiningToken; uint public firstYearGameMiningTokenCap = 577500000 * (10 ** 6); uint public gameMiningTokenStartTime = 1514736000; function isContract(address _addr) internal view returns(bool) { uint size; if (_addr == 0) return false; assembly { size := extcodesize(_addr) }",1,"subgraph cluster_2129_TopChainCoinDistribution {
label=""TopChainCoinDistribution"";
""2129_setOperationAddress"" [label=""setOperationAddress""];
""2129_gameMining"" [label=""gameMining""];
""2129_fallback"" [label=""fallback""];
""2129_setMarketAddress"" [label=""setMarketAddress""];
""2129__createTokenToTeam"" [label=""_createTokenToTeam""];
""2129_createTokenToTeam"" [label=""createTokenToTeam""];
""2129_createTokenToOperation"" [label=""createTokenToOperation""];
""2129_getCurrentYearGameMiningTokenCap"" [label=""getCurrentYearGameMiningTokenCap""];
""2129_getCurrentYearGameMiningRemainToken"" [label=""getCurrentYearGameMiningRemainToken""];
""2129_createTokenToMarket"" [label=""createTokenToMarket""];
""2129_finishMinting"" [label=""finishMinting""];
""2129_setTeamAddress"" [label=""setTeamAddress""];
""2129_isContract"" [label=""isContract""];
""2129_authorizedCreateTokensToPrivate"" [label=""authorizedCreateTokensToPrivate""];
""2129_authorizedCreateTokensToPrivate"" -> ""2129_onlyAuthorized"";
""2129_setMarketAddress"" -> ""2129_onlyAuthorized"";
""2129_setTeamAddress"" -> ""2129_onlyAuthorized"";
""2129_setOperationAddress"" -> ""2129_onlyAuthorized"";
""2129_createTokenToOperation"" -> ""2129_onlyAuthorized"";
""2129_createTokenToMarket"" -> ""2129_onlyAuthorized"";
""2129_createTokenToTeam"" -> ""2129__createTokenToTeam"";
""2129_gameMining"" -> ""2129_onlyAuthorized"";
""2129_finishMinting"" -> ""2129_onlyOwner"";
""2129_createTokenToTeam"" -> ""2129_onlyAuthorized"";
""2129_gameMining"" -> ""2129_getCurrentYearGameMiningRemainToken"";
""2129_getCurrentYearGameMiningRemainToken"" -> ""2129_getCurrentYearGameMiningTokenCap"";
}
"
0x182f2b554462230735699df74ec9606a3c4c0684.sol,BookERC20EthV1Dec,contract BookERC20EthV1Dec { enum BookType { ERC20EthV1 },1,"subgraph cluster_3343_BookERC20EthV1Dec {
label=""BookERC20EthV1Dec"";
""3343_cancelOrder"" [label=""cancelOrder""];
""3343_sumDepth"" [label=""sumDepth""];
""3343_transferFromBase"" [label=""transferFromBase""];
""3343_getOrderState"" [label=""getOrderState""];
""3343_debitFunds"" [label=""debitFunds""];
""3343_walkBook"" [label=""walkBook""];
""3343_init"" [label=""init""];
""3343_refundUnmatchedAndFinish"" [label=""refundUnmatchedAndFinish""];
""3343_withdrawCntr"" [label=""withdrawCntr""];
""3343_walkClientOrders"" [label=""walkClientOrders""];
""3343_transferFromRwrd"" [label=""transferFromRwrd""];
""3343_continueOrder"" [label=""continueOrder""];
""3343_processOrder"" [label=""processOrder""];
""3343_matchWithTheirs"" [label=""matchWithTheirs""];
""3343_computeCntrAmountUsingUnpacked"" [label=""computeCntrAmountUsingUnpacked""];
""3343_transferBase"" [label=""transferBase""];
""3343_matchAgainstBook"" [label=""matchAgainstBook""];
""3343_transferRwrd"" [label=""transferRwrd""];
""3343_changeFeeCollector"" [label=""changeFeeCollector""];
""3343_createOrder"" [label=""createOrder""];
""3343_getOrder"" [label=""getOrder""];
""3343_computeOppositePrice"" [label=""computeOppositePrice""];
""3343_isBuyPrice"" [label=""isBuyPrice""];
""3343_computeCntrAmountUsingPacked"" [label=""computeCntrAmountUsingPacked""];
""3343_BookERC20EthV1Dec"" [label=""BookERC20EthV1Dec""];
""3343_matchWithOccupiedPrice"" [label=""matchWithOccupiedPrice""];
""3343_creditExecutedFundsLessFees"" [label=""creditExecutedFundsLessFees""];
""3343_enterOrder"" [label=""enterOrder""];
""3343_removeOpenOrderFromBook"" [label=""removeOpenOrderFromBook""];
""3343_depositCntr"" [label=""depositCntr""];
""3343_getBookInfo"" [label=""getBookInfo""];
""3343_getClientBalances"" [label=""getClientBalances""];
""3343_recordTheirMatch"" [label=""recordTheirMatch""];
""3343_unpackPrice"" [label=""unpackPrice""];
""3343_matchWithTheirs"" -> ""3343_recordTheirMatch"";
""3343_processOrder"" -> ""3343_enterOrder"";
""3343_walkBook"" -> ""3343_isBuyPrice"";
""3343_recordTheirMatch"" -> ""3343_refundUnmatchedAndFinish"";
""3343_computeCntrAmountUsingPacked"" -> ""3343_computeCntrAmountUsingUnpacked"";
""3343_computeCntrAmountUsingPacked"" -> ""3343_unpackPrice"";
""3343_processOrder"" -> ""3343_unpackPrice"";
""3343_refundUnmatchedAndFinish"" -> ""3343_computeCntrAmountUsingPacked"";
""3343_createOrder"" -> ""3343_unpackPrice"";
""3343_createOrder"" -> ""3343_processOrder"";
""3343_processOrder"" -> ""3343_computeOppositePrice"";
""3343_createOrder"" -> ""3343_computeCntrAmountUsingUnpacked"";
""3343_createOrder"" -> ""3343_debitFunds"";
""3343_matchAgainstBook"" -> ""3343_matchWithOccupiedPrice"";
""3343_matchWithOccupiedPrice"" -> ""3343_matchWithTheirs"";
""3343_processOrder"" -> ""3343_refundUnmatchedAndFinish"";
""3343_matchWithTheirs"" -> ""3343_computeCntrAmountUsingPacked"";
""3343_recordTheirMatch"" -> ""3343_isBuyPrice"";
""3343_continueOrder"" -> ""3343_processOrder"";
""3343_processOrder"" -> ""3343_matchAgainstBook"";
""3343_cancelOrder"" -> ""3343_removeOpenOrderFromBook"";
""3343_processOrder"" -> ""3343_creditExecutedFundsLessFees"";
""3343_walkBook"" -> ""3343_sumDepth"";
""3343_cancelOrder"" -> ""3343_refundUnmatchedAndFinish"";
""3343_creditExecutedFundsLessFees"" -> ""3343_isBuyPrice"";
""3343_refundUnmatchedAndFinish"" -> ""3343_isBuyPrice"";
}
"
0x402fa04ccd2c2568e1a53dbecec1bd572303663a.sol,HarborPresale,"contract HarborPresale is Haltable { using SafeMath for uint256; HarborToken public token; uint256 public startTime; uint256 public endTime; address public wallet; uint256 public rate; uint256 public weiRaised; uint256 public cap; bool public isFinalized = false; uint256 public minimumFundingGoal; uint256 public minSend; RefundVault public vault; uint public tokensMinted; mapping (address => uint256) public tokenDeposited; event Finalized(); event TokenMinted(uint count); event Distributed(address investor, uint tokenAmount); event PeriodChanged(uint256 starttm,uint256 endtm); event TokenPurchase(address indexed purchaser, address indexed investor, uint256 value); function HarborPresale(address _token, uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, uint256 _cap, uint256 _minimumFundingGoal, uint256 _minSend) { require(_startTime >= now); require(_endTime >= _startTime); require(_rate > 0); require(_wallet != 0x0); require(_cap > 0); require(_minimumFundingGoal > 0); token = HarborToken(_token); startTime = _startTime; endTime = _endTime; rate = _rate; wallet = _wallet; cap = _cap; vault = new RefundVault(_wallet); minimumFundingGoal = _minimumFundingGoal; minSend = _minSend; }",1,"subgraph cluster_1508_HarborPresale {
label=""HarborPresale"";
""1508_finalize"" [label=""finalize""];
""1508_minFundingGoalReached"" [label=""minFundingGoalReached""];
""1508_fallback"" [label=""fallback""];
""1508_claimTokenAddress"" [label=""claimTokenAddress""];
""1508_HarborPresale"" [label=""HarborPresale""];
""1508_claimRefund"" [label=""claimRefund""];
""1508_withdrawFund"" [label=""withdrawFund""];
""1508_claimToken"" [label=""claimToken""];
""1508_hasEnded"" [label=""hasEnded""];
""1508_finalization"" [label=""finalization""];
""1508_mintForEverybody"" [label=""mintForEverybody""];
""1508_setPeriod"" [label=""setPeriod""];
""1508_validPurchase"" [label=""validPurchase""];
""1508_buyTokens"" [label=""buyTokens""];
""1508_claimRefund"" -> ""1508_stopInEmergency"";
""1508_claimRefund"" -> ""1508_minFundingGoalReached"";
""1508_finalize"" -> ""1508_hasEnded"";
""1508_finalization"" -> ""1508_minFundingGoalReached"";
""1508_claimToken"" -> ""1508_stopInEmergency"";
""1508_buyTokens"" -> ""1508_validPurchase"";
""1508_fallback"" -> ""1508_buyTokens"";
""1508_claimToken"" -> ""1508_claimTokenAddress"";
""1508_finalize"" -> ""1508_stopInEmergency"";
""1508_mintForEverybody"" -> ""1508_onlyOwner"";
""1508_claimTokenAddress"" -> ""1508_stopInEmergency"";
""1508_setPeriod"" -> ""1508_onlyOwner"";
""1508_buyTokens"" -> ""1508_stopInEmergency"";
""1508_finalize"" -> ""1508_finalization"";
""1508_withdrawFund"" -> ""1508_onlyOwner"";
""1508_withdrawFund"" -> ""1508_minFundingGoalReached"";
""1508_finalize"" -> ""1508_onlyOwner"";
}
"
0x6faff25ef78e39c518687b0dd19113f9b29ac562.sol,ETHedgeToken,contract ETHedgeToken { modifier onlyBagholders { require(myTokens() > 0); _; },1,"subgraph cluster_1798_ETHedgeToken {
label=""ETHedgeToken"";
""1798_sellPrice"" [label=""sellPrice""];
""1798_fallback"" [label=""fallback""];
""1798_balanceOf"" [label=""balanceOf""];
""1798_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1798_buyPrice"" [label=""buyPrice""];
""1798_transfer"" [label=""transfer""];
""1798_exit"" [label=""exit""];
""1798_withdraw"" [label=""withdraw""];
""1798_purchaseTokens"" [label=""purchaseTokens""];
""1798_totalSupply"" [label=""totalSupply""];
""1798_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1798_sqrt"" [label=""sqrt""];
""1798_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1798_payDividends"" [label=""payDividends""];
""1798_transferOwnership"" [label=""transferOwnership""];
""1798_dividendsOf"" [label=""dividendsOf""];
""1798_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1798_allowance"" [label=""allowance""];
""1798_takeCapital"" [label=""takeCapital""];
""1798_buy"" [label=""buy""];
""1798_changeOuts"" [label=""changeOuts""];
""1798_payDivsValue"" [label=""payDivsValue""];
""1798_myDividends"" [label=""myDividends""];
""1798_approve"" [label=""approve""];
""1798_myTokens"" [label=""myTokens""];
""1798_reinvest"" [label=""reinvest""];
""1798_transferFrom"" [label=""transferFrom""];
""1798_burn"" [label=""burn""];
""1798_sell"" [label=""sell""];
""1798_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1798_refferedBy"" [label=""refferedBy""];
""1798_exit"" -> ""1798_withdraw"";
""1798_sellPrice"" -> ""1798_tokensToEthereum_"";
""1798_calculateTokensReceived"" -> ""1798_ethereumToTokens_"";
""1798_sell"" -> ""1798_onlyBagholders"";
""1798_payDividends"" -> ""1798_payDivsValue"";
""1798_fallback"" -> ""1798_withdraw"";
""1798_transfer"" -> ""1798_withdraw"";
""1798_transfer"" -> ""1798_myDividends"";
""1798_changeOuts"" -> ""1798_onlyOwner"";
""1798_reinvest"" -> ""1798_purchaseTokens"";
""1798_sell"" -> ""1798_buyPrice"";
""1798_burn"" -> ""1798_payDivsValue"";
""1798_myDividends"" -> ""1798_dividendsOf"";
""1798_transfer"" -> ""1798_tokensToEthereum_"";
""1798_purchaseTokens"" -> ""1798_takeCapital"";
""1798_exit"" -> ""1798_sell"";
""1798_burn"" -> ""1798_dividendsOf"";
""1798_withdraw"" -> ""1798_myDividends"";
""1798_reinvest"" -> ""1798_onlyStronghands"";
""1798_purchaseTokens"" -> ""1798_ethereumToTokens_"";
""1798_fallback"" -> ""1798_purchaseTokens"";
""1798_withdraw"" -> ""1798_onlyStronghands"";
""1798_fallback"" -> ""1798_reinvest"";
""1798_burn"" -> ""1798_sell"";
""1798_transfer"" -> ""1798_onlyBagholders"";
""1798_buyPrice"" -> ""1798_tokensToEthereum_"";
""1798_transferOwnership"" -> ""1798_onlyOwner"";
""1798_myTokens"" -> ""1798_balanceOf"";
""1798_purchaseTokens"" -> ""1798_buyPrice"";
""1798_ethereumToTokens_"" -> ""1798_sqrt"";
""1798_fallback"" -> ""1798_exit"";
""1798_sell"" -> ""1798_tokensToEthereum_"";
""1798_reinvest"" -> ""1798_myDividends"";
""1798_buy"" -> ""1798_purchaseTokens"";
""1798_calculateEthereumReceived"" -> ""1798_tokensToEthereum_"";
}
"
0x6a2b112e5314a3462a3df18c0b73a2de14fd6b06.sol,BreedingClockAuction,"contract BreedingClockAuction is ClockAuction { bool public isBreedingClockAuction = true; constructor(address _nftAddr, uint256 _cut) public ClockAuction(_nftAddr, _cut) {}",1,"subgraph cluster_2882_BreedingClockAuction {
label=""BreedingClockAuction"";
""2882_createAuction"" [label=""createAuction""];
""2882_bid"" [label=""bid""];
""2882_isBreedingClockAuction"" [label=""isBreedingClockAuction""];
""2882_getCurrentPrice"" [label=""getCurrentPrice""];
""2882_constructor"" [label=""constructor""];
""2882_bid"" -> ""2882__transfer"";
""2882_createAuction"" -> ""2882__escrow"";
""2882_getCurrentPrice"" -> ""2882__isOnAuction"";
""2882_createAuction"" -> ""2882__addAuction"";
""2882_getCurrentPrice"" -> ""2882__currentPrice"";
""2882_bid"" -> ""2882__bid"";
""2882_constructor"" -> ""2882_constructor"";
}
"
0x514bc174df04a4b04ae2be81ee8c788c3796b06b.sol,Deco,contract Deco is ERC20ERC223 { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant totalSupply = 6*10**26; mapping(address => Account) private accounts; struct Account { uint256 balance; mapping(address => uint256) allowed; mapping(address => bool) isAllowanceAuthorized; },1,"subgraph cluster_615_Deco {
label=""Deco"";
""615_hasApproval"" [label=""hasApproval""];
""615_allowance"" [label=""allowance""];
""615_removeApproval"" [label=""removeApproval""];
""615_balanceOf"" [label=""balanceOf""];
""615_approve"" [label=""approve""];
""615_isContract"" [label=""isContract""];
""615_transfer"" [label=""transfer""];
""615_Deco"" [label=""Deco""];
""615_transferFrom"" [label=""transferFrom""];
""615_performTransfer"" [label=""performTransfer""];
""615_transfer"" -> ""615_performTransfer"";
""615_transferFrom"" -> ""615_performTransfer"";
""615_transferFrom"" -> ""615_hasApproval"";
""615_performTransfer"" -> ""615_isContract"";
""615_transfer"" -> ""615_onlyPayloadSize"";
""615_transferFrom"" -> ""615_onlyPayloadSize"";
}
"
0x4ca65f54f923be2fb3efc3a7758e88a6f910806e.sol,GamblicaEarlyAccess,"contract GamblicaEarlyAccess { enum State { CREATED, DEPOSIT, CLAIM }",1,"subgraph cluster_318_GamblicaEarlyAccess {
label=""GamblicaEarlyAccess"";
""318_registerDeposit"" [label=""registerDeposit""];
""318_addWinnigs"" [label=""addWinnigs""];
""318_constructor"" [label=""constructor""];
""318_claim"" [label=""claim""];
""318_die"" [label=""die""];
""318_end"" [label=""end""];
""318_start"" [label=""start""];
""318_fallback"" [label=""fallback""];
""318_addWinnigs"" -> ""318_onlyGamblica"";
""318_end"" -> ""318_onlyGamblica"";
""318_fallback"" -> ""318_claim"";
""318_die"" -> ""318_onlyGamblica"";
""318_registerDeposit"" -> ""318_onlyGamblica"";
""318_start"" -> ""318_onlyGamblica"";
}
"
0xf244176246168f24e3187f7288edbca29267739b.sol,Havven,"contract Havven is ExternStateProxyToken, SelfDestructible { mapping(address => uint) public currentBalanceSum; mapping(address => uint) public lastAverageBalance; mapping(address => uint) public penultimateAverageBalance; mapping(address => uint) public lastTransferTimestamp; uint public feePeriodStartTime = 3; uint public lastFeePeriodStartTime = 2; uint public penultimateFeePeriodStartTime = 1; uint public targetFeePeriodDurationSeconds = 4 weeks; uint constant MIN_FEE_PERIOD_DURATION_SECONDS = 1 days; uint constant MAX_FEE_PERIOD_DURATION_SECONDS = 26 weeks; uint public lastFeesCollected; mapping(address => bool) public hasWithdrawnLastPeriodFees; EtherNomin public nomin; HavvenEscrow public escrow; function Havven(TokenState initialState, address _owner) ExternStateProxyToken(, , 1e8 * UNIT, address(this), initialState, _owner) SelfDestructible(_owner, _owner) public { lastTransferTimestamp[this] = now; feePeriodStartTime = now; lastFeePeriodStartTime = now - targetFeePeriodDurationSeconds; penultimateFeePeriodStartTime = now - 2*targetFeePeriodDurationSeconds; }",1,"subgraph cluster_4834_Havven {
label=""Havven"";
""4834_totalSupply"" [label=""totalSupply""];
""4834_endow"" [label=""endow""];
""4834_setEscrow"" [label=""setEscrow""];
""4834_rolloverFeePeriod"" [label=""rolloverFeePeriod""];
""4834_setTargetFeePeriodDuration"" [label=""setTargetFeePeriodDuration""];
""4834_recomputeLastAverageBalance"" [label=""recomputeLastAverageBalance""];
""4834_adjustFeeEntitlement"" [label=""adjustFeeEntitlement""];
""4834_emitTransferEvents"" [label=""emitTransferEvents""];
""4834_targetFeePeriodDurationSeconds"" [label=""targetFeePeriodDurationSeconds""];
""4834_rolloverFee"" [label=""rolloverFee""];
""4834__recomputeAccountLastAverageBalance"" [label=""_recomputeAccountLastAverageBalance""];
""4834_transfer"" [label=""transfer""];
""4834_feePeriodStartTime"" [label=""feePeriodStartTime""];
""4834_recomputeAccountLastAverageBalance"" [label=""recomputeAccountLastAverageBalance""];
""4834_transferFrom"" [label=""transferFrom""];
""4834_Havven"" [label=""Havven""];
""4834_checkFeePeriodRollover"" [label=""checkFeePeriodRollover""];
""4834_withdrawFeeEntitlement"" [label=""withdrawFeeEntitlement""];
""4834_penultimateAverageBalance"" [label=""penultimateAverageBalance""];
""4834_setNomin"" [label=""setNomin""];
""4834_lastAverageBalance"" [label=""lastAverageBalance""];
""4834__transfer"" [label=""_transfer""];
""4834_withdrawFeeEntitlement"" -> ""4834_safeAdd"";
""4834_withdrawFeeEntitlement"" -> ""4834_safeMul_dec"";
""4834_withdrawFeeEntitlement"" -> ""4834_preCheckFeePeriodRollover"";
""4834__recomputeAccountLastAverageBalance"" -> ""4834_preCheckFeePeriodRollover"";
""4834__transfer"" -> ""4834_adjustFeeEntitlement"";
""4834_setTargetFeePeriodDuration"" -> ""4834_postCheckFeePeriodRollover"";
""4834_transferFrom"" -> ""4834__transferFrom_byProxy"";
""4834_transfer"" -> ""4834__transfer"";
""4834_withdrawFeeEntitlement"" -> ""4834_optionalProxy"";
""4834_recomputeLastAverageBalance"" -> ""4834__recomputeAccountLastAverageBalance"";
""4834_rolloverFee"" -> ""4834_safeMul"";
""4834_transferFrom"" -> ""4834_preCheckFeePeriodRollover"";
""4834_rolloverFeePeriod"" -> ""4834_checkFeePeriodRollover"";
""4834_transferFrom"" -> ""4834_optionalProxy"";
""4834_recomputeAccountLastAverageBalance"" -> ""4834__recomputeAccountLastAverageBalance"";
""4834_Havven"" -> ""4834_ExternStateProxyToken"";
""4834__recomputeAccountLastAverageBalance"" -> ""4834_adjustFeeEntitlement"";
""4834_emitTransferEvents"" -> ""4834_onlyOwner"";
""4834_withdrawFeeEntitlement"" -> ""4834_rolloverFee"";
""4834__transfer"" -> ""4834__transfer_byProxy"";
""4834_transferFrom"" -> ""4834_adjustFeeEntitlement"";
""4834_adjustFeeEntitlement"" -> ""4834_rolloverFee"";
""4834_rolloverFee"" -> ""4834_safeAdd"";
""4834_setEscrow"" -> ""4834_optionalProxy_onlyOwner"";
""4834_adjustFeeEntitlement"" -> ""4834_safeAdd"";
""4834_setNomin"" -> ""4834_optionalProxy_onlyOwner"";
""4834_recomputeLastAverageBalance"" -> ""4834_optionalProxy"";
""4834_Havven"" -> ""4834_SelfDestructible"";
""4834_withdrawFeeEntitlement"" -> ""4834_safeDiv_dec"";
""4834_endow"" -> ""4834__transfer"";
""4834_adjustFeeEntitlement"" -> ""4834_safeMul"";
""4834_transfer"" -> ""4834_optionalProxy"";
""4834_rolloverFee"" -> ""4834_safeDiv"";
""4834__transfer"" -> ""4834_preCheckFeePeriodRollover"";
""4834_endow"" -> ""4834_optionalProxy_onlyOwner"";
""4834_setTargetFeePeriodDuration"" -> ""4834_optionalProxy_onlyOwner"";
}
"
0x84f7c44b6fed1080f647e354d552595be2cc602f.sol,BigbomToken,"contract BigbomToken is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public totalSupply = 2000000000 * 1e18; uint public constant founderAmount = 200000000 * 1e18; uint public constant coreStaffAmount = 60000000 * 1e18; uint public constant advisorAmount = 140000000 * 1e18; uint public constant networkGrowthAmount = 600000000 * 1e18; uint public constant reserveAmount = 635000000 * 1e18; uint public constant bountyAmount = 40000000 * 1e18; uint public constant publicSaleAmount = 275000000 * 1e18; address public bbFounderCoreStaffWallet ; address public bbAdvisorWallet; address public bbAirdropWallet; address public bbNetworkGrowthWallet; address public bbReserveWallet; address public bbPublicSaleWallet; uint public saleStartTime; uint public saleEndTime; address public tokenSaleContract; BigbomPrivateSaleList public privateSaleList; mapping (address => bool) public frozenAccount; mapping (address => uint) public frozenTime; mapping (address => uint) public maxAllowedAmount; event FrozenFunds(address target, bool frozen, uint _seconds); function checkMaxAllowed(address target) public constant returns (uint) { var maxAmount = balances[target]; if(target == bbFounderCoreStaffWallet){ maxAmount = 10000000 * 1e18; }",1,"subgraph cluster_1697_BigbomTokenExtended {
label=""BigbomTokenExtended"";
""1697_selfFreeze"" [label=""selfFreeze""];
""1697_freezeAccount"" [label=""freezeAccount""];
""1697_airDrop"" [label=""airDrop""];
""1697_BigbomTokenExtended"" [label=""BigbomTokenExtended""];
""1697_freezeAccount"" -> ""1697_onlyOwner"";
""1697_airDrop"" -> ""1697_transfer"";
""1697_selfFreeze"" -> ""1697_validFrozenAccount"";
""1697_airDrop"" -> ""1697_onlyOwner"";
""1697_freezeAccount"" -> ""1697_validFrozenAccount"";
""1697_BigbomTokenExtended"" -> ""1697_BigbomToken"";
}
"
0xb471c695dd5ea02035275d4b88077490c1e380ba.sol,ERC20x,"contract ERC20x is ERC20xVariables { function transfer(address _to, uint256 _value) public returns (bool success) { _transferBalance(msg.sender, _to, _value); emit Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_81_ERC20xVariables {
label=""ERC20xVariables"";
""81_balanceOf"" [label=""balanceOf""];
""81_allowance"" [label=""allowance""];
}
"
0x17f68886d00845867c154c912b4ccc506ec92fc7.sol,DelegatedShareholderAssociation,"contract DelegatedShareholderAssociation is TokenRecipient { uint public minimumQuorum; uint public debatingPeriodInMinutes; Proposal[] public proposals; uint public numProposals; ERC20 public sharesTokenAddress; mapping (address => address) public delegatesByDelegator; mapping (address => uint) public lockedDelegatingTokens; mapping (address => uint) public delegatedAmountsByDelegate; uint public totalLockedTokens; uint public requiredSharesToBeBoardMember; TokenLocker public tokenLocker; event ProposalAdded(uint proposalID, address recipient, uint amount, bytes metadataHash); event Voted(uint proposalID, bool position, address voter); event ProposalTallied(uint proposalID, uint yea, uint nay, uint quorum, bool active); event ChangeOfRules(uint newMinimumQuorum, uint newDebatingPeriodInMinutes, address newSharesTokenAddress); event TokensDelegated(address indexed delegator, uint numberOfTokens, address indexed delegate); event TokensUndelegated(address indexed delegator, uint numberOfTokens, address indexed delegate); struct Proposal { address recipient; uint amount; bytes metadataHash; uint timeCreated; uint votingDeadline; bool finalized; bool proposalPassed; uint numberOfVotes; bytes32 proposalHash; Vote[] votes; mapping (address => bool) voted; }",1,"subgraph cluster_1103_DelegatedShareholderAssociation {
label=""DelegatedShareholderAssociation"";
""1103_changeVotingRules"" [label=""changeVotingRules""];
""1103_hasVoted"" [label=""hasVoted""];
""1103_vote"" [label=""vote""];
""1103_executeProposal"" [label=""executeProposal""];
""1103_countVotes"" [label=""countVotes""];
""1103_checkProposalCode"" [label=""checkProposalCode""];
""1103_setDelegateAndLockTokens"" [label=""setDelegateAndLockTokens""];
""1103_clearDelegateAndUnlockTokens"" [label=""clearDelegateAndUnlockTokens""];
""1103_newProposal"" [label=""newProposal""];
""1103_newProposal"" -> ""1103_onlyBoardMembers"";
""1103_executeProposal"" -> ""1103_countVotes"";
""1103_setDelegateAndLockTokens"" -> ""1103_onlyShareholders"";
""1103_setDelegateAndLockTokens"" -> ""1103_onlyUndelegated"";
""1103_newProposal"" -> ""1103_notSelf"";
""1103_vote"" -> ""1103_onlyShareholders"";
""1103_vote"" -> ""1103_notSelf"";
""1103_clearDelegateAndUnlockTokens"" -> ""1103_onlyDelegated"";
""1103_executeProposal"" -> ""1103_notSelf"";
""1103_changeVotingRules"" -> ""1103_onlySelf"";
""1103_setDelegateAndLockTokens"" -> ""1103_notSelf"";
""1103_clearDelegateAndUnlockTokens"" -> ""1103_notSelf"";
}
"
0x85b794252e7f1b2b24392a5267ff2086c0c3d7d1.sol,CashPokerProPreICO,"contract CashPokerProPreICO is Ownable, Pausable { using SafeMath for uint; address public tokenWallet; uint public tokensSold; uint public weiRaised; uint public investorCount; Token public token; uint constant minInvest = 0.01 ether; uint constant tokensLimit = 10000000 * 1 ether; uint256 public startTime = 1503770400; uint256 public endTime = 1504893600; uint price = 0.00017 * 1 ether; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); function CashPokerProPreICO() { tokenWallet = msg.sender; }",1,"subgraph cluster_489_CashPokerProPreICO {
label=""CashPokerProPreICO"";
""489_fallback"" [label=""fallback""];
""489_setTokenWallet"" [label=""setTokenWallet""];
""489_withdrawal"" [label=""withdrawal""];
""489_setToken"" [label=""setToken""];
""489_buyTokens"" [label=""buyTokens""];
""489_transfer"" [label=""transfer""];
""489_CashPokerProPreICO"" [label=""CashPokerProPreICO""];
""489_setTokenWallet"" -> ""489_onlyOwner"";
""489_withdrawal"" -> ""489_onlyOwner"";
""489_setToken"" -> ""489_onlyOwner"";
""489_buyTokens"" -> ""489_whenNotPaused"";
""489_transfer"" -> ""489_onlyOwner"";
""489_fallback"" -> ""489_buyTokens"";
}
"
0x01d6208f95cf2292c350fc8bb1b1f29230352675.sol,DepositWithdraw,"contract DepositWithdraw is Claimable, Withdrawable { using SafeMath for uint256; struct TransferRecord { uint256 timeStamp; address account; uint256 value; }",1,"subgraph cluster_981_DepositWithdraw {
label=""DepositWithdraw"";
""981_checkWithdrawAmount"" [label=""checkWithdrawAmount""];
""981_setWithdrawWallet"" [label=""setWithdrawWallet""];
""981_recordWithdraw"" [label=""recordWithdraw""];
""981_getDepositNum"" [label=""getDepositNum""];
""981_getOneWithdrawRec"" [label=""getOneWithdrawRec""];
""981_withdrawTokenToDefault"" [label=""withdrawTokenToDefault""];
""981_bytesToBytes32"" [label=""bytesToBytes32""];
""981_receiveApproval"" [label=""receiveApproval""];
""981_getOneDepositRec"" [label=""getOneDepositRec""];
""981_constructor"" [label=""constructor""];
""981_withdrawToken"" [label=""withdrawToken""];
""981_getWithdrawNum"" [label=""getWithdrawNum""];
""981_recordWithdraw"" -> ""981_onlyOwner"";
""981_withdrawToken"" -> ""981_checkWithdrawAmount"";
""981_withdrawTokenToDefault"" -> ""981_withdrawToken"";
""981_receiveApproval"" -> ""981_onlyOwner"";
""981_withdrawTokenToDefault"" -> ""981_onlyOwner"";
""981_withdrawToken"" -> ""981_onlyOwner"";
""981_setWithdrawWallet"" -> ""981_onlyOwner"";
""981_withdrawToken"" -> ""981_recordWithdraw"";
""981_receiveApproval"" -> ""981_bytesToBytes32"";
}
"
0x88355a32a8c5cc399aa09b9d21ebcba935ae5d2f.sol,BankWallet,"contract BankWallet is Pausable, RequiringAuthorization, SafeMath { address public edgelessToken; address public edgelessCasino; uint public maxFundAmount = 0.22 ether; event Withdrawal(address _token, uint _amount); event Deposit(address _receiver, uint _amount); event Fund(address _receiver, uint _amount); constructor(address _token, address _casino) public { edgelessToken = _token; edgelessCasino = _casino; owner = msg.sender; }",1,"subgraph cluster_666_BankWallet {
label=""BankWallet"";
""666_setMaxFundAmount"" [label=""setMaxFundAmount""];
""666_setCasinoContract"" [label=""setCasinoContract""];
""666_withdraw"" [label=""withdraw""];
""666_fallback"" [label=""fallback""];
""666_constructor"" [label=""constructor""];
""666__approveForCasino"" [label=""_approveForCasino""];
""666_approve"" [label=""approve""];
""666_deposit"" [label=""deposit""];
""666_fund"" [label=""fund""];
""666_withdraw"" -> ""666_onlyAdmin"";
""666_setMaxFundAmount"" -> ""666_onlyAdmin"";
""666_setCasinoContract"" -> ""666__approveForCasino"";
""666_setCasinoContract"" -> ""666_onlyAdmin"";
""666_fund"" -> ""666_onlyAuthorized"";
""666_deposit"" -> ""666_onlyAuthorized"";
""666_approve"" -> ""666__approveForCasino"";
""666_approve"" -> ""666_onlyAuthorized"";
}
"
0xaa63c8683647ef91b3fdab4b4989ee9588da297b.sol,DSProxy,"contract DSProxy is DSAuth, DSNote { DSProxyCache public cache; function DSProxy(address _cacheAddr) public { require(setCache(_cacheAddr)); }",1,"subgraph cluster_390_DSProxyCache {
label=""DSProxyCache"";
""390_read"" [label=""read""];
""390_write"" [label=""write""];
}
"
0xa227d444a52fd21c3a848c7650bc2cd5832f6487.sol,KTFForTestMigration,"contract KTFForTestMigration is PartialERC20, Ownable { string public name; string public symbol; uint32 public decimals; PrivateToken public pktf; uint32 public holderCount; constructor(PrivateToken _pktf) public { symbol = ; name = ; decimals = 18; _totalSupply = 0; _balances[msg.sender] = _totalSupply; pktf = _pktf; }",1,"subgraph cluster_1463_KTFForTestMigration {
label=""KTFForTestMigration"";
""1463_migrateFromPKTF"" [label=""migrateFromPKTF""];
""1463_constructor"" [label=""constructor""];
""1463_mint"" [label=""mint""];
""1463_mint"" -> ""1463_onlyOwner"";
""1463_migrateFromPKTF"" -> ""1463_onlyOwner"";
""1463_mint"" -> ""1463__mint"";
""1463_migrateFromPKTF"" -> ""1463_mint"";
}
"
0xbc97f1508fdeb0a63b25f3a4806b62ef5370e8ab.sol,CryptoBeginnerQuest,contract CryptoBeginnerQuest { using SafeMath for uint256; address private administrator; address public miningWarAddress; CryptoEngineerInterface public Engineer; CryptoDepositInterface public Deposit; CryptoMiningWarInterface public MiningWar; CryptoAirdropGameInterface public AirdropGame; CryptoBossWannaCryInterface public BossWannaCry; CryptoArenaInterface public Arena; uint256 private miningWarDeadline; uint256 private miningWarRound; mapping(address => Player) private players; mapping(address => MinerQuest) private minerQuests; mapping(address => EngineerQuest) private engineerQuests; mapping(address => DepositQuest) private depositQuests; mapping(address => JoinAirdropQuest) private joinAirdropQuests; mapping(address => AtkBossQuest) private atkBossQuests; mapping(address => AtkPlayerQuest) private atkPlayerQuests; mapping(address => BoosterQuest) private boosterQuests; mapping(address => RedbullQuest) private redbullQuests; struct Player { uint256 miningWarRound; uint256 currentQuest; },1,"subgraph cluster_2473_CryptoBeginnerQuest {
label=""CryptoBeginnerQuest"";
""2473_setMiningWarInterface"" [label=""setMiningWarInterface""];
""2473_confirmMinerQuest"" [label=""confirmMinerQuest""];
""2473_getPlayerDepositData"" [label=""getPlayerDepositData""];
""2473_getData"" [label=""getData""];
""2473_checkJoinAirdropQuest"" [label=""checkJoinAirdropQuest""];
""2473_upgrade"" [label=""upgrade""];
""2473_getMinerLv1"" [label=""getMinerLv1""];
""2473_addAtkBossQuest"" [label=""addAtkBossQuest""];
""2473_getPlayerBossWannaCryData"" [label=""getPlayerBossWannaCryData""];
""2473_checkRedbullQuest"" [label=""checkRedbullQuest""];
""2473_isContractMiniGame"" [label=""isContractMiniGame""];
""2473_confirmQuest"" [label=""confirmQuest""];
""2473_getMiningWarRoundOfPlayer"" [label=""getMiningWarRoundOfPlayer""];
""2473_addAtkPlayerQuest"" [label=""addAtkPlayerQuest""];
""2473_checkGetFreeQuest"" [label=""checkGetFreeQuest""];
""2473_checkAtkPlayerQuest"" [label=""checkAtkPlayerQuest""];
""2473_getPlayerAirdropGameData"" [label=""getPlayerAirdropGameData""];
""2473_checkBoosterQuest"" [label=""checkBoosterQuest""];
""2473_getMiningWarDealine"" [label=""getMiningWarDealine""];
""2473_getNextTimeAtkPlayer"" [label=""getNextTimeAtkPlayer""];
""2473_setArenaInterface"" [label=""setArenaInterface""];
""2473_addDepositQuest"" [label=""addDepositQuest""];
""2473_setupGame"" [label=""setupGame""];
""2473_confirmJoinAirdropQuest"" [label=""confirmJoinAirdropQuest""];
""2473_addEngineerQuest"" [label=""addEngineerQuest""];
""2473_getBoosters"" [label=""getBoosters""];
""2473_addLevelQuest"" [label=""addLevelQuest""];
""2473_addQuest"" [label=""addQuest""];
""2473_confirmAtkBossQuest"" [label=""confirmAtkBossQuest""];
""2473_setBossWannaCryInterface"" [label=""setBossWannaCryInterface""];
""2473_getEngineerLv1"" [label=""getEngineerLv1""];
""2473_getMiningWarRound"" [label=""getMiningWarRound""];
""2473_constructor"" [label=""constructor""];
""2473_getRedbulls"" [label=""getRedbulls""];
""2473_confirmEngineerQuest"" [label=""confirmEngineerQuest""];
""2473_fallback"" [label=""fallback""];
""2473_checkAtkBossQuest"" [label=""checkAtkBossQuest""];
""2473_addRedbullQuest"" [label=""addRedbullQuest""];
""2473_setupMiniGame"" [label=""setupMiniGame""];
""2473_confirmRedbullQuest"" [label=""confirmRedbullQuest""];
""2473_confirmGetFreeQuest"" [label=""confirmGetFreeQuest""];
""2473_addBoosterQuest"" [label=""addBoosterQuest""];
""2473_setDepositInterface"" [label=""setDepositInterface""];
""2473_checkEngineerQuest"" [label=""checkEngineerQuest""];
""2473_addMinerQuest"" [label=""addMinerQuest""];
""2473_confirmDepositQuest"" [label=""confirmDepositQuest""];
""2473_checkQuest"" [label=""checkQuest""];
""2473_setEngineerInterface"" [label=""setEngineerInterface""];
""2473_setAirdropGameInterface"" [label=""setAirdropGameInterface""];
""2473_addJoinAirdropQuest"" [label=""addJoinAirdropQuest""];
""2473_checkMinerQuest"" [label=""checkMinerQuest""];
""2473_confirmAtkPlayerQuest"" [label=""confirmAtkPlayerQuest""];
""2473_checkDepositQuest"" [label=""checkDepositQuest""];
""2473_confirmBoosterQuest"" [label=""confirmBoosterQuest""];
""2473_addQuest"" -> ""2473_addJoinAirdropQuest"";
""2473_confirmQuest"" -> ""2473_addQuest"";
""2473_confirmQuest"" -> ""2473_confirmDepositQuest"";
""2473_addLevelQuest"" -> ""2473_isAdministrator"";
""2473_checkQuest"" -> ""2473_checkJoinAirdropQuest"";
""2473_addQuest"" -> ""2473_addEngineerQuest"";
""2473_checkQuest"" -> ""2473_checkBoosterQuest"";
""2473_addLevelQuest"" -> ""2473_addDepositQuest"";
""2473_addLevelQuest"" -> ""2473_addAtkPlayerQuest"";
""2473_checkMinerQuest"" -> ""2473_getMinerLv1"";
""2473_checkQuest"" -> ""2473_checkGetFreeQuest"";
""2473_addQuest"" -> ""2473_addMinerQuest"";
""2473_constructor"" -> ""2473_setEngineerInterface"";
""2473_setEngineerInterface"" -> ""2473_isAdministrator"";
""2473_addQuest"" -> ""2473_addBoosterQuest"";
""2473_setAirdropGameInterface"" -> ""2473_isAdministrator"";
""2473_checkQuest"" -> ""2473_checkEngineerQuest"";
""2473_addDepositQuest"" -> ""2473_getPlayerDepositData"";
""2473_setupGame"" -> ""2473_getMiningWarDealine"";
""2473_upgrade"" -> ""2473_isAdministrator"";
""2473_checkBoosterQuest"" -> ""2473_getBoosters"";
""2473_addLevelQuest"" -> ""2473_addMinerQuest"";
""2473_setMiningWarInterface"" -> ""2473_isAdministrator"";
""2473_checkAtkBossQuest"" -> ""2473_getPlayerBossWannaCryData"";
""2473_addLevelQuest"" -> ""2473_addJoinAirdropQuest"";
""2473_addQuest"" -> ""2473_addDepositQuest"";
""2473_checkGetFreeQuest"" -> ""2473_getMiningWarRoundOfPlayer"";
""2473_constructor"" -> ""2473_setBossWannaCryInterface"";
""2473_addLevelQuest"" -> ""2473_addAtkBossQuest"";
""2473_checkRedbullQuest"" -> ""2473_getRedbulls"";
""2473_addLevelQuest"" -> ""2473_addRedbullQuest"";
""2473_checkQuest"" -> ""2473_checkAtkBossQuest"";
""2473_setArenaInterface"" -> ""2473_isAdministrator"";
""2473_confirmQuest"" -> ""2473_confirmEngineerQuest"";
""2473_addQuest"" -> ""2473_addAtkPlayerQuest"";
""2473_confirmQuest"" -> ""2473_confirmBoosterQuest"";
""2473_checkJoinAirdropQuest"" -> ""2473_getPlayerAirdropGameData"";
""2473_constructor"" -> ""2473_setArenaInterface"";
""2473_setBossWannaCryInterface"" -> ""2473_isAdministrator"";
""2473_checkEngineerQuest"" -> ""2473_getEngineerLv1"";
""2473_confirmQuest"" -> ""2473_confirmRedbullQuest"";
""2473_checkDepositQuest"" -> ""2473_getPlayerDepositData"";
""2473_addQuest"" -> ""2473_addRedbullQuest"";
""2473_confirmQuest"" -> ""2473_confirmJoinAirdropQuest"";
""2473_getData"" -> ""2473_checkQuest"";
""2473_setDepositInterface"" -> ""2473_isAdministrator"";
""2473_addQuest"" -> ""2473_addAtkBossQuest"";
""2473_confirmQuest"" -> ""2473_confirmGetFreeQuest"";
""2473_constructor"" -> ""2473_setMiningWarInterface"";
""2473_addAtkBossQuest"" -> ""2473_getPlayerBossWannaCryData"";
""2473_constructor"" -> ""2473_setAirdropGameInterface"";
""2473_setupGame"" -> ""2473_getMiningWarRound"";
""2473_checkAtkPlayerQuest"" -> ""2473_getNextTimeAtkPlayer"";
""2473_constructor"" -> ""2473_setDepositInterface"";
""2473_checkQuest"" -> ""2473_checkDepositQuest"";
""2473_checkQuest"" -> ""2473_checkMinerQuest"";
""2473_addLevelQuest"" -> ""2473_addEngineerQuest"";
""2473_addAtkPlayerQuest"" -> ""2473_getNextTimeAtkPlayer"";
""2473_checkQuest"" -> ""2473_checkRedbullQuest"";
""2473_addLevelQuest"" -> ""2473_addBoosterQuest"";
""2473_confirmQuest"" -> ""2473_confirmMinerQuest"";
""2473_confirmQuest"" -> ""2473_checkQuest"";
""2473_addJoinAirdropQuest"" -> ""2473_getPlayerAirdropGameData"";
""2473_confirmQuest"" -> ""2473_confirmAtkBossQuest"";
""2473_confirmQuest"" -> ""2473_confirmAtkPlayerQuest"";
""2473_checkQuest"" -> ""2473_checkAtkPlayerQuest"";
}
"
0x4720f2468eeb7a795945c5ffbc3b0178e32250e0.sol,ExternalContracts,contract ExternalContracts is Ownable { MixGenInterface public geneScience; RewardContract public reward; address public storeAddress; function setMixGenAddress(address _address) external onlyOwner { MixGenInterface candidateContract = MixGenInterface(_address); require(candidateContract.isMixGen()); geneScience = candidateContract; },1,"subgraph cluster_231_ExternalContracts {
label=""ExternalContracts"";
""231_setStoreAddress"" [label=""setStoreAddress""];
""231_setRewardAddress"" [label=""setRewardAddress""];
""231_setMixGenAddress"" [label=""setMixGenAddress""];
""231_setStoreAddress"" -> ""231_onlyOwner"";
""231_setMixGenAddress"" -> ""231_onlyOwner"";
""231_setRewardAddress"" -> ""231_onlyOwner"";
}
"
0xeb907a50921e052cbee233811beaf0839d2a98fd.sol,Advertisement,contract Advertisement { struct Filters { string countries; string packageName; uint[] vercodes; },1,"subgraph cluster_888_Advertisement {
label=""Advertisement"";
""888_cancelCampaign"" [label=""cancelCampaign""];
""888_payFromCampaign"" [label=""payFromCampaign""];
""888_getPackageNameOfCampaign"" [label=""getPackageNameOfCampaign""];
""888_getPriceOfCampaign"" [label=""getPriceOfCampaign""];
""888_getStartDateOfCampaign"" [label=""getStartDateOfCampaign""];
""888_division"" [label=""division""];
""888_getBidIdList"" [label=""getBidIdList""];
""888_getEndDateOfCampaign"" [label=""getEndDateOfCampaign""];
""888_getCountriesOfCampaign"" [label=""getCountriesOfCampaign""];
""888_addCampaignToCountryMap"" [label=""addCampaignToCountryMap""];
""888_registerPoA"" [label=""registerPoA""];
""888_getOwnerOfCampaign"" [label=""getOwnerOfCampaign""];
""888_getBudgetOfCampaign"" [label=""getBudgetOfCampaign""];
""888_getCampaignValidity"" [label=""getCampaignValidity""];
""888_getVercodesOfCampaign"" [label=""getVercodesOfCampaign""];
""888_Advertisement"" [label=""Advertisement""];
""888_getCountryList"" [label=""getCountryList""];
""888_getTotalCampaignsByCountry"" [label=""getTotalCampaignsByCountry""];
""888_addCampaign"" [label=""addCampaign""];
""888_uintToBytes"" [label=""uintToBytes""];
""888_getCampaignsByCountry"" [label=""getCampaignsByCountry""];
""888_createCampaign"" [label=""createCampaign""];
""888_setBudgetOfCampaign"" [label=""setBudgetOfCampaign""];
""888_setCampaignValidity"" [label=""setCampaignValidity""];
""888_payFromCampaign"" -> ""888_division"";
""888_createCampaign"" -> ""888_uintToBytes"";
""888_cancelCampaign"" -> ""888_getOwnerOfCampaign"";
""888_cancelCampaign"" -> ""888_setBudgetOfCampaign"";
""888_createCampaign"" -> ""888_addCampaign"";
""888_cancelCampaign"" -> ""888_getBudgetOfCampaign"";
""888_addCampaign"" -> ""888_addCampaignToCountryMap"";
""888_cancelCampaign"" -> ""888_setCampaignValidity"";
}
"
0xeb6486b13b56314b37aacac2ec6889d11a763de1.sol,BasicCGRID,contract BasicCGRID is ERC223 { using SafeMath for uint256; uint256 public constant decimals = 8; string public constant symbol = ; string public constant name = ; uint256 public _totalSupply = 10**17; address public owner; address public airdrop; bool public tradable = false; mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) allowed; modifier onlyOwner() { require(msg.sender == owner); _; },1,"subgraph cluster_709_BasicCGRID {
label=""BasicCGRID"";
""709_totalSupply"" [label=""totalSupply""];
""709_transferFrom"" [label=""transferFrom""];
""709_balanceOf"" [label=""balanceOf""];
""709_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""709_approve"" [label=""approve""];
""709_updateAirdrop"" [label=""updateAirdrop""];
""709_turnOnTradable"" [label=""turnOnTradable""];
""709_transfer"" [label=""transfer""];
""709_BasicCGRID"" [label=""BasicCGRID""];
""709_isContract"" [label=""isContract""];
""709_allowance"" [label=""allowance""];
""709_updateAirdrop"" -> ""709_onlyOwner"";
""709_transfer"" -> ""709_isContract"";
""709_turnOnTradable"" -> ""709_onlyOwner"";
""709_transferFrom"" -> ""709_isTradable"";
""709_transfer"" -> ""709_isTradable"";
""709_transfer"" -> ""709_balanceOf"";
}
"
0xc0eb85285d83217cd7c891702bcbc0fc401e2d9d.sol,HVNToken,"contract HVNToken is ERC20Interface, SafeMath, Owned { mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 8; string public version = ; bool public transfersFrozen = false; modifier onlyPayloadSize(uint numwords) { assert(msg.data.length == numwords * 32 + 4); _; }",1,"subgraph cluster_651_HVNToken {
label=""HVNToken"";
""651_transfer"" [label=""transfer""];
""651_transferFrom"" [label=""transferFrom""];
""651_claimTokens"" [label=""claimTokens""];
""651_balanceOf"" [label=""balanceOf""];
""651_unfreezeTransfers"" [label=""unfreezeTransfers""];
""651_approveAndCall"" [label=""approveAndCall""];
""651_approve"" [label=""approve""];
""651_HVNToken"" [label=""HVNToken""];
""651_allowance"" [label=""allowance""];
""651_freezeTransfers"" [label=""freezeTransfers""];
""651_transfer"" -> ""651_onlyPayloadSize"";
""651_unfreezeTransfers"" -> ""651_ownerOnly"";
""651_freezeTransfers"" -> ""651_ownerOnly"";
""651_HVNToken"" -> ""651_ownerOnly"";
""651_allowance"" -> ""651_onlyPayloadSize"";
""651_transferFrom"" -> ""651_whenNotFrozen"";
""651_approveAndCall"" -> ""651_approve"";
""651_transfer"" -> ""651_whenNotFrozen"";
""651_transferFrom"" -> ""651_sub"";
""651_claimTokens"" -> ""651_ownerOnly"";
""651_transferFrom"" -> ""651_onlyPayloadSize"";
""651_transfer"" -> ""651_sub"";
}
"
0x2775f2a3c83bee1541d1d1bc308b3bb432b45151.sol,PLANETAGROToken,contract PLANETAGROToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 20000000 * (10**18); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; function PLANETAGROToken () { owner = msg.sender; },1,"subgraph cluster_756_PLANETAGROToken {
label=""PLANETAGROToken"";
""756_freezeAccount"" [label=""freezeAccount""];
""756_transfer"" [label=""transfer""];
""756_createTokens"" [label=""createTokens""];
""756_totalSupply"" [label=""totalSupply""];
""756_transferFrom"" [label=""transferFrom""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_PLANETAGROToken"" [label=""PLANETAGROToken""];
""756_approve"" [label=""approve""];
""756_setOwner"" [label=""setOwner""];
""756_refundTokens"" [label=""refundTokens""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_transfer"" -> ""756_transfer"";
""756_transferFrom"" -> ""756_transferFrom"";
""756_approve"" -> ""756_approve"";
""756_createTokens"" -> ""756_safeAdd"";
""756_approve"" -> ""756_allowance"";
""756_createTokens"" -> ""756_safeSub"";
}
"
0x6c764fac2ed1c5fabf8bcd86bae68d8cdbe8290e.sol,BaseWallet,"contract BaseWallet { address public implementation; address public owner; mapping (address => bool) public authorised; mapping (bytes4 => address) public enabled; uint public modules; event AuthorisedModule(address indexed module, bool value); event EnabledStaticCall(address indexed module, bytes4 indexed method); event Invoked(address indexed module, address indexed target, uint indexed value, bytes data); event Received(uint indexed value, address indexed sender, bytes data); event OwnerChanged(address owner); modifier moduleOnly { require(authorised[msg.sender], ); _; }",1,"subgraph cluster_1406_BaseWallet {
label=""BaseWallet"";
""1406_init"" [label=""init""];
""1406_invoke"" [label=""invoke""];
""1406_fallback"" [label=""fallback""];
""1406_enableStaticCall"" [label=""enableStaticCall""];
""1406_authorised"" [label=""authorised""];
""1406_owner"" [label=""owner""];
""1406_authoriseModule"" [label=""authoriseModule""];
""1406_setOwner"" [label=""setOwner""];
""1406_setOwner"" -> ""1406_moduleOnly"";
""1406_invoke"" -> ""1406_moduleOnly"";
""1406_authoriseModule"" -> ""1406_moduleOnly"";
""1406_enableStaticCall"" -> ""1406_moduleOnly"";
}
"
0x40818f0d14325a9eba6b2a7d60bd61cb9e27ef0c.sol,Trade,"contract Trade is Registry { using SafeMath for uint; using SafeMath for uint256; event KyberTrade( address src, uint srcAmt, address dest, uint destAmt, address beneficiary, uint minConversionRate, address affiliate ); function executeTrade( address src, address dest, uint srcAmt, uint minConversionRate ) public payable returns (uint destAmt) { address protocolAdmin = getAddress(); uint ethQty; IERC20 tokenFunctions = IERC20(src); if (src == getAddress()) { require(msg.value == srcAmt, ); ethQty = srcAmt; }",1,"subgraph cluster_466_Trade {
label=""Trade"";
""466_approveKyber"" [label=""approveKyber""];
""466_getExpectedPrice"" [label=""getExpectedPrice""];
""466_executeTrade"" [label=""executeTrade""];
""466_getExpectedPrice"" -> ""466_getAddress"";
""466_executeTrade"" -> ""466_getAddress"";
""466_approveKyber"" -> ""466_getAddress"";
}
"
0x0f5d6ae470d3b93eb3347212d480bf9b3acfe4f9.sol,LYFToken,contract LYFToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 120000000 * (10**8); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; function LYFToken () { owner = msg.sender; },1,"subgraph cluster_756_LYFToken {
label=""LYFToken"";
""756_totalSupply"" [label=""totalSupply""];
""756_createTokens"" [label=""createTokens""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_approve"" [label=""approve""];
""756_transfer"" [label=""transfer""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_setOwner"" [label=""setOwner""];
""756_LYFToken"" [label=""LYFToken""];
""756_transferFrom"" [label=""transferFrom""];
""756_refundTokens"" [label=""refundTokens""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_createTokens"" -> ""756_safeAdd"";
""756_approve"" -> ""756_allowance"";
""756_approve"" -> ""756_approve"";
""756_transfer"" -> ""756_transfer"";
""756_transferFrom"" -> ""756_transferFrom"";
""756_createTokens"" -> ""756_safeSub"";
}
"
0x91db07e4401c2559c7eb8290a77a0feef50843fd.sol,Crowdsale,"contract Crowdsale { using SafeMath for uint256; address public wallet; address public addressOfTokenUsedAsReward; uint256 public price = 3000; token tokenReward; uint256 public weiRaised; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); function Crowdsale() { wallet = 0x5daaAb630673a61f487965f90E13457a74F566D3; addressOfTokenUsedAsReward = 0x8aB10a31c97Af458Db24038Ed8b498590cf64d74; tokenReward = token(addressOfTokenUsedAsReward); }",1,"subgraph cluster_347_Crowdsale {
label=""Crowdsale"";
""347_changeWallet"" [label=""changeWallet""];
""347_Crowdsale"" [label=""Crowdsale""];
""347_changeTokenReward"" [label=""changeTokenReward""];
""347_stopSale"" [label=""stopSale""];
""347_buyTokens"" [label=""buyTokens""];
""347_startSale"" [label=""startSale""];
""347_setPrice"" [label=""setPrice""];
""347_forwardFunds"" [label=""forwardFunds""];
""347_fallback"" [label=""fallback""];
""347_withdrawTokens"" [label=""withdrawTokens""];
""347_validPurchase"" [label=""validPurchase""];
""347_buyTokens"" -> ""347_validPurchase"";
""347_fallback"" -> ""347_buyTokens"";
""347_buyTokens"" -> ""347_forwardFunds"";
}
"
0xecfe4b7afc47260cb590d3043d3f790a61bb7910.sol,EbyteDistribution,"contract EbyteDistribution { mapping (address => uint256) balances; mapping (address => bool) public blacklist; Token public ebyteToken; address public owner; uint256 public rate = 100000000; uint256 public percentage = 20; uint256 public ethBalance = 10000000000; uint256 public ebyteBalance = 100; bool public contractLocked = true; event sendTokens(address indexed to, uint256 value); event Locked(); event Unlocked(); function EbyteDistribution(address _tokenAddress, address _owner) { ebyteToken = Token(_tokenAddress); owner = _owner; }",1,"subgraph cluster_638_EbyteDistribution {
label=""EbyteDistribution"";
""638_getTokenBalance"" [label=""getTokenBalance""];
""638_setParameters"" [label=""setParameters""];
""638_disableWhitelist"" [label=""disableWhitelist""];
""638_unlockContract"" [label=""unlockContract""];
""638_withdraw"" [label=""withdraw""];
""638_transferOwnership"" [label=""transferOwnership""];
""638_distributeEbyteForEBYTE"" [label=""distributeEbyteForEBYTE""];
""638_EbyteDistribution"" [label=""EbyteDistribution""];
""638_lockContract"" [label=""lockContract""];
""638_distributeEbyteForETH"" [label=""distributeEbyteForETH""];
""638_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""638_enableWhitelist"" [label=""enableWhitelist""];
""638_distributeEbyte"" [label=""distributeEbyte""];
""638_distribution"" [label=""distribution""];
""638_fallback"" [label=""fallback""];
""638_getEthBalance"" [label=""getEthBalance""];
""638_tokensAvailable"" [label=""tokensAvailable""];
""638_balanceOf"" [label=""balanceOf""];
""638_withdraw"" -> ""638_onlyOwner"";
""638_fallback"" -> ""638_isUnlocked"";
""638_distributeEbyteForEBYTE"" -> ""638_getTokenBalance"";
""638_distributeEbyteForEBYTE"" -> ""638_onlyOwner"";
""638_withdrawForeignTokens"" -> ""638_onlyOwner"";
""638_fallback"" -> ""638_onlyWhitelist"";
""638_distribution"" -> ""638_distributeEbyteForEBYTE"";
""638_distribution"" -> ""638_onlyOwner"";
""638_enableWhitelist"" -> ""638_onlyOwner"";
""638_transferOwnership"" -> ""638_onlyOwner"";
""638_distribution"" -> ""638_distributeEbyteForETH"";
""638_unlockContract"" -> ""638_onlyOwner"";
""638_lockContract"" -> ""638_onlyOwner"";
""638_distributeEbyteForETH"" -> ""638_onlyOwner"";
""638_fallback"" -> ""638_getTokenBalance"";
""638_disableWhitelist"" -> ""638_onlyOwner"";
""638_distributeEbyte"" -> ""638_onlyOwner"";
""638_setParameters"" -> ""638_onlyOwner"";
""638_fallback"" -> ""638_getEthBalance"";
""638_distributeEbyteForETH"" -> ""638_getEthBalance"";
}
"
0xec841c878435ba4f28bf305a00c1483db0d96a20.sol,Events,contract Events { DBInterface public database; constructor(address _database) public{ database = DBInterface(_database); },1,"subgraph cluster_1000_Events {
label=""Events"";
""1000_escrow"" [label=""escrow""];
""1000_contractChange"" [label=""contractChange""];
""1000_consensus"" [label=""consensus""];
""1000_registration"" [label=""registration""];
""1000_operator"" [label=""operator""];
""1000_transaction"" [label=""transaction""];
""1000_asset"" [label=""asset""];
""1000_order"" [label=""order""];
""1000_message"" [label=""message""];
""1000_constructor"" [label=""constructor""];
""1000_exchange"" [label=""exchange""];
""1000_message"" -> ""1000_onlyApprovedContract"";
""1000_escrow"" -> ""1000_onlyApprovedContract"";
""1000_contractChange"" -> ""1000_onlyApprovedContract"";
""1000_exchange"" -> ""1000_onlyApprovedContract"";
""1000_registration"" -> ""1000_onlyApprovedContract"";
""1000_consensus"" -> ""1000_onlyApprovedContract"";
""1000_order"" -> ""1000_onlyApprovedContract"";
""1000_transaction"" -> ""1000_onlyApprovedContract"";
""1000_asset"" -> ""1000_onlyApprovedContract"";
""1000_operator"" -> ""1000_onlyApprovedContract"";
}
"
0x01d6208f95cf2292c350fc8bb1b1f29230352675.sol,DepositWithdraw,"contract DepositWithdraw is Claimable, Withdrawable { using SafeMath for uint256; struct TransferRecord { uint256 timeStamp; address account; uint256 value; }",1,"subgraph cluster_981_DepositWithdraw {
label=""DepositWithdraw"";
""981_checkWithdrawAmount"" [label=""checkWithdrawAmount""];
""981_setWithdrawWallet"" [label=""setWithdrawWallet""];
""981_recordWithdraw"" [label=""recordWithdraw""];
""981_getDepositNum"" [label=""getDepositNum""];
""981_getOneWithdrawRec"" [label=""getOneWithdrawRec""];
""981_withdrawTokenToDefault"" [label=""withdrawTokenToDefault""];
""981_bytesToBytes32"" [label=""bytesToBytes32""];
""981_receiveApproval"" [label=""receiveApproval""];
""981_getOneDepositRec"" [label=""getOneDepositRec""];
""981_constructor"" [label=""constructor""];
""981_withdrawToken"" [label=""withdrawToken""];
""981_getWithdrawNum"" [label=""getWithdrawNum""];
""981_recordWithdraw"" -> ""981_onlyOwner"";
""981_withdrawToken"" -> ""981_checkWithdrawAmount"";
""981_withdrawTokenToDefault"" -> ""981_withdrawToken"";
""981_receiveApproval"" -> ""981_onlyOwner"";
""981_withdrawTokenToDefault"" -> ""981_onlyOwner"";
""981_withdrawToken"" -> ""981_onlyOwner"";
""981_setWithdrawWallet"" -> ""981_onlyOwner"";
""981_withdrawToken"" -> ""981_recordWithdraw"";
""981_receiveApproval"" -> ""981_bytesToBytes32"";
}
"
0x44f958d420f0543353a5e4f14e827d73f01b4261.sol,EBBToken,"contract EBBToken is StandardToken, SafeMath { string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 18; string public version = ; address public ethFundDeposit; address public newContractAddr; bool public isFunding; uint256 public fundingStartBlock; uint256 public fundingStopBlock; uint256 public currentSupply; uint256 public tokenRaised = 0; uint256 public tokenMigrated = 0; uint256 public tokenExchangeRate = 5963; event AllocateToken(address indexed _to, uint256 _value); event IssueToken(address indexed _to, uint256 _value); event IncreaseSupply(uint256 _value); event DecreaseSupply(uint256 _value); event Migrate(address indexed _to, uint256 _value); function formatDecimals(uint256 _value) internal returns (uint256 ) { return _value * 10 ** decimals; }",1,"subgraph cluster_849_EBBToken {
label=""EBBToken"";
""849_decreaseSupply"" [label=""decreaseSupply""];
""849_increaseSupply"" [label=""increaseSupply""];
""849_stopFunding"" [label=""stopFunding""];
""849_changeOwner"" [label=""changeOwner""];
""849_transferETH"" [label=""transferETH""];
""849_setMigrateContract"" [label=""setMigrateContract""];
""849_allocateToken"" [label=""allocateToken""];
""849_startFunding"" [label=""startFunding""];
""849_fallback"" [label=""fallback""];
""849_setTokenExchangeRate"" [label=""setTokenExchangeRate""];
""849_EBBToken"" [label=""EBBToken""];
""849_migrate"" [label=""migrate""];
""849_formatDecimals"" [label=""formatDecimals""];
""849_migrate"" -> ""849_safeAdd"";
""849_decreaseSupply"" -> ""849_formatDecimals"";
""849_decreaseSupply"" -> ""849_safeSubtract"";
""849_transferETH"" -> ""849_isOwner"";
""849_allocateToken"" -> ""849_isOwner"";
""849_startFunding"" -> ""849_isOwner"";
""849_fallback"" -> ""849_safeMult"";
""849_allocateToken"" -> ""849_safeMult"";
""849_increaseSupply"" -> ""849_isOwner"";
""849_setMigrateContract"" -> ""849_isOwner"";
""849_EBBToken"" -> ""849_formatDecimals"";
""849_allocateToken"" -> ""849_formatDecimals"";
""849_allocateToken"" -> ""849_safeAdd"";
""849_setTokenExchangeRate"" -> ""849_isOwner"";
""849_changeOwner"" -> ""849_isOwner"";
""849_increaseSupply"" -> ""849_formatDecimals"";
""849_fallback"" -> ""849_safeAdd"";
""849_stopFunding"" -> ""849_isOwner"";
""849_increaseSupply"" -> ""849_safeAdd"";
""849_decreaseSupply"" -> ""849_isOwner"";
}
"
0x183891e9cfaee0c9e2dbcdfefe1505626c696951.sol,Crowdsale,"contract Crowdsale is Lockable, Operable, Withdrawal, PriceStrategy, LockableCrowdsale, WhitelistedCrowdsale, PausableCrowdsale { using SafeMath for uint256; constructor(uint256 _rateETHtoCHF, uint256 _minInvestmentInCHF, address _withdrawWallet, CosquareToken _token) PriceStrategy(_rateETHtoCHF, _minInvestmentInCHF) Withdrawal(_withdrawWallet) BaseCrowdsale(_token) public { }",1,"subgraph cluster_1587_PausableCrowdsale {
label=""PausableCrowdsale"";
""1587__preValidatePurchase"" [label=""_preValidatePurchase""];
""1587__preValidatePurchase"" -> ""1587__preValidatePurchase"";
""1587__preValidatePurchase"" -> ""1587_whenNotPaused"";
}
"
0x3a773baa30d09f04da0bd869b142ea5503a31022.sol,MiniMeTokenSimple,"contract MiniMeTokenSimple is StandardToken { string public name; uint8 public decimals; string public symbol; string public version = ; address public parentToken; uint public parentSnapShotBlock; uint public creationBlock; address public tokenFactory; function MiniMeTokenSimple( address _tokenFactory, address _parentToken, uint _parentSnapShotBlock, string _tokenName, uint8 _decimalUnits, string _tokenSymbol, bool _transfersEnabled ) { tokenFactory = _tokenFactory; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; parentToken = _parentToken; parentSnapShotBlock = _parentSnapShotBlock; transfersEnabled = _transfersEnabled; creationBlock = block.number; }",1,"subgraph cluster_500_MiniMeTokenSimple {
label=""MiniMeTokenSimple"";
""500_MiniMeTokenSimple"" [label=""MiniMeTokenSimple""];
""500_claimTokens"" [label=""claimTokens""];
""500_claimTokens"" -> ""500_onlyController"";
}
"
0x750c1d91864171d7e1715a6b53ee28c72b8faa09.sol,EthicHubUser,"contract EthicHubUser is Ownable, EthicHubBase { event UserStatusChanged(address target, string profile, bool isRegistered); constructor(address _storageAddress) EthicHubBase(_storageAddress) public { version = 3; }",1,"subgraph cluster_660_EthicHubUser {
label=""EthicHubUser"";
""660_deleteUserStatus"" [label=""deleteUserStatus""];
""660_registerPaymentGateway"" [label=""registerPaymentGateway""];
""660_registerLocalNode"" [label=""registerLocalNode""];
""660_unregisterLocalNode"" [label=""unregisterLocalNode""];
""660_registerRepresentative"" [label=""registerRepresentative""];
""660_constructor"" [label=""constructor""];
""660_unregisterPaymentGateway"" [label=""unregisterPaymentGateway""];
""660_changeUserStatus"" [label=""changeUserStatus""];
""660_unregisterCommunity"" [label=""unregisterCommunity""];
""660_unregisterRepresentative"" [label=""unregisterRepresentative""];
""660_unregisterInvestor"" [label=""unregisterInvestor""];
""660_registerInvestor"" [label=""registerInvestor""];
""660_viewRegistrationStatus"" [label=""viewRegistrationStatus""];
""660_registerCommunity"" [label=""registerCommunity""];
""660_unregisterCommunity"" -> ""660_onlyOwner"";
""660_registerLocalNode"" -> ""660_changeUserStatus"";
""660_constructor"" -> ""660_constructor"";
""660_registerInvestor"" -> ""660_onlyOwner"";
""660_unregisterInvestor"" -> ""660_deleteUserStatus"";
""660_unregisterLocalNode"" -> ""660_onlyOwner"";
""660_unregisterInvestor"" -> ""660_onlyOwner"";
""660_unregisterRepresentative"" -> ""660_onlyOwner"";
""660_registerCommunity"" -> ""660_changeUserStatus"";
""660_registerLocalNode"" -> ""660_onlyOwner"";
""660_unregisterLocalNode"" -> ""660_deleteUserStatus"";
""660_registerCommunity"" -> ""660_onlyOwner"";
""660_unregisterPaymentGateway"" -> ""660_onlyOwner"";
""660_registerRepresentative"" -> ""660_onlyOwner"";
""660_unregisterPaymentGateway"" -> ""660_deleteUserStatus"";
""660_unregisterCommunity"" -> ""660_deleteUserStatus"";
""660_unregisterRepresentative"" -> ""660_deleteUserStatus"";
""660_deleteUserStatus"" -> ""660_onlyOwner"";
""660_registerPaymentGateway"" -> ""660_changeUserStatus"";
""660_registerRepresentative"" -> ""660_changeUserStatus"";
""660_changeUserStatus"" -> ""660_onlyOwner"";
""660_registerPaymentGateway"" -> ""660_onlyOwner"";
""660_registerInvestor"" -> ""660_changeUserStatus"";
}
"
0x1dd6363c7f7a3150fb7ab13c29fe92f5bab23457.sol,CharityProject,"contract CharityProject is RBACManager { using SafeMath for uint256; modifier canWithdraw() { require( canWithdrawBeforeEnd || closingTime == 0 || block.timestamp > closingTime, ); _; }",1,"subgraph cluster_758_CharityProject {
label=""CharityProject"";
""758_constructor"" [label=""constructor""];
""758_setTimes"" [label=""setTimes""];
""758_setCanWithdrawBeforeEnd"" [label=""setCanWithdrawBeforeEnd""];
""758_hasClosed"" [label=""hasClosed""];
""758_hasStarted"" [label=""hasStarted""];
""758_withdrawTokens"" [label=""withdrawTokens""];
""758_maxGoalReached"" [label=""maxGoalReached""];
""758_setMaxGoal"" [label=""setMaxGoal""];
""758_totalRaised"" [label=""totalRaised""];
""758_maxGoalReached"" -> ""758_totalRaised"";
""758_withdrawTokens"" -> ""758_canWithdraw"";
""758_withdrawTokens"" -> ""758_onlyOwnerOrManager"";
""758_setMaxGoal"" -> ""758_onlyOwner"";
""758_setCanWithdrawBeforeEnd"" -> ""758_onlyOwner"";
""758_constructor"" -> ""758_addManager"";
""758_setTimes"" -> ""758_onlyOwner"";
}
"
0x589fbf3d4168518b8b849b7eedfdb719407900ca.sol,AirDropLight,contract AirDropLight is OwnableWithAdmin { using SafeMath for uint256; uint256 public grandTotalClaimed = 0; ERC20 public token; uint256 maxDirect = 10000 * (10**uint256(18)); mapping(address => bool) public recipients; address[] public addresses; constructor(ERC20 _token) public { require(_token != address(0)); token = _token; },1,"subgraph cluster_527_AirDropLight {
label=""AirDropLight"";
""527_fallback"" [label=""fallback""];
""527_transferDirect"" [label=""transferDirect""];
""527_refundTokens"" [label=""refundTokens""];
""527_transferManyDirect"" [label=""transferManyDirect""];
""527_returnTokens"" [label=""returnTokens""];
""527_constructor"" [label=""constructor""];
""527_returnTokens"" -> ""527_onlyOwner"";
""527_transferManyDirect"" -> ""527_onlyOwnerOrAdmin"";
""527_refundTokens"" -> ""527_onlyOwner"";
""527_transferManyDirect"" -> ""527_transferDirect"";
}
"
0x861a174d677946d8c2bea8f9636a53fde1668215.sol,SmartContractBank,contract SmartContractBank { using SafeMath for uint256; struct Investor { uint256 deposit; uint256 paymentTime; uint256 withdrawals; bool increasedPercent; bool insured; },1,"subgraph cluster_1079_SmartContractBank {
label=""SmartContractBank"";
""1079_fallback"" [label=""fallback""];
""1079_allocation"" [label=""allocation""];
""1079_getPhasePercent"" [label=""getPhasePercent""];
""1079_increasePercent"" [label=""increasePercent""];
""1079_withdraw"" [label=""withdraw""];
""1079_setInsured"" [label=""setInsured""];
""1079_setInsuranceFundAddress"" [label=""setInsuranceFundAddress""];
""1079_getUserBalance"" [label=""getUserBalance""];
""1079_closeEntrance"" [label=""closeEntrance""];
""1079_getUserBalance"" -> ""1079_getPhasePercent"";
""1079_fallback"" -> ""1079_increasePercent"";
""1079_setInsured"" -> ""1079_onlyIF"";
""1079_withdraw"" -> ""1079_getUserBalance"";
""1079_fallback"" -> ""1079_allocation"";
""1079_fallback"" -> ""1079_withdraw"";
}
"
0x4bc78f6619991b029b867b6d88d39c196332aba3.sol,AlgoDEX,"contract AlgoDEX is SafeMath { address public admin; address public feeAccount; address public accountLevelsAddr; uint public feeMake; uint public feeTake; uint public feeRebate; mapping (address => mapping (address => uint)) public tokens; mapping (address => mapping (bytes32 => bool)) public orders; mapping (address => mapping (bytes32 => uint)) public orderFills; event Order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user); event Cancel(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s); event Trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give); event Deposit(address token, address user, uint amount, uint balance); event Withdraw(address token, address user, uint amount, uint balance); constructor (address admin_, address feeAccount_, address accountLevelsAddr_, uint feeMake_, uint feeTake_, uint feeRebate_) public { admin = admin_; feeAccount = feeAccount_; accountLevelsAddr = accountLevelsAddr_; feeMake = feeMake_; feeTake = feeTake_; feeRebate = feeRebate_; }",1,"subgraph cluster_1614_AlgoDEX {
label=""AlgoDEX"";
""1614_changeFeeTake"" [label=""changeFeeTake""];
""1614_changeFeeMake"" [label=""changeFeeMake""];
""1614_fallback"" [label=""fallback""];
""1614_cancelOrder"" [label=""cancelOrder""];
""1614_trade"" [label=""trade""];
""1614_deposit"" [label=""deposit""];
""1614_availableVolume"" [label=""availableVolume""];
""1614_changeFeeRebate"" [label=""changeFeeRebate""];
""1614_depositToken"" [label=""depositToken""];
""1614_order"" [label=""order""];
""1614_changeAccountLevelsAddr"" [label=""changeAccountLevelsAddr""];
""1614_balanceOf"" [label=""balanceOf""];
""1614_withdrawToken"" [label=""withdrawToken""];
""1614_changeAdmin"" [label=""changeAdmin""];
""1614_amountFilled"" [label=""amountFilled""];
""1614_withdraw"" [label=""withdraw""];
""1614_tradeBalances"" [label=""tradeBalances""];
""1614_constructor"" [label=""constructor""];
""1614_testTrade"" [label=""testTrade""];
""1614_changeFeeAccount"" [label=""changeFeeAccount""];
""1614_withdraw"" -> ""1614_safeSub"";
""1614_trade"" -> ""1614_tradeBalances"";
""1614_availableVolume"" -> ""1614_safeSub"";
""1614_depositToken"" -> ""1614_safeAdd"";
""1614_testTrade"" -> ""1614_availableVolume"";
""1614_withdrawToken"" -> ""1614_safeSub"";
""1614_deposit"" -> ""1614_safeAdd"";
""1614_tradeBalances"" -> ""1614_safeAdd"";
""1614_tradeBalances"" -> ""1614_safeSub"";
""1614_availableVolume"" -> ""1614_safeMul"";
""1614_trade"" -> ""1614_safeAdd"";
""1614_tradeBalances"" -> ""1614_safeMul"";
}
"
0x02242d41c54f261a85ac8e8efa7046a3dfd53113.sol,C_banK,"contract C_banK { function Put(uint _unlockTime) public payable { var acc = Acc[msg.sender]; acc.balance += msg.value; acc.unlockTime = _unlockTime>now?_unlockTime:now; LogFile.AddMessage(msg.sender,msg.value,); }",1,"subgraph cluster_128_C_banK {
label=""C_banK"";
""128_Put"" [label=""Put""];
""128_Collect"" [label=""Collect""];
""128_fallback"" [label=""fallback""];
""128_C_banK"" [label=""C_banK""];
""128_fallback"" -> ""128_Put"";
}
"
0xa2909e1bcbb24b285741db27a11bfa5706ad4ae5.sol,Crowdsale,"contract Crowdsale is Pausable, PullPayment { using SafeMath for uint; struct Backer { uint weiReceived; uint manusSent; }",1,"subgraph cluster_1178_Crowdsale {
label=""Crowdsale"";
""1178_setMultisig"" [label=""setMultisig""];
""1178_bonus"" [label=""bonus""];
""1178_getRemainManus"" [label=""getRemainManus""];
""1178_refund"" [label=""refund""];
""1178_Crowdsale"" [label=""Crowdsale""];
""1178_drain"" [label=""drain""];
""1178_fallback"" [label=""fallback""];
""1178_receiveETH"" [label=""receiveETH""];
""1178_backManusOwner"" [label=""backManusOwner""];
""1178_start"" [label=""start""];
""1178_finalize"" [label=""finalize""];
""1178_fallback"" -> ""1178_stopInEmergency"";
""1178_receiveETH"" -> ""1178_bonus"";
""1178_fallback"" -> ""1178_receiveETH"";
""1178_backManusOwner"" -> ""1178_onlyOwner"";
""1178_getRemainManus"" -> ""1178_bonus"";
""1178_getRemainManus"" -> ""1178_onlyOwner"";
""1178_start"" -> ""1178_onlyOwner"";
""1178_refund"" -> ""1178_asyncSend"";
""1178_fallback"" -> ""1178_respectTimeFrame"";
""1178_finalize"" -> ""1178_onlyOwner"";
""1178_refund"" -> ""1178_minCapNotReached"";
""1178_setMultisig"" -> ""1178_onlyOwner"";
""1178_drain"" -> ""1178_onlyOwner"";
}
"
0x0f5ee401de162cd163b6ff46318eef2727dbb9fc.sol,MOIRAICO,"contract MOIRAICO { enum State { Preico, Ico, Successful }",1,"subgraph cluster_473_MOIRAICO {
label=""MOIRAICO"";
""473_contribute"" [label=""contribute""];
""473_MOIRAICO"" [label=""MOIRAICO""];
""473_finished"" [label=""finished""];
""473_fallback"" [label=""fallback""];
""473_checkIfFundingCompleteOrExpired"" [label=""checkIfFundingCompleteOrExpired""];
""473_contribute"" -> ""473_notFinished"";
""473_contribute"" -> ""473_checkIfFundingCompleteOrExpired"";
""473_fallback"" -> ""473_contribute"";
""473_checkIfFundingCompleteOrExpired"" -> ""473_finished"";
}
"
0x4900320fe47208de0b79db1273a78ab8c8f3528d.sol,Crowdsale,contract Crowdsale is Owned { using SafeMath for uint256; uint256 public fundingGoal; uint256 public price; uint256 public transferableToken; uint256 public soldToken; uint256 public deadline; uint256 public token_price; MontexToken public tokenReward; bool public fundingGoalReached = false; bool public isOpened; mapping (address => Property) public fundersProperty; struct Property { uint256 paymentEther; uint256 reservedToken; },1,"subgraph cluster_811_Crowdsale {
label=""Crowdsale"";
""811_Crowdsale"" [label=""Crowdsale""];
""811_withdrawalOwner"" [label=""withdrawalOwner""];
""811_getRemainingTimeEthToken"" [label=""getRemainingTimeEthToken""];
""811_fallback"" [label=""fallback""];
""811_start"" [label=""start""];
""811_finishCrowdSale"" [label=""finishCrowdSale""];
""811_valNowRate"" [label=""valNowRate""];
""811_getBalance"" [label=""getBalance""];
""811_start"" -> ""811_onlyOwner"";
""811_withdrawalOwner"" -> ""811_onlyOwner"";
""811_finishCrowdSale"" -> ""811_onlyOwner"";
}
"
0xa5cc679a3528956e8032df4f03756c077c1ee3f4.sol,Exchange,contract Exchange { function assert(bool assertion) { if (!assertion) throw; },1,"subgraph cluster_2562_Exchange {
label=""Exchange"";
""2562_setFees"" [label=""setFees""];
""2562_adminWithdraw"" [label=""adminWithdraw""];
""2562_setAdmin"" [label=""setAdmin""];
""2562_assert"" [label=""assert""];
""2562_min"" [label=""min""];
""2562_getOwner"" [label=""getOwner""];
""2562_cancelOrder"" [label=""cancelOrder""];
""2562_safeAdd"" [label=""safeAdd""];
""2562_depositToken"" [label=""depositToken""];
""2562_deposit"" [label=""deposit""];
""2562_withdraw"" [label=""withdraw""];
""2562_batchOrderTrade"" [label=""batchOrderTrade""];
""2562_Exchange"" [label=""Exchange""];
""2562_safeSub"" [label=""safeSub""];
""2562_safeMul"" [label=""safeMul""];
""2562_fallback"" [label=""fallback""];
""2562_invalidateOrdersBefore"" [label=""invalidateOrdersBefore""];
""2562_setOwner"" [label=""setOwner""];
""2562_balanceOf"" [label=""balanceOf""];
""2562_setInactivityReleasePeriod"" [label=""setInactivityReleasePeriod""];
""2562_trade"" [label=""trade""];
""2562_trade"" -> ""2562_min"";
""2562_trade"" -> ""2562_onlyAdmin"";
""2562_adminWithdraw"" -> ""2562_safeAdd"";
""2562_setInactivityReleasePeriod"" -> ""2562_onlyAdmin"";
""2562_trade"" -> ""2562_safeAdd"";
""2562_setAdmin"" -> ""2562_onlyOwner"";
""2562_cancelOrder"" -> ""2562_safeSub"";
""2562_adminWithdraw"" -> ""2562_onlyAdmin"";
""2562_cancelOrder"" -> ""2562_onlyAdmin"";
""2562_withdraw"" -> ""2562_safeSub"";
""2562_safeMul"" -> ""2562_assert"";
""2562_safeAdd"" -> ""2562_assert"";
""2562_safeSub"" -> ""2562_assert"";
""2562_depositToken"" -> ""2562_safeAdd"";
""2562_setOwner"" -> ""2562_onlyOwner"";
""2562_Exchange"" -> ""2562_safeMul"";
""2562_invalidateOrdersBefore"" -> ""2562_onlyAdmin"";
""2562_trade"" -> ""2562_safeMul"";
""2562_adminWithdraw"" -> ""2562_safeSub"";
""2562_trade"" -> ""2562_safeSub"";
""2562_deposit"" -> ""2562_safeAdd"";
""2562_setFees"" -> ""2562_onlyOwner"";
""2562_batchOrderTrade"" -> ""2562_trade"";
""2562_setFees"" -> ""2562_safeMul"";
}
"
0x40818f0d14325a9eba6b2a7d60bd61cb9e27ef0c.sol,Trade,"contract Trade is Registry { using SafeMath for uint; using SafeMath for uint256; event KyberTrade( address src, uint srcAmt, address dest, uint destAmt, address beneficiary, uint minConversionRate, address affiliate ); function executeTrade( address src, address dest, uint srcAmt, uint minConversionRate ) public payable returns (uint destAmt) { address protocolAdmin = getAddress(); uint ethQty; IERC20 tokenFunctions = IERC20(src); if (src == getAddress()) { require(msg.value == srcAmt, ); ethQty = srcAmt; }",1,"subgraph cluster_466_Trade {
label=""Trade"";
""466_approveKyber"" [label=""approveKyber""];
""466_getExpectedPrice"" [label=""getExpectedPrice""];
""466_executeTrade"" [label=""executeTrade""];
""466_getExpectedPrice"" -> ""466_getAddress"";
""466_executeTrade"" -> ""466_getAddress"";
""466_approveKyber"" -> ""466_getAddress"";
}
"
0x5c89736e9454200141b80c37eb28eaceca2ce8cb.sol,CherryToken,"contract CherryToken is ERC223, ERCAddressFrozenFund { using SafeMath for uint; string internal _name; string internal _symbol; uint8 internal _decimals; uint256 internal _totalSupply; address public fundsWallet; uint256 internal fundsWalletChanged; mapping (address => uint256) internal balances; mapping (address => mapping (address => uint256)) internal allowed; constructor() public { _symbol = ; _name = ; _decimals = 8; _totalSupply = 10000000000000000; balances[msg.sender] = _totalSupply; fundsWallet = msg.sender; owner = msg.sender; fundsWalletChanged = 0; }",1,"subgraph cluster_1340_CherryToken {
label=""CherryToken"";
""1340_transferFrom"" [label=""transferFrom""];
""1340_totalSupply"" [label=""totalSupply""];
""1340_decreaseApproval"" [label=""decreaseApproval""];
""1340_changeFundsWallet"" [label=""changeFundsWallet""];
""1340_fallback"" [label=""fallback""];
""1340_mintToken"" [label=""mintToken""];
""1340_burnToken"" [label=""burnToken""];
""1340_name"" [label=""name""];
""1340_approve"" [label=""approve""];
""1340_decimals"" [label=""decimals""];
""1340_allowance"" [label=""allowance""];
""1340_increaseApproval"" [label=""increaseApproval""];
""1340_isContract"" [label=""isContract""];
""1340_transferdata"" [label=""transferdata""];
""1340_transferMultiple"" [label=""transferMultiple""];
""1340_transfer"" [label=""transfer""];
""1340_symbol"" [label=""symbol""];
""1340_balanceOf"" [label=""balanceOf""];
""1340_constructor"" [label=""constructor""];
""1340_transfer"" -> ""1340_isContract"";
""1340_transferFrom"" -> ""1340_isContract"";
""1340_transferdata"" -> ""1340_isContract"";
""1340_transferMultiple"" -> ""1340_isContract"";
}
"
0x0002325fcaaac6ebf1254a626589147bde1a2394.sol,HorseyToken,"contract HorseyToken is EthorseHelpers,Pausable { using SafeMath for uint256; event Claimed(address raceAddress, address eth_address, uint256 tokenId); event Feeding(uint256 tokenId); event ReceivedCarrot(uint256 tokenId, bytes32 newDna); event FeedingFailed(uint256 tokenId); event HorseyRenamed(uint256 tokenId, string newName); event HorseyFreed(uint256 tokenId); RoyalStablesInterface public stables; uint8 public carrotsMultiplier = 1; uint8 public rarityMultiplier = 1; uint256 public claimingFee = 0.008 ether; struct FeedingData { uint256 blockNumber; uint256 horsey; }",1,"subgraph cluster_2145_HorseyToken {
label=""HorseyToken"";
""2145_addLegitDevAddress"" [label=""addLegitDevAddress""];
""2145_setClaimingCosts"" [label=""setClaimingCosts""];
""2145__feed"" [label=""_feed""];
""2145__shiftRight"" [label=""_shiftRight""];
""2145_getOwnedTokens"" [label=""getOwnedTokens""];
""2145_claim"" [label=""claim""];
""2145_addHorseIndex"" [label=""addHorseIndex""];
""2145_fallback"" [label=""fallback""];
""2145_freeForCarrots"" [label=""freeForCarrots""];
""2145_can_claim"" [label=""can_claim""];
""2145_feed"" [label=""feed""];
""2145_constructor"" [label=""constructor""];
""2145_getCarrotCredits"" [label=""getCarrotCredits""];
""2145__increaseRarity"" [label=""_increaseRarity""];
""2145_renameHorsey"" [label=""renameHorsey""];
""2145_setRarityMultiplier"" [label=""setRarityMultiplier""];
""2145__generate_special_horsey"" [label=""_generate_special_horsey""];
""2145_stopFeeding"" [label=""stopFeeding""];
""2145_withdraw"" [label=""withdraw""];
""2145_getHorsey"" [label=""getHorsey""];
""2145_setCarrotsMultiplier"" [label=""setCarrotsMultiplier""];
""2145__makeSpecialId"" [label=""_makeSpecialId""];
""2145__shiftLeft"" [label=""_shiftLeft""];
""2145_setRenamingCosts"" [label=""setRenamingCosts""];
""2145_withdraw"" -> ""2145_onlyOwner"";
""2145_freeForCarrots"" -> ""2145_onlyOwnerOf"";
""2145_addLegitDevAddress"" -> ""2145__addLegitOwner"";
""2145__generate_special_horsey"" -> ""2145__shiftRight"";
""2145_renameHorsey"" -> ""2145_costs"";
""2145_feed"" -> ""2145_onlyOwnerOf"";
""2145_setRarityMultiplier"" -> ""2145_onlyOwner"";
""2145_claim"" -> ""2145_whenNotPaused"";
""2145_claim"" -> ""2145_costs"";
""2145_freeForCarrots"" -> ""2145_whenNotPaused"";
""2145_stopFeeding"" -> ""2145__feed"";
""2145_feed"" -> ""2145_noFeedingInProgress"";
""2145_setRenamingCosts"" -> ""2145_onlyOwner"";
""2145_claim"" -> ""2145_can_claim"";
""2145_stopFeeding"" -> ""2145_feedingInProgress"";
""2145_addHorseIndex"" -> ""2145__addHorse"";
""2145_renameHorsey"" -> ""2145_whenNotPaused"";
""2145_claim"" -> ""2145__isWinnerOf"";
""2145_setClaimingCosts"" -> ""2145_onlyOwner"";
""2145_claim"" -> ""2145__generate_special_horsey"";
""2145__generate_special_horsey"" -> ""2145__makeSpecialId"";
""2145_setCarrotsMultiplier"" -> ""2145_onlyOwner"";
""2145_can_claim"" -> ""2145__isWinnerOf"";
""2145_feed"" -> ""2145_carrotsMeetLevel"";
""2145__feed"" -> ""2145__increaseRarity"";
""2145__increaseRarity"" -> ""2145__shiftLeft"";
""2145_addLegitDevAddress"" -> ""2145_onlyOwner"";
""2145_feed"" -> ""2145_whenNotPaused"";
""2145_addHorseIndex"" -> ""2145_onlyOwner"";
""2145_renameHorsey"" -> ""2145_onlyOwnerOf"";
""2145_constructor"" -> ""2145_constructor"";
}
"
0x430e87a95a421437ccaa0af644ac57e22914b07a.sol,PoolOwners,contract PoolOwners is Ownable { using SafeMath for uint256; using itmap for itmap.itmap; struct Owner { uint256 key; uint256 percentage; uint256 shareTokens; mapping(address => uint256) balance; },1,"subgraph cluster_1598_PoolOwners {
label=""PoolOwners"";
""1598_distributeTokens"" [label=""distributeTokens""];
""1598_getCurrentOwners"" [label=""getCurrentOwners""];
""1598_setOwnerShare"" [label=""setOwnerShare""];
""1598_percent"" [label=""percent""];
""1598_isWhitelisted"" [label=""isWhitelisted""];
""1598_claimTokens"" [label=""claimTokens""];
""1598_setEthWallet"" [label=""setEthWallet""];
""1598_lockShares"" [label=""lockShares""];
""1598_hasClaimed"" [label=""hasClaimed""];
""1598_setContribution"" [label=""setContribution""];
""1598_getOwner"" [label=""getOwner""];
""1598_withdrawTokens"" [label=""withdrawTokens""];
""1598_contribute"" [label=""contribute""];
""1598_startContribution"" [label=""startContribution""];
""1598_whitelistWallet"" [label=""whitelistWallet""];
""1598_fallback"" [label=""fallback""];
""1598_getOwnerAddress"" [label=""getOwnerAddress""];
""1598_sendOwnership"" [label=""sendOwnership""];
""1598_setDistributionMinimum"" [label=""setDistributionMinimum""];
""1598_constructor"" [label=""constructor""];
""1598_getOwnerBalance"" [label=""getOwnerBalance""];
""1598_setOwnerShare"" -> ""1598_onlyOwner"";
""1598_setOwnerShare"" -> ""1598_percent"";
""1598_withdrawTokens"" -> ""1598_claimTokens"";
""1598_contribute"" -> ""1598_percent"";
""1598_setEthWallet"" -> ""1598_onlyOwner"";
""1598_startContribution"" -> ""1598_onlyOwner"";
""1598_setContribution"" -> ""1598_contribute"";
""1598_sendOwnership"" -> ""1598_onlyWhitelisted"";
""1598_fallback"" -> ""1598_contribute"";
""1598_setDistributionMinimum"" -> ""1598_onlyOwner"";
""1598_lockShares"" -> ""1598_onlyOwner"";
""1598_sendOwnership"" -> ""1598_percent"";
""1598_setContribution"" -> ""1598_onlyOwner"";
""1598_whitelistWallet"" -> ""1598_onlyOwner"";
""1598_distributeTokens"" -> ""1598_onlyWhitelisted"";
}
"
0x17cba58578eecaee898242a02edac75b8cc17231.sol,AUMXToken,"contract AUMXToken is ERC223, SafeMath{ mapping(address => mapping(address => uint)) allowed; mapping(address => uint) balances; string public name = ; string public symbol = ; uint8 public decimals = 8; uint256 public totalSupply = 5000000000000000; bool locked; address Owner; address swapperAddress; function AUMXToken() public { locked = true; Owner = msg.sender; swapperAddress = msg.sender; balances[msg.sender] = totalSupply; allowed[msg.sender][swapperAddress] = totalSupply; }",1,"subgraph cluster_763_AUMXToken {
label=""AUMXToken"";
""763_decimals"" [label=""decimals""];
""763_isContract"" [label=""isContract""];
""763_AUMXToken"" [label=""AUMXToken""];
""763_transferToAddress"" [label=""transferToAddress""];
""763_transferToContract"" [label=""transferToContract""];
""763_ChangeSwapperAddress"" [label=""ChangeSwapperAddress""];
""763_name"" [label=""name""];
""763_UnlockToken"" [label=""UnlockToken""];
""763_transferFrom"" [label=""transferFrom""];
""763_totalSupply"" [label=""totalSupply""];
""763_transfer"" [label=""transfer""];
""763_symbol"" [label=""symbol""];
""763_balanceOf"" [label=""balanceOf""];
""763_transferToAddress"" -> ""763_safeSub"";
""763_transferToContract"" -> ""763_safeSub"";
""763_transferFrom"" -> ""763_safeAdd"";
""763_transferToContract"" -> ""763_safeAdd"";
""763_transfer"" -> ""763_isUnlocked"";
""763_transfer"" -> ""763_isContract"";
""763_ChangeSwapperAddress"" -> ""763_onlyOwner"";
""763_transfer"" -> ""763_safeSub"";
""763_transferToAddress"" -> ""763_balanceOf"";
""763_transfer"" -> ""763_transferToContract"";
""763_transferToAddress"" -> ""763_safeAdd"";
""763_transfer"" -> ""763_safeAdd"";
""763_UnlockToken"" -> ""763_onlyOwner"";
""763_transferFrom"" -> ""763_safeSub"";
""763_transfer"" -> ""763_transferToAddress"";
""763_transferToContract"" -> ""763_balanceOf"";
""763_transfer"" -> ""763_balanceOf"";
""763_transferFrom"" -> ""763_balanceOf"";
}
"
0x400784d4d1fe603b2e7a96416fa9a1afadf47009.sol,UncTokenSale,"contract UncTokenSale is SafeMath, Pausable { address public beneficiary; UncToken public token; uint public hardCap; uint public highBonusRate = 115; uint public lowBonusRate = 110; uint public constant highBonus = 160000000000000000000; uint public constant minContribution = 4000000000000000000; uint public constant preMaxContribution = 200000000000000000000; uint public constant mainMaxContribution = 200000000000000000000; mapping(address => bool) public isVerifier; mapping(address => bool) public kycVerified; uint public preSaleTime; uint public mainSaleTime; uint public endSaleTime; uint public amountRaised; bool public beforeSale = true; bool public preSale = false; bool public mainSale = false; bool public saleEnded = false; bool public hardCapReached = false; mapping(address => address) public timeLocks; uint public rate = 45000; uint public constant lowRate = 10000; uint public constant highRate = 1000000; mapping(address => uint256) public contributionAmtOf; mapping(address => uint256) public tokenBalanceOf; mapping(address => uint256) public teamTokenBalanceOf; event HardReached(address _beneficiary, uint _amountRaised); event BalanceTransfer(address _to, uint _amount); event AddedOffChain(address indexed _beneficiary, uint256 tokensAllocated); event RateChanged(uint newRate); event VerifiedKYC(address indexed person); modifier beforeEnd() { require (now < endSaleTime); _; }",1,"subgraph cluster_1815_UncTokenSale {
label=""UncTokenSale"";
""1815_terminate"" [label=""terminate""];
""1815_removeVerifier"" [label=""removeVerifier""];
""1815_startPreSale"" [label=""startPreSale""];
""1815_endSale"" [label=""endSale""];
""1815_burnUnsoldTokens"" [label=""burnUnsoldTokens""];
""1815_constructor"" [label=""constructor""];
""1815_offChainTrans"" [label=""offChainTrans""];
""1815_fallback"" [label=""fallback""];
""1815_updateMainSaleTime"" [label=""updateMainSaleTime""];
""1815_beneficiaryWithdrawal"" [label=""beneficiaryWithdrawal""];
""1815_tokenTransfer"" [label=""tokenTransfer""];
""1815_updateEndSaleTime"" [label=""updateEndSaleTime""];
""1815_releaseLock"" [label=""releaseLock""];
""1815_updatePreSaleTime"" [label=""updatePreSaleTime""];
""1815_addVerifier"" [label=""addVerifier""];
""1815_verifyKYC"" [label=""verifyKYC""];
""1815_startMainSale"" [label=""startMainSale""];
""1815_moveReleaseTime"" [label=""moveReleaseTime""];
""1815_setRate"" [label=""setRate""];
""1815_allocateTokens"" [label=""allocateTokens""];
""1815_checkHardReached"" [label=""checkHardReached""];
""1815_allocateTokens"" -> ""1815_safeMul"";
""1815_endSale"" -> ""1815_onlyOwner"";
""1815_allocateTokens"" -> ""1815_safeAdd"";
""1815_verifyKYC"" -> ""1815_verifierOnly"";
""1815_startPreSale"" -> ""1815_onlyOwner"";
""1815_startMainSale"" -> ""1815_onlyOwner"";
""1815_fallback"" -> ""1815_safeAdd"";
""1815_tokenTransfer"" -> ""1815_onlyOwner"";
""1815_fallback"" -> ""1815_allocateTokens"";
""1815_offChainTrans"" -> ""1815_onlyOwner"";
""1815_addVerifier"" -> ""1815_onlyOwner"";
""1815_updateMainSaleTime"" -> ""1815_onlyOwner"";
""1815_burnUnsoldTokens"" -> ""1815_onlyOwner"";
""1815_fallback"" -> ""1815_whenNotPaused"";
""1815_terminate"" -> ""1815_onlyOwner"";
""1815_endSale"" -> ""1815_afterStart"";
""1815_updateEndSaleTime"" -> ""1815_onlyOwner"";
""1815_offChainTrans"" -> ""1815_safeAdd"";
""1815_setRate"" -> ""1815_onlyOwner"";
""1815_beneficiaryWithdrawal"" -> ""1815_onlyOwner"";
""1815_burnUnsoldTokens"" -> ""1815_afterEnd"";
""1815_moveReleaseTime"" -> ""1815_onlyOwner"";
""1815_startMainSale"" -> ""1815_afterStart"";
""1815_removeVerifier"" -> ""1815_onlyOwner"";
""1815_allocateTokens"" -> ""1815_safeDiv"";
""1815_updatePreSaleTime"" -> ""1815_onlyOwner"";
}
"
0x301487766dcf283592b11b5988e5c4e4630dfbe5.sol,EDex,"contract EDex is SafeMath { address public admin; address public feeAccount; address public accountLevelsAddr; uint public feeMake; uint public feeTake; uint public feeRebate; mapping (address => mapping (address => uint)) public tokens; mapping (address => mapping (bytes32 => bool)) public orders; mapping (address => mapping (bytes32 => uint)) public orderFills; event Order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user); event Cancel(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s); event Trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give); event Deposit(address token, address user, uint amount, uint balance); event Withdraw(address token, address user, uint amount, uint balance); constructor (address admin_, address feeAccount_, address accountLevelsAddr_, uint feeMake_, uint feeTake_, uint feeRebate_) public { admin = admin_; feeAccount = feeAccount_; accountLevelsAddr = accountLevelsAddr_; feeMake = feeMake_; feeTake = feeTake_; feeRebate = feeRebate_; }",1,"subgraph cluster_1614_EDex {
label=""EDex"";
""1614_changeFeeTake"" [label=""changeFeeTake""];
""1614_withdrawToken"" [label=""withdrawToken""];
""1614_changeFeeAccount"" [label=""changeFeeAccount""];
""1614_balanceOf"" [label=""balanceOf""];
""1614_cancelOrder"" [label=""cancelOrder""];
""1614_changeAccountLevelsAddr"" [label=""changeAccountLevelsAddr""];
""1614_order"" [label=""order""];
""1614_availableVolume"" [label=""availableVolume""];
""1614_constructor"" [label=""constructor""];
""1614_changeFeeMake"" [label=""changeFeeMake""];
""1614_fallback"" [label=""fallback""];
""1614_deposit"" [label=""deposit""];
""1614_depositToken"" [label=""depositToken""];
""1614_changeFeeRebate"" [label=""changeFeeRebate""];
""1614_changeAdmin"" [label=""changeAdmin""];
""1614_trade"" [label=""trade""];
""1614_amountFilled"" [label=""amountFilled""];
""1614_withdraw"" [label=""withdraw""];
""1614_tradeBalances"" [label=""tradeBalances""];
""1614_testTrade"" [label=""testTrade""];
""1614_testTrade"" -> ""1614_availableVolume"";
""1614_withdrawToken"" -> ""1614_safeSub"";
""1614_availableVolume"" -> ""1614_safeSub"";
""1614_availableVolume"" -> ""1614_safeMul"";
""1614_tradeBalances"" -> ""1614_safeAdd"";
""1614_tradeBalances"" -> ""1614_safeMul"";
""1614_trade"" -> ""1614_tradeBalances"";
""1614_depositToken"" -> ""1614_safeAdd"";
""1614_trade"" -> ""1614_safeAdd"";
""1614_tradeBalances"" -> ""1614_safeSub"";
""1614_withdraw"" -> ""1614_safeSub"";
""1614_deposit"" -> ""1614_safeAdd"";
}
"
0x02dd48ff449f57a4632c39068e0ca0f4325c3a8d.sol,CB_BANK,"contract CB_BANK { function Put(uint _unlockTime) public payable { var acc = Acc[msg.sender]; acc.balance += msg.value; acc.unlockTime = _unlockTime>now?_unlockTime:now; LogFile.AddMessage(msg.sender,msg.value,); }",1,"subgraph cluster_128_CB_BANK {
label=""CB_BANK"";
""128_Put"" [label=""Put""];
""128_Collect"" [label=""Collect""];
""128_CB_BANK"" [label=""CB_BANK""];
""128_fallback"" [label=""fallback""];
""128_fallback"" -> ""128_Put"";
}
"
0x4b96bf1fef93a216914fc843d81207a027ce52b3.sol,VUULRVesting,"contract VUULRVesting is XClaimable, Salvageable { using SafeMath for uint; struct VestingSchedule { uint lockPeriod; uint numPeriods; uint tokens; uint amountWithdrawn; uint startTime; }",1,"subgraph cluster_1806_VUULRVesting {
label=""VUULRVesting"";
""1806_revokeSchedule"" [label=""revokeSchedule""];
""1806_emergencyERC20Drain"" [label=""emergencyERC20Drain""];
""1806_registerVestingSchedule"" [label=""registerVestingSchedule""];
""1806_changeVestingAddress"" [label=""changeVestingAddress""];
""1806_whichPeriod"" [label=""whichPeriod""];
""1806_withdrawVestedTokens"" [label=""withdrawVestedTokens""];
""1806_VUULRVesting"" [label=""VUULRVesting""];
""1806_withdrawable"" [label=""withdrawable""];
""1806_start"" [label=""start""];
""1806_vested"" [label=""vested""];
""1806_revokeSchedule"" -> ""1806_onlyOwner"";
""1806_emergencyERC20Drain"" -> ""1806_canOperate"";
""1806_withdrawVestedTokens"" -> ""1806_vested"";
""1806_revokeSchedule"" -> ""1806_vested"";
""1806_start"" -> ""1806_onlyOwner"";
""1806_withdrawable"" -> ""1806_vested"";
""1806_revokeSchedule"" -> ""1806_withdrawable"";
""1806_emergencyERC20Drain"" -> ""1806_emergencyERC20Drain"";
""1806_changeVestingAddress"" -> ""1806_onlyOwner"";
""1806_registerVestingSchedule"" -> ""1806_canOperate"";
""1806_withdrawVestedTokens"" -> ""1806_withdrawable"";
}
"
0x8ad0a831b7a17b322e8aebd188a4a8eb3bfdb5e8.sol,CPVToken,contract CPVToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 200000000 * (10**18); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; constructor () public { owner = msg.sender; },1,"subgraph cluster_756_CPVToken {
label=""CPVToken"";
""756_constructor"" [label=""constructor""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_refundTokens"" [label=""refundTokens""];
""756_createTokens"" [label=""createTokens""];
""756_totalSupply"" [label=""totalSupply""];
""756_transferFrom"" [label=""transferFrom""];
""756_setOwner"" [label=""setOwner""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_approve"" [label=""approve""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_transfer"" [label=""transfer""];
""756_transferFrom"" -> ""756_transferFrom"";
""756_transfer"" -> ""756_transfer"";
""756_createTokens"" -> ""756_safeSub"";
""756_approve"" -> ""756_allowance"";
""756_approve"" -> ""756_approve"";
""756_createTokens"" -> ""756_safeAdd"";
}
"
0x266fe968ce45fa3373726329ce6104b9ca4a9c66.sol,CreditGAME,"contract CreditGAME is Owned, SafeMath, LinkedList{ mapping(address => bool) approvedGames; mapping(address => GameLock) gameLocks; mapping(address => bool) public isGameLocked; mapping(uint => address) public concludedGames; uint public amountLocked = 0; uint public concludedGameIndex = 0; struct GameLock{ uint amount; uint lockDuration; }",1,"subgraph cluster_1078_CreditGAME {
label=""CreditGAME"";
""1078_createLock"" [label=""createLock""];
""1078_killContract"" [label=""killContract""];
""1078_setTokenAddress"" [label=""setTokenAddress""];
""1078_removeFailedGame"" [label=""removeFailedGame""];
""1078_removeLock"" [label=""removeLock""];
""1078_getGameLock"" [label=""getGameLock""];
""1078_checkIfLockCanBeRemoved"" [label=""checkIfLockCanBeRemoved""];
""1078_removeGameManually"" [label=""removeGameManually""];
""1078_removeApprovedGame"" [label=""removeApprovedGame""];
""1078_checkInternalBalance"" [label=""checkInternalBalance""];
""1078_isGameLocked"" [label=""isGameLocked""];
""1078_cleanUp"" [label=""cleanUp""];
""1078_isGameApproved"" [label=""isGameApproved""];
""1078_generateChampionTokens"" [label=""generateChampionTokens""];
""1078_addApprovedGame"" [label=""addApprovedGame""];
""1078_cleanUp"" -> ""1078_removeItem"";
""1078_addApprovedGame"" -> ""1078_onlyOwner"";
""1078_removeLock"" -> ""1078_safeSub"";
""1078_removeFailedGame"" -> ""1078_removeItem"";
""1078_removeGameManually"" -> ""1078_onlyOwner"";
""1078_removeApprovedGame"" -> ""1078_removeItem"";
""1078_createLock"" -> ""1078_safeAdd"";
""1078_removeLock"" -> ""1078_checkIfLockCanBeRemoved"";
""1078_killContract"" -> ""1078_onlyOwner"";
""1078_addApprovedGame"" -> ""1078_addItem"";
""1078_removeGameManually"" -> ""1078_safeSub"";
""1078_removeGameManually"" -> ""1078_removeItem"";
""1078_createLock"" -> ""1078_generateChampionTokens"";
""1078_setTokenAddress"" -> ""1078_onlyOwner"";
""1078_removeApprovedGame"" -> ""1078_onlyOwner"";
}
"
0x470142a1834438515b757118f322703aba6e1e05.sol,PolicyPalNetworkAirdrop,contract PolicyPalNetworkAirdrop { struct BountyType { bool twitter; bool signature; },1,"subgraph cluster_662_PolicyPalNetworkAirdrop {
label=""PolicyPalNetworkAirdrop"";
""662_signatureDropMultipleAmount"" [label=""signatureDropMultipleAmount""];
""662_airDropSingleAmount"" [label=""airDropSingleAmount""];
""662_twitterDropSingleAmount"" [label=""twitterDropSingleAmount""];
""662_signatureDropSingleAmount"" [label=""signatureDropSingleAmount""];
""662_emergencyDrain"" [label=""emergencyDrain""];
""662_twitterDropMultipleAmount"" [label=""twitterDropMultipleAmount""];
""662_PolicyPalNetworkAirdrop"" [label=""PolicyPalNetworkAirdrop""];
""662_airDropMultipleAmount"" [label=""airDropMultipleAmount""];
""662_twitterDropSingleAmount"" -> ""662_onlyAdmin"";
""662_signatureDropSingleAmount"" -> ""662_validBalance"";
""662_airDropSingleAmount"" -> ""662_onlyAdmin"";
""662_emergencyDrain"" -> ""662_onlyAdmin"";
""662_signatureDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_airDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropSingleAmount"" -> ""662_validBalance"";
""662_signatureDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_signatureDropSingleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropSingleAmount"" -> ""662_validBalance"";
""662_PolicyPalNetworkAirdrop"" -> ""662_validAddress"";
""662_twitterDropMultipleAmount"" -> ""662_onlyAdmin"";
}
"
0x58b334f15d7c7e08287b4ae57d11f35e0c2ad497.sol,LockinManager,contract LockinManager { using SafeMath for uint256; struct Lock { uint256 amount; uint256 unlockDate; uint256 lockedFor; },1,"subgraph cluster_1738_LockinManager {
label=""LockinManager"";
""1738_lockIt"" [label=""lockIt""];
""1738_getLocksLockedFor"" [label=""getLocksLockedFor""];
""1738_getLock"" [label=""getLock""];
""1738_ifInAllowedLocks"" [label=""ifInAllowedLocks""];
""1738_getLocks"" [label=""getLocks""];
""1738_removeAllowedLock"" [label=""removeAllowedLock""];
""1738_setDefaultAllowedLock"" [label=""setDefaultAllowedLock""];
""1738_LockinManager"" [label=""LockinManager""];
""1738_lockForDays"" [label=""lockForDays""];
""1738_addValidContract"" [label=""addValidContract""];
""1738_removeValidContract"" [label=""removeValidContract""];
""1738_defaultLockin"" [label=""defaultLockin""];
""1738_getLocksAmount"" [label=""getLocksAmount""];
""1738_addAllowedLock"" [label=""addAllowedLock""];
""1738_getLocksUnlockDate"" [label=""getLocksUnlockDate""];
""1738_getLocksUnlockDate"" -> ""1738_validContractOnly"";
""1738_removeValidContract"" -> ""1738_adminOnly"";
""1738_setDefaultAllowedLock"" -> ""1738_adminOnly"";
""1738_getLocksAmount"" -> ""1738_validContractOnly"";
""1738_getLocksLockedFor"" -> ""1738_validContractOnly"";
""1738_getLocks"" -> ""1738_validContractOnly"";
""1738_removeAllowedLock"" -> ""1738_adminOnly"";
""1738_getLock"" -> ""1738_validContractOnly"";
""1738_addAllowedLock"" -> ""1738_adminOnly"";
""1738_defaultLockin"" -> ""1738_lockIt"";
""1738_lockForDays"" -> ""1738_ifInAllowedLocks"";
""1738_lockForDays"" -> ""1738_lockIt"";
""1738_addValidContract"" -> ""1738_adminOnly"";
""1738_defaultLockin"" -> ""1738_validContractOnly"";
}
"
0x91ca47b9ec3187c77f324281a1851f4b991103f1.sol,FundingInputGeneral,"contract FundingInputGeneral { bool public initialized = false; uint8 public typeId = 0; address public FundingAssetAddress; address public deployer; event EventInputPaymentReceived(address sender, uint amount, uint8 _type); function FundingInputGeneral() public { deployer = msg.sender; }",1,"subgraph cluster_135_FundingInputGeneral {
label=""FundingInputGeneral"";
""135_FundingInputGeneral"" [label=""FundingInputGeneral""];
""135_buy"" [label=""buy""];
""135_isContract"" [label=""isContract""];
""135_fallback"" [label=""fallback""];
""135_setFundingAssetAddress"" [label=""setFundingAssetAddress""];
""135_fallback"" -> ""135_buy"";
""135_buy"" -> ""135_isContract"";
}
"
0x300a0a820d8fb6e77850da5eaa8df64bbff5746d.sol,BoomrCoinCrowdsale,"contract BoomrCoinCrowdsale is Ownable{ using SafeMath for uint256; uint256 private minGoal = 0; uint256 private maxGoal = 0; uint256 private tokenLimitPresale = 0; uint256 private tokenLimitCrowdsale = 0; uint256 private presaleDiscount = 0; uint256 private crowdsaleDiscount1 = 0; uint256 private crowdsaleDiscount2 = 0; uint256 private crowdsaleDiscount3 = 0; uint256 private crowdsaleDiscount4 = 0; uint256 private presaleDuration = 0; uint256 private crowdsaleDuration1 = 0; uint256 private crowdsaleDuration2 = 0; uint256 private crowdsaleDuration3 = 0; uint256 private crowdsaleDuration4 = 0; uint256 private tokenPresaleTotalSold = 0; uint256 private tokenCrowdsaleTotalSold = 0; uint256 private totalBackers = 0; uint256 private weiRaised = 0; uint256 private presaleTokenPrice = 0; uint256 private baseTokenPrice = 0; uint256 private crowdsaleTokenPrice1 = 0; uint256 private crowdsaleTokenPrice2 = 0; uint256 private crowdsaleTokenPrice3 = 0; uint256 private crowdsaleTokenPrice4 = 0; uint256 private presaleTokenSent = 0; uint256 private crowdsaleTokenSold1 = 0; uint256 private crowdsaleTokenSold2 = 0; uint256 private crowdsaleTokenSold3 = 0; uint256 private crowdsaleTokenSold4 = 0; bool private finalized = false; bool private halted = false; uint256 public startTime; PausableToken public boomrToken; address private wallet; RefundVault private vault; mapping (address => uint256) public deposits; mapping (address => uint256) public purchases; event TokenPurchase(address indexed Purchaser, address indexed Beneficiary, uint256 ValueInWei, uint256 TokenAmount); event PresalePurchase(address indexed Purchaser, address indexed Beneficiary, uint256 ValueInWei); event PresaleDistribution(address indexed Purchaser, address indexed Beneficiary, uint256 TokenAmount); event Finalized(); function BoomrCoinCrowdsale() public{ }",1,"subgraph cluster_2121_BoomrCoinCrowdsale {
label=""BoomrCoinCrowdsale"";
""2121_depositPresale"" [label=""depositPresale""];
""2121_halt"" [label=""halt""];
""2121_currentStateActive"" [label=""currentStateActive""];
""2121_isCrowdsalePhase2"" [label=""isCrowdsalePhase2""];
""2121_getContractTokenBalance"" [label=""getContractTokenBalance""];
""2121_isPresaleWaitPhase"" [label=""isPresaleWaitPhase""];
""2121_isDistributable"" [label=""isDistributable""];
""2121_fallback"" [label=""fallback""];
""2121_internalDepositPresale"" [label=""internalDepositPresale""];
""2121_StartCrowdsale"" [label=""StartCrowdsale""];
""2121_forwardFunds"" [label=""forwardFunds""];
""2121_distributePresale"" [label=""distributePresale""];
""2121_BoomrCoinCrowdsale"" [label=""BoomrCoinCrowdsale""];
""2121_isPresalePhase"" [label=""isPresalePhase""];
""2121_isCrowdsalePhase4"" [label=""isCrowdsalePhase4""];
""2121_externalDeposit"" [label=""externalDeposit""];
""2121_currentTokenDistribution"" [label=""currentTokenDistribution""];
""2121_minGoalReached"" [label=""minGoalReached""];
""2121_internalBuyTokens"" [label=""internalBuyTokens""];
""2121_finalize"" [label=""finalize""];
""2121_unHalt"" [label=""unHalt""];
""2121_updatePrices"" [label=""updatePrices""];
""2121_buyTokens"" [label=""buyTokens""];
""2121_claimRefund"" [label=""claimRefund""];
""2121_currentStateSales"" [label=""currentStateSales""];
""2121_isCrowdsalePhase3"" [label=""isCrowdsalePhase3""];
""2121_isCrowdsalePhase1"" [label=""isCrowdsalePhase1""];
""2121_isBuyable"" [label=""isBuyable""];
""2121_maxGoalReached"" [label=""maxGoalReached""];
""2121_isCompleted"" [label=""isCompleted""];
""2121_fallback"" -> ""2121_buyTokens"";
""2121_fallback"" -> ""2121_isPresalePhase"";
""2121_isCrowdsalePhase4"" -> ""2121_maxGoalReached"";
""2121_isCrowdsalePhase1"" -> ""2121_maxGoalReached"";
""2121_internalDepositPresale"" -> ""2121_isPresalePhase"";
""2121_unHalt"" -> ""2121_onlyOwner"";
""2121_isBuyable"" -> ""2121_isDistributable"";
""2121_fallback"" -> ""2121_isPresaleWaitPhase"";
""2121_currentStateActive"" -> ""2121_isPresaleWaitPhase"";
""2121_currentStateActive"" -> ""2121_isDistributable"";
""2121_internalBuyTokens"" -> ""2121_forwardFunds"";
""2121_internalBuyTokens"" -> ""2121_isCrowdsalePhase2"";
""2121_distributePresale"" -> ""2121_isDistributable"";
""2121_externalDeposit"" -> ""2121_isPresalePhase"";
""2121_isCrowdsalePhase2"" -> ""2121_maxGoalReached"";
""2121_internalDepositPresale"" -> ""2121_maxGoalReached"";
""2121_isCompleted"" -> ""2121_maxGoalReached"";
""2121_externalDeposit"" -> ""2121_isCompleted"";
""2121_depositPresale"" -> ""2121_internalDepositPresale"";
""2121_externalDeposit"" -> ""2121_internalDepositPresale"";
""2121_fallback"" -> ""2121_isCompleted"";
""2121_fallback"" -> ""2121_isDistributable"";
""2121_buyTokens"" -> ""2121_internalBuyTokens"";
""2121_isPresalePhase"" -> ""2121_maxGoalReached"";
""2121_currentStateActive"" -> ""2121_isCrowdsalePhase1"";
""2121_StartCrowdsale"" -> ""2121_onlyOwner"";
""2121_currentStateSales"" -> ""2121_getContractTokenBalance"";
""2121_currentStateActive"" -> ""2121_isCrowdsalePhase4"";
""2121_internalBuyTokens"" -> ""2121_maxGoalReached"";
""2121_currentStateActive"" -> ""2121_isPresalePhase"";
""2121_currentStateActive"" -> ""2121_isCrowdsalePhase3"";
""2121_currentStateActive"" -> ""2121_minGoalReached"";
""2121_internalBuyTokens"" -> ""2121_isCrowdsalePhase4"";
""2121_finalize"" -> ""2121_minGoalReached"";
""2121_currentStateActive"" -> ""2121_maxGoalReached"";
""2121_fallback"" -> ""2121_depositPresale"";
""2121_externalDeposit"" -> ""2121_internalBuyTokens"";
""2121_currentStateActive"" -> ""2121_isBuyable"";
""2121_halt"" -> ""2121_onlyOwner"";
""2121_currentStateActive"" -> ""2121_isCompleted"";
""2121_fallback"" -> ""2121_distributePresale"";
""2121_currentStateActive"" -> ""2121_isCrowdsalePhase2"";
""2121_isBuyable"" -> ""2121_isCompleted"";
""2121_internalDepositPresale"" -> ""2121_forwardFunds"";
""2121_internalBuyTokens"" -> ""2121_isCrowdsalePhase3"";
""2121_finalize"" -> ""2121_isCompleted"";
""2121_externalDeposit"" -> ""2121_onlyOwner"";
""2121_claimRefund"" -> ""2121_minGoalReached"";
""2121_finalize"" -> ""2121_onlyOwner"";
""2121_isCrowdsalePhase3"" -> ""2121_maxGoalReached"";
""2121_internalDepositPresale"" -> ""2121_updatePrices"";
""2121_externalDeposit"" -> ""2121_isPresaleWaitPhase"";
""2121_internalBuyTokens"" -> ""2121_isCrowdsalePhase1"";
}
"
0x1b6c5864375b34af3ff5bd2e5f40bc425b4a8d79.sol,TopChainCoinDistribution,"contract TopChainCoinDistribution is Ownable, Authorizable { using SafeMath for uint; event AuthorizedCreateToPrivate(address recipient, uint pay_amount); event GameMining(address recipient, uint pay_amount); event CreateTokenToTeam(address recipient, uint pay_amount); event CreateTokenToMarket(address recipient, uint pay_amount); event CreateTokenToOperation(address recipient, uint pay_amount); event TopChainCoinMintFinished(); TopChainCoin public token = new TopChainCoin(); DateTime internal dateTime = new DateTime(); uint totalToken = 2100000000 * (10 ** 6); uint public privateTokenCap = 210000000 * (10 ** 6); uint public marketToken = 315000000 * (10 ** 6); uint public operationToken = 210000000 * (10 ** 6); uint public gameMiningTokenCap = 1155000000 * (10 ** 6); uint public teamToken2018 = 105000000 * (10 ** 6); uint public teamToken2019 = 105000000 * (10 ** 6); uint public privateToken = 0; address public teamAddress; address public operationAddress; address public marketAddress; bool public team2018TokenCreated = false; bool public team2019TokenCreated = false; bool public operationTokenCreated = false; bool public marketTokenCreated = false; mapping(uint16 => uint) public gameMiningToken; uint public firstYearGameMiningTokenCap = 577500000 * (10 ** 6); uint public gameMiningTokenStartTime = 1514736000; function isContract(address _addr) internal view returns(bool) { uint size; if (_addr == 0) return false; assembly { size := extcodesize(_addr) }",1,"subgraph cluster_2129_TopChainCoinDistribution {
label=""TopChainCoinDistribution"";
""2129_setOperationAddress"" [label=""setOperationAddress""];
""2129_gameMining"" [label=""gameMining""];
""2129_fallback"" [label=""fallback""];
""2129_setMarketAddress"" [label=""setMarketAddress""];
""2129__createTokenToTeam"" [label=""_createTokenToTeam""];
""2129_createTokenToTeam"" [label=""createTokenToTeam""];
""2129_createTokenToOperation"" [label=""createTokenToOperation""];
""2129_getCurrentYearGameMiningTokenCap"" [label=""getCurrentYearGameMiningTokenCap""];
""2129_getCurrentYearGameMiningRemainToken"" [label=""getCurrentYearGameMiningRemainToken""];
""2129_createTokenToMarket"" [label=""createTokenToMarket""];
""2129_finishMinting"" [label=""finishMinting""];
""2129_setTeamAddress"" [label=""setTeamAddress""];
""2129_isContract"" [label=""isContract""];
""2129_authorizedCreateTokensToPrivate"" [label=""authorizedCreateTokensToPrivate""];
""2129_authorizedCreateTokensToPrivate"" -> ""2129_onlyAuthorized"";
""2129_setMarketAddress"" -> ""2129_onlyAuthorized"";
""2129_setTeamAddress"" -> ""2129_onlyAuthorized"";
""2129_setOperationAddress"" -> ""2129_onlyAuthorized"";
""2129_createTokenToOperation"" -> ""2129_onlyAuthorized"";
""2129_createTokenToMarket"" -> ""2129_onlyAuthorized"";
""2129_createTokenToTeam"" -> ""2129__createTokenToTeam"";
""2129_gameMining"" -> ""2129_onlyAuthorized"";
""2129_finishMinting"" -> ""2129_onlyOwner"";
""2129_createTokenToTeam"" -> ""2129_onlyAuthorized"";
""2129_gameMining"" -> ""2129_getCurrentYearGameMiningRemainToken"";
""2129_getCurrentYearGameMiningRemainToken"" -> ""2129_getCurrentYearGameMiningTokenCap"";
}
"
0xc849a5fff9befa297d1c3a772bafac9f3c9004ec.sol,Bounty0xEscrow,"contract Bounty0xEscrow is Ownable, ERC223ReceivingContract, Pausable { using SafeMath for uint256; mapping (address => mapping (address => uint)) public tokens; event Deposit(address indexed token, address indexed user, uint amount, uint balance); event Distribution(address indexed token, address indexed host, address indexed hunter, uint256 amount); constructor() public { }",1,"subgraph cluster_1018_Bounty0xEscrow {
label=""Bounty0xEscrow"";
""1018_distributeTokenToAddressesAndAmountsWithoutHost"" [label=""distributeTokenToAddressesAndAmountsWithoutHost""];
""1018_approveToPullOutTokens"" [label=""approveToPullOutTokens""];
""1018_distributeTokenToAddressesAndAmounts"" [label=""distributeTokenToAddressesAndAmounts""];
""1018_distributeTokenToAddress"" [label=""distributeTokenToAddress""];
""1018_constructor"" [label=""constructor""];
""1018_tokenFallback"" [label=""tokenFallback""];
""1018_distributeWithTransferFrom"" [label=""distributeWithTransferFrom""];
""1018_depositToken"" [label=""depositToken""];
""1018_depositEther"" [label=""depositEther""];
""1018_approveToPullOutTokens"" -> ""1018_onlyOwner"";
""1018_distributeTokenToAddressesAndAmountsWithoutHost"" -> ""1018_onlyOwner"";
""1018_distributeTokenToAddressesAndAmounts"" -> ""1018_onlyOwner"";
""1018_distributeWithTransferFrom"" -> ""1018_onlyOwner"";
""1018_tokenFallback"" -> ""1018_whenNotPaused"";
""1018_depositEther"" -> ""1018_whenNotPaused"";
""1018_depositToken"" -> ""1018_whenNotPaused"";
""1018_distributeTokenToAddress"" -> ""1018_onlyOwner"";
}
"
0x00c315ac9ff89bb6afa7524cd159f0a9766e8c89.sol,IMDEXDexchange,"contract IMDEXDexchange is SafeMath { address public owner; address IMDEXtoken = 0x46705E8fef2E868FACAFeDc45F47114EC01c2EEd; mapping (address => uint256) public invalidOrder; event SetOwner(address indexed previousOwner, address indexed newOwner); modifier onlyOwner { require(msg.sender == owner); _; }",1,"subgraph cluster_1019_IMDEXDexchange {
label=""IMDEXDexchange"";
""1019_IMDEXadminWithdraw"" [label=""IMDEXadminWithdraw""];
""1019_IMDEXdeposit"" [label=""IMDEXdeposit""];
""1019_IMDEXsetInactivityReleasePeriod"" [label=""IMDEXsetInactivityReleasePeriod""];
""1019_IMDEXtrade"" [label=""IMDEXtrade""];
""1019_balanceOf"" [label=""balanceOf""];
""1019_IMDEXwithdrawToken"" [label=""IMDEXwithdrawToken""];
""1019_constructor"" [label=""constructor""];
""1019_IMDEXinvalidateOrdersBefore"" [label=""IMDEXinvalidateOrdersBefore""];
""1019_IMDEXsetAdmin"" [label=""IMDEXsetAdmin""];
""1019_fallback"" [label=""fallback""];
""1019_IMDEXdepositToken"" [label=""IMDEXdepositToken""];
""1019_IMDEXsetOwner"" [label=""IMDEXsetOwner""];
""1019_IMDEXwithdrawToken"" -> ""1019_safeSub"";
""1019_IMDEXtrade"" -> ""1019_safeMul"";
""1019_IMDEXtrade"" -> ""1019_safeAdd"";
""1019_IMDEXsetOwner"" -> ""1019_onlyOwner"";
""1019_IMDEXinvalidateOrdersBefore"" -> ""1019_onlyAdmin"";
""1019_IMDEXdeposit"" -> ""1019_safeAdd"";
""1019_IMDEXadminWithdraw"" -> ""1019_safeAdd"";
""1019_IMDEXadminWithdraw"" -> ""1019_onlyAdmin"";
""1019_IMDEXtrade"" -> ""1019_onlyAdmin"";
""1019_IMDEXdepositToken"" -> ""1019_safeAdd"";
""1019_IMDEXadminWithdraw"" -> ""1019_safeSub"";
""1019_IMDEXadminWithdraw"" -> ""1019_safeMul"";
""1019_IMDEXsetAdmin"" -> ""1019_onlyOwner"";
""1019_IMDEXsetInactivityReleasePeriod"" -> ""1019_onlyAdmin"";
""1019_IMDEXtrade"" -> ""1019_safeSub"";
}
"
0x8615ddfe9d4c9e58abff01c999731f3e9e556e80.sol,FrozenToken,"contract FrozenToken is ERC20Token, ITokenRecipient { mapping (address => bool) frozeds; uint256 public frozedCount; bool public freezeEnabled = false; bool public autoFreeze = false; bool public mintFinished = false; event Freeze(address indexed wallet); event UnFreeze(address indexed wallet); event PropsChanged(address indexed sender, string props, bool oldValue, bool newValue); event Mint(address indexed sender, address indexed wallet, uint256 amount); event ReceiveTokens(address indexed spender, address indexed token, uint256 value, bytes extraData); event ApproveAndCall(address indexed spender, uint256 value, bytes extraData); event Burn(address indexed sender, uint256 amount); event MintFinished(address indexed spender); modifier notFreeze { require(frozeds[msg.sender] == false || freezeEnabled == false); _; }",1,"subgraph cluster_1885_FrozenToken {
label=""FrozenToken"";
""1885_approveAndCall"" [label=""approveAndCall""];
""1885_transferFrom"" [label=""transferFrom""];
""1885_increaseApproval"" [label=""increaseApproval""];
""1885_isFreeze"" [label=""isFreeze""];
""1885_transfer"" [label=""transfer""];
""1885_burn"" [label=""burn""];
""1885_decreaseApproval"" [label=""decreaseApproval""];
""1885_unFreeze"" [label=""unFreeze""];
""1885_freeze"" [label=""freeze""];
""1885_mint"" [label=""mint""];
""1885_updAutoFreeze"" [label=""updAutoFreeze""];
""1885_receiveApproval"" [label=""receiveApproval""];
""1885_mintFinish"" [label=""mintFinish""];
""1885_approve"" [label=""approve""];
""1885_updFreezeEnabled"" [label=""updFreezeEnabled""];
""1885_mint"" -> ""1885_validAddress"";
""1885_updAutoFreeze"" -> ""1885_authLevel"";
""1885_mint"" -> ""1885_authLevel"";
""1885_burn"" -> ""1885_greaterThanZero"";
""1885_receiveApproval"" -> ""1885_greaterThanZero"";
""1885_approveAndCall"" -> ""1885_approve"";
""1885_freeze"" -> ""1885_notThis"";
""1885_mintFinish"" -> ""1885_onlyOwner"";
""1885_transfer"" -> ""1885_notFreeze"";
""1885_approveAndCall"" -> ""1885_validAddress"";
""1885_freeze"" -> ""1885_validAddress"";
""1885_transferFrom"" -> ""1885_transferFrom"";
""1885_decreaseApproval"" -> ""1885_notFreezeFrom"";
""1885_mint"" -> ""1885_isAuthorized"";
""1885_burn"" -> ""1885_isFreeze"";
""1885_transferFrom"" -> ""1885_notFreezeFrom"";
""1885_burn"" -> ""1885_validBalance"";
""1885_receiveApproval"" -> ""1885_validAddress"";
""1885_increaseApproval"" -> ""1885_notFreezeFrom"";
""1885_increaseApproval"" -> ""1885_increaseApproval"";
""1885_approve"" -> ""1885_notFreezeFrom"";
""1885_mint"" -> ""1885_greaterThanZero"";
""1885_unFreeze"" -> ""1885_authLevel"";
""1885_mint"" -> ""1885_isFreeze"";
""1885_freeze"" -> ""1885_notOwner"";
""1885_freeze"" -> ""1885_authLevel"";
""1885_decreaseApproval"" -> ""1885_decreaseApproval"";
""1885_isFreeze"" -> ""1885_validAddress"";
""1885_approve"" -> ""1885_approve"";
""1885_approveAndCall"" -> ""1885_greaterThanZero"";
""1885_transfer"" -> ""1885_transfer"";
""1885_updFreezeEnabled"" -> ""1885_authLevel"";
""1885_mint"" -> ""1885_canMint"";
""1885_unFreeze"" -> ""1885_validAddress"";
}
"
0x449f5c827cf7726cc5f181090aa147ca5fb88a40.sol,EthergotchiOwnershipV2,"contract EthergotchiOwnershipV2 is Controllable, ERC721, ERC721Enumerable, ERC721Metadata { mapping(uint256 => address) private ownerByTokenId; mapping(address => uint256[]) private tokenIdsByOwner; mapping(uint256 => uint256) private ownerTokenIndexByTokenId; mapping(uint256 => address) private approvedTransfers; mapping(address => mapping(address => bool)) private operators; uint256 private totalTokens; bytes4 private constant INTERFACE_SIGNATURE_ERC165 = bytes4( keccak256() ); bytes4 private constant INTERFACE_SIGNATURE_ERC721 = bytes4( keccak256() ^ keccak256() ^ keccak256() ^ keccak256() ^ keccak256() ^ keccak256() ^ keccak256() ^ keccak256() ^ keccak256() ); bytes4 private constant INTERFACE_SIGNATURE_ERC721_ENUMERABLE = bytes4( keccak256() ^ keccak256() ^ keccak256() ); bytes4 private constant INTERFACE_SIGNATURE_ERC721_METADATA = bytes4( keccak256() ^ keccak256() ^ keccak256() ); bytes4 private constant INTERFACE_SIGNATURE_ERC721_TOKEN_RECEIVER = bytes4( keccak256() ); event Transfer( address indexed _from, address indexed _to, uint256 _tokenId ); event Approval( address indexed _owner, address indexed _approved, uint256 _tokenId ); event ApprovalForAll( address indexed _owner, address indexed _operator, bool _approved ); modifier onlyValidToken(uint256 _tokenId) { require(ownerByTokenId[_tokenId] != address(0)); _; }",1,"subgraph cluster_1487_EthergotchiOwnershipV2 {
label=""EthergotchiOwnershipV2"";
""1487__add"" [label=""_add""];
""1487_balanceOf"" [label=""balanceOf""];
""1487_safeTransferFrom"" [label=""safeTransferFrom""];
""1487__isExcluded"" [label=""_isExcluded""];
""1487_name"" [label=""name""];
""1487_tokenURI"" [label=""tokenURI""];
""1487_totalSupply"" [label=""totalSupply""];
""1487_add"" [label=""add""];
""1487_getApproved"" [label=""getApproved""];
""1487_tokenByIndex"" [label=""tokenByIndex""];
""1487_setApprovalForAll"" [label=""setApprovalForAll""];
""1487_transferFrom"" [label=""transferFrom""];
""1487__safeTransferFrom"" [label=""_safeTransferFrom""];
""1487__isContract"" [label=""_isContract""];
""1487_supportsInterface"" [label=""supportsInterface""];
""1487_approve"" [label=""approve""];
""1487__transfer"" [label=""_transfer""];
""1487_ownerOf"" [label=""ownerOf""];
""1487_isApprovedForAll"" [label=""isApprovedForAll""];
""1487_migrate"" [label=""migrate""];
""1487_EthergotchiOwnershipV2"" [label=""EthergotchiOwnershipV2""];
""1487_tokenOfOwnerByIndex"" [label=""tokenOfOwnerByIndex""];
""1487_symbol"" [label=""symbol""];
""1487_EthergotchiOwnershipV2"" -> ""1487_Controllable"";
""1487_transferFrom"" -> ""1487_onlyValidTransfers"";
""1487_migrate"" -> ""1487__isExcluded"";
""1487_migrate"" -> ""1487_onlyOwner"";
""1487_getApproved"" -> ""1487_onlyValidToken"";
""1487_transferFrom"" -> ""1487__transfer"";
""1487__safeTransferFrom"" -> ""1487__isContract"";
""1487__safeTransferFrom"" -> ""1487__transfer"";
""1487_safeTransferFrom"" -> ""1487__safeTransferFrom"";
""1487_add"" -> ""1487_onlyActiveContracts"";
""1487_migrate"" -> ""1487__add"";
""1487_add"" -> ""1487__add"";
""1487__safeTransferFrom"" -> ""1487_onlyValidTransfers"";
""1487_safeTransferFrom"" -> ""1487_onlyValidToken"";
""1487_transferFrom"" -> ""1487_onlyValidToken"";
}
"
0x6c764fac2ed1c5fabf8bcd86bae68d8cdbe8290e.sol,BaseWallet,"contract BaseWallet { address public implementation; address public owner; mapping (address => bool) public authorised; mapping (bytes4 => address) public enabled; uint public modules; event AuthorisedModule(address indexed module, bool value); event EnabledStaticCall(address indexed module, bytes4 indexed method); event Invoked(address indexed module, address indexed target, uint indexed value, bytes data); event Received(uint indexed value, address indexed sender, bytes data); event OwnerChanged(address owner); modifier moduleOnly { require(authorised[msg.sender], ); _; }",1,"subgraph cluster_1406_BaseWallet {
label=""BaseWallet"";
""1406_init"" [label=""init""];
""1406_invoke"" [label=""invoke""];
""1406_fallback"" [label=""fallback""];
""1406_enableStaticCall"" [label=""enableStaticCall""];
""1406_authorised"" [label=""authorised""];
""1406_owner"" [label=""owner""];
""1406_authoriseModule"" [label=""authoriseModule""];
""1406_setOwner"" [label=""setOwner""];
""1406_setOwner"" -> ""1406_moduleOnly"";
""1406_invoke"" -> ""1406_moduleOnly"";
""1406_authoriseModule"" -> ""1406_moduleOnly"";
""1406_enableStaticCall"" -> ""1406_moduleOnly"";
}
"
0x8615ddfe9d4c9e58abff01c999731f3e9e556e80.sol,DAPBOXToken,"contract DAPBOXToken is FrozenToken { string public name = ; string public symbol = ; uint8 public decimals = 0; string public version = ; string public publisher = ""https: string public description = ; bool public acceptAdminWithdraw = false; bool public acceptDonate = true; event InfoChanged(address indexed sender, string version, string publisher, string description); event Withdraw(address indexed sender, address indexed wallet, uint256 amount); event WithdrawTokens(address indexed sender, address indexed wallet, address indexed token, uint256 amount); event Donate(address indexed sender, uint256 value); event PropsChanged(address indexed sender, string props, bool oldValue, bool newValue); function setupInfo(string _version, string _publisher, string _description) authLevel(Level.ADMIN) notEmpty(_version) notEmpty(_publisher) notEmpty(_description) public { version = _version; publisher = _publisher; description = _description; InfoChanged(msg.sender, _version, _publisher, _description); }",1,"subgraph cluster_2219_DAPBOXToken {
label=""DAPBOXToken"";
""2219_donate"" [label=""donate""];
""2219_setupInfo"" [label=""setupInfo""];
""2219_updAcceptDonate"" [label=""updAcceptDonate""];
""2219_balanceToken"" [label=""balanceToken""];
""2219_fallback"" [label=""fallback""];
""2219_updAcceptAdminWithdraw"" [label=""updAcceptAdminWithdraw""];
""2219_withdrawAmount"" [label=""withdrawAmount""];
""2219_withdraw"" [label=""withdraw""];
""2219_withdrawTokens"" [label=""withdrawTokens""];
""2219_withdrawTokens"" -> ""2219_greaterThanZero"";
""2219_donate"" -> ""2219_greaterThanZero"";
""2219_withdrawTokens"" -> ""2219_authLevel"";
""2219_withdraw"" -> ""2219_withdrawAmount"";
""2219_setupInfo"" -> ""2219_notEmpty"";
""2219_updAcceptAdminWithdraw"" -> ""2219_onlyOwner"";
""2219_balanceToken"" -> ""2219_validAddress"";
""2219_fallback"" -> ""2219_donate"";
""2219_withdrawAmount"" -> ""2219_greaterThanZero"";
""2219_withdrawAmount"" -> ""2219_authLevel"";
""2219_withdrawTokens"" -> ""2219_validAddress"";
""2219_updAcceptDonate"" -> ""2219_authLevel"";
""2219_setupInfo"" -> ""2219_authLevel"";
""2219_withdrawAmount"" -> ""2219_validBalanceThis"";
}
"
0x0096dc2246fc3627cc2bf87a3b0d2e0f87b58589.sol,Zethroll,"contract Zethroll is ZTHReceivingContract { using SafeMath for uint; modifier betIsValid(uint _betSize, uint _playerNumber) { require( calculateProfit(_betSize, _playerNumber) < maxProfit && _betSize >= minBet && _playerNumber > minNumber && _playerNumber < maxNumber); _; }",1,"subgraph cluster_866_Zethroll {
label=""Zethroll"";
""866_calculateProfit"" [label=""calculateProfit""];
""866_ownerSetMinBet"" [label=""ownerSetMinBet""];
""866_ownerUpdateContractBalance"" [label=""ownerUpdateContractBalance""];
""866_ownerkill"" [label=""ownerkill""];
""866_setMaxProfit"" [label=""setMaxProfit""];
""866__finishBet"" [label=""_finishBet""];
""866_dumpdivs"" [label=""dumpdivs""];
""866_ownerTransferZTH"" [label=""ownerTransferZTH""];
""866__playerRollDice"" [label=""_playerRollDice""];
""866_tokenFallback"" [label=""tokenFallback""];
""866__zthToken"" [label=""_zthToken""];
""866_ownerSetBankroll"" [label=""ownerSetBankroll""];
""866_fallback"" [label=""fallback""];
""866_finishBet"" [label=""finishBet""];
""866_ownerSetMaxProfitAsPercentOfHouse"" [label=""ownerSetMaxProfitAsPercentOfHouse""];
""866_random"" [label=""random""];
""866_ownerChangeOwner"" [label=""ownerChangeOwner""];
""866_ownerPauseGame"" [label=""ownerPauseGame""];
""866_maxRandom"" [label=""maxRandom""];
""866_constructor"" [label=""constructor""];
""866_random"" -> ""866_maxRandom"";
""866_ownerTransferZTH"" -> ""866_onlyOwner"";
""866_ownerChangeOwner"" -> ""866_onlyOwner"";
""866_tokenFallback"" -> ""866_setMaxProfit"";
""866__playerRollDice"" -> ""866_betIsValid"";
""866__playerRollDice"" -> ""866_gameIsActive"";
""866_ownerSetMaxProfitAsPercentOfHouse"" -> ""866_onlyOwner"";
""866_finishBet"" -> ""866_gameIsActive"";
""866_ownerPauseGame"" -> ""866_onlyOwner"";
""866__finishBet"" -> ""866_setMaxProfit"";
""866_constructor"" -> ""866_ownerSetMinBet"";
""866__playerRollDice"" -> ""866__zthToken"";
""866_constructor"" -> ""866_ownerSetMaxProfitAsPercentOfHouse"";
""866__playerRollDice"" -> ""866__finishBet"";
""866_ownerSetBankroll"" -> ""866_onlyOwner"";
""866__finishBet"" -> ""866_random"";
""866_ownerSetMinBet"" -> ""866_onlyOwner"";
""866_ownerSetMaxProfitAsPercentOfHouse"" -> ""866_setMaxProfit"";
""866__finishBet"" -> ""866_calculateProfit"";
""866_ownerkill"" -> ""866_onlyOwner"";
""866_ownerTransferZTH"" -> ""866_setMaxProfit"";
""866_tokenFallback"" -> ""866__playerRollDice"";
""866_ownerUpdateContractBalance"" -> ""866_onlyOwner"";
""866_finishBet"" -> ""866__finishBet"";
}
"
0x025dce2d39a46296766db7cac8c322e8f59cd5d9.sol,EthToSmthSwaps,contract EthToSmthSwaps { using SafeMath for uint; address public owner; address public ratingContractAddress; uint256 SafeTime = 1 hours; struct Swap { bytes32 secret; bytes20 secretHash; uint256 createdAt; uint256 balance; },1,"subgraph cluster_679_EthToSmthSwaps {
label=""EthToSmthSwaps"";
""679_withdr"" [label=""withdr""];
""679_withdraw"" [label=""withdraw""];
""679_getSecret"" [label=""getSecret""];
""679_close"" [label=""close""];
""679_abort"" [label=""abort""];
""679_checkSign"" [label=""checkSign""];
""679_clean"" [label=""clean""];
""679_getBalance"" [label=""getBalance""];
""679_sign"" [label=""sign""];
""679_setReputationAddress"" [label=""setReputationAddress""];
""679_createSwap"" [label=""createSwap""];
""679_refund"" [label=""refund""];
""679_constructor"" [label=""constructor""];
""679_abort"" -> ""679_clean"";
""679_refund"" -> ""679_clean"";
""679_close"" -> ""679_clean"";
}
"
0x26bfad55ad49fdfb0014f8c9deca55946848ad3e.sol,Broker,contract Broker is Claimable { using SafeMath for uint256; struct Offer { address maker; address offerAsset; address wantAsset; uint64 nonce; uint256 offerAmount; uint256 wantAmount; uint256 availableAmount; },1,"subgraph cluster_2268_Broker {
label=""Broker"";
""2268__recoverAddress"" [label=""_recoverAddress""];
""2268_emergencyWithdraw"" [label=""emergencyWithdraw""];
""2268_depositEther"" [label=""depositEther""];
""2268_spendFrom"" [label=""spendFrom""];
""2268_emergencyCancel"" [label=""emergencyCancel""];
""2268__withdraw"" [label=""_withdraw""];
""2268__fill"" [label=""_fill""];
""2268_announceWithdraw"" [label=""announceWithdraw""];
""2268_approveSpender"" [label=""approveSpender""];
""2268_setCancelAnnounceDelay"" [label=""setCancelAnnounceDelay""];
""2268_fillOffer"" [label=""fillOffer""];
""2268__increaseBalanceAndPayFees"" [label=""_increaseBalanceAndPayFees""];
""2268_rescindApproval"" [label=""rescindApproval""];
""2268_removeSpender"" [label=""removeSpender""];
""2268__payFees"" [label=""_payFees""];
""2268_depositERC20"" [label=""depositERC20""];
""2268__validateAndAddHash"" [label=""_validateAndAddHash""];
""2268_withdraw"" [label=""withdraw""];
""2268_slowCancel"" [label=""slowCancel""];
""2268_renounceOwnership"" [label=""renounceOwnership""];
""2268_makeOffer"" [label=""makeOffer""];
""2268__paySeparateFees"" [label=""_paySeparateFees""];
""2268_addSpender"" [label=""addSpender""];
""2268_constructor"" [label=""constructor""];
""2268__cancel"" [label=""_cancel""];
""2268__decreaseBalanceAndPayFees"" [label=""_decreaseBalanceAndPayFees""];
""2268__getSanitizedReturnValue"" [label=""_getSanitizedReturnValue""];
""2268_announceCancel"" [label=""announceCancel""];
""2268__validateAddress"" [label=""_validateAddress""];
""2268_fastCancel"" [label=""fastCancel""];
""2268_setOperator"" [label=""setOperator""];
""2268_fillOffers"" [label=""fillOffers""];
""2268_setCoordinator"" [label=""setCoordinator""];
""2268_setState"" [label=""setState""];
""2268_cancel"" [label=""cancel""];
""2268_setWithdrawAnnounceDelay"" [label=""setWithdrawAnnounceDelay""];
""2268_slowWithdraw"" [label=""slowWithdraw""];
""2268_withdraw"" -> ""2268__validateAndAddHash"";
""2268_cancel"" -> ""2268__recoverAddress"";
""2268_withdraw"" -> ""2268__recoverAddress"";
""2268_makeOffer"" -> ""2268__decreaseBalanceAndPayFees"";
""2268_emergencyWithdraw"" -> ""2268_onlyCoordinator"";
""2268_makeOffer"" -> ""2268_onlyActiveState"";
""2268_fillOffers"" -> ""2268_onlyCoordinator"";
""2268_emergencyCancel"" -> ""2268__cancel"";
""2268_spendFrom"" -> ""2268_unusedReasonCode"";
""2268_withdraw"" -> ""2268_onlyCoordinator"";
""2268_emergencyWithdraw"" -> ""2268__withdraw"";
""2268_makeOffer"" -> ""2268__recoverAddress"";
""2268_setWithdrawAnnounceDelay"" -> ""2268_onlyOwner"";
""2268_fillOffers"" -> ""2268__validateAndAddHash"";
""2268_emergencyCancel"" -> ""2268_onlyInactiveState"";
""2268__withdraw"" -> ""2268__decreaseBalanceAndPayFees"";
""2268_slowWithdraw"" -> ""2268__withdraw"";
""2268_fillOffers"" -> ""2268__paySeparateFees"";
""2268_depositERC20"" -> ""2268__getSanitizedReturnValue"";
""2268_setCancelAnnounceDelay"" -> ""2268_notMoreThanMaxDelay"";
""2268_cancel"" -> ""2268_onlyCoordinator"";
""2268_addSpender"" -> ""2268_onlyOwner"";
""2268_makeOffer"" -> ""2268_onlyCoordinator"";
""2268_emergencyWithdraw"" -> ""2268_onlyInactiveState"";
""2268_addSpender"" -> ""2268__validateAddress"";
""2268_depositEther"" -> ""2268_onlyActiveState"";
""2268_cancel"" -> ""2268__cancel"";
""2268_fillOffers"" -> ""2268_onlyActiveState"";
""2268_setCancelAnnounceDelay"" -> ""2268_onlyOwner"";
""2268_depositERC20"" -> ""2268_onlyActiveState"";
""2268_fillOffers"" -> ""2268__recoverAddress"";
""2268_removeSpender"" -> ""2268__validateAddress"";
""2268_fillOffer"" -> ""2268_onlyCoordinator"";
""2268_emergencyCancel"" -> ""2268_onlyCoordinator"";
""2268_fillOffer"" -> ""2268__recoverAddress"";
""2268_fastCancel"" -> ""2268_onlyCoordinator"";
""2268_setWithdrawAnnounceDelay"" -> ""2268_notMoreThanMaxDelay"";
""2268_setState"" -> ""2268_onlyOwner"";
""2268_fillOffer"" -> ""2268__fill"";
""2268_removeSpender"" -> ""2268_onlyOwner"";
""2268_setOperator"" -> ""2268_onlyOwner"";
""2268_spendFrom"" -> ""2268__validateAddress"";
""2268_slowCancel"" -> ""2268__cancel"";
""2268_fastCancel"" -> ""2268__cancel"";
""2268_fillOffer"" -> ""2268_onlyActiveState"";
""2268_setCoordinator"" -> ""2268__validateAddress"";
""2268_depositERC20"" -> ""2268_onlyCoordinator"";
""2268_makeOffer"" -> ""2268__validateAndAddHash"";
""2268_fillOffer"" -> ""2268__validateAndAddHash"";
""2268_setCoordinator"" -> ""2268_onlyOwner"";
""2268__decreaseBalanceAndPayFees"" -> ""2268__payFees"";
""2268_withdraw"" -> ""2268__withdraw"";
""2268__cancel"" -> ""2268__increaseBalanceAndPayFees"";
""2268__increaseBalanceAndPayFees"" -> ""2268__payFees"";
""2268__fill"" -> ""2268__increaseBalanceAndPayFees"";
""2268_setOperator"" -> ""2268__validateAddress"";
""2268__withdraw"" -> ""2268__getSanitizedReturnValue"";
""2268_fillOffers"" -> ""2268__fill"";
}
"
0x7976af0ae2124a0771d5287aa16017b3f9dd43a4.sol,BasicToken,contract BasicToken is ERC20Basic { using SafeMath for uint256; mapping(address => uint256) balances; uint256 totalSupply_; bool transferable; modifier isTransferable() { require(transferable || msg.sender == owner); _; },1,"subgraph cluster_443_BasicToken {
label=""BasicToken"";
""443_balanceOf"" [label=""balanceOf""];
""443_transfer"" [label=""transfer""];
""443_totalSupply"" [label=""totalSupply""];
""443_transfer"" -> ""443_isTransferable"";
}
"
0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol,AuctionContract,"contract AuctionContract { using SafeMath for uint; event BetPlacedEvent(address bidderAddress, uint amount); event RefundEvent(address bidderAddress, uint amount); event CreateAuctionContractEvent(address bidderAddress, uint amount); uint public auctionSlideSize = 30; uint public auctionCloseBlock; uint public closeAuctionAfterNBlocks; uint public bettingStep; mapping (address => uint) public bettingMap; address public firstBidder; address public secondBidder; address public winner; uint public biggestBet; uint public prize; address public firstBetContract; address public secondBetContract; uint public minimalPrize = 10000000000000000; uint public minimaBetStep = 10000000000000000; address public auctioneerAddress; bool public isActive; constructor (uint _closeAuctionAfterNBlocks, address _auctioneerAddress) payable public{ assert(msg.value >= minimalPrize); prize = msg.value; auctioneerAddress = _auctioneerAddress; closeAuctionAfterNBlocks = _closeAuctionAfterNBlocks; auctionCloseBlock = block.number.add(_closeAuctionAfterNBlocks); bettingStep = 0; biggestBet = 0; isActive = true; emit CreateAuctionContractEvent(this, prize); }",1,"subgraph cluster_565_AuctionContract {
label=""AuctionContract"";
""565_constructor"" [label=""constructor""];
""565_askForRefund"" [label=""askForRefund""];
""565_fallback"" [label=""fallback""];
""565_closeAuction"" [label=""closeAuction""];
}
"
0x54923b4f2e4433294c70559cc94d1812793f0451.sol,Future1Exchange,contract Future1Exchange { address public archon; mapping (address => mapping(address => uint256)) public _token; constructor() public { archon = msg.sender; },1,"subgraph cluster_241_Future1Exchange {
label=""Future1Exchange"";
""241_safeAdd"" [label=""safeAdd""];
""241_safeSub"" [label=""safeSub""];
""241_balanceOf"" [label=""balanceOf""];
""241_constructor"" [label=""constructor""];
""241_tokenWithdraw"" [label=""tokenWithdraw""];
""241_tokenTransfer"" [label=""tokenTransfer""];
""241_depositETH"" [label=""depositETH""];
""241_contract_bal"" [label=""contract_bal""];
""241_withdrawETH"" [label=""withdrawETH""];
""241_tokenWithdraw"" -> ""241_safeSub"";
""241_tokenTransfer"" -> ""241_safeAdd"";
}
"
0x4145492ad5039b802bd7e58098c8d71706a2cd14.sol,ElepigCrowdsale,"contract ElepigCrowdsale is CappedCrowdsale, RefundableCrowdsale, ControlledAccess { using SafeMath for uint256; enum CrowdsaleStage { PreICO, ICO1, ICO2, ICO3, ICO4 }",1,"subgraph cluster_1578_ElepigCrowdsale {
label=""ElepigCrowdsale"";
""1578_ElepigCrowdsale"" [label=""ElepigCrowdsale""];
""1578_setCurrentRate"" [label=""setCurrentRate""];
""1578_finish"" [label=""finish""];
""1578_transferTokenOwnership"" [label=""transferTokenOwnership""];
""1578_airdropTokens"" [label=""airdropTokens""];
""1578_setCrowdsaleStage"" [label=""setCrowdsaleStage""];
""1578_donate"" [label=""donate""];
""1578_removeBlacklistAddress"" [label=""removeBlacklistAddress""];
""1578_addBlacklistAddress"" [label=""addBlacklistAddress""];
""1578_releaseVault"" [label=""releaseVault""];
""1578_fallback"" [label=""fallback""];
""1578_forwardFunds"" [label=""forwardFunds""];
""1578_forwardEndTime"" [label=""forwardEndTime""];
""1578_finish"" -> ""1578_finalize"";
""1578_forwardFunds"" -> ""1578_goalReached"";
""1578_releaseVault"" -> ""1578_goalReached"";
""1578_airdropTokens"" -> ""1578_onlyOwner"";
""1578_donate"" -> ""1578_onlyValidAccess"";
""1578_removeBlacklistAddress"" -> ""1578_onlyOwner"";
""1578_forwardFunds"" -> ""1578_forwardFunds"";
""1578_donate"" -> ""1578_forwardFunds"";
""1578_addBlacklistAddress"" -> ""1578_onlyOwner"";
""1578_ElepigCrowdsale"" -> ""1578_CappedCrowdsale"";
""1578_ElepigCrowdsale"" -> ""1578_Ownable"";
""1578_ElepigCrowdsale"" -> ""1578_Crowdsale"";
""1578_transferTokenOwnership"" -> ""1578_onlyOwner"";
""1578_setCrowdsaleStage"" -> ""1578_onlyOwner"";
""1578_releaseVault"" -> ""1578_onlyOwner"";
""1578_donate"" -> ""1578_validPurchase"";
""1578_finish"" -> ""1578_onlyOwner"";
""1578_ElepigCrowdsale"" -> ""1578_RefundableCrowdsale"";
}
"
0xc7bd5dac314a67a375a0347d72797c2ea1f1a672.sol,KlownGasDrop,contract KlownGasDrop { mapping(address => bool) public receivers; mapping ( address => uint256 ) public balances; uint256 amountToClaim = 50000000; uint256 public totalSent = 0; address _owner; address whoSent; uint256 dappBalance; uint public brpt = 0; uint public brpt1 = 0; IERC20 currentToken ; modifier onlyOwner() { require(msg.sender == _owner); _; },1,"subgraph cluster_277_KlownGasDrop {
label=""KlownGasDrop"";
""277_setGasClaim"" [label=""setGasClaim""];
""277_deposit"" [label=""deposit""];
""277_getGasClaimAmount"" [label=""getGasClaimAmount""];
""277_claimGasDrop"" [label=""claimGasDrop""];
""277_KlownGasDrop"" [label=""KlownGasDrop""];
""277_hasReceived"" [label=""hasReceived""];
""277_setCurrentToken"" [label=""setCurrentToken""];
""277_setGasClaim"" -> ""277_onlyOwner"";
""277_setCurrentToken"" -> ""277_onlyOwner"";
""277_deposit"" -> ""277_onlyOwner"";
}
"
0x6dbb4e882f967432fc0f9200e9ca577c916d8a68.sol,Bussiness,contract Bussiness is Ownable { IERC721 public erc721Address = IERC721(0x06012c8cf97bead5deae237070f9587f8e7a266d); ERC20BasicInterface public usdtToken = ERC20BasicInterface(0xdAC17F958D2ee523a2206206994597C13D831ec7); uint256 public ETHFee = 2; uint256 public HBWALLETFee = 1; uint256 public balance = address(this).balance; constructor() public {},1,"subgraph cluster_687_Bussiness {
label=""Bussiness"";
""687_buyByUsdt"" [label=""buyByUsdt""];
""687_setPrice"" [label=""setPrice""];
""687_getPrice"" [label=""getPrice""];
""687_ownerOf"" [label=""ownerOf""];
""687_constructor"" [label=""constructor""];
""687_resetPrice"" [label=""resetPrice""];
""687_setFee"" [label=""setFee""];
""687_withdraw"" [label=""withdraw""];
""687_setPriceFeeEth"" [label=""setPriceFeeEth""];
""687_removePrice"" [label=""removePrice""];
""687_buy"" [label=""buy""];
""687_buyByUsdt"" -> ""687_resetPrice"";
""687_setFee"" -> ""687_onlyOwner"";
""687_withdraw"" -> ""687_onlyOwner"";
""687_buy"" -> ""687_resetPrice"";
""687_getPrice"" -> ""687_resetPrice"";
""687_removePrice"" -> ""687_resetPrice"";
}
"
0x6b4df2aa3d64d8dc06120ef4391513e4170af4a7.sol,GeneralTransferManager,contract GeneralTransferManager is ITransferManager { using SafeMath for uint256; address public issuanceAddress = address(0); address public signingAddress = address(0); bytes32 public constant WHITELIST = ; bytes32 public constant FLAGS = ; struct TimeRestriction { uint256 fromTime; uint256 toTime; uint256 expiryTime; bool canBuyFromSTO; },1,"subgraph cluster_1917_GeneralTransferManager {
label=""GeneralTransferManager"";
""1917_changeAllowAllWhitelistTransfers"" [label=""changeAllowAllWhitelistTransfers""];
""1917_changeAllowAllTransfers"" [label=""changeAllowAllTransfers""];
""1917_isSTOAttached"" [label=""isSTOAttached""];
""1917_changeSigningAddress"" [label=""changeSigningAddress""];
""1917_checkSig"" [label=""checkSig""];
""1917_changeAllowAllWhitelistIssuances"" [label=""changeAllowAllWhitelistIssuances""];
""1917_getPermissions"" [label=""getPermissions""];
""1917_constructor"" [label=""constructor""];
""1917_onWhitelist"" [label=""onWhitelist""];
""1917_changeIssuanceAddress"" [label=""changeIssuanceAddress""];
""1917_modifyWhitelist"" [label=""modifyWhitelist""];
""1917_verifyTransfer"" [label=""verifyTransfer""];
""1917_modifyWhitelistMulti"" [label=""modifyWhitelistMulti""];
""1917_modifyWhitelistSigned"" [label=""modifyWhitelistSigned""];
""1917_changeAllowAllBurnTransfers"" [label=""changeAllowAllBurnTransfers""];
""1917_getInitFunction"" [label=""getInitFunction""];
""1917_changeSigningAddress"" -> ""1917_withPerm"";
""1917_verifyTransfer"" -> ""1917_isSTOAttached"";
""1917_changeAllowAllWhitelistTransfers"" -> ""1917_withPerm"";
""1917_changeAllowAllWhitelistIssuances"" -> ""1917_withPerm"";
""1917_modifyWhitelistMulti"" -> ""1917_withPerm"";
""1917_modifyWhitelistSigned"" -> ""1917_checkSig"";
""1917_constructor"" -> ""1917_constructor"";
""1917_changeIssuanceAddress"" -> ""1917_withPerm"";
""1917_modifyWhitelist"" -> ""1917_withPerm"";
""1917_modifyWhitelistMulti"" -> ""1917_modifyWhitelist"";
""1917_verifyTransfer"" -> ""1917_onWhitelist"";
""1917_changeAllowAllTransfers"" -> ""1917_withPerm"";
""1917_changeAllowAllBurnTransfers"" -> ""1917_withPerm"";
}
"
0x301487766dcf283592b11b5988e5c4e4630dfbe5.sol,EDex,"contract EDex is SafeMath { address public admin; address public feeAccount; address public accountLevelsAddr; uint public feeMake; uint public feeTake; uint public feeRebate; mapping (address => mapping (address => uint)) public tokens; mapping (address => mapping (bytes32 => bool)) public orders; mapping (address => mapping (bytes32 => uint)) public orderFills; event Order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user); event Cancel(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s); event Trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give); event Deposit(address token, address user, uint amount, uint balance); event Withdraw(address token, address user, uint amount, uint balance); constructor (address admin_, address feeAccount_, address accountLevelsAddr_, uint feeMake_, uint feeTake_, uint feeRebate_) public { admin = admin_; feeAccount = feeAccount_; accountLevelsAddr = accountLevelsAddr_; feeMake = feeMake_; feeTake = feeTake_; feeRebate = feeRebate_; }",1,"subgraph cluster_1614_EDex {
label=""EDex"";
""1614_changeFeeTake"" [label=""changeFeeTake""];
""1614_withdrawToken"" [label=""withdrawToken""];
""1614_changeFeeAccount"" [label=""changeFeeAccount""];
""1614_balanceOf"" [label=""balanceOf""];
""1614_cancelOrder"" [label=""cancelOrder""];
""1614_changeAccountLevelsAddr"" [label=""changeAccountLevelsAddr""];
""1614_order"" [label=""order""];
""1614_availableVolume"" [label=""availableVolume""];
""1614_constructor"" [label=""constructor""];
""1614_changeFeeMake"" [label=""changeFeeMake""];
""1614_fallback"" [label=""fallback""];
""1614_deposit"" [label=""deposit""];
""1614_depositToken"" [label=""depositToken""];
""1614_changeFeeRebate"" [label=""changeFeeRebate""];
""1614_changeAdmin"" [label=""changeAdmin""];
""1614_trade"" [label=""trade""];
""1614_amountFilled"" [label=""amountFilled""];
""1614_withdraw"" [label=""withdraw""];
""1614_tradeBalances"" [label=""tradeBalances""];
""1614_testTrade"" [label=""testTrade""];
""1614_testTrade"" -> ""1614_availableVolume"";
""1614_withdrawToken"" -> ""1614_safeSub"";
""1614_availableVolume"" -> ""1614_safeSub"";
""1614_availableVolume"" -> ""1614_safeMul"";
""1614_tradeBalances"" -> ""1614_safeAdd"";
""1614_tradeBalances"" -> ""1614_safeMul"";
""1614_trade"" -> ""1614_tradeBalances"";
""1614_depositToken"" -> ""1614_safeAdd"";
""1614_trade"" -> ""1614_safeAdd"";
""1614_tradeBalances"" -> ""1614_safeSub"";
""1614_withdraw"" -> ""1614_safeSub"";
""1614_deposit"" -> ""1614_safeAdd"";
}
"
0x020ddc98365d0199b4c7a2d769d685480789f67e.sol,EOSclassic,"contract EOSclassic is StandardToken, HasNoEther { string public constant NAME = ; string public constant SYMBOL = ; uint8 public constant DECIMALS = 18; uint public constant TOTAL_SUPPLY = 1000000000 * (10 ** uint(DECIMALS)); uint public constant foundersAllocation = 100000000 * (10 ** uint(DECIMALS)); address public constant eosTokenAddress = 0x86Fa049857E0209aa7D9e616F7eb3b3B78ECfdb0; address public constant eosCrowdsaleAddress = 0xd0a6E6C54DbC68Db5db3A091B171A77407Ff7ccf; mapping (address => string) public keys; mapping (address => bool) public eosClassicClaimed; event LogClaim (address user, uint amount); event LogRegister (address user, string key); constructor() public { totalSupply_ = TOTAL_SUPPLY; balances[address(this)] = TOTAL_SUPPLY; emit Transfer(0x0, address(this), TOTAL_SUPPLY); balances[address(this)] = balances[address(this)].sub(foundersAllocation); balances[msg.sender] = balances[msg.sender].add(foundersAllocation); emit Transfer(address(this), msg.sender, foundersAllocation); }",1,"subgraph cluster_947_EOSclassic {
label=""EOSclassic"";
""947_queryEOSTokenBalance"" [label=""queryEOSTokenBalance""];
""947_constructor"" [label=""constructor""];
""947_register"" [label=""register""];
""947_getEOSKeyFor"" [label=""getEOSKeyFor""];
""947_isClaimed"" [label=""isClaimed""];
""947_getMyEOSKey"" [label=""getMyEOSKey""];
""947_queryEOSCrowdsaleKey"" [label=""queryEOSCrowdsaleKey""];
""947_claimEOSclassicFor"" [label=""claimEOSclassicFor""];
""947_claimEOSclassic"" [label=""claimEOSclassic""];
""947_claimEOSclassic"" -> ""947_claimEOSclassicFor"";
""947_claimEOSclassicFor"" -> ""947_queryEOSTokenBalance"";
""947_getEOSKeyFor"" -> ""947_queryEOSCrowdsaleKey"";
""947_claimEOSclassicFor"" -> ""947_isClaimed"";
""947_getMyEOSKey"" -> ""947_getEOSKeyFor"";
}
"
0xeee7c7e228eafb0f8945c5dbaa8ea4f6ee12b36d.sol,Crowdsale,"contract Crowdsale { using SafeMath for uint256; address public wallet; address public addressOfTokenUsedAsReward; uint256 public price = 1818; token tokenReward; uint256 public weiRaised; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); function Crowdsale() { wallet = 0x5d467Dfc5e3FcA3ea4bd6C312275ca930d2f3E19; addressOfTokenUsedAsReward = 0xB6eC8C3a347f66a3d7C4F39D6DD68A422E69E81d ; tokenReward = token(addressOfTokenUsedAsReward); }",1,"subgraph cluster_347_Crowdsale {
label=""Crowdsale"";
""347_stopSale"" [label=""stopSale""];
""347_changeWallet"" [label=""changeWallet""];
""347_changeTokenReward"" [label=""changeTokenReward""];
""347_validPurchase"" [label=""validPurchase""];
""347_fallback"" [label=""fallback""];
""347_withdrawTokens"" [label=""withdrawTokens""];
""347_buyTokens"" [label=""buyTokens""];
""347_setPrice"" [label=""setPrice""];
""347_Crowdsale"" [label=""Crowdsale""];
""347_startSale"" [label=""startSale""];
""347_forwardFunds"" [label=""forwardFunds""];
""347_fallback"" -> ""347_buyTokens"";
""347_buyTokens"" -> ""347_validPurchase"";
""347_buyTokens"" -> ""347_forwardFunds"";
}
"
0xc0952584ddd2735a237f844dab59bde737e7fe14.sol,lockEtherPay,"contract lockEtherPay is Ownable { using SafeMath for uint256; token token_reward; address public beneficiary; bool public isLocked = false; bool public isReleased = false; uint256 public start_time; uint256 public end_time; uint256 public fifty_two_weeks = 29980800; event TokenReleased(address beneficiary, uint256 token_amount); constructor() public{ token_reward = token(0xAa1ae5e57dc05981D83eC7FcA0b3c7ee2565B7D6); beneficiary = 0x51Ed81Fb25511a370207ca17f3D6Dbc7A1cFD43f; }",1,"subgraph cluster_309_lockEtherPay {
label=""lockEtherPay"";
""309_constructor"" [label=""constructor""];
""309_release"" [label=""release""];
""309_lock"" [label=""lock""];
""309_lockOver"" [label=""lockOver""];
""309_tokenBalance"" [label=""tokenBalance""];
""309_release"" -> ""309_onlyOwner"";
""309_release"" -> ""309_tokenBalance"";
""309_lock"" -> ""309_onlyOwner"";
""309_lock"" -> ""309_tokenBalance"";
""309_release"" -> ""309_lockOver"";
}
"
0x3639d5dc956e35540fbd1de691870fb1318d6783.sol,SNTGiveaway,"contract SNTGiveaway is Controlled { mapping(address => bool) public sentToAddress; mapping(bytes5 => bool) public codeUsed; ERC20Token public SNT; uint public ethAmount; uint public sntAmount; bytes32 public root; event AddressFunded(address dest, bytes5 code, uint ethAmount, uint sntAmount); constructor(address _sntAddress, uint _ethAmount, uint _sntAmount, bytes32 _root) public { SNT = ERC20Token(_sntAddress); ethAmount = _ethAmount; sntAmount = _sntAmount; root = _root; }",1,"subgraph cluster_506_SNTGiveaway {
label=""SNTGiveaway"";
""506_updateSettings"" [label=""updateSettings""];
""506_constructor"" [label=""constructor""];
""506_processRequest"" [label=""processRequest""];
""506_manualSend"" [label=""manualSend""];
""506_retrieveFunds"" [label=""retrieveFunds""];
""506_validRequest"" [label=""validRequest""];
""506_fallback"" [label=""fallback""];
""506_boom"" [label=""boom""];
""506_processRequest"" -> ""506_onlyController"";
""506_manualSend"" -> ""506_onlyController"";
""506_boom"" -> ""506_onlyController"";
""506_updateSettings"" -> ""506_onlyController"";
""506_retrieveFunds"" -> ""506_onlyController"";
}
"
0xcef8feebbdc278c0c81e07b87abf96b22d08fa6e.sol,UnicornRefunds,"contract UnicornRefunds { using SafeMath for uint; address public cardboardUnicornTokenAddress; address public unicornRanchAddress; address public owner = msg.sender; uint public pricePerUnicorn = 1 finney; uint public rewardUnicornAmount = 100; mapping(address => uint) allowedAmounts; mapping(address => bool) rewardClaimed; event RewardClaimed(address indexed _who, uint _bookingIndex); event UnicornsSold(address indexed _who, uint _unicornCount, uint _unicornCost, uint _paymentTotal); modifier onlyOwner { require(msg.sender == owner); _; }",1,"subgraph cluster_534_UnicornRefunds {
label=""UnicornRefunds"";
""534_sell"" [label=""sell""];
""534_changeRewardAmount"" [label=""changeRewardAmount""];
""534_changeOwner"" [label=""changeOwner""];
""534_changeUnicornRanchAddress"" [label=""changeUnicornRanchAddress""];
""534_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""534_claimReward"" [label=""claimReward""];
""534_withdraw"" [label=""withdraw""];
""534_changePricePerUnicorn"" [label=""changePricePerUnicorn""];
""534_fallback"" [label=""fallback""];
""534_setAllowance"" [label=""setAllowance""];
""534_changeCardboardUnicornTokenAddress"" [label=""changeCardboardUnicornTokenAddress""];
""534_changeOwner"" -> ""534_onlyOwner"";
""534_changeUnicornRanchAddress"" -> ""534_onlyOwner"";
""534_changeRewardAmount"" -> ""534_onlyOwner"";
""534_changePricePerUnicorn"" -> ""534_onlyOwner"";
""534_changeCardboardUnicornTokenAddress"" -> ""534_onlyOwner"";
""534_setAllowance"" -> ""534_onlyOwner"";
""534_withdraw"" -> ""534_onlyOwner"";
""534_withdrawForeignTokens"" -> ""534_onlyOwner"";
}
"
0x56853ab9006e0712b05c68b586372fcdde5236b9.sol,AirDrop,"contract AirDrop is Ownable { Token token; event TransferredToken(address indexed to, uint256 value); event FailedTransfer(address indexed to, uint256 value); modifier whenDropIsActive() { assert(isActive()); _; }",1,"subgraph cluster_282_AirDrop {
label=""AirDrop"";
""282_sendTokens"" [label=""sendTokens""];
""282_AirDrop"" [label=""AirDrop""];
""282_sendInternally"" [label=""sendInternally""];
""282_tokensAvailable"" [label=""tokensAvailable""];
""282_sendTokensSingleValue"" [label=""sendTokensSingleValue""];
""282_destroy"" [label=""destroy""];
""282_isActive"" [label=""isActive""];
""282_sendTokens"" -> ""282_sendInternally"";
""282_sendTokensSingleValue"" -> ""282_onlyOwner"";
""282_sendInternally"" -> ""282_tokensAvailable"";
""282_sendTokensSingleValue"" -> ""282_sendInternally"";
""282_sendTokens"" -> ""282_onlyOwner"";
""282_sendTokensSingleValue"" -> ""282_whenDropIsActive"";
""282_destroy"" -> ""282_onlyOwner"";
""282_destroy"" -> ""282_tokensAvailable"";
""282_sendTokens"" -> ""282_whenDropIsActive"";
""282_isActive"" -> ""282_tokensAvailable"";
}
"
0xa27f262391913a5e21216c70de5358a1e887de25.sol,VestingContractWTTEST,contract VestingContractWTTEST { struct AccountData { uint original_balance; uint limit_per_period; uint current_balance; uint current_limit; uint current_transferred; },1,"subgraph cluster_488_VestingContractWTTEST {
label=""VestingContractWTTEST"";
""488_setOwner"" [label=""setOwner""];
""488_fallback"" [label=""fallback""];
""488_transfer"" [label=""transfer""];
""488_tokenFallback"" [label=""tokenFallback""];
""488_initData"" [label=""initData""];
""488_VestingContractWTTEST"" [label=""VestingContractWTTEST""];
""488_getBalance"" [label=""getBalance""];
""488_ownerTransfer"" [label=""ownerTransfer""];
""488_updateCurrentPeriod"" [label=""updateCurrentPeriod""];
""488_setPeriod"" [label=""setPeriod""];
""488_setOwner"" -> ""488_onlyOwner"";
""488_transfer"" -> ""488_updateCurrentPeriod"";
""488_ownerTransfer"" -> ""488_onlyOwner"";
""488_ownerTransfer"" -> ""488_getBalance"";
""488_VestingContractWTTEST"" -> ""488_initData"";
}
"
0x301487766dcf283592b11b5988e5c4e4630dfbe5.sol,EDex,"contract EDex is SafeMath { address public admin; address public feeAccount; address public accountLevelsAddr; uint public feeMake; uint public feeTake; uint public feeRebate; mapping (address => mapping (address => uint)) public tokens; mapping (address => mapping (bytes32 => bool)) public orders; mapping (address => mapping (bytes32 => uint)) public orderFills; event Order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user); event Cancel(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s); event Trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give); event Deposit(address token, address user, uint amount, uint balance); event Withdraw(address token, address user, uint amount, uint balance); constructor (address admin_, address feeAccount_, address accountLevelsAddr_, uint feeMake_, uint feeTake_, uint feeRebate_) public { admin = admin_; feeAccount = feeAccount_; accountLevelsAddr = accountLevelsAddr_; feeMake = feeMake_; feeTake = feeTake_; feeRebate = feeRebate_; }",1,"subgraph cluster_1614_EDex {
label=""EDex"";
""1614_changeFeeTake"" [label=""changeFeeTake""];
""1614_withdrawToken"" [label=""withdrawToken""];
""1614_changeFeeAccount"" [label=""changeFeeAccount""];
""1614_balanceOf"" [label=""balanceOf""];
""1614_cancelOrder"" [label=""cancelOrder""];
""1614_changeAccountLevelsAddr"" [label=""changeAccountLevelsAddr""];
""1614_order"" [label=""order""];
""1614_availableVolume"" [label=""availableVolume""];
""1614_constructor"" [label=""constructor""];
""1614_changeFeeMake"" [label=""changeFeeMake""];
""1614_fallback"" [label=""fallback""];
""1614_deposit"" [label=""deposit""];
""1614_depositToken"" [label=""depositToken""];
""1614_changeFeeRebate"" [label=""changeFeeRebate""];
""1614_changeAdmin"" [label=""changeAdmin""];
""1614_trade"" [label=""trade""];
""1614_amountFilled"" [label=""amountFilled""];
""1614_withdraw"" [label=""withdraw""];
""1614_tradeBalances"" [label=""tradeBalances""];
""1614_testTrade"" [label=""testTrade""];
""1614_testTrade"" -> ""1614_availableVolume"";
""1614_withdrawToken"" -> ""1614_safeSub"";
""1614_availableVolume"" -> ""1614_safeSub"";
""1614_availableVolume"" -> ""1614_safeMul"";
""1614_tradeBalances"" -> ""1614_safeAdd"";
""1614_tradeBalances"" -> ""1614_safeMul"";
""1614_trade"" -> ""1614_tradeBalances"";
""1614_depositToken"" -> ""1614_safeAdd"";
""1614_trade"" -> ""1614_safeAdd"";
""1614_tradeBalances"" -> ""1614_safeSub"";
""1614_withdraw"" -> ""1614_safeSub"";
""1614_deposit"" -> ""1614_safeAdd"";
}
"
0x0317ada015cf35244b9f9c7d1f8f05c3651833ff.sol,TokenAbout,"contract TokenAbout is Controlled { event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount); function isContract(address _addr) constant internal returns (bool) { if (_addr == 0) { return false; }",1,"subgraph cluster_276_TokenAbout {
label=""TokenAbout"";
""276_claimTokens"" [label=""claimTokens""];
""276_isContract"" [label=""isContract""];
""276_claimTokens"" -> ""276_onlyController"";
}
"
0x4c129783b42833220ad57d48548f871189009d3f.sol,HoQuBurner,"contract HoQuBurner is Ownable { using SafeMath for uint256; HoQuToken public token; mapping(address => uint256) public claimed; mapping(uint32 => address) public transactionAddresses; mapping(uint32 => uint256) public transactionAmounts; uint32 public transactionsCount; event TokenBurned(address indexed _sender, uint256 _tokens); function HoQuBurner(address _tokenAddress) { token = HoQuToken(_tokenAddress); }",1,"subgraph cluster_647_HoQuBurner {
label=""HoQuBurner"";
""647_HoQuBurner"" [label=""HoQuBurner""];
""647_burnFrom"" [label=""burnFrom""];
""647_burn"" [label=""burn""];
""647_burnFrom"" -> ""647_onlyOwner"";
""647_burn"" -> ""647_burnFrom"";
}
"
0x46c9f93c3249c430c6ca19f02240ef9e038ba9d1.sol,Escapable,"contract Escapable is Owned { address public escapeHatchCaller; address public escapeHatchDestination; mapping (address=>bool) private escapeBlacklist; function Escapable(address _escapeHatchCaller, address _escapeHatchDestination) { escapeHatchCaller = _escapeHatchCaller; escapeHatchDestination = _escapeHatchDestination; }",1,"subgraph cluster_371_Escapable {
label=""Escapable"";
""371_Escapable"" [label=""Escapable""];
""371_escapeHatch"" [label=""escapeHatch""];
""371_changeEscapeCaller"" [label=""changeEscapeCaller""];
""371_isTokenEscapable"" [label=""isTokenEscapable""];
""371_blacklistEscapeToken"" [label=""blacklistEscapeToken""];
""371_changeEscapeCaller"" -> ""371_onlyEscapeHatchCallerOrOwner"";
""371_escapeHatch"" -> ""371_onlyEscapeHatchCallerOrOwner"";
}
"
0x6d0a44fb6a416da6efe1c192560be1bccd01f6be.sol,PresaleMarket,contract PresaleMarket is PausableSimple { struct Auction { address seller; uint256 price; },1,"subgraph cluster_1133_PresaleMarket {
label=""PresaleMarket"";
""1133_PresaleMarket"" [label=""PresaleMarket""];
""1133_auctionsRunByUser"" [label=""auctionsRunByUser""];
""1133__isAuctionExist"" [label=""_isAuctionExist""];
""1133_getAuction"" [label=""getAuction""];
""1133_cancelAuctionEmergency"" [label=""cancelAuctionEmergency""];
""1133__cancelAuction"" [label=""_cancelAuction""];
""1133_createAuction"" [label=""createAuction""];
""1133__takeOwnership"" [label=""_takeOwnership""];
""1133_cancelAuction"" [label=""cancelAuction""];
""1133_bid"" [label=""bid""];
""1133_isPresaleMarket"" [label=""isPresaleMarket""];
""1133__owns"" [label=""_owns""];
""1133_withdraw"" [label=""withdraw""];
""1133__createAuction"" [label=""_createAuction""];
""1133_cancelAuctionEmergency"" -> ""1133_whenPaused"";
""1133_cancelAuction"" -> ""1133__isAuctionExist"";
""1133_createAuction"" -> ""1133__createAuction"";
""1133_getAuction"" -> ""1133__isAuctionExist"";
""1133_withdraw"" -> ""1133_onlyOwner"";
""1133_bid"" -> ""1133_whenNotPaused"";
""1133_cancelAuctionEmergency"" -> ""1133__isAuctionExist"";
""1133_bid"" -> ""1133__isAuctionExist"";
""1133_cancelAuctionEmergency"" -> ""1133_onlyOwner"";
""1133_createAuction"" -> ""1133__takeOwnership"";
""1133_cancelAuctionEmergency"" -> ""1133__cancelAuction"";
""1133_cancelAuction"" -> ""1133__cancelAuction"";
""1133_createAuction"" -> ""1133_whenNotPaused"";
}
"
0xc739ae9ba934f937636a2ebaaf1ecdf04e11ef2f.sol,NXTGToken,contract NXTGToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 7000000 * (10**5); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; constructor () public { owner = msg.sender; },1,"subgraph cluster_756_NXTGToken {
label=""NXTGToken"";
""756_approve"" [label=""approve""];
""756_transferFrom"" [label=""transferFrom""];
""756_refundTokens"" [label=""refundTokens""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_setOwner"" [label=""setOwner""];
""756_constructor"" [label=""constructor""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_transfer"" [label=""transfer""];
""756_createTokens"" [label=""createTokens""];
""756_totalSupply"" [label=""totalSupply""];
""756_approve"" -> ""756_approve"";
""756_transferFrom"" -> ""756_transferFrom"";
""756_transfer"" -> ""756_transfer"";
""756_createTokens"" -> ""756_safeSub"";
""756_approve"" -> ""756_allowance"";
""756_createTokens"" -> ""756_safeAdd"";
}
"
0xc4ab0f59c4d8bb15e237906a06a736d965a2c390.sol,AirdropLibraToken,"contract AirdropLibraToken is Ownable { using SafeMath for uint256; uint256 decimal = 10**uint256(18); uint256 distributedTotal = 0; uint256 airdropStartTime; uint256 airdropEndTime; LibraToken private token; mapping (address => bool) public airdropAdmins; mapping(address => uint256) public airdropDoneAmountMap; address[] public airdropDoneList; event Airdrop(address _receiver, uint256 amount); event AddAdmin(address _admin); event RemoveAdmin(address _admin); event UpdateEndTime(address _operator, uint256 _oldTime, uint256 _newTime); modifier onlyOwnerOrAdmin() { require(msg.sender == owner || airdropAdmins[msg.sender]); _; }",1,"subgraph cluster_1009_AirdropLibraToken {
label=""AirdropLibraToken"";
""1009_getDistributedTotal"" [label=""getDistributedTotal""];
""1009_getDoneAddresses"" [label=""getDoneAddresses""];
""1009_isAdmin"" [label=""isAdmin""];
""1009_airdropTokens"" [label=""airdropTokens""];
""1009_transferOutBalance"" [label=""transferOutBalance""];
""1009_getDoneAirdropAmount"" [label=""getDoneAirdropAmount""];
""1009_removeAdmin"" [label=""removeAdmin""];
""1009_airdropTokensBatch"" [label=""airdropTokensBatch""];
""1009_addAdmin"" [label=""addAdmin""];
""1009_AirdropLibraToken"" [label=""AirdropLibraToken""];
""1009_updateAirdropEndTime"" [label=""updateAirdropEndTime""];
""1009_balanceOfThis"" [label=""balanceOfThis""];
""1009_airdropTokensBatch"" -> ""1009_onlyWhileAirdropPhaseOpen"";
""1009_transferOutBalance"" -> ""1009_onlyOwner"";
""1009_removeAdmin"" -> ""1009_onlyOwner"";
""1009_airdropTokens"" -> ""1009_onlyOwnerOrAdmin"";
""1009_addAdmin"" -> ""1009_onlyOwner"";
""1009_removeAdmin"" -> ""1009_isAdmin"";
""1009_airdropTokensBatch"" -> ""1009_onlyOwnerOrAdmin"";
""1009_airdropTokens"" -> ""1009_onlyWhileAirdropPhaseOpen"";
""1009_updateAirdropEndTime"" -> ""1009_onlyOwnerOrAdmin"";
""1009_airdropTokensBatch"" -> ""1009_airdropTokens"";
}
"
0x17f68886d00845867c154c912b4ccc506ec92fc7.sol,DelegatedShareholderAssociation,"contract DelegatedShareholderAssociation is TokenRecipient { uint public minimumQuorum; uint public debatingPeriodInMinutes; Proposal[] public proposals; uint public numProposals; ERC20 public sharesTokenAddress; mapping (address => address) public delegatesByDelegator; mapping (address => uint) public lockedDelegatingTokens; mapping (address => uint) public delegatedAmountsByDelegate; uint public totalLockedTokens; uint public requiredSharesToBeBoardMember; TokenLocker public tokenLocker; event ProposalAdded(uint proposalID, address recipient, uint amount, bytes metadataHash); event Voted(uint proposalID, bool position, address voter); event ProposalTallied(uint proposalID, uint yea, uint nay, uint quorum, bool active); event ChangeOfRules(uint newMinimumQuorum, uint newDebatingPeriodInMinutes, address newSharesTokenAddress); event TokensDelegated(address indexed delegator, uint numberOfTokens, address indexed delegate); event TokensUndelegated(address indexed delegator, uint numberOfTokens, address indexed delegate); struct Proposal { address recipient; uint amount; bytes metadataHash; uint timeCreated; uint votingDeadline; bool finalized; bool proposalPassed; uint numberOfVotes; bytes32 proposalHash; Vote[] votes; mapping (address => bool) voted; }",1,"subgraph cluster_1103_DelegatedShareholderAssociation {
label=""DelegatedShareholderAssociation"";
""1103_changeVotingRules"" [label=""changeVotingRules""];
""1103_hasVoted"" [label=""hasVoted""];
""1103_vote"" [label=""vote""];
""1103_executeProposal"" [label=""executeProposal""];
""1103_countVotes"" [label=""countVotes""];
""1103_checkProposalCode"" [label=""checkProposalCode""];
""1103_setDelegateAndLockTokens"" [label=""setDelegateAndLockTokens""];
""1103_clearDelegateAndUnlockTokens"" [label=""clearDelegateAndUnlockTokens""];
""1103_newProposal"" [label=""newProposal""];
""1103_newProposal"" -> ""1103_onlyBoardMembers"";
""1103_executeProposal"" -> ""1103_countVotes"";
""1103_setDelegateAndLockTokens"" -> ""1103_onlyShareholders"";
""1103_setDelegateAndLockTokens"" -> ""1103_onlyUndelegated"";
""1103_newProposal"" -> ""1103_notSelf"";
""1103_vote"" -> ""1103_onlyShareholders"";
""1103_vote"" -> ""1103_notSelf"";
""1103_clearDelegateAndUnlockTokens"" -> ""1103_onlyDelegated"";
""1103_executeProposal"" -> ""1103_notSelf"";
""1103_changeVotingRules"" -> ""1103_onlySelf"";
""1103_setDelegateAndLockTokens"" -> ""1103_notSelf"";
""1103_clearDelegateAndUnlockTokens"" -> ""1103_notSelf"";
}
"
0x0f1da17b33df90c078fd2fb4b9011a64af3c67a6.sol,ERC20,contract ERC20 is IERC20 { using SafeMath for uint256; using Address for address; mapping(address => uint256) internal _balances; mapping(address => mapping(address => uint256)) private _allowed; uint256 internal _totalSupply; function totalSupply() public view returns (uint256) { return _totalSupply; },1,"subgraph cluster_552_ERC20 {
label=""ERC20"";
""552_balanceOf"" [label=""balanceOf""];
""552_increaseAllowance"" [label=""increaseAllowance""];
""552__transfer"" [label=""_transfer""];
""552_transferFrom"" [label=""transferFrom""];
""552__burn"" [label=""_burn""];
""552_totalSupply"" [label=""totalSupply""];
""552_allowance"" [label=""allowance""];
""552__burnFrom"" [label=""_burnFrom""];
""552_approve"" [label=""approve""];
""552_burn"" [label=""burn""];
""552__approve"" [label=""_approve""];
""552_decreaseAllowance"" [label=""decreaseAllowance""];
""552_transfer"" [label=""transfer""];
""552__burnFrom"" -> ""552__approve"";
""552_burn"" -> ""552__burn"";
""552__burnFrom"" -> ""552__burn"";
""552_decreaseAllowance"" -> ""552__approve"";
""552_increaseAllowance"" -> ""552__approve"";
""552_approve"" -> ""552__approve"";
""552_transferFrom"" -> ""552__transfer"";
""552_transfer"" -> ""552__transfer"";
""552_transferFrom"" -> ""552__approve"";
}
"
0x53c347888c54519820249ee629b30316f3b79974.sol,UCToken,contract UCToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 70000000 * (10**18); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; function UCToken () { owner = msg.sender; },1,"subgraph cluster_756_UCToken {
label=""UCToken"";
""756_transfer"" [label=""transfer""];
""756_approve"" [label=""approve""];
""756_totalSupply"" [label=""totalSupply""];
""756_createTokens"" [label=""createTokens""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_transferFrom"" [label=""transferFrom""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_setOwner"" [label=""setOwner""];
""756_refundTokens"" [label=""refundTokens""];
""756_UCToken"" [label=""UCToken""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_createTokens"" -> ""756_safeSub"";
""756_transferFrom"" -> ""756_transferFrom"";
""756_approve"" -> ""756_allowance"";
""756_approve"" -> ""756_approve"";
""756_createTokens"" -> ""756_safeAdd"";
""756_transfer"" -> ""756_transfer"";
}
"
0x6e82aabffe24f275ad3f703aca922dd4d8f86168.sol,BatchTransfer,"contract BatchTransfer is Ownable { using SafeMath for uint256; event Withdraw(address indexed receiver, address indexed token, uint amount); event TransferEther(address indexed sender, address indexed receiver, uint256 amount); modifier checkArrayArgument(address[] _receivers, uint256[] _amounts) { require(_receivers.length == _amounts.length && _receivers.length != 0); _; }",1,"subgraph cluster_538_BatchTransfer {
label=""BatchTransfer"";
""538_getTotalSendingAmount"" [label=""getTotalSendingAmount""];
""538_batchTransferToken"" [label=""batchTransferToken""];
""538_allowanceForContract"" [label=""allowanceForContract""];
""538_withdraw"" [label=""withdraw""];
""538_batchTransferEther"" [label=""batchTransferEther""];
""538_balanceOfContract"" [label=""balanceOfContract""];
""538_batchTransferToken"" -> ""538_getTotalSendingAmount"";
""538_batchTransferEther"" -> ""538_checkArrayArgument"";
""538_withdraw"" -> ""538_onlyOwner"";
""538_batchTransferToken"" -> ""538_allowanceForContract"";
""538_batchTransferToken"" -> ""538_checkArrayArgument"";
""538_batchTransferEther"" -> ""538_getTotalSendingAmount"";
}
"
0x1fab9d2996767db0ca6af12fd92c1f2aab2675a0.sol,JackpotHolding,"contract JackpotHolding is ERC223Receiving { uint public payOutNumber = 0; uint public payOutDivisor = 2; ZethrBankrollControllerInterface controller; Zethr zethr; constructor (address _controllerAddress, address _zethrAddress) public { controller = ZethrBankrollControllerInterface(_controllerAddress); zethr = Zethr(_zethrAddress); }",1,"subgraph cluster_5615_JackpotHolding {
label=""JackpotHolding"";
""5615_ownerWithdrawEth"" [label=""ownerWithdrawEth""];
""5615_fallback"" [label=""fallback""];
""5615_constructor"" [label=""constructor""];
""5615_gamePayOutWinner"" [label=""gamePayOutWinner""];
""5615_tokenFallback"" [label=""tokenFallback""];
""5615_getJackpotBalance"" [label=""getJackpotBalance""];
""5615_ownerSetControllerAddress"" [label=""ownerSetControllerAddress""];
""5615_ownerSetPayOutDivisor"" [label=""ownerSetPayOutDivisor""];
""5615_ownerWithdrawZth"" [label=""ownerWithdrawZth""];
""5615_ownerSetPayOutDivisor"" -> ""5615_ownerOnly"";
""5615_ownerWithdrawZth"" -> ""5615_ownerOnly"";
""5615_ownerSetControllerAddress"" -> ""5615_ownerOnly"";
""5615_ownerWithdrawEth"" -> ""5615_ownerOnly"";
""5615_gamePayOutWinner"" -> ""5615_gameOnly"";
}
"
0xb4a3fb248d39370c1f8081b73fa7098167c8142b.sol,DSValue,"contract DSValue is DSThing { bool has; bytes32 val; function peek() public view returns (bytes32, bool) { return (val,has); }",1,"subgraph cluster_1193_DSValue {
label=""DSValue"";
""1193_void"" [label=""void""];
""1193_poke"" [label=""poke""];
""1193_peek"" [label=""peek""];
""1193_read"" [label=""read""];
""1193_poke"" -> ""1193_note"";
""1193_read"" -> ""1193_peek"";
""1193_void"" -> ""1193_auth"";
""1193_void"" -> ""1193_note"";
""1193_poke"" -> ""1193_auth"";
}
"
0x01c627181089b6e10ee8316ec08516b3df7c4845.sol,BrickCrowdsale,contract BrickCrowdsale is Ownable { using SafeMath for uint256; uint256 public startTime; uint256 public endTime; uint256 public weiRaised; uint256 public limitDateSale; bool public isSoftCapHit = false; bool public isStarted = false; bool public isFinalized = false; uint256 icoPvtRate = 40; uint256 icoPreRate = 50; uint256 ico1Rate = 65; uint256 ico2Rate = 75; uint256 ico3Rate = 90; uint256 public pvtTokens = (40000) * (10**18); uint256 public preSaleTokens = (6000000) * (10**18); uint256 public ico1Tokens = (8000000) * (10**18); uint256 public ico2Tokens = (8000000) * (10**18); uint256 public ico3Tokens = (8000000) * (10**18); uint256 public totalTokens = (40000000)* (10**18); address public advisoryEthWallet = 0x0D7629d32546CD493bc33ADEF115D4489f5599Be; address public infraEthWallet = 0x536D36a05F6592aa29BB0beE30cda706B1272521; address public techDevelopmentEthWallet = 0x4d0B70d8E612b5dca3597C64643a8d1efd5965e1; address public operationsEthWallet = 0xbc67B82924eEc8643A4f2ceDa59B5acfd888A967; address public wallet = 0x44d44CA0f75bdd3AE8806D02515E8268459c554A; struct ContributorData { uint256 contributionAmountViewOnly; uint256 tokensIssuedViewOnly; uint256 contributionAmount; uint256 tokensIssued; },1,"subgraph cluster_2591_BrickCrowdsale {
label=""BrickCrowdsale"";
""2591_hasEnded"" [label=""hasEnded""];
""2591_starting"" [label=""starting""];
""2591_releaseAllTokens"" [label=""releaseAllTokens""];
""2591_isWithinSaleTimeLimit"" [label=""isWithinSaleTimeLimit""];
""2591_setRate"" [label=""setRate""];
""2591_setHardCap"" [label=""setHardCap""];
""2591_setPvtTokens"" [label=""setPvtTokens""];
""2591_isWithinTokenAllocLimit"" [label=""isWithinTokenAllocLimit""];
""2591_constructor"" [label=""constructor""];
""2591_currentTokenSupply"" [label=""currentTokenSupply""];
""2591_release"" [label=""release""];
""2591_endIcoSaleRound3"" [label=""endIcoSaleRound3""];
""2591_endIcoSaleRound2"" [label=""endIcoSaleRound2""];
""2591_getCurrentRateInCents"" [label=""getCurrentRateInCents""];
""2591_releaseTokens"" [label=""releaseTokens""];
""2591_setKycAddress"" [label=""setKycAddress""];
""2591_finalize"" [label=""finalize""];
""2591_endIcoSaleRound1"" [label=""endIcoSaleRound1""];
""2591_setSaleDuration"" [label=""setSaleDuration""];
""2591_investorCount"" [label=""investorCount""];
""2591_refundMoney"" [label=""refundMoney""];
""2591_setKYCRequiredToSendTokens"" [label=""setKYCRequiredToSendTokens""];
""2591_forwardAllRaisedFunds"" [label=""forwardAllRaisedFunds""];
""2591_tokenSendFailuresCount"" [label=""tokenSendFailuresCount""];
""2591_setSaleBonus"" [label=""setSaleBonus""];
""2591_updateRateInWei"" [label=""updateRateInWei""];
""2591_setIco2Tokens"" [label=""setIco2Tokens""];
""2591_transferTokenOwnership"" [label=""transferTokenOwnership""];
""2591_hasStarted"" [label=""hasStarted""];
""2591_setSoftCap"" [label=""setSoftCap""];
""2591_refundAllMoney"" [label=""refundAllMoney""];
""2591_setIco1Tokens"" [label=""setIco1Tokens""];
""2591_buyTokens"" [label=""buyTokens""];
""2591_endPvtSale"" [label=""endPvtSale""];
""2591_didSoftCapReached"" [label=""didSoftCapReached""];
""2591_setPreSaleTokens"" [label=""setPreSaleTokens""];
""2591_transferKycOwnerShip"" [label=""transferKycOwnerShip""];
""2591_finalization"" [label=""finalization""];
""2591_start"" [label=""start""];
""2591_endPreSale"" [label=""endPreSale""];
""2591_setKYCRequiredToReceiveFunds"" [label=""setKYCRequiredToReceiveFunds""];
""2591_setIco3Tokens"" [label=""setIco3Tokens""];
""2591_buyPhaseTokens"" [label=""buyPhaseTokens""];
""2591_validPurchase"" [label=""validPurchase""];
""2591_isWithinSaleLimit"" [label=""isWithinSaleLimit""];
""2591_setTokenAddress"" [label=""setTokenAddress""];
""2591_setTokensForCrowdSale"" [label=""setTokensForCrowdSale""];
""2591_computeTokens"" [label=""computeTokens""];
""2591_splitTokens"" [label=""splitTokens""];
""2591_fallback"" [label=""fallback""];
""2591_init"" [label=""init""];
""2591_init"" -> ""2591_setRate"";
""2591_finalization"" -> ""2591_splitTokens"";
""2591_setHardCap"" -> ""2591_onlyOwner"";
""2591_setIco3Tokens"" -> ""2591_onlyOwner"";
""2591_refundAllMoney"" -> ""2591_refundMoney"";
""2591_setPvtTokens"" -> ""2591_onlyOwner"";
""2591_releaseAllTokens"" -> ""2591_releaseTokens"";
""2591_releaseTokens"" -> ""2591_onlyOwner"";
""2591_setRate"" -> ""2591_getCurrentRateInCents"";
""2591_setSaleDuration"" -> ""2591_onlyOwner"";
""2591_setTokensForCrowdSale"" -> ""2591_onlyOwner"";
""2591_finalization"" -> ""2591_forwardAllRaisedFunds"";
""2591_isWithinTokenAllocLimit"" -> ""2591_isWithinSaleTimeLimit"";
""2591_setSoftCap"" -> ""2591_onlyOwner"";
""2591_releaseAllTokens"" -> ""2591_onlyOwner"";
""2591_buyPhaseTokens"" -> ""2591_buyTokens"";
""2591_transferKycOwnerShip"" -> ""2591_onlyOwner"";
""2591_setKYCRequiredToReceiveFunds"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_setSoftCap"";
""2591_start"" -> ""2591_hasStarted"";
""2591_setPreSaleTokens"" -> ""2591_onlyOwner"";
""2591_isWithinTokenAllocLimit"" -> ""2591_isWithinSaleLimit"";
""2591_endIcoSaleRound1"" -> ""2591_onlyOwner"";
""2591_endIcoSaleRound1"" -> ""2591_updateRateInWei"";
""2591_validPurchase"" -> ""2591_isWithinSaleTimeLimit"";
""2591_start"" -> ""2591_starting"";
""2591_init"" -> ""2591_setSaleDuration"";
""2591_endPreSale"" -> ""2591_onlyOwner"";
""2591_finalize"" -> ""2591_onlyOwner"";
""2591_refundMoney"" -> ""2591_onlyOwner"";
""2591_fallback"" -> ""2591_buyPhaseTokens"";
""2591_setIco1Tokens"" -> ""2591_onlyOwner"";
""2591_endIcoSaleRound3"" -> ""2591_updateRateInWei"";
""2591_setKycAddress"" -> ""2591_onlyOwner"";
""2591_transferTokenOwnership"" -> ""2591_onlyOwner"";
""2591_setKYCRequiredToSendTokens"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_setSaleBonus"";
""2591_endIcoSaleRound2"" -> ""2591_onlyOwner"";
""2591_setIco2Tokens"" -> ""2591_onlyOwner"";
""2591_setRate"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_setTokenAddress"";
""2591_refundAllMoney"" -> ""2591_onlyOwner"";
""2591_setTokenAddress"" -> ""2591_onlyOwner"";
""2591_buyPhaseTokens"" -> ""2591_validPurchase"";
""2591_init"" -> ""2591_setHardCap"";
""2591_finalize"" -> ""2591_finalization"";
""2591_releaseTokens"" -> ""2591_release"";
""2591_init"" -> ""2591_onlyOwner"";
""2591_buyPhaseTokens"" -> ""2591_isWithinTokenAllocLimit"";
""2591_buyPhaseTokens"" -> ""2591_computeTokens"";
""2591_updateRateInWei"" -> ""2591_getCurrentRateInCents"";
""2591_setSaleBonus"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_setTokensForCrowdSale"";
""2591_init"" -> ""2591_setKycAddress"";
""2591_endIcoSaleRound2"" -> ""2591_updateRateInWei"";
""2591_endPvtSale"" -> ""2591_onlyOwner"";
""2591_start"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_start"";
""2591_endIcoSaleRound3"" -> ""2591_onlyOwner"";
""2591_endPreSale"" -> ""2591_updateRateInWei"";
""2591_endPvtSale"" -> ""2591_updateRateInWei"";
}
"
0xf244176246168f24e3187f7288edbca29267739b.sol,HavvenEscrow,"contract HavvenEscrow is Owned, LimitedSetup(8 weeks), SafeDecimalMath { Havven public havven; mapping(address => uint[2][]) public vestingSchedules; mapping(address => uint) public totalVestedAccountBalance; uint public totalVestedBalance; function HavvenEscrow(address _owner, Havven _havven) Owned(_owner) public { havven = _havven; }",1,"subgraph cluster_4045_HavvenEscrow {
label=""HavvenEscrow"";
""4045_addVestingSchedule"" [label=""addVestingSchedule""];
""4045_getNextVestingTime"" [label=""getNextVestingTime""];
""4045_HavvenEscrow"" [label=""HavvenEscrow""];
""4045_getNextVestingIndex"" [label=""getNextVestingIndex""];
""4045_getVestingScheduleEntry"" [label=""getVestingScheduleEntry""];
""4045_getVestingTime"" [label=""getVestingTime""];
""4045_getVestingQuantity"" [label=""getVestingQuantity""];
""4045_purgeAccount"" [label=""purgeAccount""];
""4045_numVestingEntries"" [label=""numVestingEntries""];
""4045_withdrawHavvens"" [label=""withdrawHavvens""];
""4045_setHavven"" [label=""setHavven""];
""4045_balanceOf"" [label=""balanceOf""];
""4045_appendVestingEntry"" [label=""appendVestingEntry""];
""4045_totalVestedAccountBalance"" [label=""totalVestedAccountBalance""];
""4045_vest"" [label=""vest""];
""4045_getNextVestingEntry"" [label=""getNextVestingEntry""];
""4045_getNextVestingQuantity"" [label=""getNextVestingQuantity""];
""4045_addVestingSchedule"" -> ""4045_onlyOwner"";
""4045_withdrawHavvens"" -> ""4045_onlyOwner"";
""4045_appendVestingEntry"" -> ""4045_onlyOwner"";
""4045_getNextVestingTime"" -> ""4045_getNextVestingIndex"";
""4045_appendVestingEntry"" -> ""4045_safeAdd"";
""4045_getNextVestingIndex"" -> ""4045_numVestingEntries"";
""4045_getNextVestingEntry"" -> ""4045_getNextVestingIndex"";
""4045_vest"" -> ""4045_numVestingEntries"";
""4045_getNextVestingEntry"" -> ""4045_getVestingScheduleEntry"";
""4045_purgeAccount"" -> ""4045_setupFunction"";
""4045_purgeAccount"" -> ""4045_onlyOwner"";
""4045_getNextVestingQuantity"" -> ""4045_getVestingQuantity"";
""4045_getNextVestingIndex"" -> ""4045_getVestingTime"";
""4045_purgeAccount"" -> ""4045_safeSub"";
""4045_getNextVestingTime"" -> ""4045_getVestingTime"";
""4045_appendVestingEntry"" -> ""4045_getVestingTime"";
""4045_setHavven"" -> ""4045_onlyOwner"";
""4045_vest"" -> ""4045_safeSub"";
""4045_getNextVestingTime"" -> ""4045_numVestingEntries"";
""4045_vest"" -> ""4045_getVestingTime"";
""4045_vest"" -> ""4045_safeAdd"";
""4045_addVestingSchedule"" -> ""4045_setupFunction"";
""4045_getNextVestingEntry"" -> ""4045_numVestingEntries"";
""4045_appendVestingEntry"" -> ""4045_setupFunction"";
""4045_withdrawHavvens"" -> ""4045_setupFunction"";
""4045_addVestingSchedule"" -> ""4045_appendVestingEntry"";
""4045_HavvenEscrow"" -> ""4045_Owned"";
""4045_getNextVestingQuantity"" -> ""4045_getNextVestingIndex"";
""4045_vest"" -> ""4045_getVestingQuantity"";
""4045_getNextVestingQuantity"" -> ""4045_numVestingEntries"";
""4045_appendVestingEntry"" -> ""4045_numVestingEntries"";
}
"
0x3a966ffa8451cbf3769b7d1f94d5b47da254edb0.sol,Play0x_LottoBall,contract Play0x_LottoBall { using SafeMath for uint256; using SafeMath for uint128; using SafeMath for uint40; using SafeMath for uint8; uint public jackpotSize; uint public tokenJackpotSize; uint public MIN_BET; uint public MAX_BET; uint public MAX_AMOUNT; uint public maxProfit; uint public maxTokenProfit; uint8 public platformFeePercentage = 15; uint8 public jackpotFeePercentage = 5; uint8 public ERC20rewardMultiple = 5; uint constant BetExpirationBlocks = 250; uint public lockedInBets; uint public lockedTokenInBets; bytes32 bitComparisonMask = 0xF; address public owner; address private nextOwner; address public manager; address private nextManager; address[] public secretSignerList; address public ERC20ContractAddres; address constant DUMMY_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; struct Bet { uint amount; uint40 placeBlockNumber; address gambler; },1,"subgraph cluster_3084_Play0x_LottoBall {
label=""Play0x_LottoBall"";
""3084_setMaxProfit"" [label=""setMaxProfit""];
""3084_getJackpotWinBonus"" [label=""getJackpotWinBonus""];
""3084_sendFunds"" [label=""sendFunds""];
""3084_sendTokenFundsToManager"" [label=""sendTokenFundsToManager""];
""3084_updateMAX_AMOUNT"" [label=""updateMAX_AMOUNT""];
""3084_approveNextOwner"" [label=""approveNextOwner""];
""3084_getBonusPercentageByMachineMode"" [label=""getBonusPercentageByMachineMode""];
""3084_withdrawAlltokenFunds"" [label=""withdrawAlltokenFunds""];
""3084_updateBitComparisonMask"" [label=""updateBitComparisonMask""];
""3084_settleBetVerifi"" [label=""settleBetVerifi""];
""3084_withdrawToken"" [label=""withdrawToken""];
""3084_getPossibleWinAmount"" [label=""getPossibleWinAmount""];
""3084_setTokenAddress"" [label=""setTokenAddress""];
""3084_withdrawFunds"" [label=""withdrawFunds""];
""3084_updateJackpotFeePercentage"" [label=""updateJackpotFeePercentage""];
""3084_updatePlatformFeePercentage"" [label=""updatePlatformFeePercentage""];
""3084_refundBet"" [label=""refundBet""];
""3084_updateERC20rewardMultiple"" [label=""updateERC20rewardMultiple""];
""3084_updateMIN_BET"" [label=""updateMIN_BET""];
""3084_settleBet"" [label=""settleBet""];
""3084_clearProcessedBet"" [label=""clearProcessedBet""];
""3084_getContractInformation"" [label=""getContractInformation""];
""3084_withdrawAllFunds"" [label=""withdrawAllFunds""];
""3084_refundTokenBet"" [label=""refundTokenBet""];
""3084_updateWithdrawalModeByIndex"" [label=""updateWithdrawalModeByIndex""];
""3084_setSecretSignerByIndex"" [label=""setSecretSignerByIndex""];
""3084_runRotateTime"" [label=""runRotateTime""];
""3084_getContractAddress"" [label=""getContractAddress""];
""3084_initialParameter"" [label=""initialParameter""];
""3084_setSecretSignerList"" [label=""setSecretSignerList""];
""3084_fallback"" [label=""fallback""];
""3084_placeTokenBet"" [label=""placeTokenBet""];
""3084_sendFundsToOwner"" [label=""sendFundsToOwner""];
""3084_constructor"" [label=""constructor""];
""3084_acceptNextOwner"" [label=""acceptNextOwner""];
""3084_updateWithdrawalMode"" [label=""updateWithdrawalMode""];
""3084_sendFundsToManager"" [label=""sendFundsToManager""];
""3084_kill"" [label=""kill""];
""3084_acceptNextManager"" [label=""acceptNextManager""];
""3084_clearStorage"" [label=""clearStorage""];
""3084_updateMAX_BET"" [label=""updateMAX_BET""];
""3084_placeBet"" [label=""placeBet""];
""3084_approveNextManager"" [label=""approveNextManager""];
""3084_withdrawToken"" -> ""3084_onlyOwner"";
""3084_updateBitComparisonMask"" -> ""3084_onlyOwner"";
""3084_clearStorage"" -> ""3084_clearProcessedBet"";
""3084_withdrawAllFunds"" -> ""3084_onlyOwner"";
""3084_sendFundsToManager"" -> ""3084_onlyOwner"";
""3084_refundTokenBet"" -> ""3084_getPossibleWinAmount"";
""3084_updateJackpotFeePercentage"" -> ""3084_onlyOwner"";
""3084_setMaxProfit"" -> ""3084_onlyOwner"";
""3084_withdrawAlltokenFunds"" -> ""3084_onlyOwner"";
""3084_settleBet"" -> ""3084_sendFunds"";
""3084_setTokenAddress"" -> ""3084_onlyManager"";
""3084_updateWithdrawalModeByIndex"" -> ""3084_onlyManager"";
""3084_updateERC20rewardMultiple"" -> ""3084_onlyManager"";
""3084_updateMIN_BET"" -> ""3084_onlyManager"";
""3084_initialParameter"" -> ""3084_onlyOwner"";
""3084_setSecretSignerByIndex"" -> ""3084_onlyOwner"";
""3084_withdrawFunds"" -> ""3084_onlyOwner"";
""3084_approveNextManager"" -> ""3084_onlyManager"";
""3084_setSecretSignerList"" -> ""3084_onlyOwner"";
""3084_withdrawFunds"" -> ""3084_sendFunds"";
""3084_refundBet"" -> ""3084_getBonusPercentageByMachineMode"";
""3084_sendTokenFundsToManager"" -> ""3084_onlyOwner"";
""3084_refundTokenBet"" -> ""3084_getBonusPercentageByMachineMode"";
""3084_kill"" -> ""3084_onlyOwner"";
""3084_settleBet"" -> ""3084_runRotateTime"";
""3084_sendFundsToOwner"" -> ""3084_onlyOwner"";
""3084_approveNextOwner"" -> ""3084_onlyOwner"";
""3084_updateMAX_AMOUNT"" -> ""3084_onlyManager"";
""3084_refundBet"" -> ""3084_getPossibleWinAmount"";
""3084_updatePlatformFeePercentage"" -> ""3084_onlyOwner"";
""3084_settleBetVerifi"" -> ""3084_runRotateTime"";
""3084_updateWithdrawalMode"" -> ""3084_onlyManager"";
""3084_refundBet"" -> ""3084_sendFunds"";
""3084_runRotateTime"" -> ""3084_getJackpotWinBonus"";
""3084_updateMAX_BET"" -> ""3084_onlyManager"";
}
"
0xb4a448387403554616eb5b50aa4c48f75243a015.sol,Mobius2Dv2,"contract Mobius2Dv2 is UsingOraclizeRandom, DSMath { string public ipfsHash; string public ipfsHashType = ; MobiusToken public constant token = MobiusToken(0x54cdC9D889c28f55F59f6b136822868c7d4726fC); bool public upgraded; bool public initialized; address public nextVersion; LastVersion public constant lastVersion = LastVersion(0xA74642Aeae3e2Fd79150c910eB5368B64f864B1e); uint public previousRounds; uint public totalRevenue; uint public totalSharesSold; uint public totalEarningsGenerated; uint public totalDividendsPaid; uint public totalJackpotsWon; uint public constant DEV_DIVISOR = 20; uint public constant RETURNS_FRACTION = 60 * 10**16; uint public constant REFERRAL_FRACTION = 3 * 10**16; uint public constant JACKPOT_SEED_FRACTION = WAD / 20; uint public constant JACKPOT_FRACTION = 15 * 10**16; uint public constant DAILY_JACKPOT_FRACTION = 6 * 10**16; uint public constant DIVIDENDS_FRACTION = 9 * 10**16; uint public startingSharePrice = 1 finney; uint public _priceIncreasePeriod = 1 hours; uint public _priceMultiplier = 101 * 10**16; uint public _secondaryPrice = 100 finney; uint public maxDailyJackpot = 5 ether; uint public constant SOFT_DEADLINE_DURATION = 1 days; uint public constant DAILY_JACKPOT_PERIOD = 1 days; uint public constant TIME_PER_SHARE = 5 minutes; uint public nextRoundTime; uint public jackpotSeed; uint public devBalance; uint public unclaimedReturns; uint public constant MULTIPLIER = RAY; mapping (address => uint) public lastDailyEntry; struct Investor { uint lastCumulativeReturnsPoints; uint shares; }",1,"subgraph cluster_5179_Mobius2Dv2 {
label=""Mobius2Dv2"";
""5179_startNewRound"" [label=""startNewRound""];
""5179_roundInfo"" [label=""roundInfo""];
""5179_getSeed"" [label=""getSeed""];
""5179_finalizeAndRestart"" [label=""finalizeAndRestart""];
""5179__drawDailyJackpot"" [label=""_drawDailyJackpot""];
""5179__disburseReturns"" [label=""_disburseReturns""];
""5179_setNextRoundTimestamp"" [label=""setNextRoundTimestamp""];
""5179__outstandingReturns"" [label=""_outstandingReturns""];
""5179_reinvestReturns"" [label=""reinvestReturns""];
""5179_init"" [label=""init""];
""5179__finalizeRound"" [label=""_finalizeRound""];
""5179_upgrade"" [label=""upgrade""];
""5179_finalizeLastRound"" [label=""finalizeLastRound""];
""5179_totalsInfo"" [label=""totalsInfo""];
""5179_setMaxDailyJackpot"" [label=""setMaxDailyJackpot""];
""5179_withdrawDevShare"" [label=""withdrawDevShare""];
""5179__issueShares"" [label=""_issueShares""];
""5179__startNewDailyRound"" [label=""_startNewDailyRound""];
""5179_setIPFSHash"" [label=""setIPFSHash""];
""5179_setNextRoundDelay"" [label=""setNextRoundDelay""];
""5179__dailyJackpot"" [label=""_dailyJackpot""];
""5179__onRandom"" [label=""_onRandom""];
""5179__triggerOraclize"" [label=""_triggerOraclize""];
""5179_updateMyReturns"" [label=""updateMyReturns""];
""5179__updateReturns"" [label=""_updateReturns""];
""5179_investorInfo"" [label=""investorInfo""];
""5179_estimateReturns"" [label=""estimateReturns""];
""5179_hasReturns"" [label=""hasReturns""];
""5179__purchase"" [label=""_purchase""];
""5179_setRoundParams"" [label=""setRoundParams""];
""5179_constructor"" [label=""constructor""];
""5179__onRandomFailed"" [label=""_onRandomFailed""];
""5179_buyShares"" [label=""buyShares""];
""5179_setSecondaryPrice"" [label=""setSecondaryPrice""];
""5179_initOraclize"" [label=""initOraclize""];
""5179__splitRevenue"" [label=""_splitRevenue""];
""5179_fallback"" [label=""fallback""];
""5179_withdrawReturns"" [label=""withdrawReturns""];
""5179_initOraclize"" -> ""5179_auth"";
""5179__purchase"" -> ""5179__issueShares"";
""5179_initOraclize"" -> ""5179_oraclize_setNetwork"";
""5179__disburseReturns"" -> ""5179_wdiv"";
""5179_estimateReturns"" -> ""5179_hasReturns"";
""5179__triggerOraclize"" -> ""5179__requestRandom"";
""5179__purchase"" -> ""5179_min"";
""5179__purchase"" -> ""5179_mul"";
""5179__purchase"" -> ""5179_add"";
""5179_withdrawDevShare"" -> ""5179_auth"";
""5179_totalsInfo"" -> ""5179_wmul"";
""5179__issueShares"" -> ""5179_add"";
""5179_reinvestReturns"" -> ""5179__updateReturns"";
""5179_reinvestReturns"" -> ""5179_reinvestReturns"";
""5179_withdrawReturns"" -> ""5179_hasReturns"";
""5179__purchase"" -> ""5179__dailyJackpot"";
""5179_startNewRound"" -> ""5179__purchase"";
""5179__dailyJackpot"" -> ""5179__requestRandom"";
""5179_finalizeLastRound"" -> ""5179__finalizeRound"";
""5179__purchase"" -> ""5179__splitRevenue"";
""5179__issueShares"" -> ""5179_wdiv"";
""5179_withdrawReturns"" -> ""5179_sub"";
""5179__finalizeRound"" -> ""5179_wmul"";
""5179__dailyJackpot"" -> ""5179_oraclize_setCustomGasPrice"";
""5179_startNewRound"" -> ""5179__startNewDailyRound"";
""5179__outstandingReturns"" -> ""5179_mul"";
""5179__splitRevenue"" -> ""5179_wmul"";
""5179_init"" -> ""5179_auth"";
""5179__drawDailyJackpot"" -> ""5179_min"";
""5179_upgrade"" -> ""5179_auth"";
""5179__splitRevenue"" -> ""5179_add"";
""5179_initOraclize"" -> ""5179_oraclize_setProof"";
""5179_setSecondaryPrice"" -> ""5179_auth"";
""5179_updateMyReturns"" -> ""5179__updateReturns"";
""5179_withdrawDevShare"" -> ""5179_sub"";
""5179__issueShares"" -> ""5179_mul"";
""5179__drawDailyJackpot"" -> ""5179__startNewDailyRound"";
""5179__triggerOraclize"" -> ""5179_auth"";
""5179__purchase"" -> ""5179__updateReturns"";
""5179_reinvestReturns"" -> ""5179_min"";
""5179__dailyJackpot"" -> ""5179_min"";
""5179__disburseReturns"" -> ""5179_mul"";
""5179_roundInfo"" -> ""5179_wmul"";
""5179__finalizeRound"" -> ""5179_add"";
""5179_setNextRoundTimestamp"" -> ""5179_auth"";
""5179__drawDailyJackpot"" -> ""5179_sub"";
""5179_finalizeAndRestart"" -> ""5179_finalizeLastRound"";
""5179__disburseReturns"" -> ""5179_add"";
""5179_withdrawReturns"" -> ""5179__updateReturns"";
""5179_investorInfo"" -> ""5179_estimateReturns"";
""5179__updateReturns"" -> ""5179_add"";
""5179_reinvestReturns"" -> ""5179__purchase"";
""5179_finalizeAndRestart"" -> ""5179_startNewRound"";
""5179_estimateReturns"" -> ""5179__outstandingReturns"";
""5179_reinvestReturns"" -> ""5179_sub"";
""5179_setMaxDailyJackpot"" -> ""5179_auth"";
""5179__drawDailyJackpot"" -> ""5179_add"";
""5179_setNextRoundDelay"" -> ""5179_auth"";
""5179__splitRevenue"" -> ""5179__disburseReturns"";
""5179__purchase"" -> ""5179_wmul"";
""5179_roundInfo"" -> ""5179_min"";
""5179__outstandingReturns"" -> ""5179_sub"";
""5179_buyShares"" -> ""5179__purchase"";
""5179_setIPFSHash"" -> ""5179_auth"";
""5179__updateReturns"" -> ""5179__outstandingReturns"";
""5179__onRandom"" -> ""5179__drawDailyJackpot"";
""5179_setRoundParams"" -> ""5179_auth"";
""5179_fallback"" -> ""5179_buyShares"";
}
"
0x402fa04ccd2c2568e1a53dbecec1bd572303663a.sol,HarborPresale,"contract HarborPresale is Haltable { using SafeMath for uint256; HarborToken public token; uint256 public startTime; uint256 public endTime; address public wallet; uint256 public rate; uint256 public weiRaised; uint256 public cap; bool public isFinalized = false; uint256 public minimumFundingGoal; uint256 public minSend; RefundVault public vault; uint public tokensMinted; mapping (address => uint256) public tokenDeposited; event Finalized(); event TokenMinted(uint count); event Distributed(address investor, uint tokenAmount); event PeriodChanged(uint256 starttm,uint256 endtm); event TokenPurchase(address indexed purchaser, address indexed investor, uint256 value); function HarborPresale(address _token, uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, uint256 _cap, uint256 _minimumFundingGoal, uint256 _minSend) { require(_startTime >= now); require(_endTime >= _startTime); require(_rate > 0); require(_wallet != 0x0); require(_cap > 0); require(_minimumFundingGoal > 0); token = HarborToken(_token); startTime = _startTime; endTime = _endTime; rate = _rate; wallet = _wallet; cap = _cap; vault = new RefundVault(_wallet); minimumFundingGoal = _minimumFundingGoal; minSend = _minSend; }",1,"subgraph cluster_1508_HarborPresale {
label=""HarborPresale"";
""1508_finalize"" [label=""finalize""];
""1508_minFundingGoalReached"" [label=""minFundingGoalReached""];
""1508_fallback"" [label=""fallback""];
""1508_claimTokenAddress"" [label=""claimTokenAddress""];
""1508_HarborPresale"" [label=""HarborPresale""];
""1508_claimRefund"" [label=""claimRefund""];
""1508_withdrawFund"" [label=""withdrawFund""];
""1508_claimToken"" [label=""claimToken""];
""1508_hasEnded"" [label=""hasEnded""];
""1508_finalization"" [label=""finalization""];
""1508_mintForEverybody"" [label=""mintForEverybody""];
""1508_setPeriod"" [label=""setPeriod""];
""1508_validPurchase"" [label=""validPurchase""];
""1508_buyTokens"" [label=""buyTokens""];
""1508_claimRefund"" -> ""1508_stopInEmergency"";
""1508_claimRefund"" -> ""1508_minFundingGoalReached"";
""1508_finalize"" -> ""1508_hasEnded"";
""1508_finalization"" -> ""1508_minFundingGoalReached"";
""1508_claimToken"" -> ""1508_stopInEmergency"";
""1508_buyTokens"" -> ""1508_validPurchase"";
""1508_fallback"" -> ""1508_buyTokens"";
""1508_claimToken"" -> ""1508_claimTokenAddress"";
""1508_finalize"" -> ""1508_stopInEmergency"";
""1508_mintForEverybody"" -> ""1508_onlyOwner"";
""1508_claimTokenAddress"" -> ""1508_stopInEmergency"";
""1508_setPeriod"" -> ""1508_onlyOwner"";
""1508_buyTokens"" -> ""1508_stopInEmergency"";
""1508_finalize"" -> ""1508_finalization"";
""1508_withdrawFund"" -> ""1508_onlyOwner"";
""1508_withdrawFund"" -> ""1508_minFundingGoalReached"";
""1508_finalize"" -> ""1508_onlyOwner"";
}
"
0xc3e43d422d5e6f94315622d96a96058689c52ec8.sol,BitNauticCrowdsaleTokenDistributor,"contract BitNauticCrowdsaleTokenDistributor is Ownable { using SafeMath for uint256; uint256 public constant ICOStartTime = 1531267200; uint256 public constant ICOEndTime = 1536969600; uint256 public teamSupply = 3000000 * 10 ** 18; uint256 public bountySupply = 2500000 * 10 ** 18; uint256 public reserveSupply = 5000000 * 10 ** 18; uint256 public advisorSupply = 2500000 * 10 ** 18; uint256 public founderSupply = 2000000 * 10 ** 18; MintableToken public token; BitNauticWhitelist public whitelist; BitNauticCrowdsale public crowdsale; mapping (address => bool) public hasClaimedTokens; constructor(MintableToken _token, BitNauticWhitelist _whitelist, BitNauticCrowdsale _crowdsale) public { token = _token; whitelist = _whitelist; crowdsale = _crowdsale; }",1,"subgraph cluster_494_BitNauticCrowdsaleTokenDistributor {
label=""BitNauticCrowdsaleTokenDistributor"";
""494_privateSale"" [label=""privateSale""];
""494_constructor"" [label=""constructor""];
""494_transferTokenOwnership"" [label=""transferTokenOwnership""];
""494_claimBitNauticTokens"" [label=""claimBitNauticTokens""];
""494_grantAdvisorsTokens"" [label=""grantAdvisorsTokens""];
""494_grantBountyTokens"" [label=""grantBountyTokens""];
""494_grantFoundersTokens"" [label=""grantFoundersTokens""];
""494_grantReserveTokens"" [label=""grantReserveTokens""];
""494_grantTeamTokens"" [label=""grantTeamTokens""];
""494_grantContributorTokens"" [label=""grantContributorTokens""];
""494_grantFoundersTokens"" -> ""494_onlyOwner"";
""494_grantReserveTokens"" -> ""494_onlyOwner"";
""494_privateSale"" -> ""494_onlyOwner"";
""494_transferTokenOwnership"" -> ""494_onlyOwner"";
""494_claimBitNauticTokens"" -> ""494_grantContributorTokens"";
""494_grantTeamTokens"" -> ""494_onlyOwner"";
""494_grantBountyTokens"" -> ""494_onlyOwner"";
""494_grantAdvisorsTokens"" -> ""494_onlyOwner"";
}
"
0xc3e43d422d5e6f94315622d96a96058689c52ec8.sol,BitNauticCrowdsaleTokenDistributor,"contract BitNauticCrowdsaleTokenDistributor is Ownable { using SafeMath for uint256; uint256 public constant ICOStartTime = 1531267200; uint256 public constant ICOEndTime = 1536969600; uint256 public teamSupply = 3000000 * 10 ** 18; uint256 public bountySupply = 2500000 * 10 ** 18; uint256 public reserveSupply = 5000000 * 10 ** 18; uint256 public advisorSupply = 2500000 * 10 ** 18; uint256 public founderSupply = 2000000 * 10 ** 18; MintableToken public token; BitNauticWhitelist public whitelist; BitNauticCrowdsale public crowdsale; mapping (address => bool) public hasClaimedTokens; constructor(MintableToken _token, BitNauticWhitelist _whitelist, BitNauticCrowdsale _crowdsale) public { token = _token; whitelist = _whitelist; crowdsale = _crowdsale; }",1,"subgraph cluster_494_BitNauticCrowdsaleTokenDistributor {
label=""BitNauticCrowdsaleTokenDistributor"";
""494_privateSale"" [label=""privateSale""];
""494_constructor"" [label=""constructor""];
""494_transferTokenOwnership"" [label=""transferTokenOwnership""];
""494_claimBitNauticTokens"" [label=""claimBitNauticTokens""];
""494_grantAdvisorsTokens"" [label=""grantAdvisorsTokens""];
""494_grantBountyTokens"" [label=""grantBountyTokens""];
""494_grantFoundersTokens"" [label=""grantFoundersTokens""];
""494_grantReserveTokens"" [label=""grantReserveTokens""];
""494_grantTeamTokens"" [label=""grantTeamTokens""];
""494_grantContributorTokens"" [label=""grantContributorTokens""];
""494_grantFoundersTokens"" -> ""494_onlyOwner"";
""494_grantReserveTokens"" -> ""494_onlyOwner"";
""494_privateSale"" -> ""494_onlyOwner"";
""494_transferTokenOwnership"" -> ""494_onlyOwner"";
""494_claimBitNauticTokens"" -> ""494_grantContributorTokens"";
""494_grantTeamTokens"" -> ""494_onlyOwner"";
""494_grantBountyTokens"" -> ""494_onlyOwner"";
""494_grantAdvisorsTokens"" -> ""494_onlyOwner"";
}
"
0xc4aad17558fa95c8937d0856b2dad74c1a7a095f.sol,AgiCrowdsale,"contract AgiCrowdsale is Ownable, ReentrancyGuard { using SafeMath for uint256; uint256 public firstDayCap; uint256 public cap; uint256 public goal; uint256 public rate; uint256 public constant WEI_TO_COGS = 10**uint256(10); address public wallet; RefundVault public vault; SingularityNetToken public token; uint256 public startTime; uint256 public endTime; uint256 public firstDay; bool public isFinalized = false; uint256 public weiRaised; mapping(address => bool) public whitelist; mapping(address => uint256) public contribution; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); event TokenRelease(address indexed beneficiary, uint256 amount); event TokenRefund(address indexed refundee, uint256 amount); event Finalized(); function AgiCrowdsale( address _token, address _wallet, uint256 _startTime, uint256 _endTime, uint256 _rate, uint256 _cap, uint256 _firstDayCap, uint256 _goal ) { require(_startTime >= getBlockTimestamp()); require(_endTime >= _startTime); require(_rate > 0); require(_goal > 0); require(_cap > 0); require(_wallet != 0x0); vault = new RefundVault(_wallet); token = SingularityNetToken(_token); wallet = _wallet; startTime = _startTime; endTime = _endTime; firstDay = startTime + 1 * 1 days; firstDayCap = _firstDayCap; rate = _rate; goal = _goal; cap = _cap; }",1,"subgraph cluster_1528_AgiCrowdsale {
label=""AgiCrowdsale"";
""1528_getBlockTimestamp"" [label=""getBlockTimestamp""];
""1528_getTokens"" [label=""getTokens""];
""1528_claimUnsold"" [label=""claimUnsold""];
""1528_finalize"" [label=""finalize""];
""1528_capReached"" [label=""capReached""];
""1528_buyTokens"" [label=""buyTokens""];
""1528_validPurchase"" [label=""validPurchase""];
""1528_claimRefund"" [label=""claimRefund""];
""1528_updateWhitelist"" [label=""updateWhitelist""];
""1528_forwardFunds"" [label=""forwardFunds""];
""1528_AgiCrowdsale"" [label=""AgiCrowdsale""];
""1528_goalReached"" [label=""goalReached""];
""1528_fallback"" [label=""fallback""];
""1528_isWhitelisted"" [label=""isWhitelisted""];
""1528_hasEnded"" [label=""hasEnded""];
""1528_claimRefund"" -> ""1528_goalReached"";
""1528_hasEnded"" -> ""1528_capReached"";
""1528_claimUnsold"" -> ""1528_getBlockTimestamp"";
""1528_AgiCrowdsale"" -> ""1528_getBlockTimestamp"";
""1528_buyTokens"" -> ""1528_getTokens"";
""1528_claimUnsold"" -> ""1528_onlyOwner"";
""1528_finalize"" -> ""1528_goalReached"";
""1528_claimRefund"" -> ""1528_nonReentrant"";
""1528_hasEnded"" -> ""1528_getBlockTimestamp"";
""1528_finalize"" -> ""1528_hasEnded"";
""1528_fallback"" -> ""1528_buyTokens"";
""1528_buyTokens"" -> ""1528_validPurchase"";
""1528_validPurchase"" -> ""1528_getBlockTimestamp"";
""1528_buyTokens"" -> ""1528_getBlockTimestamp"";
""1528_updateWhitelist"" -> ""1528_onlyOwner"";
""1528_finalize"" -> ""1528_onlyOwner"";
""1528_buyTokens"" -> ""1528_forwardFunds"";
}
"
0x6dbb4e882f967432fc0f9200e9ca577c916d8a68.sol,Bussiness,contract Bussiness is Ownable { IERC721 public erc721Address = IERC721(0x06012c8cf97bead5deae237070f9587f8e7a266d); ERC20BasicInterface public usdtToken = ERC20BasicInterface(0xdAC17F958D2ee523a2206206994597C13D831ec7); uint256 public ETHFee = 2; uint256 public HBWALLETFee = 1; uint256 public balance = address(this).balance; constructor() public {},1,"subgraph cluster_687_Bussiness {
label=""Bussiness"";
""687_buyByUsdt"" [label=""buyByUsdt""];
""687_setPrice"" [label=""setPrice""];
""687_getPrice"" [label=""getPrice""];
""687_ownerOf"" [label=""ownerOf""];
""687_constructor"" [label=""constructor""];
""687_resetPrice"" [label=""resetPrice""];
""687_setFee"" [label=""setFee""];
""687_withdraw"" [label=""withdraw""];
""687_setPriceFeeEth"" [label=""setPriceFeeEth""];
""687_removePrice"" [label=""removePrice""];
""687_buy"" [label=""buy""];
""687_buyByUsdt"" -> ""687_resetPrice"";
""687_setFee"" -> ""687_onlyOwner"";
""687_withdraw"" -> ""687_onlyOwner"";
""687_buy"" -> ""687_resetPrice"";
""687_getPrice"" -> ""687_resetPrice"";
""687_removePrice"" -> ""687_resetPrice"";
}
"
0x74a12ce6eebc23c3f785c0ab50d02228587dcc1a.sol,FrozenToken,"contract FrozenToken is ERC20Token, ITokenRecipient { mapping (address => bool) frozeds; uint256 public frozedCount; bool public freezeEnabled = false; bool public autoFreeze = false; bool public mintFinished = false; event Freeze(address indexed wallet); event UnFreeze(address indexed wallet); event PropsChanged(address indexed sender, string props, bool oldValue, bool newValue); event Mint(address indexed sender, address indexed wallet, uint256 amount); event ReceiveTokens(address indexed spender, address indexed token, uint256 value, bytes extraData); event ApproveAndCall(address indexed spender, uint256 value, bytes extraData); event Burn(address indexed sender, uint256 amount); event MintFinished(address indexed spender); modifier notFreeze { require(frozeds[msg.sender] == false || freezeEnabled == false); _; }",1,"subgraph cluster_1883_FrozenToken {
label=""FrozenToken"";
""1883_unFreeze"" [label=""unFreeze""];
""1883_transfer"" [label=""transfer""];
""1883_increaseApproval"" [label=""increaseApproval""];
""1883_decreaseApproval"" [label=""decreaseApproval""];
""1883_approveAndCall"" [label=""approveAndCall""];
""1883_mint"" [label=""mint""];
""1883_approve"" [label=""approve""];
""1883_freeze"" [label=""freeze""];
""1883_mintFinish"" [label=""mintFinish""];
""1883_isFreeze"" [label=""isFreeze""];
""1883_updAutoFreeze"" [label=""updAutoFreeze""];
""1883_burn"" [label=""burn""];
""1883_updFreezeEnabled"" [label=""updFreezeEnabled""];
""1883_receiveApproval"" [label=""receiveApproval""];
""1883_transferFrom"" [label=""transferFrom""];
""1883_mint"" -> ""1883_canMint"";
""1883_freeze"" -> ""1883_notOwner"";
""1883_transferFrom"" -> ""1883_transferFrom"";
""1883_approve"" -> ""1883_approve"";
""1883_mint"" -> ""1883_validAddress"";
""1883_increaseApproval"" -> ""1883_notFreezeFrom"";
""1883_approveAndCall"" -> ""1883_validAddress"";
""1883_unFreeze"" -> ""1883_validAddress"";
""1883_decreaseApproval"" -> ""1883_notFreezeFrom"";
""1883_freeze"" -> ""1883_authLevel"";
""1883_mintFinish"" -> ""1883_onlyOwner"";
""1883_transfer"" -> ""1883_transfer"";
""1883_receiveApproval"" -> ""1883_validAddress"";
""1883_approveAndCall"" -> ""1883_approve"";
""1883_receiveApproval"" -> ""1883_greaterThanZero"";
""1883_burn"" -> ""1883_validBalance"";
""1883_burn"" -> ""1883_greaterThanZero"";
""1883_increaseApproval"" -> ""1883_increaseApproval"";
""1883_transfer"" -> ""1883_notFreeze"";
""1883_mint"" -> ""1883_isAuthorized"";
""1883_isFreeze"" -> ""1883_validAddress"";
""1883_freeze"" -> ""1883_notThis"";
""1883_approve"" -> ""1883_notFreezeFrom"";
""1883_freeze"" -> ""1883_validAddress"";
""1883_transferFrom"" -> ""1883_notFreezeFrom"";
""1883_updFreezeEnabled"" -> ""1883_authLevel"";
""1883_unFreeze"" -> ""1883_authLevel"";
""1883_mint"" -> ""1883_isFreeze"";
""1883_updAutoFreeze"" -> ""1883_authLevel"";
""1883_mint"" -> ""1883_greaterThanZero"";
""1883_decreaseApproval"" -> ""1883_decreaseApproval"";
""1883_approveAndCall"" -> ""1883_greaterThanZero"";
""1883_burn"" -> ""1883_isFreeze"";
""1883_mint"" -> ""1883_authLevel"";
}
"
0x3fd2371b53f2db38765220c90f2ffd4ddbe8afd1.sol,MonethaUsersClaimHandler,contract MonethaUsersClaimHandler is Contactable { string constant VERSION = ; MonethaUsersClaimStorage public storageContract; event StorageContractOwnerChanged(address indexed _newOwner); constructor(address _storageAddr) public { storageContract = MonethaUsersClaimStorage(_storageAddr); },1,"subgraph cluster_366_MonethaUsersClaimHandler {
label=""MonethaUsersClaimHandler"";
""366_deleteAccount"" [label=""deleteAccount""];
""366_constructor"" [label=""constructor""];
""366_changeOwnerOfMonethaUsersClaimStorage"" [label=""changeOwnerOfMonethaUsersClaimStorage""];
""366_deleteAccountsInBulk"" [label=""deleteAccountsInBulk""];
""366_claimTokens"" [label=""claimTokens""];
""366_claimTokensInBulk"" [label=""claimTokensInBulk""];
""366_deleteAccount"" -> ""366_onlyOwner"";
""366_deleteAccountsInBulk"" -> ""366_onlyOwner"";
""366_claimTokensInBulk"" -> ""366_onlyOwner"";
""366_changeOwnerOfMonethaUsersClaimStorage"" -> ""366_onlyOwner"";
""366_claimTokens"" -> ""366_onlyOwner"";
}
"
0x4bc78f6619991b029b867b6d88d39c196332aba3.sol,AlgoDEX,"contract AlgoDEX is SafeMath { address public admin; address public feeAccount; address public accountLevelsAddr; uint public feeMake; uint public feeTake; uint public feeRebate; mapping (address => mapping (address => uint)) public tokens; mapping (address => mapping (bytes32 => bool)) public orders; mapping (address => mapping (bytes32 => uint)) public orderFills; event Order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user); event Cancel(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s); event Trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give); event Deposit(address token, address user, uint amount, uint balance); event Withdraw(address token, address user, uint amount, uint balance); constructor (address admin_, address feeAccount_, address accountLevelsAddr_, uint feeMake_, uint feeTake_, uint feeRebate_) public { admin = admin_; feeAccount = feeAccount_; accountLevelsAddr = accountLevelsAddr_; feeMake = feeMake_; feeTake = feeTake_; feeRebate = feeRebate_; }",1,"subgraph cluster_1614_AlgoDEX {
label=""AlgoDEX"";
""1614_changeFeeTake"" [label=""changeFeeTake""];
""1614_changeFeeMake"" [label=""changeFeeMake""];
""1614_fallback"" [label=""fallback""];
""1614_cancelOrder"" [label=""cancelOrder""];
""1614_trade"" [label=""trade""];
""1614_deposit"" [label=""deposit""];
""1614_availableVolume"" [label=""availableVolume""];
""1614_changeFeeRebate"" [label=""changeFeeRebate""];
""1614_depositToken"" [label=""depositToken""];
""1614_order"" [label=""order""];
""1614_changeAccountLevelsAddr"" [label=""changeAccountLevelsAddr""];
""1614_balanceOf"" [label=""balanceOf""];
""1614_withdrawToken"" [label=""withdrawToken""];
""1614_changeAdmin"" [label=""changeAdmin""];
""1614_amountFilled"" [label=""amountFilled""];
""1614_withdraw"" [label=""withdraw""];
""1614_tradeBalances"" [label=""tradeBalances""];
""1614_constructor"" [label=""constructor""];
""1614_testTrade"" [label=""testTrade""];
""1614_changeFeeAccount"" [label=""changeFeeAccount""];
""1614_withdraw"" -> ""1614_safeSub"";
""1614_trade"" -> ""1614_tradeBalances"";
""1614_availableVolume"" -> ""1614_safeSub"";
""1614_depositToken"" -> ""1614_safeAdd"";
""1614_testTrade"" -> ""1614_availableVolume"";
""1614_withdrawToken"" -> ""1614_safeSub"";
""1614_deposit"" -> ""1614_safeAdd"";
""1614_tradeBalances"" -> ""1614_safeAdd"";
""1614_tradeBalances"" -> ""1614_safeSub"";
""1614_availableVolume"" -> ""1614_safeMul"";
""1614_trade"" -> ""1614_safeAdd"";
""1614_tradeBalances"" -> ""1614_safeMul"";
}
"
0x2716d9189adc5ee2fb35f193b79b5578c3d7bcda.sol,EthereumLegitAirDrop,"contract EthereumLegitAirDrop is Ownable { uint public numDrops; uint public dropAmount; token myToken; function EthereumLegitAirDrop(address dropper, address tokenContractAddress) { myToken = token(tokenContractAddress); transferOwnership(dropper); }",1,"subgraph cluster_416_EthereumLegitAirDrop {
label=""EthereumLegitAirDrop"";
""416_EthereumLegitAirDrop"" [label=""EthereumLegitAirDrop""];
""416_emergencyDrain"" [label=""emergencyDrain""];
""416_airDrop"" [label=""airDrop""];
""416_EthereumLegitAirDrop"" -> ""416_transferOwnership"";
""416_emergencyDrain"" -> ""416_onlyOwner"";
""416_airDrop"" -> ""416_onlyOwner"";
}
"
0x4c13184721de2d1b47a8875775ba3ce0b2e00ee0.sol,SharkPool,"contract SharkPool is Ownable, ReentrancyGuard { string constant public pool_name = ; uint256 public pool_percentage = 5; uint256 constant public max_users = 100; uint256 public total_users = 0; uint256 public constant divisible_units = 10000000; uint256 public contract_period = 100; uint256 public mined_blocks = 1; uint256 public claimed_blocks = 1; uint256 public blockCreationRate = 0; BitcoineumInterface base_contract; struct user { uint256 start_block; uint256 end_block; uint256 proportional_contribution; }",1,"subgraph cluster_893_SharkPool {
label=""SharkPool"";
""893_current_external_block"" [label=""current_external_block""];
""893_SharkPool"" [label=""SharkPool""];
""893_find_contribution"" [label=""find_contribution""];
""893_mine"" [label=""mine""];
""893_checkMiningAttempt"" [label=""checkMiningAttempt""];
""893_checkWinning"" [label=""checkWinning""];
""893_allocate_slot"" [label=""allocate_slot""];
""893_fallback"" [label=""fallback""];
""893_available_slots"" [label=""available_slots""];
""893_get_bitcoineum_contract_address"" [label=""get_bitcoineum_contract_address""];
""893_external_to_internal_block_number"" [label=""external_to_internal_block_number""];
""893_do_redemption"" [label=""do_redemption""];
""893_redeem"" [label=""redeem""];
""893_set_pool_percentage"" [label=""set_pool_percentage""];
""893_balanceOf"" [label=""balanceOf""];
""893_distribute_reward"" [label=""distribute_reward""];
""893_calculate_minimum_contribution"" [label=""calculate_minimum_contribution""];
""893_claim"" [label=""claim""];
""893_SharkPool"" -> ""893_get_bitcoineum_contract_address"";
""893_redeem"" -> ""893_do_redemption"";
""893_set_pool_percentage"" -> ""893_nonReentrant"";
""893_redeem"" -> ""893_nonReentrant"";
""893_set_pool_percentage"" -> ""893_onlyOwner"";
""893_mine"" -> ""893_external_to_internal_block_number"";
""893_fallback"" -> ""893_do_redemption"";
""893_claim"" -> ""893_distribute_reward"";
""893_mine"" -> ""893_current_external_block"";
""893_fallback"" -> ""893_allocate_slot"";
""893_fallback"" -> ""893_calculate_minimum_contribution"";
""893_claim"" -> ""893_nonReentrant"";
""893_mine"" -> ""893_nonReentrant"";
}
"
0xeda8b016efa8b1161208cf041cd86972eee0f31e.sol,BonusFinalizeAgent,"contract BonusFinalizeAgent is FinalizeAgent, SafeMathLib { CrowdsaleToken public token; Crowdsale public crowdsale; uint256 public allocatedTokens; uint256 tokenCap; address walletAddress; function BonusFinalizeAgent(CrowdsaleToken _token, Crowdsale _crowdsale, uint256 _tokenCap, address _walletAddress) public { token = _token; crowdsale = _crowdsale; require(address(crowdsale) != 0); tokenCap = _tokenCap; walletAddress = _walletAddress; }",1,"subgraph cluster_2784_BonusFinalizeAgent {
label=""BonusFinalizeAgent"";
""2784_isSane"" [label=""isSane""];
""2784_finalizeCrowdsale"" [label=""finalizeCrowdsale""];
""2784_BonusFinalizeAgent"" [label=""BonusFinalizeAgent""];
""2784_finalizeCrowdsale"" -> ""2784_safeSub"";
}
"
0x269b4c23ddab676e2869ae72cd6ae4f24bdfea45.sol,IRBPreCrowdsale,"contract IRBPreCrowdsale is Ownable, Pausable { using SafeMath for uint; IRBToken public token; IRBPreRefundVault public vault; uint startTime = 1513065600; uint endTime = 1515963599; uint256 public constant minPresaleAmount = 108 * 10 ** 15; uint256 public constant goal = 1125 * 10 ** 18; uint256 public constant cap = 2250 * 10 ** 18; uint256 public weiRaised; bool public isFinalized = false; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); event Finalized(); function IRBPreCrowdsale(address _tokenAddress, address _vaultAddress) { require(_tokenAddress != address(0)); require(_vaultAddress != address(0)); token = IRBToken(_tokenAddress); vault = IRBPreRefundVault(_vaultAddress); }",1,"subgraph cluster_1552_IRBPreCrowdsale {
label=""IRBPreCrowdsale"";
""1552_buyTokens"" [label=""buyTokens""];
""1552_withdraw"" [label=""withdraw""];
""1552_convertAmountToTokens"" [label=""convertAmountToTokens""];
""1552_IRBPreCrowdsale"" [label=""IRBPreCrowdsale""];
""1552_hasEnded"" [label=""hasEnded""];
""1552_kill"" [label=""kill""];
""1552_finalize"" [label=""finalize""];
""1552_claimRefund"" [label=""claimRefund""];
""1552_fallback"" [label=""fallback""];
""1552_validPurchase"" [label=""validPurchase""];
""1552_goalReached"" [label=""goalReached""];
""1552_buyTokens"" -> ""1552_convertAmountToTokens"";
""1552_withdraw"" -> ""1552_onlyOwner"";
""1552_fallback"" -> ""1552_buyTokens"";
""1552_buyTokens"" -> ""1552_validPurchase"";
""1552_buyTokens"" -> ""1552_whenNotPaused"";
""1552_kill"" -> ""1552_whenPaused"";
""1552_finalize"" -> ""1552_hasEnded"";
""1552_finalize"" -> ""1552_onlyOwner"";
""1552_kill"" -> ""1552_onlyOwner"";
""1552_finalize"" -> ""1552_goalReached"";
""1552_claimRefund"" -> ""1552_goalReached"";
""1552_withdraw"" -> ""1552_goalReached"";
}
"
0x32f1c992a32376fa0f723aecaa247119d3f7f8bd.sol,Zethroll,"contract Zethroll is ZTHReceivingContract { using SafeMath for uint; modifier betIsValid(uint _betSize, uint _playerNumber) { require( calculateProfit(_betSize, _playerNumber) < maxProfit && _betSize >= minBet && _playerNumber > minNumber && _playerNumber < maxNumber); _; }",1,"subgraph cluster_843_Zethroll {
label=""Zethroll"";
""843_calculateProfit"" [label=""calculateProfit""];
""843_ownerSetMaxProfitAsPercentOfHouse"" [label=""ownerSetMaxProfitAsPercentOfHouse""];
""843_tokenFallback"" [label=""tokenFallback""];
""843_ownerUpdateContractBalance"" [label=""ownerUpdateContractBalance""];
""843_ownerSetMinBet"" [label=""ownerSetMinBet""];
""843__playerRollDice"" [label=""_playerRollDice""];
""843__zthToken"" [label=""_zthToken""];
""843_fallback"" [label=""fallback""];
""843_random"" [label=""random""];
""843_ownerTransferZTH"" [label=""ownerTransferZTH""];
""843_constructor"" [label=""constructor""];
""843__finishBet"" [label=""_finishBet""];
""843_dumpdivs"" [label=""dumpdivs""];
""843_finishBet"" [label=""finishBet""];
""843_ownerPauseGame"" [label=""ownerPauseGame""];
""843_ownerSetBankroll"" [label=""ownerSetBankroll""];
""843_setMaxProfit"" [label=""setMaxProfit""];
""843_ownerChangeOwner"" [label=""ownerChangeOwner""];
""843_ownerkill"" [label=""ownerkill""];
""843_maxRandom"" [label=""maxRandom""];
""843__playerRollDice"" -> ""843__zthToken"";
""843_ownerTransferZTH"" -> ""843_onlyOwner"";
""843_ownerChangeOwner"" -> ""843_onlyOwner"";
""843_constructor"" -> ""843_ownerSetMaxProfitAsPercentOfHouse"";
""843_ownerPauseGame"" -> ""843_onlyOwner"";
""843_constructor"" -> ""843_ownerSetMinBet"";
""843_random"" -> ""843_maxRandom"";
""843_ownerSetMinBet"" -> ""843_onlyOwner"";
""843_tokenFallback"" -> ""843_setMaxProfit"";
""843_ownerUpdateContractBalance"" -> ""843_onlyOwner"";
""843_ownerSetMaxProfitAsPercentOfHouse"" -> ""843_setMaxProfit"";
""843__finishBet"" -> ""843_setMaxProfit"";
""843_ownerSetBankroll"" -> ""843_onlyOwner"";
""843__playerRollDice"" -> ""843_gameIsActive"";
""843_finishBet"" -> ""843__finishBet"";
""843__playerRollDice"" -> ""843_betIsValid"";
""843_finishBet"" -> ""843_gameIsActive"";
""843__finishBet"" -> ""843_random"";
""843_tokenFallback"" -> ""843__playerRollDice"";
""843_ownerSetMaxProfitAsPercentOfHouse"" -> ""843_onlyOwner"";
""843__finishBet"" -> ""843_calculateProfit"";
""843_ownerkill"" -> ""843_onlyOwner"";
""843_ownerTransferZTH"" -> ""843_setMaxProfit"";
""843__playerRollDice"" -> ""843__finishBet"";
}
"
0x70f90f6688cb26b6a924a2155b3d9529a0b36a90.sol,Crowdsale,"contract Crowdsale is Pausable{ using SafeMath for uint256; BurnableToken public token; address public wallet; uint256 public rate = 1883800000000000000000; uint256 tokensSold; uint256 public weiRaised; uint256 startTime; uint256 phaze1Start = 1564617600; uint256 phaze1End = 1567209600; uint256 phaze2Start = 1567296000; uint256 phaze2End = 1569801600; uint256 phaze3Start = 1569888000; uint256 phaze3End = 1572480000; uint256 rate1 = 3767600000000000000000; uint256 rate2 = 2354750000000000000000; uint256 rate3 = 2093100000000000000000; uint256 public hardcap = 250000000000000000000000000; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount, uint256 time); event buyx(address buyer, address contractAddr, uint256 amount); constructor(address _wallet, BurnableToken _token, uint256 starttime, uint256 _cap) public{ require(_wallet != address(0)); require(_token != address(0)); wallet = _wallet; token = _token; startTime = starttime; hardcap = _cap; }",1,"subgraph cluster_1262_Crowdsale {
label=""Crowdsale"";
""1262_fallback"" [label=""fallback""];
""1262_setphase1"" [label=""setphase1""];
""1262_setphase2"" [label=""setphase2""];
""1262__postValidatePurchase"" [label=""_postValidatePurchase""];
""1262__getTokenAmount"" [label=""_getTokenAmount""];
""1262__deliverTokens"" [label=""_deliverTokens""];
""1262_constructor"" [label=""constructor""];
""1262__processPurchase"" [label=""_processPurchase""];
""1262_setphase3"" [label=""setphase3""];
""1262_setCrowdsale"" [label=""setCrowdsale""];
""1262_buyTokens"" [label=""buyTokens""];
""1262__updatePurchasingState"" [label=""_updatePurchasingState""];
""1262__preValidatePurchase"" [label=""_preValidatePurchase""];
""1262_setWallet"" [label=""setWallet""];
""1262__forwardFunds"" [label=""_forwardFunds""];
""1262_setphase2"" -> ""1262_onlyOwner"";
""1262_fallback"" -> ""1262_buyTokens"";
""1262_setphase1"" -> ""1262_onlyOwner"";
""1262_fallback"" -> ""1262_whenNotPaused"";
""1262_buyTokens"" -> ""1262__processPurchase"";
""1262_buyTokens"" -> ""1262__forwardFunds"";
""1262_setCrowdsale"" -> ""1262_onlyOwner"";
""1262_buyTokens"" -> ""1262__updatePurchasingState"";
""1262__processPurchase"" -> ""1262__deliverTokens"";
""1262_buyTokens"" -> ""1262__postValidatePurchase"";
""1262_fallback"" -> ""1262__getTokenAmount"";
""1262_setphase3"" -> ""1262_onlyOwner"";
""1262_setWallet"" -> ""1262_onlyOwner"";
""1262_buyTokens"" -> ""1262__getTokenAmount"";
""1262_buyTokens"" -> ""1262_whenNotPaused"";
}
"
0x28f1135e43e61ebf303c8f1f9beef4f6a00dcb34.sol,XC,contract XC is XCInterface { struct Admin { uint8 status; bytes32 platformName; address account; },1,"subgraph cluster_228_XCPluginInterface {
label=""XCPluginInterface"";
""228_getTokenSymbol"" [label=""getTokenSymbol""];
""228_countOfPublicKey"" [label=""countOfPublicKey""];
""228_stop"" [label=""stop""];
""228_getPlatformName"" [label=""getPlatformName""];
""228_publicKeys"" [label=""publicKeys""];
""228_existCaller"" [label=""existCaller""];
""228_addPublicKey"" [label=""addPublicKey""];
""228_verifyProposal"" [label=""verifyProposal""];
""228_deleteCaller"" [label=""deleteCaller""];
""228_existPublicKey"" [label=""existPublicKey""];
""228_getWeight"" [label=""getWeight""];
""228_deleteProposal"" [label=""deleteProposal""];
""228_deletePublicKey"" [label=""deletePublicKey""];
""228_getAdmin"" [label=""getAdmin""];
""228_getProposal"" [label=""getProposal""];
""228_getStatus"" [label=""getStatus""];
""228_getTrustPlatform"" [label=""getTrustPlatform""];
""228_getCallers"" [label=""getCallers""];
""228_addCaller"" [label=""addCaller""];
""228_voteProposal"" [label=""voteProposal""];
""228_start"" [label=""start""];
""228_setAdmin"" [label=""setAdmin""];
""228_commitProposal"" [label=""commitProposal""];
""228_setWeight"" [label=""setWeight""];
}
"
0x3420894bf786866a09937b0369d5b4781870c21f.sol,LikeCoin,"contract LikeCoin is ERC20, HasOperator { using SafeMath for uint256; string constant public name = ; string constant public symbol = ; uint8 constant public decimals = 18; uint256 public supply = 0; mapping(address => uint256) public balances; mapping(address => mapping(address => uint256)) public allowed; address public crowdsaleAddr = 0x0; address public contributorPoolAddr = 0x0; uint256 public contributorPoolMintQuota = 0; address[] public creatorsPoolAddrs; mapping(address => bool) isCreatorsPool; uint256 public creatorsPoolMintQuota = 0; mapping(address => uint256) public lockedBalances; uint public unlockTime = 0; SignatureChecker public signatureChecker = SignatureChecker(0x0); bool public signatureCheckerFreezed = false; address public signatureOwner = 0x0; bool public allowDelegate = true; mapping (address => mapping (uint256 => bool)) public usedNonce; mapping (address => bool) public transferAndCallWhitelist; event Lock(address indexed _addr, uint256 _value); event SignatureCheckerChanged(address _newSignatureChecker); function LikeCoin(uint256 _initialSupply, address _signatureOwner, address _sigCheckerAddr) public { supply = _initialSupply; balances[owner] = _initialSupply; signatureOwner = _signatureOwner; signatureChecker = SignatureChecker(_sigCheckerAddr); Transfer(0x0, owner, _initialSupply); }",1,"subgraph cluster_1696_LikeCoin {
label=""LikeCoin"";
""1696_switchDelegate"" [label=""switchDelegate""];
""1696_transfer"" [label=""transfer""];
""1696__transfer"" [label=""_transfer""];
""1696_transferDelegated"" [label=""transferDelegated""];
""1696_registerContributorPool"" [label=""registerContributorPool""];
""1696_registerCreatorsPools"" [label=""registerCreatorsPools""];
""1696_transferAndCall"" [label=""transferAndCall""];
""1696_transferMultipleDelegated"" [label=""transferMultipleDelegated""];
""1696__transferMultiple"" [label=""_transferMultiple""];
""1696_allowance"" [label=""allowance""];
""1696_totalSupply"" [label=""totalSupply""];
""1696_setSignatureChecker"" [label=""setSignatureChecker""];
""1696_removeTransferAndCallWhitelist"" [label=""removeTransferAndCallWhitelist""];
""1696__tryUnlockBalance"" [label=""_tryUnlockBalance""];
""1696_transferAndCallDelegated"" [label=""transferAndCallDelegated""];
""1696_mintForCreatorsPool"" [label=""mintForCreatorsPool""];
""1696_freezeSignatureChecker"" [label=""freezeSignatureChecker""];
""1696_LikeCoin"" [label=""LikeCoin""];
""1696_addTransferAndCallWhitelist"" [label=""addTransferAndCallWhitelist""];
""1696_transferMultiple"" [label=""transferMultiple""];
""1696_approve"" [label=""approve""];
""1696_registerCrowdsales"" [label=""registerCrowdsales""];
""1696_transferAndLock"" [label=""transferAndLock""];
""1696_balanceOf"" [label=""balanceOf""];
""1696_mintForContributorPool"" [label=""mintForContributorPool""];
""1696__transferAndCall"" [label=""_transferAndCall""];
""1696__isContract"" [label=""_isContract""];
""1696_transferFrom"" [label=""transferFrom""];
""1696_burn"" [label=""burn""];
""1696_transferMultipleDelegated"" -> ""1696__transferMultiple"";
""1696_transferAndCall"" -> ""1696__transferAndCall"";
""1696__transfer"" -> ""1696__tryUnlockBalance"";
""1696__transferAndCall"" -> ""1696__isContract"";
""1696_transferDelegated"" -> ""1696__transfer"";
""1696_registerContributorPool"" -> ""1696__isContract"";
""1696_registerCrowdsales"" -> ""1696__isContract"";
""1696_transferMultiple"" -> ""1696__transferMultiple"";
""1696_removeTransferAndCallWhitelist"" -> ""1696_ownerOrOperator"";
""1696_registerCrowdsales"" -> ""1696_onlyOwner"";
""1696_registerCreatorsPools"" -> ""1696_onlyOwner"";
""1696_transferFrom"" -> ""1696__transfer"";
""1696_transferDelegated"" -> ""1696_isDelegated"";
""1696_registerCreatorsPools"" -> ""1696__isContract"";
""1696_transferMultipleDelegated"" -> ""1696_isDelegated"";
""1696_switchDelegate"" -> ""1696_ownerOrOperator"";
""1696__transferMultiple"" -> ""1696__tryUnlockBalance"";
""1696__transferAndCall"" -> ""1696__transfer"";
""1696_transfer"" -> ""1696__transfer"";
""1696_addTransferAndCallWhitelist"" -> ""1696__isContract"";
""1696_addTransferAndCallWhitelist"" -> ""1696_ownerOrOperator"";
""1696_transferAndCallDelegated"" -> ""1696__transferAndCall"";
""1696_registerContributorPool"" -> ""1696_onlyOwner"";
""1696_transferAndCallDelegated"" -> ""1696_isDelegated"";
}
"
0xc739ae9ba934f937636a2ebaaf1ecdf04e11ef2f.sol,NXTGToken,contract NXTGToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 7000000 * (10**5); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; constructor () public { owner = msg.sender; },1,"subgraph cluster_756_NXTGToken {
label=""NXTGToken"";
""756_approve"" [label=""approve""];
""756_transferFrom"" [label=""transferFrom""];
""756_refundTokens"" [label=""refundTokens""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_setOwner"" [label=""setOwner""];
""756_constructor"" [label=""constructor""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_transfer"" [label=""transfer""];
""756_createTokens"" [label=""createTokens""];
""756_totalSupply"" [label=""totalSupply""];
""756_approve"" -> ""756_approve"";
""756_transferFrom"" -> ""756_transferFrom"";
""756_transfer"" -> ""756_transfer"";
""756_createTokens"" -> ""756_safeSub"";
""756_approve"" -> ""756_allowance"";
""756_createTokens"" -> ""756_safeAdd"";
}
"
0x4cd988afbad37289baaf53c13e98e2bd46aaea8c.sol,DSToken,"contract DSToken is DSTokenBase(0), DSStop { bytes32 public symbol; uint256 public decimals = 18; address public generator; modifier onlyGenerator { if(msg.sender!=generator) throw; _; }",1,"subgraph cluster_1440_DSToken {
label=""DSToken"";
""1440_setName"" [label=""setName""];
""1440_push"" [label=""push""];
""1440_burn"" [label=""burn""];
""1440_DSToken"" [label=""DSToken""];
""1440_transferFrom"" [label=""transferFrom""];
""1440_transfer"" [label=""transfer""];
""1440_generatorTransfer"" [label=""generatorTransfer""];
""1440_approve"" [label=""approve""];
""1440_pull"" [label=""pull""];
""1440_mint"" [label=""mint""];
""1440_mint"" -> ""1440_stoppable"";
""1440_burn"" -> ""1440_sub"";
""1440_transferFrom"" -> ""1440_transferFrom"";
""1440_pull"" -> ""1440_transferFrom"";
""1440_transfer"" -> ""1440_transfer"";
""1440_approve"" -> ""1440_approve"";
""1440_generatorTransfer"" -> ""1440_onlyGenerator"";
""1440_burn"" -> ""1440_stoppable"";
""1440_transfer"" -> ""1440_note"";
""1440_generatorTransfer"" -> ""1440_transfer"";
""1440_generatorTransfer"" -> ""1440_note"";
""1440_setName"" -> ""1440_auth"";
""1440_push"" -> ""1440_transfer"";
""1440_approve"" -> ""1440_note"";
""1440_approve"" -> ""1440_stoppable"";
""1440_transfer"" -> ""1440_stoppable"";
""1440_mint"" -> ""1440_note"";
""1440_mint"" -> ""1440_add"";
""1440_mint"" -> ""1440_auth"";
""1440_transferFrom"" -> ""1440_stoppable"";
""1440_burn"" -> ""1440_auth"";
""1440_burn"" -> ""1440_note"";
""1440_transferFrom"" -> ""1440_note"";
}
"
0xd73c51ce805c86046577b7b4e5cb2dde14d72a36.sol,EPTCrowdfund,"contract EPTCrowdfund { using SafeMath for uint256; EPTToken public token; address public beneficiaryAddress; address public founderAddress; uint256 public crowdfundStartTime = 1516579201; uint256 public crowdfundEndTime = 1518998399; uint256 public presaleStartTime = 1513123201; uint256 public presaleEndTime = 1516579199; uint256 public ethRaised; bool private tokenDeployed = false; uint256 public tokenSold; uint256 private ethRate; event ChangeFounderAddress(address indexed _newFounderAddress , uint256 _timestamp); event TokenPurchase(address indexed _beneficiary, uint256 _value, uint256 _amount); event CrowdFundClosed(uint256 _timestamp); enum State {PreSale, CrowdSale, Finish}",1,"subgraph cluster_1013_EPTCrowdfund {
label=""EPTCrowdfund"";
""1013_fundTransfer"" [label=""fundTransfer""];
""1013_getState"" [label=""getState""];
""1013_changeFounderWalletAddress"" [label=""changeFounderWalletAddress""];
""1013_fallback"" [label=""fallback""];
""1013_buyTokens"" [label=""buyTokens""];
""1013_getRate"" [label=""getRate""];
""1013_setEthRate"" [label=""setEthRate""];
""1013_endCrowdFund"" [label=""endCrowdFund""];
""1013_setToken"" [label=""setToken""];
""1013_EPTCrowdfund"" [label=""EPTCrowdfund""];
""1013_endCrowdFund"" -> ""1013_onlyfounder"";
""1013_getRate"" -> ""1013_getState"";
""1013_changeFounderWalletAddress"" -> ""1013_onlyfounder"";
""1013_fallback"" -> ""1013_buyTokens"";
""1013_changeFounderWalletAddress"" -> ""1013_nonZeroAddress"";
""1013_buyTokens"" -> ""1013_nonZeroEth"";
""1013_buyTokens"" -> ""1013_fundTransfer"";
""1013_setToken"" -> ""1013_nonZeroAddress"";
""1013_buyTokens"" -> ""1013_nonZeroAddress"";
""1013_buyTokens"" -> ""1013_isTokenDeployed"";
""1013_setEthRate"" -> ""1013_onlyfounder"";
""1013_buyTokens"" -> ""1013_onlyPublic"";
""1013_buyTokens"" -> ""1013_isBetween"";
""1013_buyTokens"" -> ""1013_getRate"";
""1013_setToken"" -> ""1013_onlyfounder"";
}
"
0x4bc78f6619991b029b867b6d88d39c196332aba3.sol,AlgoDEX,"contract AlgoDEX is SafeMath { address public admin; address public feeAccount; address public accountLevelsAddr; uint public feeMake; uint public feeTake; uint public feeRebate; mapping (address => mapping (address => uint)) public tokens; mapping (address => mapping (bytes32 => bool)) public orders; mapping (address => mapping (bytes32 => uint)) public orderFills; event Order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user); event Cancel(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s); event Trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give); event Deposit(address token, address user, uint amount, uint balance); event Withdraw(address token, address user, uint amount, uint balance); constructor (address admin_, address feeAccount_, address accountLevelsAddr_, uint feeMake_, uint feeTake_, uint feeRebate_) public { admin = admin_; feeAccount = feeAccount_; accountLevelsAddr = accountLevelsAddr_; feeMake = feeMake_; feeTake = feeTake_; feeRebate = feeRebate_; }",1,"subgraph cluster_1614_AlgoDEX {
label=""AlgoDEX"";
""1614_changeFeeTake"" [label=""changeFeeTake""];
""1614_changeFeeMake"" [label=""changeFeeMake""];
""1614_fallback"" [label=""fallback""];
""1614_cancelOrder"" [label=""cancelOrder""];
""1614_trade"" [label=""trade""];
""1614_deposit"" [label=""deposit""];
""1614_availableVolume"" [label=""availableVolume""];
""1614_changeFeeRebate"" [label=""changeFeeRebate""];
""1614_depositToken"" [label=""depositToken""];
""1614_order"" [label=""order""];
""1614_changeAccountLevelsAddr"" [label=""changeAccountLevelsAddr""];
""1614_balanceOf"" [label=""balanceOf""];
""1614_withdrawToken"" [label=""withdrawToken""];
""1614_changeAdmin"" [label=""changeAdmin""];
""1614_amountFilled"" [label=""amountFilled""];
""1614_withdraw"" [label=""withdraw""];
""1614_tradeBalances"" [label=""tradeBalances""];
""1614_constructor"" [label=""constructor""];
""1614_testTrade"" [label=""testTrade""];
""1614_changeFeeAccount"" [label=""changeFeeAccount""];
""1614_withdraw"" -> ""1614_safeSub"";
""1614_trade"" -> ""1614_tradeBalances"";
""1614_availableVolume"" -> ""1614_safeSub"";
""1614_depositToken"" -> ""1614_safeAdd"";
""1614_testTrade"" -> ""1614_availableVolume"";
""1614_withdrawToken"" -> ""1614_safeSub"";
""1614_deposit"" -> ""1614_safeAdd"";
""1614_tradeBalances"" -> ""1614_safeAdd"";
""1614_tradeBalances"" -> ""1614_safeSub"";
""1614_availableVolume"" -> ""1614_safeMul"";
""1614_trade"" -> ""1614_safeAdd"";
""1614_tradeBalances"" -> ""1614_safeMul"";
}
"
0x723aaf922709819c25344b81901dd8a9c84c0b89.sol,FinalizableCrowdsale,"contract FinalizableCrowdsale is Crowdsale, Ownable { using SafeMath for uint256; bool public isFinalized = false; event Finalized(); function FinalizableCrowdsale(uint32 _startTime, uint32 _endTime, uint _rate, uint _hardCap, address _wallet, address _token) Crowdsale(_startTime, _endTime, _rate, _hardCap, _wallet, _token) { }",1,"subgraph cluster_839_FinalizableCrowdsale {
label=""FinalizableCrowdsale"";
""839_finalize"" [label=""finalize""];
""839_finalization"" [label=""finalization""];
""839_FinalizableCrowdsale"" [label=""FinalizableCrowdsale""];
""839_finalize"" -> ""839_onlyOwner"";
""839_finalize"" -> ""839_finalization"";
""839_FinalizableCrowdsale"" -> ""839_Crowdsale"";
""839_finalize"" -> ""839_hasEnded"";
}
"
0xed8a2697d1af8f8cad0f6c5b9962d868d4ed2a41.sol,HUMPresale,"contract HUMPresale is WhitelistedCrowdsale, IndividuallyCappedCrowdsale { uint256 public constant minimum = 100000000000000000; bool public isOnSale = false; mapping(address => uint256) public bonusTokens; uint256 public bonusPercent; address[] public contributors; event DistrubuteBonusTokens(address indexed sender); event Withdraw(address indexed _from, uint256 _amount); constructor ( uint256 _rate, uint256 _bonusPercent, address _wallet, HUMToken _token, uint256 _individualCapEther ) public Crowdsale(_rate, _wallet, _token) IndividuallyCappedCrowdsale(_individualCapEther.mul(10 ** 18)) { bonusPercent = _bonusPercent; }",1,"subgraph cluster_1730_HUMPresale {
label=""HUMPresale"";
""1730_closeSale"" [label=""closeSale""];
""1730_getContributors"" [label=""getContributors""];
""1730_openSale"" [label=""openSale""];
""1730__processPurchase"" [label=""_processPurchase""];
""1730_modifyTokenPrice"" [label=""modifyTokenPrice""];
""1730_withdrawToken"" [label=""withdrawToken""];
""1730__preValidatePurchase"" [label=""_preValidatePurchase""];
""1730_constructor"" [label=""constructor""];
""1730_distributeBonusTokens"" [label=""distributeBonusTokens""];
""1730_getBonusList"" [label=""getBonusList""];
""1730_distributeBonusTokensByList"" [label=""distributeBonusTokensByList""];
""1730_constructor"" -> ""1730_constructor"";
""1730_withdrawToken"" -> ""1730_onlyOwner"";
""1730_getContributors"" -> ""1730_onlyOwner"";
""1730_openSale"" -> ""1730_onlyOwner"";
""1730_getBonusList"" -> ""1730_onlyOwner"";
""1730_modifyTokenPrice"" -> ""1730_onlyOwner"";
""1730_closeSale"" -> ""1730_onlyOwner"";
""1730__preValidatePurchase"" -> ""1730__preValidatePurchase"";
""1730_distributeBonusTokens"" -> ""1730_onlyOwner"";
""1730__processPurchase"" -> ""1730__processPurchase"";
""1730_closeSale"" -> ""1730_withdrawToken"";
""1730__preValidatePurchase"" -> ""1730_isWhitelisted"";
""1730_distributeBonusTokensByList"" -> ""1730_onlyOwner"";
}
"
0x74263f99e21db7c38a319e8ed40bfeca2da791f5.sol,CORENET,contract CORENET is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 36000000 * (10**18); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; function CORENET () { owner = msg.sender; },1,"subgraph cluster_756_CORENET {
label=""CORENET"";
""756_transfer"" [label=""transfer""];
""756_approve"" [label=""approve""];
""756_setOwner"" [label=""setOwner""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_totalSupply"" [label=""totalSupply""];
""756_transferFrom"" [label=""transferFrom""];
""756_refundTokens"" [label=""refundTokens""];
""756_CORENET"" [label=""CORENET""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_createTokens"" [label=""createTokens""];
""756_transfer"" -> ""756_transfer"";
""756_transferFrom"" -> ""756_transferFrom"";
""756_createTokens"" -> ""756_safeAdd"";
""756_approve"" -> ""756_approve"";
""756_createTokens"" -> ""756_safeSub"";
""756_approve"" -> ""756_allowance"";
}
"
0x18dc28340ddde25fa8c3b51f5d6a82b1706c8e20.sol,WitnessJury,contract WitnessJury is SafeMath { mapping(address => uint) public balances; uint public limit = 10 ** 16; uint public numWitnessesBeforeLimit = 100; uint public totalBalance; uint public numWitnesses; uint public blockPeriod = 6000; uint public desiredWitnesses = 2; uint public desiredJurors = 3; uint public penalty = 50 * (10 ** 16); address public token; mapping(uint => Request) public requests; uint public numRequests; mapping(uint => uint) public requestsPerBlockGroup; uint public drmVolumeCap = 10000; uint public drmMinFee = 25 * (10 ** 16); uint public drmMaxFee = 50 * (10 ** 16); mapping(uint => bool) public juryNeeded; mapping(uint => mapping(address => bool)) public juryVoted; mapping(uint => uint) public juryYesCount; mapping(uint => uint) public juryNoCount; mapping(uint => address[]) public juryYesVoters; mapping(uint => address[]) public juryNoVoters; struct Request { string key; address witness1; address witness2; string answer1; string answer2; uint winner1; uint winner2; uint fee; address challenge; uint blockNumber; },1,"subgraph cluster_2502_WitnessJury {
label=""WitnessJury"";
""2502_resolve"" [label=""resolve""];
""2502_numRequests"" [label=""numRequests""];
""2502_newRequest"" [label=""newRequest""];
""2502_getWinner1"" [label=""getWinner1""];
""2502_isWitness"" [label=""isWitness""];
""2502_isJuror"" [label=""isJuror""];
""2502_deposit"" [label=""deposit""];
""2502_balanceOf"" [label=""balanceOf""];
""2502_juryNeeded"" [label=""juryNeeded""];
""2502_getWinner2"" [label=""getWinner2""];
""2502_report"" [label=""report""];
""2502_reportLogic"" [label=""reportLogic""];
""2502_withdraw"" [label=""withdraw""];
""2502_getRequest"" [label=""getRequest""];
""2502_WitnessJury"" [label=""WitnessJury""];
""2502_juryVote"" [label=""juryVote""];
""2502_reduceToLimit"" [label=""reduceToLimit""];
""2502_newRequest"" -> ""2502_safeAdd"";
""2502_juryVote"" -> ""2502_safeAdd"";
""2502_reduceToLimit"" -> ""2502_safeSub"";
""2502_reportLogic"" -> ""2502_reduceToLimit"";
""2502_reduceToLimit"" -> ""2502_safeMul"";
""2502_resolve"" -> ""2502_safeMul"";
""2502_juryVote"" -> ""2502_isJuror"";
""2502_resolve"" -> ""2502_safeAdd"";
""2502_report"" -> ""2502_reportLogic"";
""2502_resolve"" -> ""2502_safeSub"";
""2502_deposit"" -> ""2502_safeAdd"";
""2502_newRequest"" -> ""2502_safeMul"";
""2502_withdraw"" -> ""2502_safeSub"";
""2502_newRequest"" -> ""2502_safeSub"";
""2502_report"" -> ""2502_isWitness"";
}
"
0x6a2b112e5314a3462a3df18c0b73a2de14fd6b06.sol,SaleClockAuction,"contract SaleClockAuction is ClockAuction { bool public isSaleClockAuction = true; uint256 public gen0SaleCount; uint256[5] public lastGen0SalePrices; constructor(address _nftAddr, uint256 _cut) public ClockAuction(_nftAddr, _cut) {}",1,"subgraph cluster_3179_SaleClockAuction {
label=""SaleClockAuction"";
""3179_getSeller"" [label=""getSeller""];
""3179_constructor"" [label=""constructor""];
""3179_isSaleClockAuction"" [label=""isSaleClockAuction""];
""3179_createAuction"" [label=""createAuction""];
""3179_bid"" [label=""bid""];
""3179_computeCut"" [label=""computeCut""];
""3179_setGen0SellerAddress"" [label=""setGen0SellerAddress""];
""3179_averageGen0SalePrice"" [label=""averageGen0SalePrice""];
""3179_bidGift"" [label=""bidGift""];
""3179_bidGift"" -> ""3179__transfer"";
""3179_constructor"" -> ""3179_constructor"";
""3179_bidGift"" -> ""3179__bid"";
""3179_createAuction"" -> ""3179__escrow"";
""3179_computeCut"" -> ""3179__computeCut"";
""3179_bid"" -> ""3179__bid"";
""3179_createAuction"" -> ""3179__addAuction"";
""3179_bid"" -> ""3179__transfer"";
}
"
0x567b27ae0d0ea4fca292f447d819aa1b366375c4.sol,DadiMaxCapSale,contract DadiMaxCapSale is Ownable { using SafeMath for uint256; StandardToken public token; address[] public saleWallets; struct WhitelistUser { uint index; },1,"subgraph cluster_1497_DadiMaxCapSale {
label=""DadiMaxCapSale"";
""1497_buyTokens"" [label=""buyTokens""];
""1497_calculateTokens"" [label=""calculateTokens""];
""1497_closeSale"" [label=""closeSale""];
""1497_DadiMaxCapSale"" [label=""DadiMaxCapSale""];
""1497_getTokensPurchased"" [label=""getTokensPurchased""];
""1497_getWhitelistUser"" [label=""getWhitelistUser""];
""1497_finalizeSale"" [label=""finalizeSale""];
""1497_distributeToAlternateAddress"" [label=""distributeToAlternateAddress""];
""1497_setState"" [label=""setState""];
""1497_isValidContribution"" [label=""isValidContribution""];
""1497_getInvestor"" [label=""getInvestor""];
""1497_addWhitelistUsers"" [label=""addWhitelistUsers""];
""1497_isWhitelisted"" [label=""isWhitelisted""];
""1497_isSuccessful"" [label=""isSuccessful""];
""1497_forwardFunds"" [label=""forwardFunds""];
""1497_addWhitelistUser"" [label=""addWhitelistUser""];
""1497_startSale"" [label=""startSale""];
""1497_isEqualOrBelowCap"" [label=""isEqualOrBelowCap""];
""1497_ethToUsd"" [label=""ethToUsd""];
""1497_setTokenDistribution"" [label=""setTokenDistribution""];
""1497_getInvestorCount"" [label=""getInvestorCount""];
""1497_redistributeTokens"" [label=""redistributeTokens""];
""1497_isInvested"" [label=""isInvested""];
""1497_addToInvestor"" [label=""addToInvestor""];
""1497_distributeTokens"" [label=""distributeTokens""];
""1497_updateSaleParameters"" [label=""updateSaleParameters""];
""1497_getRandom"" [label=""getRandom""];
""1497_getTokensAvailable"" [label=""getTokensAvailable""];
""1497_addSaleWallet"" [label=""addSaleWallet""];
""1497_fallback"" [label=""fallback""];
""1497_addToInvestor"" -> ""1497_isInvested"";
""1497_buyTokens"" -> ""1497_forwardFunds"";
""1497_distributeToAlternateAddress"" -> ""1497_onlyOwner"";
""1497_addWhitelistUsers"" -> ""1497_onlyOwner"";
""1497_buyTokens"" -> ""1497_isValidContribution"";
""1497_fallback"" -> ""1497_buyTokens"";
""1497_distributeTokens"" -> ""1497_onlyOwner"";
""1497_setTokenDistribution"" -> ""1497_onlyOwner"";
""1497_startSale"" -> ""1497_onlyOwner"";
""1497_closeSale"" -> ""1497_updateSaleParameters"";
""1497_isEqualOrBelowCap"" -> ""1497_ethToUsd"";
""1497_getWhitelistUser"" -> ""1497_isWhitelisted"";
""1497_addWhitelistUsers"" -> ""1497_addWhitelistUser"";
""1497_buyTokens"" -> ""1497_updateSaleParameters"";
""1497_buyTokens"" -> ""1497_getTokensAvailable"";
""1497_forwardFunds"" -> ""1497_getRandom"";
""1497_closeSale"" -> ""1497_onlyOwner"";
""1497_finalizeSale"" -> ""1497_forwardFunds"";
""1497_buyTokens"" -> ""1497_calculateTokens"";
""1497_closeSale"" -> ""1497_getTokensAvailable"";
""1497_buyTokens"" -> ""1497_addToInvestor"";
""1497_isValidContribution"" -> ""1497_isEqualOrBelowCap"";
""1497_addWhitelistUser"" -> ""1497_isWhitelisted"";
""1497_addSaleWallet"" -> ""1497_onlyOwner"";
""1497_fallback"" -> ""1497_nonZero"";
""1497_setState"" -> ""1497_onlyOwner"";
""1497_finalizeSale"" -> ""1497_onlyOwner"";
""1497_redistributeTokens"" -> ""1497_onlyOwner"";
""1497_getInvestor"" -> ""1497_isInvested"";
""1497_addWhitelistUser"" -> ""1497_onlyOwner"";
""1497_isValidContribution"" -> ""1497_isWhitelisted"";
}
"
0x470142a1834438515b757118f322703aba6e1e05.sol,PolicyPalNetworkAirdrop,contract PolicyPalNetworkAirdrop { struct BountyType { bool twitter; bool signature; },1,"subgraph cluster_662_PolicyPalNetworkAirdrop {
label=""PolicyPalNetworkAirdrop"";
""662_signatureDropMultipleAmount"" [label=""signatureDropMultipleAmount""];
""662_airDropSingleAmount"" [label=""airDropSingleAmount""];
""662_twitterDropSingleAmount"" [label=""twitterDropSingleAmount""];
""662_signatureDropSingleAmount"" [label=""signatureDropSingleAmount""];
""662_emergencyDrain"" [label=""emergencyDrain""];
""662_twitterDropMultipleAmount"" [label=""twitterDropMultipleAmount""];
""662_PolicyPalNetworkAirdrop"" [label=""PolicyPalNetworkAirdrop""];
""662_airDropMultipleAmount"" [label=""airDropMultipleAmount""];
""662_twitterDropSingleAmount"" -> ""662_onlyAdmin"";
""662_signatureDropSingleAmount"" -> ""662_validBalance"";
""662_airDropSingleAmount"" -> ""662_onlyAdmin"";
""662_emergencyDrain"" -> ""662_onlyAdmin"";
""662_signatureDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_airDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropSingleAmount"" -> ""662_validBalance"";
""662_signatureDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_signatureDropSingleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropSingleAmount"" -> ""662_validBalance"";
""662_PolicyPalNetworkAirdrop"" -> ""662_validAddress"";
""662_twitterDropMultipleAmount"" -> ""662_onlyAdmin"";
}
"
0xd41ee3317467ab60109d76d6360807777c10afd7.sol,ZJLTTokenVault,"contract ZJLTTokenVault is Ownable { using SafeMath for uint256; address public teamWallet = 0x1fd4C9206715703c209651c215f506555a40b7C0; uint256 public startLockTime; uint256 public totalAlloc = 25 * 10 ** 18; uint256 public perValue = 20833333 * 10 ** 11; uint256 public timeLockPeriod = 30 days; uint256 public teamVestingStages = 12; uint256 public latestUnlockStage = 0; mapping (address => uint256) public lockBalance; ZJLTToken public token; bool public isExec; event Alloc(address _wallet, uint256 _value); event Claim(address _wallet, uint256 _value); modifier unLocked { uint256 nextStage = latestUnlockStage.add(1); require(startLockTime > 0 && now >= startLockTime.add(nextStage.mul(timeLockPeriod))); _; }",1,"subgraph cluster_1216_ZJLTTokenVault {
label=""ZJLTTokenVault"";
""1216_isUnlocked"" [label=""isUnlocked""];
""1216_alloc"" [label=""alloc""];
""1216_ZJLTTokenVault"" [label=""ZJLTTokenVault""];
""1216_claim"" [label=""claim""];
""1216_claim"" -> ""1216_unLocked"";
""1216_claim"" -> ""1216_onlyOwner"";
""1216_alloc"" -> ""1216_onlyOwner"";
""1216_alloc"" -> ""1216_unExecd"";
}
"
0x742686bb1b136b396b59818f42e47a4fc3509394.sol,CommonSale,contract CommonSale is StagedCrowdsale { address public multisigWallet; address public foundersTokensWallet; address public bountyTokensWallet; uint public foundersPercent; uint public bountyTokensCount; uint public price; uint public percentRate = 100; bool public bountyMinted = false; CommonSale public nextSale; MintableToken public token; function setToken(address newToken) onlyOwner { token = MintableToken(newToken); },1,"subgraph cluster_1324_CommonSale {
label=""CommonSale"";
""1324_fallback"" [label=""fallback""];
""1324_finishMinting"" [label=""finishMinting""];
""1324_mintBounty"" [label=""mintBounty""];
""1324_setPrice"" [label=""setPrice""];
""1324_setNextSale"" [label=""setNextSale""];
""1324_setBountyTokensWallet"" [label=""setBountyTokensWallet""];
""1324_setPercentRate"" [label=""setPercentRate""];
""1324_setFoundersTokensWallet"" [label=""setFoundersTokensWallet""];
""1324_setBountyTokensCount"" [label=""setBountyTokensCount""];
""1324_setMultisigWallet"" [label=""setMultisigWallet""];
""1324_retrieveTokens"" [label=""retrieveTokens""];
""1324_createTokens"" [label=""createTokens""];
""1324_setFoundersPercent"" [label=""setFoundersPercent""];
""1324_setToken"" [label=""setToken""];
""1324_setToken"" -> ""1324_onlyOwner"";
""1324_retrieveTokens"" -> ""1324_onlyOwner"";
""1324_mintBounty"" -> ""1324_onlyOwner"";
""1324_setNextSale"" -> ""1324_onlyOwner"";
""1324_setBountyTokensWallet"" -> ""1324_onlyOwner"";
""1324_finishMinting"" -> ""1324_whenNotPaused"";
""1324_setPercentRate"" -> ""1324_onlyOwner"";
""1324_setBountyTokensCount"" -> ""1324_onlyOwner"";
""1324_setFoundersTokensWallet"" -> ""1324_onlyOwner"";
""1324_setPrice"" -> ""1324_onlyOwner"";
""1324_setFoundersPercent"" -> ""1324_onlyOwner"";
""1324_mintBounty"" -> ""1324_whenNotPaused"";
""1324_finishMinting"" -> ""1324_onlyOwner"";
""1324_createTokens"" -> ""1324_currentMilestone"";
""1324_createTokens"" -> ""1324_isUnderHardCap"";
""1324_createTokens"" -> ""1324_saleIsOn"";
""1324_createTokens"" -> ""1324_whenNotPaused"";
""1324_setMultisigWallet"" -> ""1324_onlyOwner"";
""1324_fallback"" -> ""1324_createTokens"";
}
"
0x2d3e7d4870a51b918919e7b851fe19983e4c38d5.sol,FreezeTokensWallet,contract FreezeTokensWallet is Ownable { using SafeMath for uint256; MintableToken public token; bool public started; uint public startLockPeriod = 180 days; uint public period = 360 days; uint public duration = 90 days; uint public startUnlock; uint public retrievedTokens; uint public startBalance; modifier notStarted() { require(!started); _; },1,"subgraph cluster_943_FreezeTokensWallet {
label=""FreezeTokensWallet"";
""943_setPeriod"" [label=""setPeriod""];
""943_setDuration"" [label=""setDuration""];
""943_setToken"" [label=""setToken""];
""943_retrieveTokens"" [label=""retrieveTokens""];
""943_setStartLockPeriod"" [label=""setStartLockPeriod""];
""943_start"" [label=""start""];
""943_setDuration"" -> ""943_onlyOwner"";
""943_start"" -> ""943_notStarted"";
""943_retrieveTokens"" -> ""943_onlyOwner"";
""943_setPeriod"" -> ""943_notStarted"";
""943_setStartLockPeriod"" -> ""943_notStarted"";
""943_setToken"" -> ""943_onlyOwner"";
""943_start"" -> ""943_onlyOwner"";
""943_setStartLockPeriod"" -> ""943_onlyOwner"";
""943_setDuration"" -> ""943_notStarted"";
""943_setPeriod"" -> ""943_onlyOwner"";
""943_setToken"" -> ""943_notStarted"";
}
"
0x4c478ac32725872e30bca49957abc7dbb325cb21.sol,daocrowdsale,"contract daocrowdsale is Ownable { using SafeMath for uint256; bytes32 constant password = keccak256(); bytes32 constant fin = keccak256(); COIN public DAO; uint256 public constant price = 500 finney; enum State {READY, LAUNCHED, STAGE1, STAGE2, STAGE3, FAIL}",1,"subgraph cluster_1086_daocrowdsale {
label=""daocrowdsale"";
""1086_TimeCheck"" [label=""TimeCheck""];
""1086_fallback"" [label=""fallback""];
""1086_masterBalanceOf"" [label=""masterBalanceOf""];
""1086_totalCoinSupply"" [label=""totalCoinSupply""];
""1086_buy"" [label=""buy""];
""1086_masterFns"" [label=""masterFns""];
""1086_StateShift"" [label=""StateShift""];
""1086_daocrowdsale"" [label=""daocrowdsale""];
""1086_StartNewStage"" [label=""StartNewStage""];
""1086_GetCurrentState"" [label=""GetCurrentState""];
""1086_masterBalanceOf"" -> ""1086_IsOutdated"";
""1086_buy"" -> ""1086_IsBought"";
""1086_masterBalanceOf"" -> ""1086_IsBought"";
""1086_buy"" -> ""1086_IsOutdated"";
}
"
0xdc919494349e803fbd2d4064106944418381edb3.sol,DSToken,"contract DSToken is DSTokenBase(0), DSStop { bytes32 public symbol; uint256 public decimals = 18; function DSToken(bytes32 symbol_) public { symbol = symbol_; }",1,"subgraph cluster_780_DSTokenBase {
label=""DSTokenBase"";
""780_totalSupply"" [label=""totalSupply""];
""780_balanceOf"" [label=""balanceOf""];
""780_transfer"" [label=""transfer""];
""780_approve"" [label=""approve""];
""780_allowance"" [label=""allowance""];
""780_DSTokenBase"" [label=""DSTokenBase""];
""780_transferFrom"" [label=""transferFrom""];
""780_transferFrom"" -> ""780_sub"";
""780_transfer"" -> ""780_transferFrom"";
""780_transferFrom"" -> ""780_add"";
}
"
0x0e6f6ed4581d25944d8c6a595b9f50e11431b754.sol,PaymentHolder,contract PaymentHolder is Ownable { modifier onlyAllowed() { require(allowed[msg.sender]); _; },1,"subgraph cluster_1744_PaymentHolder {
label=""PaymentHolder"";
""1744_prohibit"" [label=""prohibit""];
""1744_update"" [label=""update""];
""1744_setUpdater"" [label=""setUpdater""];
""1744_withdrawEth"" [label=""withdrawEth""];
""1744_migrate"" [label=""migrate""];
""1744_depositEth"" [label=""depositEth""];
""1744_withdrawToken"" [label=""withdrawToken""];
""1744_allow"" [label=""allow""];
""1744_setUpdater"" -> ""1744_onlyOwner"";
""1744_depositEth"" -> ""1744_onlyAllowed"";
""1744_withdrawEth"" -> ""1744_onlyAllowed"";
""1744_withdrawToken"" -> ""1744_onlyAllowed"";
""1744_update"" -> ""1744_onlyUpdater"";
""1744_prohibit"" -> ""1744_onlyOwner"";
""1744_migrate"" -> ""1744_onlyOwner"";
""1744_allow"" -> ""1744_onlyOwner"";
}
"
0x8615ddfe9d4c9e58abff01c999731f3e9e556e80.sol,DAPBOXToken,"contract DAPBOXToken is FrozenToken { string public name = ; string public symbol = ; uint8 public decimals = 0; string public version = ; string public publisher = ""https: string public description = ; bool public acceptAdminWithdraw = false; bool public acceptDonate = true; event InfoChanged(address indexed sender, string version, string publisher, string description); event Withdraw(address indexed sender, address indexed wallet, uint256 amount); event WithdrawTokens(address indexed sender, address indexed wallet, address indexed token, uint256 amount); event Donate(address indexed sender, uint256 value); event PropsChanged(address indexed sender, string props, bool oldValue, bool newValue); function setupInfo(string _version, string _publisher, string _description) authLevel(Level.ADMIN) notEmpty(_version) notEmpty(_publisher) notEmpty(_description) public { version = _version; publisher = _publisher; description = _description; InfoChanged(msg.sender, _version, _publisher, _description); }",1,"subgraph cluster_2219_DAPBOXToken {
label=""DAPBOXToken"";
""2219_donate"" [label=""donate""];
""2219_setupInfo"" [label=""setupInfo""];
""2219_updAcceptDonate"" [label=""updAcceptDonate""];
""2219_balanceToken"" [label=""balanceToken""];
""2219_fallback"" [label=""fallback""];
""2219_updAcceptAdminWithdraw"" [label=""updAcceptAdminWithdraw""];
""2219_withdrawAmount"" [label=""withdrawAmount""];
""2219_withdraw"" [label=""withdraw""];
""2219_withdrawTokens"" [label=""withdrawTokens""];
""2219_withdrawTokens"" -> ""2219_greaterThanZero"";
""2219_donate"" -> ""2219_greaterThanZero"";
""2219_withdrawTokens"" -> ""2219_authLevel"";
""2219_withdraw"" -> ""2219_withdrawAmount"";
""2219_setupInfo"" -> ""2219_notEmpty"";
""2219_updAcceptAdminWithdraw"" -> ""2219_onlyOwner"";
""2219_balanceToken"" -> ""2219_validAddress"";
""2219_fallback"" -> ""2219_donate"";
""2219_withdrawAmount"" -> ""2219_greaterThanZero"";
""2219_withdrawAmount"" -> ""2219_authLevel"";
""2219_withdrawTokens"" -> ""2219_validAddress"";
""2219_updAcceptDonate"" -> ""2219_authLevel"";
""2219_setupInfo"" -> ""2219_authLevel"";
""2219_withdrawAmount"" -> ""2219_validBalanceThis"";
}
"
0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol,NamiCrowdSale,"contract NamiCrowdSale { using SafeMath for uint256; function NamiCrowdSale(address _escrow, address _namiMultiSigWallet, address _namiPresale) public { require(_namiMultiSigWallet != 0x0); escrow = _escrow; namiMultiSigWallet = _namiMultiSigWallet; namiPresale = _namiPresale; }",1,"subgraph cluster_2588_NamiCrowdSale {
label=""NamiCrowdSale"";
""2588_buy"" [label=""buy""];
""2588_transferForTeam"" [label=""transferForTeam""];
""2588_balanceOf"" [label=""balanceOf""];
""2588_changeBinaryAddress"" [label=""changeBinaryAddress""];
""2588_changeTransferable"" [label=""changeTransferable""];
""2588_transferToBuyer"" [label=""transferToBuyer""];
""2588_changeBinary"" [label=""changeBinary""];
""2588_setCrowdsaleManager"" [label=""setCrowdsaleManager""];
""2588_changeEscrow"" [label=""changeEscrow""];
""2588__transfer"" [label=""_transfer""];
""2588_transferToExchange"" [label=""transferToExchange""];
""2588_NamiCrowdSale"" [label=""NamiCrowdSale""];
""2588_approve"" [label=""approve""];
""2588_transferFrom"" [label=""transferFrom""];
""2588_approveAndCall"" [label=""approveAndCall""];
""2588__migrateToken"" [label=""_migrateToken""];
""2588_withdrawEther"" [label=""withdrawEther""];
""2588_getPrice"" [label=""getPrice""];
""2588_burnTokens"" [label=""burnTokens""];
""2588_migrateToken"" [label=""migrateToken""];
""2588_transfer"" [label=""transfer""];
""2588_safeWithdraw"" [label=""safeWithdraw""];
""2588_allowance"" [label=""allowance""];
""2588_migrateForInvestor"" [label=""migrateForInvestor""];
""2588_setPresalePhase"" [label=""setPresalePhase""];
""2588_fallback"" [label=""fallback""];
""2588_setPresalePhase"" -> ""2588_onlyEscrow"";
""2588_transfer"" -> ""2588_onlyTranferable"";
""2588_changeEscrow"" -> ""2588_onlyNamiMultisig"";
""2588_migrateToken"" -> ""2588_onlyEscrow"";
""2588_fallback"" -> ""2588_buy"";
""2588_burnTokens"" -> ""2588_onlyCrowdsaleManager"";
""2588_withdrawEther"" -> ""2588_onlyEscrow"";
""2588_approveAndCall"" -> ""2588_approve"";
""2588_buy"" -> ""2588_getPrice"";
""2588_approve"" -> ""2588_onlyTranferable"";
""2588_transferForTeam"" -> ""2588_onlyEscrow"";
""2588_transfer"" -> ""2588__transfer"";
""2588_approveAndCall"" -> ""2588_onlyTranferable"";
""2588_safeWithdraw"" -> ""2588_onlyEscrow"";
""2588_transferFrom"" -> ""2588_onlyTranferable"";
""2588_changeBinary"" -> ""2588_onlyEscrow"";
""2588_transferForTeam"" -> ""2588__transfer"";
""2588_migrateForInvestor"" -> ""2588__migrateToken"";
""2588_migrateToken"" -> ""2588__migrateToken"";
""2588_setCrowdsaleManager"" -> ""2588_onlyEscrow"";
""2588_changeTransferable"" -> ""2588_onlyEscrow"";
""2588_transferFrom"" -> ""2588__transfer"";
""2588_changeBinaryAddress"" -> ""2588_onlyEscrow"";
}
"
0x57775c09b07896b979bb192b1b13df5a268757bd.sol,FutureTokenSaleLockBox,"contract FutureTokenSaleLockBox is Owned { using SafeMath for uint256; ERC20Interface public simpleToken; TokenSaleInterface public tokenSale; uint256 public unlockDate; event UnlockDateExtended(uint256 _newDate); event TokensTransferred(address indexed _to, uint256 _value); function FutureTokenSaleLockBox(ERC20Interface _simpleToken, TokenSaleInterface _tokenSale) Owned() public { require(address(_simpleToken) != address(0)); require(address(_tokenSale) != address(0)); simpleToken = _simpleToken; tokenSale = _tokenSale; uint256 endTime = tokenSale.endTime(); require(endTime > 0); unlockDate = endTime.add(26 weeks); }",1,"subgraph cluster_439_FutureTokenSaleLockBox {
label=""FutureTokenSaleLockBox"";
""439_currentTime"" [label=""currentTime""];
""439_hasUnlockDatePassed"" [label=""hasUnlockDatePassed""];
""439_FutureTokenSaleLockBox"" [label=""FutureTokenSaleLockBox""];
""439_transfer"" [label=""transfer""];
""439_extendUnlockDate"" [label=""extendUnlockDate""];
""439_transfer"" -> ""439_onlyAfterUnlockDate"";
""439_hasUnlockDatePassed"" -> ""439_currentTime"";
""439_extendUnlockDate"" -> ""439_onlyOwner"";
""439_transfer"" -> ""439_onlyOwner"";
""439_FutureTokenSaleLockBox"" -> ""439_Owned"";
}
"
0xd1569ffd7ca4393311f66110e6f87184c4817113.sol,LudumAirdrop,"contract LudumAirdrop is Ownable { Token token; event TransferredToken(address indexed to, uint256 value); event FailedTransfer(address indexed to, uint256 value); modifier whenDropIsActive() { assert(isActive()); _; }",1,"subgraph cluster_281_LudumAirdrop {
label=""LudumAirdrop"";
""281_sendInternally"" [label=""sendInternally""];
""281_sendLudumToSingle"" [label=""sendLudumToSingle""];
""281_isActive"" [label=""isActive""];
""281_LudumAirdrop"" [label=""LudumAirdrop""];
""281_tokensAvailable"" [label=""tokensAvailable""];
""281_sendLudumToMany"" [label=""sendLudumToMany""];
""281_sendRemainsToOwner"" [label=""sendRemainsToOwner""];
""281_sendLudumToMany"" -> ""281_onlyOwner"";
""281_sendLudumToSingle"" -> ""281_onlyOwner"";
""281_sendInternally"" -> ""281_tokensAvailable"";
""281_sendRemainsToOwner"" -> ""281_onlyOwner"";
""281_sendLudumToMany"" -> ""281_whenDropIsActive"";
""281_sendRemainsToOwner"" -> ""281_tokensAvailable"";
""281_sendLudumToMany"" -> ""281_sendInternally"";
""281_sendLudumToSingle"" -> ""281_whenDropIsActive"";
""281_isActive"" -> ""281_tokensAvailable"";
""281_sendLudumToSingle"" -> ""281_sendInternally"";
}
"
0x0e752b742f744fdc2d93774da44c37b72c3e6952.sol,CraftyCrowdsale,"contract CraftyCrowdsale is Pausable { using SafeMath for uint256; mapping(address => uint256) received; MintableToken public token; uint256 public preSaleStart; uint256 public preSaleEnd; uint256 public saleStart; uint256 public saleEnd; uint256 public issuedTokens = 0; uint256 public constant hardCap = 5000000000 * 10**8; uint256 constant teamCap = 1450000000 * 10**8; uint256 constant advisorCap = 450000000 * 10**8; uint256 constant bountyCap = 100000000 * 10**8; uint256 constant fundCap = 3000000000 * 10**8; uint256 constant lockTime = 180 days; address public etherWallet; address public teamWallet; address public advisorWallet; address public fundWallet; address public bountyWallet; TokenTimelock teamTokens; uint256 public rate; enum State { BEFORE_START, SALE, REFUND, CLOSED }",1,"subgraph cluster_1475_CraftyCrowdsale {
label=""CraftyCrowdsale"";
""1475_releaseTeamTokens"" [label=""releaseTeamTokens""];
""1475_setWallets"" [label=""setWallets""];
""1475_setRate"" [label=""setRate""];
""1475_enableRefund"" [label=""enableRefund""];
""1475_receivedFrom"" [label=""receivedFrom""];
""1475_getRate"" [label=""getRate""];
""1475_generateTokens"" [label=""generateTokens""];
""1475_claimRefund"" [label=""claimRefund""];
""1475_reclaimEther"" [label=""reclaimEther""];
""1475_buyTokens"" [label=""buyTokens""];
""1475_CraftyCrowdsale"" [label=""CraftyCrowdsale""];
""1475_fallback"" [label=""fallback""];
""1475_finishCrowdsale"" [label=""finishCrowdsale""];
""1475_finishCrowdsale"" -> ""1475_inState"";
""1475_setWallets"" -> ""1475_inState"";
""1475_buyTokens"" -> ""1475_whenNotPaused"";
""1475_setRate"" -> ""1475_onlyOwner"";
""1475_claimRefund"" -> ""1475_whenNotPaused"";
""1475_buyTokens"" -> ""1475_saleIsOn"";
""1475_buyTokens"" -> ""1475_getRate"";
""1475_enableRefund"" -> ""1475_inState"";
""1475_enableRefund"" -> ""1475_onlyOwner"";
""1475_setRate"" -> ""1475_beforeSale"";
""1475_claimRefund"" -> ""1475_inState"";
""1475_reclaimEther"" -> ""1475_onlyOwner"";
""1475_finishCrowdsale"" -> ""1475_onlyOwner"";
""1475_generateTokens"" -> ""1475_onlyOwner"";
""1475_setWallets"" -> ""1475_onlyOwner"";
""1475_fallback"" -> ""1475_buyTokens"";
}
"
0x1fd2a7194c6bdc3c8f2c3b59b73f008a8f7a4818.sol,TokenTimelock,contract TokenTimelock is Ownable { using SafeERC20 for ERC20; using SafeMath for uint256; ERC20 public token; mapping(address => uint256) public balances; mapping(address => uint256) public releaseTime; constructor(ERC20 _token) public { token = _token; },1,"subgraph cluster_434_TokenTimelock {
label=""TokenTimelock"";
""434_constructor"" [label=""constructor""];
""434_getTokens"" [label=""getTokens""];
""434_addTokens"" [label=""addTokens""];
""434_addTokens"" -> ""434_onlyOwner"";
}
"
0x486cf19a550e2814aef970b14e509e93209a0151.sol,EventChainCrowdsale,"contract EventChainCrowdsale is Haltable { using SafeMath for uint256; enum State{Preparing, Prepared, Presale, Phase1, Phase2, Closed}",1,"subgraph cluster_1228_EventChainCrowdsale {
label=""EventChainCrowdsale"";
""1228_closeCrowdsale"" [label=""closeCrowdsale""];
""1228_startPhase2"" [label=""startPhase2""];
""1228_startPresale"" [label=""startPresale""];
""1228_EventChainCrowdsale"" [label=""EventChainCrowdsale""];
""1228_fallback"" [label=""fallback""];
""1228_mintFounderTokens"" [label=""mintFounderTokens""];
""1228_startPhase1"" [label=""startPhase1""];
""1228_currentStateToString"" [label=""currentStateToString""];
""1228_closeCrowdsale"" -> ""1228_inState"";
""1228_startPresale"" -> ""1228_inState"";
""1228_fallback"" -> ""1228_onlyWhenCrowdsaleIsOpen"";
""1228_fallback"" -> ""1228_requiresMinimumInvest"";
""1228_fallback"" -> ""1228_currentStateToString"";
""1228_startPhase1"" -> ""1228_onlyOwner"";
""1228_mintFounderTokens"" -> ""1228_inState"";
""1228_fallback"" -> ""1228_stopInEmergency"";
""1228_mintFounderTokens"" -> ""1228_onlyOwner"";
""1228_startPhase2"" -> ""1228_onlyOwner"";
""1228_closeCrowdsale"" -> ""1228_onlyOwner"";
""1228_startPhase2"" -> ""1228_inState"";
""1228_startPresale"" -> ""1228_onlyOwner"";
""1228_startPhase1"" -> ""1228_inState"";
}
"
0x35a1700ac75f6e9e096d9a5c90e3221b658096e0.sol,SpendableWallet,"contract SpendableWallet is Ownable { ERC20 public token; event ClaimedTokens( address indexed _token, address indexed _controller, uint256 _amount ); constructor(address _token, address _owner) public { token = ERC20(_token); owner = _owner; }",1,"subgraph cluster_307_SpendableWallet {
label=""SpendableWallet"";
""307_claimTokens"" [label=""claimTokens""];
""307_spend"" [label=""spend""];
""307_constructor"" [label=""constructor""];
""307_claimTokens"" -> ""307_onlyOwner"";
""307_spend"" -> ""307_onlyOwner"";
}
"
0x6a2b112e5314a3462a3df18c0b73a2de14fd6b06.sol,SaleClockAuction,"contract SaleClockAuction is ClockAuction { bool public isSaleClockAuction = true; uint256 public gen0SaleCount; uint256[5] public lastGen0SalePrices; constructor(address _nftAddr, uint256 _cut) public ClockAuction(_nftAddr, _cut) {}",1,"subgraph cluster_3179_SaleClockAuction {
label=""SaleClockAuction"";
""3179_getSeller"" [label=""getSeller""];
""3179_constructor"" [label=""constructor""];
""3179_isSaleClockAuction"" [label=""isSaleClockAuction""];
""3179_createAuction"" [label=""createAuction""];
""3179_bid"" [label=""bid""];
""3179_computeCut"" [label=""computeCut""];
""3179_setGen0SellerAddress"" [label=""setGen0SellerAddress""];
""3179_averageGen0SalePrice"" [label=""averageGen0SalePrice""];
""3179_bidGift"" [label=""bidGift""];
""3179_bidGift"" -> ""3179__transfer"";
""3179_constructor"" -> ""3179_constructor"";
""3179_bidGift"" -> ""3179__bid"";
""3179_createAuction"" -> ""3179__escrow"";
""3179_computeCut"" -> ""3179__computeCut"";
""3179_bid"" -> ""3179__bid"";
""3179_createAuction"" -> ""3179__addAuction"";
""3179_bid"" -> ""3179__transfer"";
}
"
0x56c945f90c9cd1aafbcac78936f569e5fd2438bf.sol,HeroUp,"contract HeroUp is Ownable, CanReclaimToken { event HeroUpgraded(uint tokenId, address owner); HEROES_OLD public heroesOld; HEROES_NEW public heroesNew; constructor (HEROES_OLD _heroesOld, HEROES_NEW _heroesNew) public { require(address(_heroesOld) != address(0)); require(address(_heroesNew) != address(0)); heroesOld = _heroesOld; heroesNew = _heroesNew; }",1,"subgraph cluster_494_HeroUp {
label=""HeroUp"";
""494_setOld"" [label=""setOld""];
""494_upgrade"" [label=""upgrade""];
""494_constructor"" [label=""constructor""];
""494_fallback"" [label=""fallback""];
""494_setNew"" [label=""setNew""];
""494_setOld"" -> ""494_onlyOwner"";
""494_setNew"" -> ""494_onlyOwner"";
}
"
0x6fc22d1f6852af2bcea6cb749033ccb6b4d3177a.sol,BitSTDView,"contract BitSTDView { BitSTDLogic private logic; address public owner; event Transfer(address indexed from, address indexed to, uint256 value); event FrozenFunds(address target, bool frozen); event Burn(address indexed from, uint256 value); function balanceOf(address add)constant public returns (uint256) { return logic.balanceOf(add); }",1,"subgraph cluster_1510_BitSTDView {
label=""BitSTDView"";
""1510_frozenAccount"" [label=""frozenAccount""];
""1510_decimals"" [label=""decimals""];
""1510_transferFrom"" [label=""transferFrom""];
""1510_buy"" [label=""buy""];
""1510_symbol"" [label=""symbol""];
""1510_mintToken"" [label=""mintToken""];
""1510_buyPrice"" [label=""buyPrice""];
""1510_freezeAccount"" [label=""freezeAccount""];
""1510_transferDataAuthority"" [label=""transferDataAuthority""];
""1510_transferAuthority"" [label=""transferAuthority""];
""1510_approve"" [label=""approve""];
""1510_sellPrice"" [label=""sellPrice""];
""1510_constructor"" [label=""constructor""];
""1510_burn"" [label=""burn""];
""1510_transferLogicAuthority"" [label=""transferLogicAuthority""];
""1510_totalSupply"" [label=""totalSupply""];
""1510_balanceOf"" [label=""balanceOf""];
""1510_migration"" [label=""migration""];
""1510_setBitSTD"" [label=""setBitSTD""];
""1510_transfer"" [label=""transfer""];
""1510_sell"" [label=""sell""];
""1510_allowance"" [label=""allowance""];
""1510_name"" [label=""name""];
""1510_burnFrom"" [label=""burnFrom""];
""1510_approveAndCall"" [label=""approveAndCall""];
""1510_mintToken"" -> ""1510_onlyOwner"";
""1510_transferAuthority"" -> ""1510_onlyOwner"";
""1510_transferLogicAuthority"" -> ""1510_onlyOwner"";
""1510_freezeAccount"" -> ""1510_onlyOwner"";
""1510_setBitSTD"" -> ""1510_onlyOwner"";
""1510_transferDataAuthority"" -> ""1510_onlyOwner"";
}
"
0x32f916bcfae02a2a385ec0219a07fa2374bae7bb.sol,NamiExchange,contract NamiExchange { using SafeMath for uint; function NamiExchange(address _namiAddress) public { NamiAddr = _namiAddress; },1,"subgraph cluster_3104_NamiExchange {
label=""NamiExchange"";
""3104_tokenFallback"" [label=""tokenFallback""];
""3104_closeBidOrder"" [label=""closeBidOrder""];
""3104_NamiExchange"" [label=""NamiExchange""];
""3104_placeBuyOrder"" [label=""placeBuyOrder""];
""3104_tokenFallbackExchange"" [label=""tokenFallbackExchange""];
""3104_fallback"" [label=""fallback""];
""3104_closeAskOrder"" [label=""closeAskOrder""];
""3104_tokenFallbackBuyer"" [label=""tokenFallbackBuyer""];
""3104_buyNac"" [label=""buyNac""];
""3104_tokenFallbackBuyer"" -> ""3104_onlyNami"";
""3104_tokenFallbackExchange"" -> ""3104_onlyNami"";
}
"
0x5af9ec6df6edea0761fa841ce56c2e4deb000b31.sol,ZebiMainCrowdsale,contract ZebiMainCrowdsale is Ownable{ using SafeMath for uint256; ZebiCoin public token; uint256 currentYearMinted; uint256 calenderYearMintCap; uint256 calenderYearStart; uint256 calenderYearEnd; uint256 vestedMintStartTime; uint256 zebiZCOShare; uint256 crowdsaleZCOCap; uint256 transStartTime; ZebiCoinCrowdsale public zcc; ZebiCoinTempMgr public tempMngr; uint64 public tokenDecimals; uint256 public startTime; uint256 public endTime; uint256 public goldListPeriod; uint256 public postGoldPeriod; uint256 public minTransAmount; uint256 public ethCap; mapping(address => uint256) mainContribution; mapping(address => bool) mainCancelledList; uint256 goldPeriodCap; bool goldListPeriodFlag; mapping(address=>uint256) goldListContribution; mapping(address => bool) goldList; mapping(address => bool) kycAcceptedList; address public wallet; bool public withinRefundPeriod; mapping(address => uint256) preSaleRefundsInMainSale; uint256 public tokens; uint256 public weiAmount; uint256 public ETHtoZWeirate; uint256 public mainWeiRaised; modifier inCancelledList { require(mainCancelledList[msg.sender]); _; },1,"subgraph cluster_3258_ZebiMainCrowdsale {
label=""ZebiMainCrowdsale"";
""3258_addCancellation"" [label=""addCancellation""];
""3258_enableRefundPeriod"" [label=""enableRefundPeriod""];
""3258_fallback"" [label=""fallback""];
""3258_viewGoldList"" [label=""viewGoldList""];
""3258_getTokenAmount"" [label=""getTokenAmount""];
""3258_viewContribution"" [label=""viewContribution""];
""3258_transferTokenOwnership"" [label=""transferTokenOwnership""];
""3258_resumeMint"" [label=""resumeMint""];
""3258_addToGoldList"" [label=""addToGoldList""];
""3258_addToKYCList"" [label=""addToKYCList""];
""3258_forwardFunds"" [label=""forwardFunds""];
""3258_withdraw"" [label=""withdraw""];
""3258_validPurchase"" [label=""validPurchase""];
""3258_viewKYCAccepted"" [label=""viewKYCAccepted""];
""3258_mintvestedTokens"" [label=""mintvestedTokens""];
""3258_endTransfer"" [label=""endTransfer""];
""3258_startTransfer"" [label=""startTransfer""];
""3258_viewCancelledList"" [label=""viewCancelledList""];
""3258_takeEth"" [label=""takeEth""];
""3258_disableRefundPeriod"" [label=""disableRefundPeriod""];
""3258_buyTokens"" [label=""buyTokens""];
""3258_viewPreSaleRefundsInMainSale"" [label=""viewPreSaleRefundsInMainSale""];
""3258_removeFromKYCList"" [label=""removeFromKYCList""];
""3258_ZebiMainCrowdsale"" [label=""ZebiMainCrowdsale""];
""3258_forcedRefund"" [label=""forcedRefund""];
""3258_finishMint"" [label=""finishMint""];
""3258_mintAndAllocateZCO"" [label=""mintAndAllocateZCO""];
""3258_refund"" [label=""refund""];
""3258_removeFromGoldList"" [label=""removeFromGoldList""];
""3258_fallback"" -> ""3258_buyTokens"";
""3258_mintAndAllocateZCO"" -> ""3258_onlyOwner"";
""3258_removeFromKYCList"" -> ""3258_onlyOwner"";
""3258_refund"" -> ""3258_inCancelledList"";
""3258_forcedRefund"" -> ""3258_onlyOwner"";
""3258_removeFromGoldList"" -> ""3258_onlyOwner"";
""3258_endTransfer"" -> ""3258_onlyOwner"";
""3258_buyTokens"" -> ""3258_forwardFunds"";
""3258_withdraw"" -> ""3258_onlyOwner"";
""3258_buyTokens"" -> ""3258_validPurchase"";
""3258_startTransfer"" -> ""3258_onlyOwner"";
""3258_refund"" -> ""3258_inRefundPeriod"";
""3258_finishMint"" -> ""3258_onlyOwner"";
""3258_transferTokenOwnership"" -> ""3258_onlyOwner"";
""3258_enableRefundPeriod"" -> ""3258_onlyOwner"";
""3258_mintvestedTokens"" -> ""3258_onlyOwner"";
""3258_disableRefundPeriod"" -> ""3258_onlyOwner"";
""3258_addToGoldList"" -> ""3258_onlyOwner"";
""3258_buyTokens"" -> ""3258_getTokenAmount"";
""3258_addCancellation"" -> ""3258_onlyOwner"";
""3258_addToKYCList"" -> ""3258_onlyOwner"";
""3258_resumeMint"" -> ""3258_onlyOwner"";
}
"
0x26fb86579e371c7aedc461b2ddef0a8628c93d3b.sol,LockedToken,"contract LockedToken { ERC20Basic public token; address public donor; address public beneficiary; uint256 public releaseTime; bool public revocable; event Claim(address beneficiary, uint256 amount, uint256 releaseTime); event Revoke(address donor, uint256 amount); function LockedToken(ERC20Basic _token, address _donor, address _beneficiary, uint256 _releaseTime, bool _revocable) public { require(_token != address(0)); require(_donor != address(0)); require(_beneficiary != address(0)); require(_releaseTime > now); token = ERC20Basic(_token); donor = _donor; beneficiary = _beneficiary; releaseTime = _releaseTime; revocable = _revocable; }",1,"subgraph cluster_1065_LockedToken {
label=""LockedToken"";
""1065_balanceOf"" [label=""balanceOf""];
""1065_claim"" [label=""claim""];
""1065_revoke"" [label=""revoke""];
""1065_LockedToken"" [label=""LockedToken""];
}
"
0x890ee942fdce38034e3d3813344649c77a29e68f.sol,LemonSelfDrop1,contract LemonSelfDrop1 is Ownable { LemonToken public LemonContract; uint8 public dropNumber; uint256 public LemonsDroppedToTheWorld; uint256 public LemonsRemainingToDrop; uint256 public holderAmount; uint256 public basicReward; uint256 public holderReward; mapping (uint8 => uint256[]) donatorReward; uint8 donatorRewardLevels; uint8 public totalDropTransactions; mapping (address => uint8) participants; function LemonSelfDrop1 () { address c = 0x2089899d03607b2192afb2567874a3f287f2f1e4; LemonContract = LemonToken(c); dropNumber = 1; LemonsDroppedToTheWorld = 0; LemonsRemainingToDrop = 0; basicReward = 500; donatorRewardLevels = 1; totalDropTransactions = 0; },1,"subgraph cluster_436_LemonSelfDrop1 {
label=""LemonSelfDrop1"";
""436_withdrawToken"" [label=""withdrawToken""];
""436_setHolderAmount"" [label=""setHolderAmount""];
""436_donatorBonus"" [label=""donatorBonus""];
""436_setDonatorReward"" [label=""setDonatorReward""];
""436_withdrawAll"" [label=""withdrawAll""];
""436_setRewards"" [label=""setRewards""];
""436_updateKittenCoinsRemainingToDrop"" [label=""updateKittenCoinsRemainingToDrop""];
""436_LemonSelfDrop1"" [label=""LemonSelfDrop1""];
""436_setDropNumber"" [label=""setDropNumber""];
""436_fallback"" [label=""fallback""];
""436_participant"" [label=""participant""];
""436_withdrawKittenCoins"" [label=""withdrawKittenCoins""];
""436_fallback"" -> ""436_donatorBonus"";
""436_setRewards"" -> ""436_onlyOwner"";
""436_setDonatorReward"" -> ""436_onlyOwner"";
""436_withdrawKittenCoins"" -> ""436_onlyOwner"";
""436_withdrawToken"" -> ""436_onlyOwner"";
""436_withdrawAll"" -> ""436_onlyOwner"";
""436_setDropNumber"" -> ""436_onlyOwner"";
""436_setHolderAmount"" -> ""436_onlyOwner"";
}
"
0x286bbee3f20f1702e707e58d33dc28a69e7efd4e.sol,Contract,contract Contract is Controller { using SafeMath for uint256; struct Contributor { uint256 balance; uint256 fee; uint8 rounds; bool whitelisted; },1,"subgraph cluster_1157_Contract {
label=""Contract"";
""1157_change_individual_cap"" [label=""change_individual_cap""];
""1157_calculate_with_fees"" [label=""calculate_with_fees""];
""1157_withdraw_my_tokens"" [label=""withdraw_my_tokens""];
""1157_constructor"" [label=""constructor""];
""1157_emergency_token_withdraw"" [label=""emergency_token_withdraw""];
""1157_set_gas_price_max"" [label=""set_gas_price_max""];
""1157_set_allow_refunds"" [label=""set_allow_refunds""];
""1157_set_token_address"" [label=""set_token_address""];
""1157_set_allow_contributions"" [label=""set_allow_contributions""];
""1157_set_whitelist_enabled"" [label=""set_whitelist_enabled""];
""1157_provide_eth"" [label=""provide_eth""];
""1157_refund_my_ether"" [label=""refund_my_ether""];
""1157_partial_refund_my_ether"" [label=""partial_refund_my_ether""];
""1157_whitelist_addys"" [label=""whitelist_addys""];
""1157_refund"" [label=""refund""];
""1157_tokenFallback"" [label=""tokenFallback""];
""1157_fallback"" [label=""fallback""];
""1157_set_percent_reduction"" [label=""set_percent_reduction""];
""1157_emergency_eth_withdraw"" [label=""emergency_eth_withdraw""];
""1157_tokens_received"" [label=""tokens_received""];
""1157_partial_refund"" [label=""partial_refund""];
""1157_withdraw"" [label=""withdraw""];
""1157_change_fee"" [label=""change_fee""];
""1157_set_tokens_received"" [label=""set_tokens_received""];
""1157_take_fees_eth_dev"" [label=""take_fees_eth_dev""];
""1157_set_sale_address"" [label=""set_sale_address""];
""1157_take_fees_eth_owner"" [label=""take_fees_eth_owner""];
""1157_withdraw_tokens_for"" [label=""withdraw_tokens_for""];
""1157_change_max_amount"" [label=""change_max_amount""];
""1157_buy_the_tokens"" [label=""buy_the_tokens""];
""1157_tokenFallback"" -> ""1157_tokens_received"";
""1157_emergency_eth_withdraw"" -> ""1157_onlyOwner"";
""1157_partial_refund_my_ether"" -> ""1157_partial_refund"";
""1157_set_allow_refunds"" -> ""1157_onlyOwner"";
""1157_set_tokens_received"" -> ""1157_tokens_received"";
""1157_fallback"" -> ""1157_underMaxAmount"";
""1157_change_max_amount"" -> ""1157_onlyOwner"";
""1157_whitelist_addys"" -> ""1157_onlyOwner"";
""1157_set_token_address"" -> ""1157_onlyOwner"";
""1157_change_max_amount"" -> ""1157_calculate_with_fees"";
""1157_emergency_token_withdraw"" -> ""1157_onlyOwner"";
""1157_change_individual_cap"" -> ""1157_onlyOwner"";
""1157_constructor"" -> ""1157_calculate_with_fees"";
""1157_set_sale_address"" -> ""1157_onlyOwner"";
""1157_buy_the_tokens"" -> ""1157_take_fees_eth_owner"";
""1157_set_allow_contributions"" -> ""1157_onlyOwner"";
""1157_refund_my_ether"" -> ""1157_refund"";
""1157_change_fee"" -> ""1157_onlyOwner"";
""1157_set_gas_price_max"" -> ""1157_onlyOwner"";
""1157_set_percent_reduction"" -> ""1157_onlyOwner"";
""1157_withdraw_tokens_for"" -> ""1157_withdraw"";
""1157_set_whitelist_enabled"" -> ""1157_onlyOwner"";
""1157_buy_the_tokens"" -> ""1157_take_fees_eth_dev"";
""1157_buy_the_tokens"" -> ""1157_onlyOwner"";
""1157_set_tokens_received"" -> ""1157_onlyOwner"";
""1157_withdraw_my_tokens"" -> ""1157_withdraw"";
}
"
0x65061cfa23aa566316b0215c9eecabeafd4d9e81.sol,Crowdsale,"contract Crowdsale { using SafeMath for uint256; address public wallet; address public addressOfTokenUsedAsReward1; address public addressOfTokenUsedAsReward2; address public addressOfTokenUsedAsReward3; address public addressOfTokenUsedAsReward4; address public addressOfTokenUsedAsReward5; uint256 public price = 7500; token tokenReward1; token tokenReward2; token tokenReward3; token tokenReward4; token tokenReward5; uint256 public weiRaised; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); function Crowdsale() { wallet = 0xE37C4541C34e4A8785DaAA9aEb5005DdD29854ac; addressOfTokenUsedAsReward1 = 0xBD17Dfe402f1Afa41Cda169297F8de48d6Dfb613; addressOfTokenUsedAsReward2 = 0x489DF6493C58642e6a4651dDcd4145eaFBAA1018; addressOfTokenUsedAsReward3 = 0x404a639086eda1B9C8abA3e34a5f8145B4B04ea5; addressOfTokenUsedAsReward4 = 0x00755562Dfc1F409ec05d38254158850E4e8362a; addressOfTokenUsedAsReward5 = 0xE7AE9dc8F5F572e4f80655C4D0Ffe32ec16fF0E3; tokenReward1 = token(addressOfTokenUsedAsReward1); tokenReward2 = token(addressOfTokenUsedAsReward2); tokenReward3 = token(addressOfTokenUsedAsReward3); tokenReward4 = token(addressOfTokenUsedAsReward4); tokenReward5 = token(addressOfTokenUsedAsReward5); }",1,"subgraph cluster_489_Crowdsale {
label=""Crowdsale"";
""489_buyTokens"" [label=""buyTokens""];
""489_withdrawTokens3"" [label=""withdrawTokens3""];
""489_forwardFunds"" [label=""forwardFunds""];
""489_withdrawTokens1"" [label=""withdrawTokens1""];
""489_fallback"" [label=""fallback""];
""489_withdrawTokens4"" [label=""withdrawTokens4""];
""489_withdrawTokens2"" [label=""withdrawTokens2""];
""489_Crowdsale"" [label=""Crowdsale""];
""489_withdrawTokens5"" [label=""withdrawTokens5""];
""489_setPrice"" [label=""setPrice""];
""489_stopSale"" [label=""stopSale""];
""489_startSale"" [label=""startSale""];
""489_changeWallet"" [label=""changeWallet""];
""489_validPurchase"" [label=""validPurchase""];
""489_fallback"" -> ""489_buyTokens"";
""489_buyTokens"" -> ""489_forwardFunds"";
""489_buyTokens"" -> ""489_validPurchase"";
}
"
0x18da8521c333aed9de8f512e847734cb7be42e38.sol,Crowdsale,"contract Crowdsale is Pausable, PullPayment { using SafeMath for uint; struct Backer { uint weiReceived; uint coinSent; }",1,"subgraph cluster_1189_Crowdsale {
label=""Crowdsale"";
""1189_setMultisig"" [label=""setMultisig""];
""1189_drain"" [label=""drain""];
""1189_receiveETH"" [label=""receiveETH""];
""1189_finalize"" [label=""finalize""];
""1189_getRemainCoins"" [label=""getRemainCoins""];
""1189_backProjectXOwner"" [label=""backProjectXOwner""];
""1189_refund"" [label=""refund""];
""1189_Crowdsale"" [label=""Crowdsale""];
""1189_bonus"" [label=""bonus""];
""1189_start"" [label=""start""];
""1189_fallback"" [label=""fallback""];
""1189_finalize"" -> ""1189_onlyOwner"";
""1189_drain"" -> ""1189_onlyOwner"";
""1189_receiveETH"" -> ""1189_bonus"";
""1189_getRemainCoins"" -> ""1189_bonus"";
""1189_backProjectXOwner"" -> ""1189_onlyOwner"";
""1189_fallback"" -> ""1189_stopInEmergency"";
""1189_setMultisig"" -> ""1189_onlyOwner"";
""1189_fallback"" -> ""1189_receiveETH"";
""1189_start"" -> ""1189_onlyOwner"";
""1189_fallback"" -> ""1189_respectTimeFrame"";
""1189_getRemainCoins"" -> ""1189_onlyOwner"";
""1189_refund"" -> ""1189_asyncSend"";
""1189_refund"" -> ""1189_minCapNotReached"";
}
"
0x29880855d419c6fa0e8c7fdfd985c80f286d914e.sol,DadiPublicSale,contract DadiPublicSale is Ownable { using SafeMath for uint256; StandardToken public token; uint256 public tokenSupply; uint256 public tokensPurchased = 0; uint256 public individualCap = 5000 * 1000; uint256 public tokenPrice = 500; uint256 public ethRate; uint256 public maxGasPrice; address[] public saleWallets; mapping(address => Investor) private investors; address[] private investorIndex; struct Investor { uint256 tokens; uint256 contribution; bool distributed; uint index; },1,"subgraph cluster_1481_DadiPublicSale {
label=""DadiPublicSale"";
""1481_fallback"" [label=""fallback""];
""1481_ethToUsd"" [label=""ethToUsd""];
""1481_addSaleWallet"" [label=""addSaleWallet""];
""1481_calculateTokens"" [label=""calculateTokens""];
""1481_distributeToAlternateAddress"" [label=""distributeToAlternateAddress""];
""1481_setTokenDistribution"" [label=""setTokenDistribution""];
""1481_updateMaxGasPrice"" [label=""updateMaxGasPrice""];
""1481_getTokensAvailable"" [label=""getTokensAvailable""];
""1481_startPublicSale"" [label=""startPublicSale""];
""1481_getInvestor"" [label=""getInvestor""];
""1481_getRandom"" [label=""getRandom""];
""1481_forwardFunds"" [label=""forwardFunds""];
""1481_DadiPublicSale"" [label=""DadiPublicSale""];
""1481_offlineTransaction"" [label=""offlineTransaction""];
""1481_finalizeSale"" [label=""finalizeSale""];
""1481_distributeTokens"" [label=""distributeTokens""];
""1481_getInvestorCount"" [label=""getInvestorCount""];
""1481_updateSaleParameters"" [label=""updateSaleParameters""];
""1481_isValidContribution"" [label=""isValidContribution""];
""1481_isBelowCap"" [label=""isBelowCap""];
""1481_isInvested"" [label=""isInvested""];
""1481_addToInvestor"" [label=""addToInvestor""];
""1481_updateEthRate"" [label=""updateEthRate""];
""1481_setState"" [label=""setState""];
""1481_buyTokens"" [label=""buyTokens""];
""1481_closeSale"" [label=""closeSale""];
""1481_redistributeTokens"" [label=""redistributeTokens""];
""1481_getTokensPurchased"" [label=""getTokensPurchased""];
""1481_distributeTokens"" -> ""1481_onlyOwner"";
""1481_redistributeTokens"" -> ""1481_onlyOwner"";
""1481_buyTokens"" -> ""1481_isValidContribution"";
""1481_distributeToAlternateAddress"" -> ""1481_onlyOwner"";
""1481_offlineTransaction"" -> ""1481_updateSaleParameters"";
""1481_buyTokens"" -> ""1481_updateSaleParameters"";
""1481_updateEthRate"" -> ""1481_onlyOwner"";
""1481_setTokenDistribution"" -> ""1481_onlyOwner"";
""1481_startPublicSale"" -> ""1481_updateEthRate"";
""1481_updateMaxGasPrice"" -> ""1481_onlyOwner"";
""1481_closeSale"" -> ""1481_onlyOwner"";
""1481_buyTokens"" -> ""1481_addToInvestor"";
""1481_offlineTransaction"" -> ""1481_onlyOwner"";
""1481_getInvestor"" -> ""1481_isInvested"";
""1481_buyTokens"" -> ""1481_forwardFunds"";
""1481_finalizeSale"" -> ""1481_onlyOwner"";
""1481_fallback"" -> ""1481_nonZero"";
""1481_fallback"" -> ""1481_buyTokens"";
""1481_startPublicSale"" -> ""1481_onlyOwner"";
""1481_isValidContribution"" -> ""1481_isBelowCap"";
""1481_forwardFunds"" -> ""1481_getRandom"";
""1481_closeSale"" -> ""1481_updateSaleParameters"";
""1481_buyTokens"" -> ""1481_getTokensAvailable"";
""1481_addSaleWallet"" -> ""1481_onlyOwner"";
""1481_offlineTransaction"" -> ""1481_getTokensAvailable"";
""1481_addToInvestor"" -> ""1481_isInvested"";
""1481_offlineTransaction"" -> ""1481_addToInvestor"";
""1481_closeSale"" -> ""1481_getTokensAvailable"";
""1481_isBelowCap"" -> ""1481_ethToUsd"";
""1481_setState"" -> ""1481_onlyOwner"";
""1481_buyTokens"" -> ""1481_calculateTokens"";
""1481_finalizeSale"" -> ""1481_forwardFunds"";
}
"
0x302eb72befc8af539432ec32c39423525412748f.sol,ZRSToken,contract ZRSToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 24000000 * (10**18); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; function ZRSToken () { owner = msg.sender; },1,"subgraph cluster_756_ZRSToken {
label=""ZRSToken"";
""756_refundTokens"" [label=""refundTokens""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_ZRSToken"" [label=""ZRSToken""];
""756_transfer"" [label=""transfer""];
""756_createTokens"" [label=""createTokens""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_transferFrom"" [label=""transferFrom""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_totalSupply"" [label=""totalSupply""];
""756_setOwner"" [label=""setOwner""];
""756_approve"" [label=""approve""];
""756_createTokens"" -> ""756_safeSub"";
""756_transferFrom"" -> ""756_transferFrom"";
""756_approve"" -> ""756_allowance"";
""756_transfer"" -> ""756_transfer"";
""756_approve"" -> ""756_approve"";
""756_createTokens"" -> ""756_safeAdd"";
}
"
0x6593a7140f3718efff638b72a9b6083db47ce0d2.sol,Crowdsale,"contract Crowdsale is GuidedByRoles, ERC20Provider{ uint256 constant USER_UNPAUSE_TOKEN_TIMEOUT = 90 days; uint256 constant FORCED_REFUND_TIMEOUT1 = 400 days; uint256 constant FORCED_REFUND_TIMEOUT2 = 600 days; uint256 constant ROUND_PROLONGATE = 90 days; using SafeMath for uint256; enum TokenSaleType {round1, round2}",1,"subgraph cluster_2284_Crowdsale {
label=""Crowdsale"";
""2284_getProfitPercentForData"" [label=""getProfitPercentForData""];
""2284_prolong"" [label=""prolong""];
""2284_weiTotalRaised"" [label=""weiTotalRaised""];
""2284_calcFin"" [label=""calcFin""];
""2284_buyTokens"" [label=""buyTokens""];
""2284_getBeneficiaryCash"" [label=""getBeneficiaryCash""];
""2284_distructVault"" [label=""distructVault""];
""2284_goalReached"" [label=""goalReached""];
""2284_getPartnerCash"" [label=""getPartnerCash""];
""2284_totalSupply"" [label=""totalSupply""];
""2284_setCrowdsalePause"" [label=""setCrowdsalePause""];
""2284_getProfitPercent"" [label=""getProfitPercent""];
""2284_begin"" [label=""begin""];
""2284_finalization"" [label=""finalization""];
""2284_initialize"" [label=""initialize""];
""2284_lokedMint"" [label=""lokedMint""];
""2284_firstMintRound0"" [label=""firstMintRound0""];
""2284_paymentsInOtherCurrency"" [label=""paymentsInOtherCurrency""];
""2284_finalize2"" [label=""finalize2""];
""2284_hasEnded"" [label=""hasEnded""];
""2284_claimRefund"" [label=""claimRefund""];
""2284_initialization"" [label=""initialization""];
""2284_Crowdsale"" [label=""Crowdsale""];
""2284_forwardFunds"" [label=""forwardFunds""];
""2284_weiRaised"" [label=""weiRaised""];
""2284_firstMintRound0For"" [label=""firstMintRound0For""];
""2284_finalize"" [label=""finalize""];
""2284_validPurchase"" [label=""validPurchase""];
""2284_fallback"" [label=""fallback""];
""2284_updateInfo"" [label=""updateInfo""];
""2284_getBonuses"" [label=""getBonuses""];
""2284_setup"" [label=""setup""];
""2284_tokenUnpause"" [label=""tokenUnpause""];
""2284_calcAndGet"" [label=""calcAndGet""];
""2284_tokenPause"" [label=""tokenPause""];
""2284_buyTokens"" -> ""2284_getBonuses"";
""2284_buyTokens"" -> ""2284_forwardFunds"";
""2284_getPartnerCash"" -> ""2284_calcFin"";
""2284_finalize"" -> ""2284_hasEnded"";
""2284_setup"" -> ""2284_begin"";
""2284_goalReached"" -> ""2284_weiRaised"";
""2284_initialize"" -> ""2284_initialization"";
""2284_calcFin"" -> ""2284_weiTotalRaised"";
""2284_updateInfo"" -> ""2284_paymentsInOtherCurrency"";
""2284_buyTokens"" -> ""2284_lokedMint"";
""2284_buyTokens"" -> ""2284_validPurchase"";
""2284_firstMintRound0For"" -> ""2284_begin"";
""2284_tokenUnpause"" -> ""2284_goalReached"";
""2284_weiTotalRaised"" -> ""2284_weiRaised"";
""2284_getProfitPercent"" -> ""2284_getProfitPercentForData"";
""2284_finalization"" -> ""2284_weiRaised"";
""2284_calcAndGet"" -> ""2284_getBeneficiaryCash"";
""2284_getBeneficiaryCash"" -> ""2284_calcFin"";
""2284_hasEnded"" -> ""2284_goalReached"";
""2284_Crowdsale"" -> ""2284_GuidedByRoles"";
""2284_finalize"" -> ""2284_finalization"";
""2284_validPurchase"" -> ""2284_weiRaised"";
""2284_firstMintRound0"" -> ""2284_begin"";
""2284_hasEnded"" -> ""2284_weiRaised"";
""2284_fallback"" -> ""2284_buyTokens"";
""2284_buyTokens"" -> ""2284_getProfitPercent"";
""2284_initialize"" -> ""2284_begin"";
""2284_finalization"" -> ""2284_goalReached"";
}
"
0xcefa3e88393cf17c9b4dc6c9fe5357dfae8036d6.sol,Registry,contract Registry is Ownable { struct ContributorData { bool isActive; uint contributionETH; uint contributionUSD; uint tokensIssued; uint quoteUSD; uint contributionRNTB; },1,"subgraph cluster_639_Registry {
label=""Registry"";
""639_removeContribution"" [label=""removeContribution""];
""639_getContributorAmount"" [label=""getContributorAmount""];
""639_getContributionUSD"" [label=""getContributionUSD""];
""639_editContribution"" [label=""editContribution""];
""639_getContributionTokens"" [label=""getContributionTokens""];
""639_getContributionRNTB"" [label=""getContributionRNTB""];
""639_isActiveContributor"" [label=""isActiveContributor""];
""639_setCompleted"" [label=""setCompleted""];
""639_Registry"" [label=""Registry""];
""639_addContribution"" [label=""addContribution""];
""639_setPermissionManager"" [label=""setPermissionManager""];
""639_getContributionETH"" [label=""getContributionETH""];
""639_addContributor"" [label=""addContributor""];
""639_addRNTBContribution"" [label=""addRNTBContribution""];
""639_getContributorByIndex"" [label=""getContributorByIndex""];
""639_setCompleted"" -> ""639_onlyPermitted"";
""639_addRNTBContribution"" -> ""639_onlyPermitted"";
""639_addContributor"" -> ""639_onlyPermitted"";
""639_addContribution"" -> ""639_onlyPermitted"";
""639_removeContribution"" -> ""639_onlyPermitted"";
""639_setPermissionManager"" -> ""639_onlyOwner"";
""639_editContribution"" -> ""639_onlyPermitted"";
}
"
0x0ce95ef378059f38c5fa21e6d81a5895c0d9911b.sol,Game,contract Game { using GlobalTypes for GlobalTypes.Global; using MarketTypes for MarketTypes.MarketListing; using MissionParametersTypes for MissionParametersTypes.MissionParameters; using GameCommon for GameCommon.LaunchRocketStackFrame; address public m_Owner; AbstractDatabase public m_Database; AbstractGameHidden public m_GameHidden; bool public m_Paused; uint256 constant GlobalCategory = 0; uint256 constant RocketCategory = 1; uint256 constant OwnershipCategory = 2; uint256 constant InventoryCategory = 3; uint256 constant MarketCategory = 4; uint256 constant ProfitFundsCategory = 5; uint256 constant CompetitionFundsCategory = 6; uint256 constant MissionParametersCategory = 7; uint256 constant CompetitionScoresCategory = 8; uint256 constant WithdrawalFundsCategory = 9; uint256 constant ReferralCategory = 10; uint256 constant RocketStockCategory = 11; uint256 constant RocketStockInitializedCategory = 12; address constant NullAddress = 0; uint256 constant MaxCompetitionScores = 10; mapping(uint32 => RocketTypes.StockRocket) m_InitialRockets; modifier OnlyOwner() { require(msg.sender == m_Owner); _; },1,"subgraph cluster_4077_GameCommon {
label=""GameCommon"";
""4077_DeserializeRaw1"" [label=""DeserializeRaw1""];
""4077_DeserializeRaw2"" [label=""DeserializeRaw2""];
""4077_SerializeRaw3"" [label=""SerializeRaw3""];
""4077_DeserializeLaunchRocketStackFrame"" [label=""DeserializeLaunchRocketStackFrame""];
""4077_SerializeRaw1"" [label=""SerializeRaw1""];
""4077_SerializeRaw0"" [label=""SerializeRaw0""];
""4077_SerializeLaunchRocketStackFrame"" [label=""SerializeLaunchRocketStackFrame""];
""4077_DeserializeRaw0"" [label=""DeserializeRaw0""];
""4077_SerializeRaw2"" [label=""SerializeRaw2""];
""4077_DeserializeRaw3"" [label=""DeserializeRaw3""];
""4077_DeserializeLaunchRocketStackFrame"" -> ""4077_DeserializeRaw0"";
""4077_SerializeLaunchRocketStackFrame"" -> ""4077_SerializeRaw0"";
""4077_SerializeLaunchRocketStackFrame"" -> ""4077_SerializeRaw3"";
""4077_DeserializeLaunchRocketStackFrame"" -> ""4077_DeserializeRaw1"";
""4077_DeserializeLaunchRocketStackFrame"" -> ""4077_DeserializeRaw3"";
""4077_DeserializeLaunchRocketStackFrame"" -> ""4077_DeserializeRaw2"";
""4077_SerializeLaunchRocketStackFrame"" -> ""4077_SerializeRaw2"";
""4077_SerializeLaunchRocketStackFrame"" -> ""4077_SerializeRaw1"";
}
"
0xf244176246168f24e3187f7288edbca29267739b.sol,HavvenEscrow,"contract HavvenEscrow is Owned, LimitedSetup(8 weeks), SafeDecimalMath { Havven public havven; mapping(address => uint[2][]) public vestingSchedules; mapping(address => uint) public totalVestedAccountBalance; uint public totalVestedBalance; function HavvenEscrow(address _owner, Havven _havven) Owned(_owner) public { havven = _havven; }",1,"subgraph cluster_4045_HavvenEscrow {
label=""HavvenEscrow"";
""4045_addVestingSchedule"" [label=""addVestingSchedule""];
""4045_getNextVestingTime"" [label=""getNextVestingTime""];
""4045_HavvenEscrow"" [label=""HavvenEscrow""];
""4045_getNextVestingIndex"" [label=""getNextVestingIndex""];
""4045_getVestingScheduleEntry"" [label=""getVestingScheduleEntry""];
""4045_getVestingTime"" [label=""getVestingTime""];
""4045_getVestingQuantity"" [label=""getVestingQuantity""];
""4045_purgeAccount"" [label=""purgeAccount""];
""4045_numVestingEntries"" [label=""numVestingEntries""];
""4045_withdrawHavvens"" [label=""withdrawHavvens""];
""4045_setHavven"" [label=""setHavven""];
""4045_balanceOf"" [label=""balanceOf""];
""4045_appendVestingEntry"" [label=""appendVestingEntry""];
""4045_totalVestedAccountBalance"" [label=""totalVestedAccountBalance""];
""4045_vest"" [label=""vest""];
""4045_getNextVestingEntry"" [label=""getNextVestingEntry""];
""4045_getNextVestingQuantity"" [label=""getNextVestingQuantity""];
""4045_addVestingSchedule"" -> ""4045_onlyOwner"";
""4045_withdrawHavvens"" -> ""4045_onlyOwner"";
""4045_appendVestingEntry"" -> ""4045_onlyOwner"";
""4045_getNextVestingTime"" -> ""4045_getNextVestingIndex"";
""4045_appendVestingEntry"" -> ""4045_safeAdd"";
""4045_getNextVestingIndex"" -> ""4045_numVestingEntries"";
""4045_getNextVestingEntry"" -> ""4045_getNextVestingIndex"";
""4045_vest"" -> ""4045_numVestingEntries"";
""4045_getNextVestingEntry"" -> ""4045_getVestingScheduleEntry"";
""4045_purgeAccount"" -> ""4045_setupFunction"";
""4045_purgeAccount"" -> ""4045_onlyOwner"";
""4045_getNextVestingQuantity"" -> ""4045_getVestingQuantity"";
""4045_getNextVestingIndex"" -> ""4045_getVestingTime"";
""4045_purgeAccount"" -> ""4045_safeSub"";
""4045_getNextVestingTime"" -> ""4045_getVestingTime"";
""4045_appendVestingEntry"" -> ""4045_getVestingTime"";
""4045_setHavven"" -> ""4045_onlyOwner"";
""4045_vest"" -> ""4045_safeSub"";
""4045_getNextVestingTime"" -> ""4045_numVestingEntries"";
""4045_vest"" -> ""4045_getVestingTime"";
""4045_vest"" -> ""4045_safeAdd"";
""4045_addVestingSchedule"" -> ""4045_setupFunction"";
""4045_getNextVestingEntry"" -> ""4045_numVestingEntries"";
""4045_appendVestingEntry"" -> ""4045_setupFunction"";
""4045_withdrawHavvens"" -> ""4045_setupFunction"";
""4045_addVestingSchedule"" -> ""4045_appendVestingEntry"";
""4045_HavvenEscrow"" -> ""4045_Owned"";
""4045_getNextVestingQuantity"" -> ""4045_getNextVestingIndex"";
""4045_vest"" -> ""4045_getVestingQuantity"";
""4045_getNextVestingQuantity"" -> ""4045_numVestingEntries"";
""4045_appendVestingEntry"" -> ""4045_numVestingEntries"";
}
"
0x1c8654c680c3f18a3b3a0ee943d40848a9fffd0d.sol,Crowdsale,"contract Crowdsale { using SafeMath for uint256; using SafeERC20 for ERC20; ERC20 public token; address public wallet; uint256 internal rate; uint256 public weiRaised; event TokenPurchase( address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount ); constructor(address _wallet, ERC20 _token) public { require(_wallet != address(0)); require(_token != address(0)); wallet = _wallet; token = _token; }",1,"subgraph cluster_555_Crowdsale {
label=""Crowdsale"";
""555_fallback"" [label=""fallback""];
""555__updatePurchasingState"" [label=""_updatePurchasingState""];
""555_constructor"" [label=""constructor""];
""555_buyTokens"" [label=""buyTokens""];
""555__getTokenAmount"" [label=""_getTokenAmount""];
""555__deliverTokens"" [label=""_deliverTokens""];
""555__preValidatePurchase"" [label=""_preValidatePurchase""];
""555__processPurchase"" [label=""_processPurchase""];
""555__postValidatePurchase"" [label=""_postValidatePurchase""];
""555__forwardFunds"" [label=""_forwardFunds""];
""555_buyTokens"" -> ""555__getTokenAmount"";
""555_buyTokens"" -> ""555__forwardFunds"";
""555__processPurchase"" -> ""555__deliverTokens"";
""555_buyTokens"" -> ""555__updatePurchasingState"";
""555_buyTokens"" -> ""555__postValidatePurchase"";
""555_fallback"" -> ""555_buyTokens"";
""555_buyTokens"" -> ""555__preValidatePurchase"";
""555_buyTokens"" -> ""555__processPurchase"";
}
"
0x0d853d20b54b8abfacb05fc5e81e8d4395021c01.sol,LxtBountyDistribution,contract LxtBountyDistribution is owned { using SafeMath for uint; LexitToken public LXT; address public LXT_OWNER; uint256 private constant decimalFactor = 10**uint256(18); uint256 public grandTotalClaimed = 0; struct Allocation { uint256 totalAllocated; uint256 amountClaimed; },1,"subgraph cluster_1283_LxtBountyDistribution {
label=""LxtBountyDistribution"";
""1283_transferToken"" [label=""transferToken""];
""1283_LxtBountyDistribution"" [label=""LxtBountyDistribution""];
""1283_updateLxtOwner"" [label=""updateLxtOwner""];
""1283_transferTokens"" [label=""transferTokens""];
""1283_setAllocation"" [label=""setAllocation""];
""1283_setAllocations"" [label=""setAllocations""];
""1283_updateAllocation"" [label=""updateAllocation""];
""1283_setAdmin"" [label=""setAdmin""];
""1283_updateAllocation"" -> ""1283_onlyOwnerOrAdmin"";
""1283_setAdmin"" -> ""1283_onlyOwnerOrAdmin"";
""1283_transferTokens"" -> ""1283_onlyOwnerOrAdmin"";
""1283_setAllocation"" -> ""1283_onlyOwnerOrAdmin"";
""1283_updateLxtOwner"" -> ""1283_onlyOwnerOrAdmin"";
""1283_setAllocations"" -> ""1283_onlyOwnerOrAdmin"";
""1283_transferToken"" -> ""1283_onlyOwnerOrAdmin"";
}
"
0xa1ad52ff49fc70b7920b7d02483a58beb15d492b.sol,FoMo3Dlong,"contract FoMo3Dlong is modularLong { using SafeMath for *; using NameFilter for string; using F3DKeysCalcLong for uint256; address private owner = 0x0c204d9C438553a107B29cdE1d1e7954673b29B3; address private opAddress = 0x0c204d9C438553a107B29cdE1d1e7954673b29B3; address private comAddress = 0x24D160101C72c035287f772a8ac2b744a477F489; PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0x0f717ffff71e639636fcdd33727ee8c17c4724bf); string constant public name = ; string constant public symbol = ; uint256 private rndExtra_ = 0; uint256 constant private rndInit_ = 2 hours; uint256 constant private rndInc_ = 30 seconds; uint256 constant private rndMax_ = 2 hours; uint256 constant private comDropGap_ = 24 hours; uint256 constant private rndNTR_ = 168 hours; uint256 public airDropPot_; uint256 public airDropPot2_; uint256 public airDropTracker_ = 0; uint256 public airDropTracker2_ = 0; uint256 public rID_; uint256 public comReWards_; uint256 public comAirDrop_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => F3Ddatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => F3Ddatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => uint256) public inviteCount_; mapping (address => bool) public addrLock_; mapping (uint256 => F3Ddatasets.Round) public round_; mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping (uint256 => uint256[10]) public lastTen_; mapping (uint256 => uint256) public roundBetCount_; mapping (uint256 => mapping (uint256 =>uint256)) public comDropLastTime_; mapping (uint256 => F3Ddatasets.TeamFee) public fees_; mapping (uint256 => F3Ddatasets.PotSplit) public potSplit_; constructor() public { fees_[0] = F3Ddatasets.TeamFee(48,0); fees_[1] = F3Ddatasets.TeamFee(33,0); fees_[2] = F3Ddatasets.TeamFee(18,0); potSplit_[0] = F3Ddatasets.PotSplit(10,20); potSplit_[1] = F3Ddatasets.PotSplit(5,20); potSplit_[2] = F3Ddatasets.PotSplit(20,20); }",1,"subgraph cluster_5035_FoMo3Dlong {
label=""FoMo3Dlong"";
""5035_shareLastTen"" [label=""shareLastTen""];
""5035_constructor"" [label=""constructor""];
""5035_verifyTeam"" [label=""verifyTeam""];
""5035_receivePlayerInfo"" [label=""receivePlayerInfo""];
""5035_receivePlayerNameList"" [label=""receivePlayerNameList""];
""5035_withdrawEarnings"" [label=""withdrawEarnings""];
""5035_core"" [label=""core""];
""5035_reLoadXaddr"" [label=""reLoadXaddr""];
""5035_buyXname"" [label=""buyXname""];
""5035_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""5035_updateMasks"" [label=""updateMasks""];
""5035_fallback"" [label=""fallback""];
""5035_updateTimer"" [label=""updateTimer""];
""5035_distributeExternal"" [label=""distributeExternal""];
""5035_withdraw"" [label=""withdraw""];
""5035_distributeInternal"" [label=""distributeInternal""];
""5035_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""5035_reLoadXname"" [label=""reLoadXname""];
""5035_getPlayerVaults"" [label=""getPlayerVaults""];
""5035_reLoadCore"" [label=""reLoadCore""];
""5035_getTimeLeft"" [label=""getTimeLeft""];
""5035_updateGenVault"" [label=""updateGenVault""];
""5035_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""5035_buyXid"" [label=""buyXid""];
""5035_affsend"" [label=""affsend""];
""5035_determinePID"" [label=""determinePID""];
""5035_potSwap"" [label=""potSwap""];
""5035_air2"" [label=""air2""];
""5035_endRound"" [label=""endRound""];
""5035_registerNameXID"" [label=""registerNameXID""];
""5035_airdrop2"" [label=""airdrop2""];
""5035_registerNameXname"" [label=""registerNameXname""];
""5035_activate"" [label=""activate""];
""5035_airdrop"" [label=""airdrop""];
""5035_managePlayer"" [label=""managePlayer""];
""5035_iWantXKeys"" [label=""iWantXKeys""];
""5035_registerNameXaddr"" [label=""registerNameXaddr""];
""5035_buyCore"" [label=""buyCore""];
""5035_getBuyPrice"" [label=""getBuyPrice""];
""5035_comDrop"" [label=""comDrop""];
""5035_buyXaddr"" [label=""buyXaddr""];
""5035_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""5035_reLoadXid"" [label=""reLoadXid""];
""5035_endTx"" [label=""endTx""];
""5035_calcKeysReceived"" [label=""calcKeysReceived""];
""5035_reLoadXid"" -> ""5035_isHuman"";
""5035_withdrawEarnings"" -> ""5035_updateGenVault"";
""5035_withdraw"" -> ""5035_isHuman"";
""5035_buyXid"" -> ""5035_isActivated"";
""5035_withdraw"" -> ""5035_isActivated"";
""5035_reLoadXaddr"" -> ""5035_reLoadCore"";
""5035_reLoadCore"" -> ""5035_withdrawEarnings"";
""5035_core"" -> ""5035_air2"";
""5035_buyXaddr"" -> ""5035_isWithinLimits"";
""5035_reLoadXname"" -> ""5035_isHuman"";
""5035_buyXname"" -> ""5035_buyCore"";
""5035_fallback"" -> ""5035_isActivated"";
""5035_registerNameXname"" -> ""5035_isHuman"";
""5035_core"" -> ""5035_comDrop"";
""5035_getPlayerInfoByAddress"" -> ""5035_calcUnMaskedEarnings"";
""5035_core"" -> ""5035_updateTimer"";
""5035_reLoadXid"" -> ""5035_isActivated"";
""5035_buyCore"" -> ""5035_endRound"";
""5035_fallback"" -> ""5035_isHuman"";
""5035_reLoadXaddr"" -> ""5035_verifyTeam"";
""5035_getPlayerVaults"" -> ""5035_calcUnMaskedEarnings"";
""5035_air2"" -> ""5035_airdrop2"";
""5035_reLoadXname"" -> ""5035_reLoadCore"";
""5035_buyXname"" -> ""5035_isHuman"";
""5035_updateGenVault"" -> ""5035_calcUnMaskedEarnings"";
""5035_core"" -> ""5035_airdrop"";
""5035_buyXaddr"" -> ""5035_isActivated"";
""5035_endRound"" -> ""5035_shareLastTen"";
""5035_buyXaddr"" -> ""5035_isHuman"";
""5035_reLoadXaddr"" -> ""5035_isWithinLimits"";
""5035_managePlayer"" -> ""5035_updateGenVault"";
""5035_fallback"" -> ""5035_determinePID"";
""5035_getPlayerVaults"" -> ""5035_getPlayerVaultsHelper"";
""5035_withdraw"" -> ""5035_withdrawEarnings"";
""5035_buyXname"" -> ""5035_verifyTeam"";
""5035_core"" -> ""5035_endTx"";
""5035_reLoadXaddr"" -> ""5035_isActivated"";
""5035_fallback"" -> ""5035_buyCore"";
""5035_reLoadXname"" -> ""5035_verifyTeam"";
""5035_core"" -> ""5035_managePlayer"";
""5035_buyCore"" -> ""5035_core"";
""5035_distributeInternal"" -> ""5035_updateMasks"";
""5035_buyXname"" -> ""5035_isActivated"";
""5035_buyXname"" -> ""5035_determinePID"";
""5035_reLoadXaddr"" -> ""5035_isHuman"";
""5035_core"" -> ""5035_distributeInternal"";
""5035_buyXaddr"" -> ""5035_buyCore"";
""5035_fallback"" -> ""5035_isWithinLimits"";
""5035_buyXaddr"" -> ""5035_verifyTeam"";
""5035_buyXid"" -> ""5035_buyCore"";
""5035_buyXid"" -> ""5035_determinePID"";
""5035_reLoadXid"" -> ""5035_isWithinLimits"";
""5035_withdraw"" -> ""5035_endRound"";
""5035_buyXid"" -> ""5035_isWithinLimits"";
""5035_buyXid"" -> ""5035_verifyTeam"";
""5035_registerNameXID"" -> ""5035_isHuman"";
""5035_distributeExternal"" -> ""5035_affsend"";
""5035_buyXaddr"" -> ""5035_determinePID"";
""5035_reLoadXid"" -> ""5035_verifyTeam"";
""5035_reLoadXname"" -> ""5035_isActivated"";
""5035_reLoadCore"" -> ""5035_core"";
""5035_core"" -> ""5035_distributeExternal"";
""5035_registerNameXaddr"" -> ""5035_isHuman"";
""5035_buyXname"" -> ""5035_isWithinLimits"";
""5035_reLoadXid"" -> ""5035_reLoadCore"";
""5035_reLoadXname"" -> ""5035_isWithinLimits"";
""5035_reLoadCore"" -> ""5035_endRound"";
""5035_buyXid"" -> ""5035_isHuman"";
}
"
0xb602f224523c89c80dd8e970573291c63beeb778.sol,Crowdsale,contract Crowdsale is Ownable{ using SafeMath for uint; uint public decimals = 3; BineuroToken public token; function Crowdsale(address _tokenAddress) public{ token = BineuroToken(_tokenAddress); techSupport = msg.sender; token.setCrowdsaleContract(this); owner = token.getOwner(); },1,"subgraph cluster_685_Crowdsale {
label=""Crowdsale"";
""685_volumeBasedBonus"" [label=""volumeBasedBonus""];
""685_endIco"" [label=""endIco""];
""685_etherToTokens"" [label=""etherToTokens""];
""685_fallback"" [label=""fallback""];
""685_timeBasedBonus"" [label=""timeBasedBonus""];
""685_manualSendTokens"" [label=""manualSendTokens""];
""685_isIco"" [label=""isIco""];
""685_Crowdsale"" [label=""Crowdsale""];
""685_changeIcoFinish"" [label=""changeIcoFinish""];
""685_buy"" [label=""buy""];
""685_fallback"" -> ""685_buy"";
""685_buy"" -> ""685_etherToTokens"";
""685_manualSendTokens"" -> ""685_onlyTechSupport"";
""685_fallback"" -> ""685_isIco"";
""685_changeIcoFinish"" -> ""685_onlyTechSupport"";
""685_etherToTokens"" -> ""685_timeBasedBonus"";
""685_etherToTokens"" -> ""685_volumeBasedBonus"";
}
"
0xa2909e1bcbb24b285741db27a11bfa5706ad4ae5.sol,Crowdsale,"contract Crowdsale is Pausable, PullPayment { using SafeMath for uint; struct Backer { uint weiReceived; uint manusSent; }",1,"subgraph cluster_1178_Crowdsale {
label=""Crowdsale"";
""1178_setMultisig"" [label=""setMultisig""];
""1178_bonus"" [label=""bonus""];
""1178_getRemainManus"" [label=""getRemainManus""];
""1178_refund"" [label=""refund""];
""1178_Crowdsale"" [label=""Crowdsale""];
""1178_drain"" [label=""drain""];
""1178_fallback"" [label=""fallback""];
""1178_receiveETH"" [label=""receiveETH""];
""1178_backManusOwner"" [label=""backManusOwner""];
""1178_start"" [label=""start""];
""1178_finalize"" [label=""finalize""];
""1178_fallback"" -> ""1178_stopInEmergency"";
""1178_receiveETH"" -> ""1178_bonus"";
""1178_fallback"" -> ""1178_receiveETH"";
""1178_backManusOwner"" -> ""1178_onlyOwner"";
""1178_getRemainManus"" -> ""1178_bonus"";
""1178_getRemainManus"" -> ""1178_onlyOwner"";
""1178_start"" -> ""1178_onlyOwner"";
""1178_refund"" -> ""1178_asyncSend"";
""1178_fallback"" -> ""1178_respectTimeFrame"";
""1178_finalize"" -> ""1178_onlyOwner"";
""1178_refund"" -> ""1178_minCapNotReached"";
""1178_setMultisig"" -> ""1178_onlyOwner"";
""1178_drain"" -> ""1178_onlyOwner"";
}
"
0xc4aad17558fa95c8937d0856b2dad74c1a7a095f.sol,AgiCrowdsale,"contract AgiCrowdsale is Ownable, ReentrancyGuard { using SafeMath for uint256; uint256 public firstDayCap; uint256 public cap; uint256 public goal; uint256 public rate; uint256 public constant WEI_TO_COGS = 10**uint256(10); address public wallet; RefundVault public vault; SingularityNetToken public token; uint256 public startTime; uint256 public endTime; uint256 public firstDay; bool public isFinalized = false; uint256 public weiRaised; mapping(address => bool) public whitelist; mapping(address => uint256) public contribution; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); event TokenRelease(address indexed beneficiary, uint256 amount); event TokenRefund(address indexed refundee, uint256 amount); event Finalized(); function AgiCrowdsale( address _token, address _wallet, uint256 _startTime, uint256 _endTime, uint256 _rate, uint256 _cap, uint256 _firstDayCap, uint256 _goal ) { require(_startTime >= getBlockTimestamp()); require(_endTime >= _startTime); require(_rate > 0); require(_goal > 0); require(_cap > 0); require(_wallet != 0x0); vault = new RefundVault(_wallet); token = SingularityNetToken(_token); wallet = _wallet; startTime = _startTime; endTime = _endTime; firstDay = startTime + 1 * 1 days; firstDayCap = _firstDayCap; rate = _rate; goal = _goal; cap = _cap; }",1,"subgraph cluster_1528_AgiCrowdsale {
label=""AgiCrowdsale"";
""1528_getBlockTimestamp"" [label=""getBlockTimestamp""];
""1528_getTokens"" [label=""getTokens""];
""1528_claimUnsold"" [label=""claimUnsold""];
""1528_finalize"" [label=""finalize""];
""1528_capReached"" [label=""capReached""];
""1528_buyTokens"" [label=""buyTokens""];
""1528_validPurchase"" [label=""validPurchase""];
""1528_claimRefund"" [label=""claimRefund""];
""1528_updateWhitelist"" [label=""updateWhitelist""];
""1528_forwardFunds"" [label=""forwardFunds""];
""1528_AgiCrowdsale"" [label=""AgiCrowdsale""];
""1528_goalReached"" [label=""goalReached""];
""1528_fallback"" [label=""fallback""];
""1528_isWhitelisted"" [label=""isWhitelisted""];
""1528_hasEnded"" [label=""hasEnded""];
""1528_claimRefund"" -> ""1528_goalReached"";
""1528_hasEnded"" -> ""1528_capReached"";
""1528_claimUnsold"" -> ""1528_getBlockTimestamp"";
""1528_AgiCrowdsale"" -> ""1528_getBlockTimestamp"";
""1528_buyTokens"" -> ""1528_getTokens"";
""1528_claimUnsold"" -> ""1528_onlyOwner"";
""1528_finalize"" -> ""1528_goalReached"";
""1528_claimRefund"" -> ""1528_nonReentrant"";
""1528_hasEnded"" -> ""1528_getBlockTimestamp"";
""1528_finalize"" -> ""1528_hasEnded"";
""1528_fallback"" -> ""1528_buyTokens"";
""1528_buyTokens"" -> ""1528_validPurchase"";
""1528_validPurchase"" -> ""1528_getBlockTimestamp"";
""1528_buyTokens"" -> ""1528_getBlockTimestamp"";
""1528_updateWhitelist"" -> ""1528_onlyOwner"";
""1528_finalize"" -> ""1528_onlyOwner"";
""1528_buyTokens"" -> ""1528_forwardFunds"";
}
"
0x4160836bd96bf4f2ed931bfefb3e00b3e68ad8f6.sol,PRHXToken,contract PRHXToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 1200000000 * (10**0); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; function PRHXToken () { owner = msg.sender; },1,"subgraph cluster_756_PRHXToken {
label=""PRHXToken"";
""756_transferFrom"" [label=""transferFrom""];
""756_setOwner"" [label=""setOwner""];
""756_PRHXToken"" [label=""PRHXToken""];
""756_totalSupply"" [label=""totalSupply""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_approve"" [label=""approve""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_transfer"" [label=""transfer""];
""756_createTokens"" [label=""createTokens""];
""756_refundTokens"" [label=""refundTokens""];
""756_approve"" -> ""756_approve"";
""756_createTokens"" -> ""756_safeAdd"";
""756_createTokens"" -> ""756_safeSub"";
""756_transferFrom"" -> ""756_transferFrom"";
""756_transfer"" -> ""756_transfer"";
""756_approve"" -> ""756_allowance"";
}
"
0xb602f224523c89c80dd8e970573291c63beeb778.sol,Crowdsale,contract Crowdsale is Ownable{ using SafeMath for uint; uint public decimals = 3; BineuroToken public token; function Crowdsale(address _tokenAddress) public{ token = BineuroToken(_tokenAddress); techSupport = msg.sender; token.setCrowdsaleContract(this); owner = token.getOwner(); },1,"subgraph cluster_685_Crowdsale {
label=""Crowdsale"";
""685_volumeBasedBonus"" [label=""volumeBasedBonus""];
""685_endIco"" [label=""endIco""];
""685_etherToTokens"" [label=""etherToTokens""];
""685_fallback"" [label=""fallback""];
""685_timeBasedBonus"" [label=""timeBasedBonus""];
""685_manualSendTokens"" [label=""manualSendTokens""];
""685_isIco"" [label=""isIco""];
""685_Crowdsale"" [label=""Crowdsale""];
""685_changeIcoFinish"" [label=""changeIcoFinish""];
""685_buy"" [label=""buy""];
""685_fallback"" -> ""685_buy"";
""685_buy"" -> ""685_etherToTokens"";
""685_manualSendTokens"" -> ""685_onlyTechSupport"";
""685_fallback"" -> ""685_isIco"";
""685_changeIcoFinish"" -> ""685_onlyTechSupport"";
""685_etherToTokens"" -> ""685_timeBasedBonus"";
""685_etherToTokens"" -> ""685_volumeBasedBonus"";
}
"
0x000000002bb43c83ece652d161ad0fa862129a2c.sol,AccountRegistry,"contract AccountRegistry is AccountRegistryInterface, TokenRescue { uint256 constant public registrationDeposit = 1 finney; uint256 constant public proposalCensorshipFee = 50 finney; address constant public burn = 0x000000003Ffc15cd9eA076d7ec40B8f516367Ca1; Vote public constant token = Vote(0x000000002647e16d9BaB9e46604D75591D289277); uint8 constant UNCONTACTED = 0; uint8 constant PROPOSER = 1; uint8 constant VOTER = 2; uint8 constant PENDING_PROPOSAL = 4; uint8 constant PROPOSAL = 8; uint8 constant PENDING_CABAL = 16; uint8 constant CABAL = 32; uint8 constant BOARD = 64; struct Account { uint256 lastAccess; uint8 membership; address appointer; address denouncer; address voucher; address devoucher; }",1,"subgraph cluster_103_AccountRegistryInterface {
label=""AccountRegistryInterface"";
""103_canVoteOnProposal"" [label=""canVoteOnProposal""];
}
"
0x4498f897505d0e6991edeab24bc7b5727d72de28.sol,RFCICO,"contract RFCICO { using SafeMath for uint256; address public wallet; address public RFC; uint256 public price = 303; token tokenReward; uint256 public weiRaised; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); constructor() public{ wallet = 0x1c46A08C940D9433297646cBa10Bc492c7D53A82; RFC = 0xed1CAa23883345098C7939C44Fb201AA622746aD; tokenReward = token(RFC); }",1,"subgraph cluster_362_RFCICO {
label=""RFCICO"";
""362_withdrawTokens"" [label=""withdrawTokens""];
""362_changeWallet"" [label=""changeWallet""];
""362_setPrice"" [label=""setPrice""];
""362_fallback"" [label=""fallback""];
""362_constructor"" [label=""constructor""];
""362_stopSale"" [label=""stopSale""];
""362_validPurchase"" [label=""validPurchase""];
""362_buyTokens"" [label=""buyTokens""];
""362_forwardFunds"" [label=""forwardFunds""];
""362_startSale"" [label=""startSale""];
""362_changeTokenReward"" [label=""changeTokenReward""];
""362_buyTokens"" -> ""362_validPurchase"";
""362_buyTokens"" -> ""362_forwardFunds"";
""362_fallback"" -> ""362_buyTokens"";
}
"
0x73e5451bcf4f7c47946abe89c772f3e6576909c3.sol,DragonCrowdsaleCore,"contract DragonCrowdsaleCore is Ownable, DragonPricing { using SafeMath for uint; address public beneficiary; address public charity; address public advisor; address public front; bool public advisorset; uint public tokensSold; uint public etherRaised; uint public presold; uint public presoldMax; uint public crowdsaleCounter; uint public advisorTotal; uint public advisorCut; Dragon public tokenReward; mapping ( address => bool ) public alreadyParticipated; modifier onlyFront() { if (msg.sender != front) { throw; }",1,"subgraph cluster_936_DragonCrowdsaleCore {
label=""DragonCrowdsaleCore"";
""936_advisorSiphon"" [label=""advisorSiphon""];
""936_crowdsale"" [label=""crowdsale""];
""936_DragonCrowdsaleCore"" [label=""DragonCrowdsaleCore""];
""936_transferCharity"" [label=""transferCharity""];
""936_withdrawCrowdsaleDragons"" [label=""withdrawCrowdsaleDragons""];
""936_manualSend"" [label=""manualSend""];
""936_precrowdsale"" [label=""precrowdsale""];
""936_setFront"" [label=""setFront""];
""936_transferBeneficiary"" [label=""transferBeneficiary""];
""936_setAdvisor"" [label=""setAdvisor""];
""936_setAdvisor"" -> ""936_onlyOwner"";
""936_precrowdsale"" -> ""936_advisorSiphon"";
""936_manualSend"" -> ""936_onlyOwner"";
""936_precrowdsale"" -> ""936_onlyFront"";
""936_transferBeneficiary"" -> ""936_onlyOwner"";
""936_transferCharity"" -> ""936_onlyOwner"";
""936_crowdsale"" -> ""936_advisorSiphon"";
""936_withdrawCrowdsaleDragons"" -> ""936_onlyOwner"";
""936_setFront"" -> ""936_onlyOwner"";
""936_crowdsale"" -> ""936_onlyFront"";
}
"
0x01c627181089b6e10ee8316ec08516b3df7c4845.sol,BrickCrowdsale,contract BrickCrowdsale is Ownable { using SafeMath for uint256; uint256 public startTime; uint256 public endTime; uint256 public weiRaised; uint256 public limitDateSale; bool public isSoftCapHit = false; bool public isStarted = false; bool public isFinalized = false; uint256 icoPvtRate = 40; uint256 icoPreRate = 50; uint256 ico1Rate = 65; uint256 ico2Rate = 75; uint256 ico3Rate = 90; uint256 public pvtTokens = (40000) * (10**18); uint256 public preSaleTokens = (6000000) * (10**18); uint256 public ico1Tokens = (8000000) * (10**18); uint256 public ico2Tokens = (8000000) * (10**18); uint256 public ico3Tokens = (8000000) * (10**18); uint256 public totalTokens = (40000000)* (10**18); address public advisoryEthWallet = 0x0D7629d32546CD493bc33ADEF115D4489f5599Be; address public infraEthWallet = 0x536D36a05F6592aa29BB0beE30cda706B1272521; address public techDevelopmentEthWallet = 0x4d0B70d8E612b5dca3597C64643a8d1efd5965e1; address public operationsEthWallet = 0xbc67B82924eEc8643A4f2ceDa59B5acfd888A967; address public wallet = 0x44d44CA0f75bdd3AE8806D02515E8268459c554A; struct ContributorData { uint256 contributionAmountViewOnly; uint256 tokensIssuedViewOnly; uint256 contributionAmount; uint256 tokensIssued; },1,"subgraph cluster_2591_BrickCrowdsale {
label=""BrickCrowdsale"";
""2591_hasEnded"" [label=""hasEnded""];
""2591_starting"" [label=""starting""];
""2591_releaseAllTokens"" [label=""releaseAllTokens""];
""2591_isWithinSaleTimeLimit"" [label=""isWithinSaleTimeLimit""];
""2591_setRate"" [label=""setRate""];
""2591_setHardCap"" [label=""setHardCap""];
""2591_setPvtTokens"" [label=""setPvtTokens""];
""2591_isWithinTokenAllocLimit"" [label=""isWithinTokenAllocLimit""];
""2591_constructor"" [label=""constructor""];
""2591_currentTokenSupply"" [label=""currentTokenSupply""];
""2591_release"" [label=""release""];
""2591_endIcoSaleRound3"" [label=""endIcoSaleRound3""];
""2591_endIcoSaleRound2"" [label=""endIcoSaleRound2""];
""2591_getCurrentRateInCents"" [label=""getCurrentRateInCents""];
""2591_releaseTokens"" [label=""releaseTokens""];
""2591_setKycAddress"" [label=""setKycAddress""];
""2591_finalize"" [label=""finalize""];
""2591_endIcoSaleRound1"" [label=""endIcoSaleRound1""];
""2591_setSaleDuration"" [label=""setSaleDuration""];
""2591_investorCount"" [label=""investorCount""];
""2591_refundMoney"" [label=""refundMoney""];
""2591_setKYCRequiredToSendTokens"" [label=""setKYCRequiredToSendTokens""];
""2591_forwardAllRaisedFunds"" [label=""forwardAllRaisedFunds""];
""2591_tokenSendFailuresCount"" [label=""tokenSendFailuresCount""];
""2591_setSaleBonus"" [label=""setSaleBonus""];
""2591_updateRateInWei"" [label=""updateRateInWei""];
""2591_setIco2Tokens"" [label=""setIco2Tokens""];
""2591_transferTokenOwnership"" [label=""transferTokenOwnership""];
""2591_hasStarted"" [label=""hasStarted""];
""2591_setSoftCap"" [label=""setSoftCap""];
""2591_refundAllMoney"" [label=""refundAllMoney""];
""2591_setIco1Tokens"" [label=""setIco1Tokens""];
""2591_buyTokens"" [label=""buyTokens""];
""2591_endPvtSale"" [label=""endPvtSale""];
""2591_didSoftCapReached"" [label=""didSoftCapReached""];
""2591_setPreSaleTokens"" [label=""setPreSaleTokens""];
""2591_transferKycOwnerShip"" [label=""transferKycOwnerShip""];
""2591_finalization"" [label=""finalization""];
""2591_start"" [label=""start""];
""2591_endPreSale"" [label=""endPreSale""];
""2591_setKYCRequiredToReceiveFunds"" [label=""setKYCRequiredToReceiveFunds""];
""2591_setIco3Tokens"" [label=""setIco3Tokens""];
""2591_buyPhaseTokens"" [label=""buyPhaseTokens""];
""2591_validPurchase"" [label=""validPurchase""];
""2591_isWithinSaleLimit"" [label=""isWithinSaleLimit""];
""2591_setTokenAddress"" [label=""setTokenAddress""];
""2591_setTokensForCrowdSale"" [label=""setTokensForCrowdSale""];
""2591_computeTokens"" [label=""computeTokens""];
""2591_splitTokens"" [label=""splitTokens""];
""2591_fallback"" [label=""fallback""];
""2591_init"" [label=""init""];
""2591_init"" -> ""2591_setRate"";
""2591_finalization"" -> ""2591_splitTokens"";
""2591_setHardCap"" -> ""2591_onlyOwner"";
""2591_setIco3Tokens"" -> ""2591_onlyOwner"";
""2591_refundAllMoney"" -> ""2591_refundMoney"";
""2591_setPvtTokens"" -> ""2591_onlyOwner"";
""2591_releaseAllTokens"" -> ""2591_releaseTokens"";
""2591_releaseTokens"" -> ""2591_onlyOwner"";
""2591_setRate"" -> ""2591_getCurrentRateInCents"";
""2591_setSaleDuration"" -> ""2591_onlyOwner"";
""2591_setTokensForCrowdSale"" -> ""2591_onlyOwner"";
""2591_finalization"" -> ""2591_forwardAllRaisedFunds"";
""2591_isWithinTokenAllocLimit"" -> ""2591_isWithinSaleTimeLimit"";
""2591_setSoftCap"" -> ""2591_onlyOwner"";
""2591_releaseAllTokens"" -> ""2591_onlyOwner"";
""2591_buyPhaseTokens"" -> ""2591_buyTokens"";
""2591_transferKycOwnerShip"" -> ""2591_onlyOwner"";
""2591_setKYCRequiredToReceiveFunds"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_setSoftCap"";
""2591_start"" -> ""2591_hasStarted"";
""2591_setPreSaleTokens"" -> ""2591_onlyOwner"";
""2591_isWithinTokenAllocLimit"" -> ""2591_isWithinSaleLimit"";
""2591_endIcoSaleRound1"" -> ""2591_onlyOwner"";
""2591_endIcoSaleRound1"" -> ""2591_updateRateInWei"";
""2591_validPurchase"" -> ""2591_isWithinSaleTimeLimit"";
""2591_start"" -> ""2591_starting"";
""2591_init"" -> ""2591_setSaleDuration"";
""2591_endPreSale"" -> ""2591_onlyOwner"";
""2591_finalize"" -> ""2591_onlyOwner"";
""2591_refundMoney"" -> ""2591_onlyOwner"";
""2591_fallback"" -> ""2591_buyPhaseTokens"";
""2591_setIco1Tokens"" -> ""2591_onlyOwner"";
""2591_endIcoSaleRound3"" -> ""2591_updateRateInWei"";
""2591_setKycAddress"" -> ""2591_onlyOwner"";
""2591_transferTokenOwnership"" -> ""2591_onlyOwner"";
""2591_setKYCRequiredToSendTokens"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_setSaleBonus"";
""2591_endIcoSaleRound2"" -> ""2591_onlyOwner"";
""2591_setIco2Tokens"" -> ""2591_onlyOwner"";
""2591_setRate"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_setTokenAddress"";
""2591_refundAllMoney"" -> ""2591_onlyOwner"";
""2591_setTokenAddress"" -> ""2591_onlyOwner"";
""2591_buyPhaseTokens"" -> ""2591_validPurchase"";
""2591_init"" -> ""2591_setHardCap"";
""2591_finalize"" -> ""2591_finalization"";
""2591_releaseTokens"" -> ""2591_release"";
""2591_init"" -> ""2591_onlyOwner"";
""2591_buyPhaseTokens"" -> ""2591_isWithinTokenAllocLimit"";
""2591_buyPhaseTokens"" -> ""2591_computeTokens"";
""2591_updateRateInWei"" -> ""2591_getCurrentRateInCents"";
""2591_setSaleBonus"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_setTokensForCrowdSale"";
""2591_init"" -> ""2591_setKycAddress"";
""2591_endIcoSaleRound2"" -> ""2591_updateRateInWei"";
""2591_endPvtSale"" -> ""2591_onlyOwner"";
""2591_start"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_start"";
""2591_endIcoSaleRound3"" -> ""2591_onlyOwner"";
""2591_endPreSale"" -> ""2591_updateRateInWei"";
""2591_endPvtSale"" -> ""2591_updateRateInWei"";
}
"
0x91dfe531ff8ba876a505c8f1c98bafede6c7effc.sol,MatchingMarket,"contract MatchingMarket is MatchingEvents, ExpiringMarket, DSNote { bool public buyEnabled = true; bool public matchingEnabled = true; struct sortInfo { uint next; uint prev; uint delb; }",1,"subgraph cluster_3465_MatchingMarket {
label=""MatchingMarket"";
""3465__buys"" [label=""_buys""];
""3465_buyAllAmount"" [label=""buyAllAmount""];
""3465__sort"" [label=""_sort""];
""3465_isOfferSorted"" [label=""isOfferSorted""];
""3465_setMinSell"" [label=""setMinSell""];
""3465_getPayAmount"" [label=""getPayAmount""];
""3465_getNextUnsortedOffer"" [label=""getNextUnsortedOffer""];
""3465_remTokenPairWhitelist"" [label=""remTokenPairWhitelist""];
""3465_getBuyAmount"" [label=""getBuyAmount""];
""3465__find"" [label=""_find""];
""3465_getFirstUnsortedOffer"" [label=""getFirstUnsortedOffer""];
""3465_insert"" [label=""insert""];
""3465_getBetterOffer"" [label=""getBetterOffer""];
""3465__offeru"" [label=""_offeru""];
""3465_addTokenPairWhitelist"" [label=""addTokenPairWhitelist""];
""3465_sellAllAmount"" [label=""sellAllAmount""];
""3465_MatchingMarket"" [label=""MatchingMarket""];
""3465__findpos"" [label=""_findpos""];
""3465_getOfferCount"" [label=""getOfferCount""];
""3465_getBestOffer"" [label=""getBestOffer""];
""3465_del_rank"" [label=""del_rank""];
""3465_getWorseOffer"" [label=""getWorseOffer""];
""3465_setBuyEnabled"" [label=""setBuyEnabled""];
""3465__isPricedLtOrEq"" [label=""_isPricedLtOrEq""];
""3465_take"" [label=""take""];
""3465_make"" [label=""make""];
""3465_kill"" [label=""kill""];
""3465_cancel"" [label=""cancel""];
""3465__unsort"" [label=""_unsort""];
""3465_buy"" [label=""buy""];
""3465_isTokenPairWhitelisted"" [label=""isTokenPairWhitelisted""];
""3465_getMinSell"" [label=""getMinSell""];
""3465_offer"" [label=""offer""];
""3465_setMatchingEnabled"" [label=""setMatchingEnabled""];
""3465__matcho"" [label=""_matcho""];
""3465__hide"" [label=""_hide""];
""3465_setMinSell"" -> ""3465_note"";
""3465_buy"" -> ""3465_can_buy"";
""3465_sellAllAmount"" -> ""3465_rdiv"";
""3465__find"" -> ""3465__isPricedLtOrEq"";
""3465__findpos"" -> ""3465__find"";
""3465_cancel"" -> ""3465__unsort"";
""3465_getBuyAmount"" -> ""3465_add"";
""3465_getBuyAmount"" -> ""3465_getWorseOffer"";
""3465_buyAllAmount"" -> ""3465_sub"";
""3465_sellAllAmount"" -> ""3465_getBestOffer"";
""3465__matcho"" -> ""3465__sort"";
""3465_getPayAmount"" -> ""3465_getBestOffer"";
""3465_remTokenPairWhitelist"" -> ""3465_auth"";
""3465_sellAllAmount"" -> ""3465_take"";
""3465_getBuyAmount"" -> ""3465_getBestOffer"";
""3465__buys"" -> ""3465_buy"";
""3465__matcho"" -> ""3465_buy"";
""3465_getBuyAmount"" -> ""3465_rmul"";
""3465_getPayAmount"" -> ""3465_rmul"";
""3465_remTokenPairWhitelist"" -> ""3465_note"";
""3465_take"" -> ""3465_buy"";
""3465__matcho"" -> ""3465_isActive"";
""3465_cancel"" -> ""3465_cancel"";
""3465_sellAllAmount"" -> ""3465_sub"";
""3465_setBuyEnabled"" -> ""3465_auth"";
""3465_insert"" -> ""3465_isActive"";
""3465_kill"" -> ""3465_cancel"";
""3465__buys"" -> ""3465_isOfferSorted"";
""3465_buyAllAmount"" -> ""3465_add"";
""3465_setMatchingEnabled"" -> ""3465_auth"";
""3465_make"" -> ""3465_offer"";
""3465__hide"" -> ""3465_isOfferSorted"";
""3465_offer"" -> ""3465__matcho"";
""3465__matcho"" -> ""3465_mul"";
""3465_getBuyAmount"" -> ""3465_sub"";
""3465_getPayAmount"" -> ""3465_rdiv"";
""3465__matcho"" -> ""3465_sub"";
""3465_buyAllAmount"" -> ""3465_rmul"";
""3465__buys"" -> ""3465__unsort"";
""3465_buyAllAmount"" -> ""3465_take"";
""3465_addTokenPairWhitelist"" -> ""3465_isTokenPairWhitelisted"";
""3465__sort"" -> ""3465_isActive"";
""3465_addTokenPairWhitelist"" -> ""3465_note"";
""3465_getBuyAmount"" -> ""3465_rdiv"";
""3465_buyAllAmount"" -> ""3465_wdiv"";
""3465_cancel"" -> ""3465__hide"";
""3465_buyAllAmount"" -> ""3465_getBestOffer"";
""3465__findpos"" -> ""3465_isActive"";
""3465_sellAllAmount"" -> ""3465_wdiv"";
""3465__matcho"" -> ""3465_min"";
""3465__isPricedLtOrEq"" -> ""3465_mul"";
""3465_setMinSell"" -> ""3465_auth"";
""3465_getPayAmount"" -> ""3465_getWorseOffer"";
""3465_sellAllAmount"" -> ""3465_rmul"";
""3465_getPayAmount"" -> ""3465_add"";
""3465__findpos"" -> ""3465__isPricedLtOrEq"";
""3465_del_rank"" -> ""3465_isActive"";
""3465__sort"" -> ""3465__findpos"";
""3465_offer"" -> ""3465_can_offer"";
""3465__unsort"" -> ""3465_isOfferSorted"";
""3465_cancel"" -> ""3465_isOfferSorted"";
""3465_getPayAmount"" -> ""3465_sub"";
""3465__sort"" -> ""3465_isOfferSorted"";
""3465__sort"" -> ""3465__find"";
""3465_insert"" -> ""3465__hide"";
""3465_buyAllAmount"" -> ""3465_rdiv"";
""3465__matcho"" -> ""3465_offer"";
""3465_addTokenPairWhitelist"" -> ""3465_auth"";
""3465_remTokenPairWhitelist"" -> ""3465_isTokenPairWhitelisted"";
""3465_sellAllAmount"" -> ""3465_add"";
""3465_MatchingMarket"" -> ""3465_ExpiringMarket"";
""3465__offeru"" -> ""3465_offer"";
""3465_offer"" -> ""3465_isWhitelist"";
""3465_insert"" -> ""3465_isOfferSorted"";
""3465_insert"" -> ""3465__sort"";
""3465_offer"" -> ""3465_offer"";
""3465_cancel"" -> ""3465_can_cancel"";
}
"
0x6ddb328c94350b53a155e8cad141e3b972decc01.sol,BTCCMToken,contract BTCCMToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 100000000 * (10**8); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; constructor () public { owner = msg.sender; },1,"subgraph cluster_756_BTCCMToken {
label=""BTCCMToken"";
""756_transferFrom"" [label=""transferFrom""];
""756_approve"" [label=""approve""];
""756_setOwner"" [label=""setOwner""];
""756_createTokens"" [label=""createTokens""];
""756_totalSupply"" [label=""totalSupply""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_transfer"" [label=""transfer""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_refundTokens"" [label=""refundTokens""];
""756_constructor"" [label=""constructor""];
""756_transferFrom"" -> ""756_transferFrom"";
""756_approve"" -> ""756_approve"";
""756_createTokens"" -> ""756_safeAdd"";
""756_transfer"" -> ""756_transfer"";
""756_approve"" -> ""756_allowance"";
""756_createTokens"" -> ""756_safeSub"";
}
"
0x4900320fe47208de0b79db1273a78ab8c8f3528d.sol,Crowdsale,contract Crowdsale is Owned { using SafeMath for uint256; uint256 public fundingGoal; uint256 public price; uint256 public transferableToken; uint256 public soldToken; uint256 public deadline; uint256 public token_price; MontexToken public tokenReward; bool public fundingGoalReached = false; bool public isOpened; mapping (address => Property) public fundersProperty; struct Property { uint256 paymentEther; uint256 reservedToken; },1,"subgraph cluster_811_Crowdsale {
label=""Crowdsale"";
""811_Crowdsale"" [label=""Crowdsale""];
""811_withdrawalOwner"" [label=""withdrawalOwner""];
""811_getRemainingTimeEthToken"" [label=""getRemainingTimeEthToken""];
""811_fallback"" [label=""fallback""];
""811_start"" [label=""start""];
""811_finishCrowdSale"" [label=""finishCrowdSale""];
""811_valNowRate"" [label=""valNowRate""];
""811_getBalance"" [label=""getBalance""];
""811_start"" -> ""811_onlyOwner"";
""811_withdrawalOwner"" -> ""811_onlyOwner"";
""811_finishCrowdSale"" -> ""811_onlyOwner"";
}
"
0x75a17c63c2121447655955b55aaa1a413e750232.sol,CryderCrowdsale,contract CryderCrowdsale is Ownable { using SafeMath for uint256; address public wallet; CryderToken public presaleToken; CryderToken public token; bool public isBountyAllocated = false; mapping(address => bool) tokenRequests; uint public START_TIME = 1516467600; uint public CLOSE_TIME = 1519146000; uint256 public HARDCAP = 400000000000000000000000000; uint256 public exchangeRate = 3000; address public bounty = 0xa258Eb1817aA122acBa4Af66A7A064AE6E10552A; function () payable public { require(msg.sender == tx.origin); buyTokens(msg.sender); },1,"subgraph cluster_1198_CryderCrowdsale {
label=""CryderCrowdsale"";
""1198_CryderCrowdsale"" [label=""CryderCrowdsale""];
""1198_withdraw"" [label=""withdraw""];
""1198_allocateBounty"" [label=""allocateBounty""];
""1198_setExchangeRate"" [label=""setExchangeRate""];
""1198_setTime"" [label=""setTime""];
""1198_requestTokens"" [label=""requestTokens""];
""1198_fallback"" [label=""fallback""];
""1198_buyTokens"" [label=""buyTokens""];
""1198_fallback"" -> ""1198_buyTokens"";
""1198_withdraw"" -> ""1198_onlyOwner"";
""1198_setExchangeRate"" -> ""1198_onlyOwner"";
""1198_setTime"" -> ""1198_onlyOwner"";
}
"
0x0d61178ce25bf05c5b19dc56f30e0f10cbbe9f2b.sol,Lottery,contract Lottery is Ownable { modifier secCheck(address aContract) { require(aContract != address(contractCall)); _; },1,"subgraph cluster_556_Lottery {
label=""Lottery"";
""556_myTokens"" [label=""myTokens""];
""556_changeThreshold"" [label=""changeThreshold""];
""556_imAlive"" [label=""imAlive""];
""556_donateToDev"" [label=""donateToDev""];
""556_constructor"" [label=""constructor""];
""556_payWinner"" [label=""payWinner""];
""556_returnAnyERC20Token"" [label=""returnAnyERC20Token""];
""556_giveawayFee"" [label=""giveawayFee""];
""556_buyTickets"" [label=""buyTickets""];
""556_changeTicketPrice"" [label=""changeTicketPrice""];
""556_adminIsDead"" [label=""adminIsDead""];
""556_myDividends"" [label=""myDividends""];
""556_payWinnerManually"" [label=""payWinnerManually""];
""556_fallback"" [label=""fallback""];
""556_PRNG"" [label=""PRNG""];
""556_payWinnerManually2"" [label=""payWinnerManually2""];
""556_returnAnyERC20Token"" -> ""556_onlyOwner"";
""556_payWinnerManually2"" -> ""556_payWinner"";
""556_changeThreshold"" -> ""556_onlyOwner"";
""556_returnAnyERC20Token"" -> ""556_secCheck"";
""556_payWinner"" -> ""556_PRNG"";
""556_payWinnerManually"" -> ""556_onlyOwner"";
""556_buyTickets"" -> ""556_payWinner"";
""556_payWinnerManually"" -> ""556_payWinner"";
""556_buyTickets"" -> ""556_giveawayFee"";
""556_changeTicketPrice"" -> ""556_onlyOwner"";
""556_imAlive"" -> ""556_onlyOwner"";
""556_adminIsDead"" -> ""556_payWinnerManually2"";
}
"
0x5af9ec6df6edea0761fa841ce56c2e4deb000b31.sol,ZebiMainCrowdsale,contract ZebiMainCrowdsale is Ownable{ using SafeMath for uint256; ZebiCoin public token; uint256 currentYearMinted; uint256 calenderYearMintCap; uint256 calenderYearStart; uint256 calenderYearEnd; uint256 vestedMintStartTime; uint256 zebiZCOShare; uint256 crowdsaleZCOCap; uint256 transStartTime; ZebiCoinCrowdsale public zcc; ZebiCoinTempMgr public tempMngr; uint64 public tokenDecimals; uint256 public startTime; uint256 public endTime; uint256 public goldListPeriod; uint256 public postGoldPeriod; uint256 public minTransAmount; uint256 public ethCap; mapping(address => uint256) mainContribution; mapping(address => bool) mainCancelledList; uint256 goldPeriodCap; bool goldListPeriodFlag; mapping(address=>uint256) goldListContribution; mapping(address => bool) goldList; mapping(address => bool) kycAcceptedList; address public wallet; bool public withinRefundPeriod; mapping(address => uint256) preSaleRefundsInMainSale; uint256 public tokens; uint256 public weiAmount; uint256 public ETHtoZWeirate; uint256 public mainWeiRaised; modifier inCancelledList { require(mainCancelledList[msg.sender]); _; },1,"subgraph cluster_3258_ZebiMainCrowdsale {
label=""ZebiMainCrowdsale"";
""3258_addCancellation"" [label=""addCancellation""];
""3258_enableRefundPeriod"" [label=""enableRefundPeriod""];
""3258_fallback"" [label=""fallback""];
""3258_viewGoldList"" [label=""viewGoldList""];
""3258_getTokenAmount"" [label=""getTokenAmount""];
""3258_viewContribution"" [label=""viewContribution""];
""3258_transferTokenOwnership"" [label=""transferTokenOwnership""];
""3258_resumeMint"" [label=""resumeMint""];
""3258_addToGoldList"" [label=""addToGoldList""];
""3258_addToKYCList"" [label=""addToKYCList""];
""3258_forwardFunds"" [label=""forwardFunds""];
""3258_withdraw"" [label=""withdraw""];
""3258_validPurchase"" [label=""validPurchase""];
""3258_viewKYCAccepted"" [label=""viewKYCAccepted""];
""3258_mintvestedTokens"" [label=""mintvestedTokens""];
""3258_endTransfer"" [label=""endTransfer""];
""3258_startTransfer"" [label=""startTransfer""];
""3258_viewCancelledList"" [label=""viewCancelledList""];
""3258_takeEth"" [label=""takeEth""];
""3258_disableRefundPeriod"" [label=""disableRefundPeriod""];
""3258_buyTokens"" [label=""buyTokens""];
""3258_viewPreSaleRefundsInMainSale"" [label=""viewPreSaleRefundsInMainSale""];
""3258_removeFromKYCList"" [label=""removeFromKYCList""];
""3258_ZebiMainCrowdsale"" [label=""ZebiMainCrowdsale""];
""3258_forcedRefund"" [label=""forcedRefund""];
""3258_finishMint"" [label=""finishMint""];
""3258_mintAndAllocateZCO"" [label=""mintAndAllocateZCO""];
""3258_refund"" [label=""refund""];
""3258_removeFromGoldList"" [label=""removeFromGoldList""];
""3258_fallback"" -> ""3258_buyTokens"";
""3258_mintAndAllocateZCO"" -> ""3258_onlyOwner"";
""3258_removeFromKYCList"" -> ""3258_onlyOwner"";
""3258_refund"" -> ""3258_inCancelledList"";
""3258_forcedRefund"" -> ""3258_onlyOwner"";
""3258_removeFromGoldList"" -> ""3258_onlyOwner"";
""3258_endTransfer"" -> ""3258_onlyOwner"";
""3258_buyTokens"" -> ""3258_forwardFunds"";
""3258_withdraw"" -> ""3258_onlyOwner"";
""3258_buyTokens"" -> ""3258_validPurchase"";
""3258_startTransfer"" -> ""3258_onlyOwner"";
""3258_refund"" -> ""3258_inRefundPeriod"";
""3258_finishMint"" -> ""3258_onlyOwner"";
""3258_transferTokenOwnership"" -> ""3258_onlyOwner"";
""3258_enableRefundPeriod"" -> ""3258_onlyOwner"";
""3258_mintvestedTokens"" -> ""3258_onlyOwner"";
""3258_disableRefundPeriod"" -> ""3258_onlyOwner"";
""3258_addToGoldList"" -> ""3258_onlyOwner"";
""3258_buyTokens"" -> ""3258_getTokenAmount"";
""3258_addCancellation"" -> ""3258_onlyOwner"";
""3258_addToKYCList"" -> ""3258_onlyOwner"";
""3258_resumeMint"" -> ""3258_onlyOwner"";
}
"
0x5c89736e9454200141b80c37eb28eaceca2ce8cb.sol,CherryToken,"contract CherryToken is ERC223, ERCAddressFrozenFund { using SafeMath for uint; string internal _name; string internal _symbol; uint8 internal _decimals; uint256 internal _totalSupply; address public fundsWallet; uint256 internal fundsWalletChanged; mapping (address => uint256) internal balances; mapping (address => mapping (address => uint256)) internal allowed; constructor() public { _symbol = ; _name = ; _decimals = 8; _totalSupply = 10000000000000000; balances[msg.sender] = _totalSupply; fundsWallet = msg.sender; owner = msg.sender; fundsWalletChanged = 0; }",1,"subgraph cluster_1340_CherryToken {
label=""CherryToken"";
""1340_transferFrom"" [label=""transferFrom""];
""1340_totalSupply"" [label=""totalSupply""];
""1340_decreaseApproval"" [label=""decreaseApproval""];
""1340_changeFundsWallet"" [label=""changeFundsWallet""];
""1340_fallback"" [label=""fallback""];
""1340_mintToken"" [label=""mintToken""];
""1340_burnToken"" [label=""burnToken""];
""1340_name"" [label=""name""];
""1340_approve"" [label=""approve""];
""1340_decimals"" [label=""decimals""];
""1340_allowance"" [label=""allowance""];
""1340_increaseApproval"" [label=""increaseApproval""];
""1340_isContract"" [label=""isContract""];
""1340_transferdata"" [label=""transferdata""];
""1340_transferMultiple"" [label=""transferMultiple""];
""1340_transfer"" [label=""transfer""];
""1340_symbol"" [label=""symbol""];
""1340_balanceOf"" [label=""balanceOf""];
""1340_constructor"" [label=""constructor""];
""1340_transfer"" -> ""1340_isContract"";
""1340_transferFrom"" -> ""1340_isContract"";
""1340_transferdata"" -> ""1340_isContract"";
""1340_transferMultiple"" -> ""1340_isContract"";
}
"
0x031e8de47dee0fdde1969a93b64bb8f8fbcba65d.sol,lockEtherPay,"contract lockEtherPay is Ownable { using SafeMath for uint256; token token_reward; address public beneficiary; bool public isLocked = false; bool public isReleased = false; uint256 public start_time; uint256 public end_time; uint256 public fifty_two_weeks = 30412800; event TokenReleased(address beneficiary, uint256 token_amount); constructor() public{ token_reward = token(0xAa1ae5e57dc05981D83eC7FcA0b3c7ee2565B7D6); beneficiary = 0xae09643734a0A0054fB4C1B376Ea95cd2d552dee; }",1,"subgraph cluster_309_lockEtherPay {
label=""lockEtherPay"";
""309_lockOver"" [label=""lockOver""];
""309_tokenBalance"" [label=""tokenBalance""];
""309_constructor"" [label=""constructor""];
""309_lock"" [label=""lock""];
""309_release"" [label=""release""];
""309_release"" -> ""309_lockOver"";
""309_release"" -> ""309_onlyOwner"";
""309_lock"" -> ""309_onlyOwner"";
""309_lock"" -> ""309_tokenBalance"";
""309_release"" -> ""309_tokenBalance"";
}
"
0x6b62f10b1d042d3ed601899ca25f80f9dbc92644.sol,TwoCoinsOneMoonGame,contract TwoCoinsOneMoonGame { struct Bettor { address account; uint256 amount; },1,"subgraph cluster_536_TwoCoinsOneMoonGame {
label=""TwoCoinsOneMoonGame"";
""536_getBetAmount"" [label=""getBetAmount""];
""536_constructor"" [label=""constructor""];
""536_addEvent"" [label=""addEvent""];
""536_depositBalance"" [label=""depositBalance""];
""536_putMessage"" [label=""putMessage""];
""536_checkMoon"" [label=""checkMoon""];
""536_withdraw"" [label=""withdraw""];
""536_betRedCoin"" [label=""betRedCoin""];
""536_betBlueCoin"" [label=""betBlueCoin""];
""536_burstBubble"" [label=""burstBubble""];
""536_checkMoon"" -> ""536_addEvent"";
""536_betBlueCoin"" -> ""536_getBetAmount"";
""536_burstBubble"" -> ""536_depositBalance"";
""536_burstBubble"" -> ""536_addEvent"";
""536_betRedCoin"" -> ""536_checkMoon"";
""536_checkMoon"" -> ""536_burstBubble"";
""536_betBlueCoin"" -> ""536_checkMoon"";
""536_betRedCoin"" -> ""536_getBetAmount"";
}
"
0x3a2fd07ec2ad6f355f93af695a7cf858f5967b78.sol,MTVote,contract MTVote is Ownable { address public TVTokenAddress; address public TVCrowdsaleAddress; address public manager; address public wallet; address internal checkAndBuySender; bytes4 constant TOKEN_RECEIVED = bytes4(keccak256()); bool pause = false; mapping(uint => uint) public targets; uint public targetIdsSize = 0; uint[] public targetIds; modifier onlyOwnerOrManager() { require(msg.sender == owner || manager == msg.sender); _; },1,"subgraph cluster_515_MTVote {
label=""MTVote"";
""515_changeTVTokenAddress"" [label=""changeTVTokenAddress""];
""515_convertBytesToBytes32"" [label=""convertBytesToBytes32""];
""515_toBytes"" [label=""toBytes""];
""515_setManager"" [label=""setManager""];
""515_changeTVCrowdsaleAddress"" [label=""changeTVCrowdsaleAddress""];
""515_setPause"" [label=""setPause""];
""515_bytesToUint"" [label=""bytesToUint""];
""515_constructor"" [label=""constructor""];
""515_clear"" [label=""clear""];
""515_onTokenReceived"" [label=""onTokenReceived""];
""515_changeAndVote"" [label=""changeAndVote""];
""515_setManager"" -> ""515_onlyOwner"";
""515_clear"" -> ""515_onlyOwnerOrManager"";
""515_onTokenReceived"" -> ""515_convertBytesToBytes32"";
""515_changeAndVote"" -> ""515_toBytes"";
""515_changeTVCrowdsaleAddress"" -> ""515_onlyOwnerOrManager"";
""515_setPause"" -> ""515_onlyOwnerOrManager"";
""515_changeTVTokenAddress"" -> ""515_onlyOwnerOrManager"";
}
"
0x4d0dc912fcad3b070d187ab8ac89e63d2b532b8a.sol,BliBliToken,"contract BliBliToken is StandardToken, SafeMath { string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 18; string public version = ; address public ethFundDeposit; address public newContractAddr; bool public isFunding; uint256 public fundingStartBlock; uint256 public fundingStopBlock; uint256 public currentSupply; uint256 public tokenRaised = 0; uint256 public tokenMigrated = 0; uint256 public tokenExchangeRate = 625; event AllocateToken(address indexed _to, uint256 _value); event IssueToken(address indexed _to, uint256 _value); event IncreaseSupply(uint256 _value); event DecreaseSupply(uint256 _value); event Migrate(address indexed _to, uint256 _value); function formatDecimals(uint256 _value) internal returns (uint256 ) { return _value * 10 ** decimals; }",1,"subgraph cluster_849_BliBliToken {
label=""BliBliToken"";
""849_setTokenExchangeRate"" [label=""setTokenExchangeRate""];
""849_transferETH"" [label=""transferETH""];
""849_fallback"" [label=""fallback""];
""849_startFunding"" [label=""startFunding""];
""849_decreaseSupply"" [label=""decreaseSupply""];
""849_allocateToken"" [label=""allocateToken""];
""849_formatDecimals"" [label=""formatDecimals""];
""849_changeOwner"" [label=""changeOwner""];
""849_migrate"" [label=""migrate""];
""849_setMigrateContract"" [label=""setMigrateContract""];
""849_increaseSupply"" [label=""increaseSupply""];
""849_stopFunding"" [label=""stopFunding""];
""849_BliBliToken"" [label=""BliBliToken""];
""849_fallback"" -> ""849_safeMult"";
""849_fallback"" -> ""849_safeAdd"";
""849_allocateToken"" -> ""849_isOwner"";
""849_increaseSupply"" -> ""849_formatDecimals"";
""849_decreaseSupply"" -> ""849_isOwner"";
""849_increaseSupply"" -> ""849_isOwner"";
""849_allocateToken"" -> ""849_safeAdd"";
""849_increaseSupply"" -> ""849_safeAdd"";
""849_transferETH"" -> ""849_isOwner"";
""849_changeOwner"" -> ""849_isOwner"";
""849_decreaseSupply"" -> ""849_formatDecimals"";
""849_stopFunding"" -> ""849_isOwner"";
""849_setTokenExchangeRate"" -> ""849_isOwner"";
""849_allocateToken"" -> ""849_formatDecimals"";
""849_BliBliToken"" -> ""849_formatDecimals"";
""849_setMigrateContract"" -> ""849_isOwner"";
""849_allocateToken"" -> ""849_safeMult"";
""849_decreaseSupply"" -> ""849_safeSubtract"";
""849_startFunding"" -> ""849_isOwner"";
""849_migrate"" -> ""849_safeAdd"";
}
"
0x56ffb3c578906ba9658fccb052fc1a5672275b6a.sol,OpiriaCrowdsale,"contract OpiriaCrowdsale is TimedPresaleCrowdsale, MintedCrowdsale, TokenCappedCrowdsale { using SafeMath for uint256; uint256 public presaleWeiLimit; address public tokensWallet; uint256 public totalBonus = 0; bool public hiddenCapTriggered; uint16 public additionalBonusPercent = 0; mapping(address => uint256) public bonusOf; constructor(ERC20 _token, uint16 _initialEtherUsdRate, address _wallet, address _tokensWallet, uint256 _presaleOpeningTime, uint256 _presaleClosingTime, uint256 _openingTime, uint256 _closingTime ) public TimedPresaleCrowdsale(_presaleOpeningTime, _presaleClosingTime, _openingTime, _closingTime) Crowdsale(_initialEtherUsdRate, _wallet, _token) { setEtherUsdRate(_initialEtherUsdRate); tokensWallet = _tokensWallet; require(PausableToken(token).paused()); }",1,"subgraph cluster_2370_OpiriaCrowdsale {
label=""OpiriaCrowdsale"";
""2370_claimReservedTokens"" [label=""claimReservedTokens""];
""2370_setEtherUsdRate"" [label=""setEtherUsdRate""];
""2370__getTokenAmount"" [label=""_getTokenAmount""];
""2370_constructor"" [label=""constructor""];
""2370_addBonusBatch"" [label=""addBonusBatch""];
""2370__preValidatePurchase"" [label=""_preValidatePurchase""];
""2370_triggerHiddenCap"" [label=""triggerHiddenCap""];
""2370_sendTokensTo"" [label=""sendTokensTo""];
""2370_increaseCap"" [label=""increaseCap""];
""2370_withdrawBonus"" [label=""withdrawBonus""];
""2370__getBonusAmount"" [label=""_getBonusAmount""];
""2370_unlockTokenTransfers"" [label=""unlockTokenTransfers""];
""2370_distributeBonus"" [label=""distributeBonus""];
""2370__processPurchase"" [label=""_processPurchase""];
""2370_sendTokensToBatch"" [label=""sendTokensToBatch""];
""2370__saveBonus"" [label=""_saveBonus""];
""2370__getBonusPercent"" [label=""_getBonusPercent""];
""2370_finalization"" [label=""finalization""];
""2370_setAdditionalBonusPercent"" [label=""setAdditionalBonusPercent""];
""2370__preValidatePurchase"" -> ""2370__getBonusAmount"";
""2370_claimReservedTokens"" -> ""2370_onlyOwner"";
""2370__preValidatePurchase"" -> ""2370__getTokenAmount"";
""2370_unlockTokenTransfers"" -> ""2370_onlyOwner"";
""2370_increaseCap"" -> ""2370_onlyOwner"";
""2370_triggerHiddenCap"" -> ""2370_onlyOwner"";
""2370_sendTokensToBatch"" -> ""2370_sendTokensTo"";
""2370_setEtherUsdRate"" -> ""2370_onlyOwner"";
""2370_addBonusBatch"" -> ""2370_notExceedingSaleCap"";
""2370_distributeBonus"" -> ""2370_onlyOwner"";
""2370_sendTokensTo"" -> ""2370_onlyOwner"";
""2370_finalization"" -> ""2370_finalization"";
""2370__preValidatePurchase"" -> ""2370_isPresale"";
""2370_setAdditionalBonusPercent"" -> ""2370_onlyOwner"";
""2370__saveBonus"" -> ""2370__getBonusAmount"";
""2370__preValidatePurchase"" -> ""2370_notExceedingSaleCap"";
""2370__getBonusAmount"" -> ""2370__getBonusPercent"";
""2370_addBonusBatch"" -> ""2370_onlyOwner"";
""2370_constructor"" -> ""2370_constructor"";
""2370__getBonusPercent"" -> ""2370_isPresale"";
""2370__processPurchase"" -> ""2370__deliverTokens"";
""2370__preValidatePurchase"" -> ""2370__preValidatePurchase"";
""2370_finalization"" -> ""2370__deliverTokens"";
""2370_constructor"" -> ""2370_setEtherUsdRate"";
""2370_withdrawBonus"" -> ""2370__deliverTokens"";
""2370_sendTokensTo"" -> ""2370_notExceedingSaleCap"";
""2370_sendTokensToBatch"" -> ""2370_onlyOwner"";
""2370__processPurchase"" -> ""2370__saveBonus"";
""2370_distributeBonus"" -> ""2370__deliverTokens"";
""2370_claimReservedTokens"" -> ""2370__deliverTokens"";
}
"
0x48ec79ffdd733e72046533baafcc19864a976da0.sol,Richer3D,"contract Richer3D { using SafeMath for *; string constant public name = ; string constant public symbol = ; address constant private sysAdminAddress = 0x4A3913ce9e8882b418a0Be5A43d2C319c3F0a7Bd; address constant private sysInviterAddress = 0xC5E41EC7fa56C0656Bc6d7371a8706Eb9dfcBF61; address constant private sysDevelopAddress = 0xCf3A25b73A493F96C15c8198319F0218aE8cAA4A; address constant private p3dInviterAddress = 0x82Fc4514968b0c5FdDfA97ed005A01843d0E117d; uint256 constant cycleTime = 20 minutes; uint256 private roundNumber; uint256 private dayNumber; uint256 private totalPlayerNumber; uint256 private platformBalance; mapping(uint256=>DataModal.RoundInfo) private rInfoXrID; mapping(address=>DataModal.PlayerInfo) private pInfoXpAdd; mapping(address=>uint256) private pIDXpAdd; mapping(uint256=>address) private pAddXpID; HourglassInterface constant p3dContract = HourglassInterface(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe); mapping(uint256=>uint256) private p3dDividesXroundID; event newPlayerJoinGameEvent(address indexed _address,uint256 indexed _amount,bool indexed _JoinWithEth,uint256 _timestamp); event calculateTargetEvent(uint256 indexed _roundID); constructor() public { dayNumber = 1; }",1,"subgraph cluster_2609_Richer3D {
label=""Richer3D"";
""2609_getTransformRate"" [label=""getTransformRate""];
""2609_getPlatformBalance"" [label=""getPlatformBalance""];
""2609_getCurrentFieldBalanceAndTarget"" [label=""getCurrentFieldBalanceAndTarget""];
""2609_withdrawForAdmin"" [label=""withdrawForAdmin""];
""2609_getUserAddressList"" [label=""getUserAddressList""];
""2609_getDailyTarget"" [label=""getDailyTarget""];
""2609_constructor"" [label=""constructor""];
""2609_getIncreaseBalance"" [label=""getIncreaseBalance""];
""2609_getTransformMineInDay"" [label=""getTransformMineInDay""];
""2609_joinGameWithInviterID"" [label=""joinGameWithInviterID""];
""2609_getBounsEarnings"" [label=""getBounsEarnings""];
""2609_getMineInfoInDay"" [label=""getMineInfoInDay""];
""2609_calculateTotalMinePay"" [label=""calculateTotalMinePay""];
""2609_sendBalanceForDevelop"" [label=""sendBalanceForDevelop""];
""2609_p3dWithdrawForAdmin"" [label=""p3dWithdrawForAdmin""];
""2609_getHoldEarnings"" [label=""getHoldEarnings""];
""2609_getUserBalance"" [label=""getUserBalance""];
""2609_joinGameWithBalance"" [label=""joinGameWithBalance""];
""2609_getUserProperty"" [label=""getUserProperty""];
""2609_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""2609_getUserIDAndInviterEarnings"" [label=""getUserIDAndInviterEarnings""];
""2609_calculateTarget"" [label=""calculateTarget""];
""2609_fallback"" [label=""fallback""];
""2609_getP3DInfo"" [label=""getP3DInfo""];
""2609_getDefendPlayerList"" [label=""getDefendPlayerList""];
""2609_getAttackPlayerList"" [label=""getAttackPlayerList""];
""2609_registerWithInviterID"" [label=""registerWithInviterID""];
""2609_getUsersInfo"" [label=""getUsersInfo""];
""2609_getDataOfGame"" [label=""getDataOfGame""];
""2609_getBounsWithRoundID"" [label=""getBounsWithRoundID""];
""2609_getUserP3DDivEarnings"" [label=""getUserP3DDivEarnings""];
""2609_playerWithdraw"" [label=""playerWithdraw""];
""2609_buyCore"" [label=""buyCore""];
""2609_getDataOfGame"" -> ""2609_getBounsWithRoundID"";
""2609_joinGameWithBalance"" -> ""2609_getUserBalance"";
""2609_getCurrentFieldBalanceAndTarget"" -> ""2609_getDailyTarget"";
""2609_getUserBalance"" -> ""2609_getTransformMineInDay"";
""2609_getUserBalance"" -> ""2609_getUserP3DDivEarnings"";
""2609_getHoldEarnings"" -> ""2609_getMineInfoInDay"";
""2609_getCurrentFieldBalanceAndTarget"" -> ""2609_getIncreaseBalance"";
""2609_calculateTotalMinePay"" -> ""2609_getMineInfoInDay"";
""2609_getUserProperty"" -> ""2609_getUserBalance"";
""2609_getUsersInfo"" -> ""2609_getTransformMineInDay"";
""2609_calculateTarget"" -> ""2609_getDailyTarget"";
""2609_getDataOfGame"" -> ""2609_calculateTotalMinePay"";
""2609_getTransformRate"" -> ""2609_getMineInfoInDay"";
""2609_getCurrentFieldBalanceAndTarget"" -> ""2609_getBounsWithRoundID"";
""2609_getBounsEarnings"" -> ""2609_getBounsWithRoundID"";
""2609_calculateTarget"" -> ""2609_getBounsWithRoundID"";
""2609_calculateTarget"" -> ""2609_getIncreaseBalance"";
""2609_joinGameWithInviterID"" -> ""2609_registerWithInviterID"";
""2609_getDailyTarget"" -> ""2609_calculateTotalMinePay"";
""2609_getUserBalance"" -> ""2609_getHoldEarnings"";
""2609_getUsersInfo"" -> ""2609_getMineInfoInDay"";
""2609_getTransformMineInDay"" -> ""2609_getMineInfoInDay"";
""2609_getBounsWithRoundID"" -> ""2609_getTransformMineInDay"";
""2609_getTransformMineInDay"" -> ""2609_getTransformRate"";
""2609_getUsersInfo"" -> ""2609_getUserBalance"";
""2609_calculateTarget"" -> ""2609_sendBalanceForDevelop"";
""2609_getUserProperty"" -> ""2609_getMineInfoInDay"";
""2609_playerWithdraw"" -> ""2609_getUserBalance"";
""2609_getUserProperty"" -> ""2609_getTransformRate"";
""2609_getUsersInfo"" -> ""2609_getTransformRate"";
""2609_sendBalanceForDevelop"" -> ""2609_getBounsWithRoundID"";
""2609_getCurrentRoundInfo"" -> ""2609_getMineInfoInDay"";
""2609_joinGameWithInviterID"" -> ""2609_buyCore"";
""2609_getDataOfGame"" -> ""2609_getUserBalance"";
""2609_getUserProperty"" -> ""2609_getTransformMineInDay"";
""2609_joinGameWithBalance"" -> ""2609_buyCore"";
""2609_getUserBalance"" -> ""2609_getBounsEarnings"";
""2609_getHoldEarnings"" -> ""2609_getBounsWithRoundID"";
""2609_getDataOfGame"" -> ""2609_getIncreaseBalance"";
}
"
0x4c84949b55f21a376dba12e732958ede8b033b0e.sol,TokenVesting,contract TokenVesting { using SafeMath for uint256; struct VestingGrant { bool isGranted; address issuer; address beneficiary; uint256 grantJiffys; uint256 startTimestamp; uint256 cliffTimestamp; uint256 endTimestamp; bool isRevocable; uint256 releasedJiffys; },1,"subgraph cluster_591_TokenVesting {
label=""TokenVesting"";
""591_initialize"" [label=""initialize""];
""591_TokenVesting"" [label=""TokenVesting""];
""591_getGrantBalanceOf"" [label=""getGrantBalanceOf""];
""591_getGrantBeneficiaries"" [label=""getGrantBeneficiaries""];
""591_fallback"" [label=""fallback""];
""591_revoke"" [label=""revoke""];
""591_getGrantBalance"" [label=""getGrantBalance""];
""591_release"" [label=""release""];
""591_grant"" [label=""grant""];
""591_releaseFor"" [label=""releaseFor""];
""591_releaseFor"" -> ""591_requireIsOperational"";
""591_getGrantBalance"" -> ""591_getGrantBalanceOf"";
""591_grant"" -> ""591_releaseFor"";
""591_release"" -> ""591_releaseFor"";
""591_initialize"" -> ""591_grant"";
""591_revoke"" -> ""591_requireIsOperational"";
""591_grant"" -> ""591_requireIsOperational"";
}
"
0x8615ddfe9d4c9e58abff01c999731f3e9e556e80.sol,FrozenToken,"contract FrozenToken is ERC20Token, ITokenRecipient { mapping (address => bool) frozeds; uint256 public frozedCount; bool public freezeEnabled = false; bool public autoFreeze = false; bool public mintFinished = false; event Freeze(address indexed wallet); event UnFreeze(address indexed wallet); event PropsChanged(address indexed sender, string props, bool oldValue, bool newValue); event Mint(address indexed sender, address indexed wallet, uint256 amount); event ReceiveTokens(address indexed spender, address indexed token, uint256 value, bytes extraData); event ApproveAndCall(address indexed spender, uint256 value, bytes extraData); event Burn(address indexed sender, uint256 amount); event MintFinished(address indexed spender); modifier notFreeze { require(frozeds[msg.sender] == false || freezeEnabled == false); _; }",1,"subgraph cluster_1885_FrozenToken {
label=""FrozenToken"";
""1885_approveAndCall"" [label=""approveAndCall""];
""1885_transferFrom"" [label=""transferFrom""];
""1885_increaseApproval"" [label=""increaseApproval""];
""1885_isFreeze"" [label=""isFreeze""];
""1885_transfer"" [label=""transfer""];
""1885_burn"" [label=""burn""];
""1885_decreaseApproval"" [label=""decreaseApproval""];
""1885_unFreeze"" [label=""unFreeze""];
""1885_freeze"" [label=""freeze""];
""1885_mint"" [label=""mint""];
""1885_updAutoFreeze"" [label=""updAutoFreeze""];
""1885_receiveApproval"" [label=""receiveApproval""];
""1885_mintFinish"" [label=""mintFinish""];
""1885_approve"" [label=""approve""];
""1885_updFreezeEnabled"" [label=""updFreezeEnabled""];
""1885_mint"" -> ""1885_validAddress"";
""1885_updAutoFreeze"" -> ""1885_authLevel"";
""1885_mint"" -> ""1885_authLevel"";
""1885_burn"" -> ""1885_greaterThanZero"";
""1885_receiveApproval"" -> ""1885_greaterThanZero"";
""1885_approveAndCall"" -> ""1885_approve"";
""1885_freeze"" -> ""1885_notThis"";
""1885_mintFinish"" -> ""1885_onlyOwner"";
""1885_transfer"" -> ""1885_notFreeze"";
""1885_approveAndCall"" -> ""1885_validAddress"";
""1885_freeze"" -> ""1885_validAddress"";
""1885_transferFrom"" -> ""1885_transferFrom"";
""1885_decreaseApproval"" -> ""1885_notFreezeFrom"";
""1885_mint"" -> ""1885_isAuthorized"";
""1885_burn"" -> ""1885_isFreeze"";
""1885_transferFrom"" -> ""1885_notFreezeFrom"";
""1885_burn"" -> ""1885_validBalance"";
""1885_receiveApproval"" -> ""1885_validAddress"";
""1885_increaseApproval"" -> ""1885_notFreezeFrom"";
""1885_increaseApproval"" -> ""1885_increaseApproval"";
""1885_approve"" -> ""1885_notFreezeFrom"";
""1885_mint"" -> ""1885_greaterThanZero"";
""1885_unFreeze"" -> ""1885_authLevel"";
""1885_mint"" -> ""1885_isFreeze"";
""1885_freeze"" -> ""1885_notOwner"";
""1885_freeze"" -> ""1885_authLevel"";
""1885_decreaseApproval"" -> ""1885_decreaseApproval"";
""1885_isFreeze"" -> ""1885_validAddress"";
""1885_approve"" -> ""1885_approve"";
""1885_approveAndCall"" -> ""1885_greaterThanZero"";
""1885_transfer"" -> ""1885_transfer"";
""1885_updFreezeEnabled"" -> ""1885_authLevel"";
""1885_mint"" -> ""1885_canMint"";
""1885_unFreeze"" -> ""1885_validAddress"";
}
"
0x6a2b112e5314a3462a3df18c0b73a2de14fd6b06.sol,SaleClockAuction,"contract SaleClockAuction is ClockAuction { bool public isSaleClockAuction = true; uint256 public gen0SaleCount; uint256[5] public lastGen0SalePrices; constructor(address _nftAddr, uint256 _cut) public ClockAuction(_nftAddr, _cut) {}",1,"subgraph cluster_3179_SaleClockAuction {
label=""SaleClockAuction"";
""3179_getSeller"" [label=""getSeller""];
""3179_constructor"" [label=""constructor""];
""3179_isSaleClockAuction"" [label=""isSaleClockAuction""];
""3179_createAuction"" [label=""createAuction""];
""3179_bid"" [label=""bid""];
""3179_computeCut"" [label=""computeCut""];
""3179_setGen0SellerAddress"" [label=""setGen0SellerAddress""];
""3179_averageGen0SalePrice"" [label=""averageGen0SalePrice""];
""3179_bidGift"" [label=""bidGift""];
""3179_bidGift"" -> ""3179__transfer"";
""3179_constructor"" -> ""3179_constructor"";
""3179_bidGift"" -> ""3179__bid"";
""3179_createAuction"" -> ""3179__escrow"";
""3179_computeCut"" -> ""3179__computeCut"";
""3179_bid"" -> ""3179__bid"";
""3179_createAuction"" -> ""3179__addAuction"";
""3179_bid"" -> ""3179__transfer"";
}
"
0x3fde21c4118a7ac77e113920f76f68edd4fc144d.sol,BEBmining,contract BEBmining is Ownable{ tokenTransfer public bebTokenTransfer; uint8 decimals = 18; struct BebUser { address customerAddr; uint256 amount; uint256 bebtime; uint256 interest; },1,"subgraph cluster_876_BEBmining {
label=""BEBmining"";
""876_TotalRevenue"" [label=""TotalRevenue""];
""876_fallback"" [label=""fallback""];
""876_querYrevenue"" [label=""querYrevenue""];
""876_BebTomining"" [label=""BebTomining""];
""876_sellBeb"" [label=""sellBeb""];
""876_freeSettlement"" [label=""freeSettlement""];
""876_queryRate"" [label=""queryRate""];
""876_withdrawAmount"" [label=""withdrawAmount""];
""876_setioc"" [label=""setioc""];
""876_buyBeb"" [label=""buyBeb""];
""876_ETHwithdrawal"" [label=""ETHwithdrawal""];
""876_BEBmining"" [label=""BEBmining""];
""876_getTokenBalance"" [label=""getTokenBalance""];
""876_ModifyexchangeRate"" [label=""ModifyexchangeRate""];
""876_querBalance"" [label=""querBalance""];
""876_setioc"" -> ""876_onlyOwner"";
""876_ModifyexchangeRate"" -> ""876_onlyOwner"";
""876_withdrawAmount"" -> ""876_getTokenBalance"";
""876_ETHwithdrawal"" -> ""876_onlyOwner"";
""876_buyBeb"" -> ""876_getTokenBalance"";
""876_withdrawAmount"" -> ""876_onlyOwner"";
}
"
0x418d25d31c0a3c5559d8aa0c1c17d9cb3af9f59e.sol,Deposit,contract Deposit is Ownable { using SafeMath for uint256; struct ClientDeposit { uint256 balance; uint256 nextPaymentTotalAmount; uint256 nextPaymentDepositCommission; uint256 nextPaymentPlatformCommission; bool exists; bool isBlocked; },1,"subgraph cluster_593_Deposit {
label=""Deposit"";
""593_fromPaymentGateway"" [label=""fromPaymentGateway""];
""593_transferEthTo"" [label=""transferEthTo""];
""593_addClient"" [label=""addClient""];
""593_handleIncomingPayment"" [label=""handleIncomingPayment""];
""593_constructor"" [label=""constructor""];
""593_claim"" [label=""claim""];
""593_getClientBalance"" [label=""getClientBalance""];
""593_repeatedPayment"" [label=""repeatedPayment""];
""593_fallback"" [label=""fallback""];
""593_isClient"" [label=""isClient""];
""593_addEth"" [label=""addEth""];
""593_addClient"" -> ""593_onlyOwner"";
""593_fromPaymentGateway"" -> ""593_handleIncomingPayment"";
""593_claim"" -> ""593_onlyOwner"";
""593_transferEthTo"" -> ""593_onlyOwner"";
""593_fallback"" -> ""593_handleIncomingPayment"";
""593_isClient"" -> ""593_onlyOwner"";
""593_addEth"" -> ""593_onlyOwner"";
""593_repeatedPayment"" -> ""593_onlyOwner"";
}
"
0x77ceff4173a56cd22b6184fa59c668b364ae55b8.sol,CarTaxiIco,"contract CarTaxiIco is SafeMath { CarTaxiToken public cartaxiToken; AbstractToken public preIcoToken; enum State{ Pause, Init, Running, Stopped, Migrated }",1,"subgraph cluster_1433_CarTaxiIco {
label=""CarTaxiIco"";
""1433_setNewManager"" [label=""setNewManager""];
""1433_withdrawEther"" [label=""withdrawEther""];
""1433_fallback"" [label=""fallback""];
""1433_withdrawAllEther"" [label=""withdrawAllEther""];
""1433_burnTokens"" [label=""burnTokens""];
""1433_CarTaxiIco"" [label=""CarTaxiIco""];
""1433_sendTokensToFounders"" [label=""sendTokensToFounders""];
""1433_importTokens"" [label=""importTokens""];
""1433_buyTokens"" [label=""buyTokens""];
""1433_setBountyOwner"" [label=""setBountyOwner""];
""1433_setState"" [label=""setState""];
""1433_sendTokensToBountyOwner"" [label=""sendTokensToBountyOwner""];
""1433_init"" [label=""init""];
""1433_sendTokensToFounders"" -> ""1433_mulByFraction"";
""1433_sendTokensToBountyOwner"" -> ""1433_onlyManager"";
""1433_buyTokens"" -> ""1433_add"";
""1433_importTokens"" -> ""1433_add"";
""1433_withdrawEther"" -> ""1433_onlyManager"";
""1433_sendTokensToFounders"" -> ""1433_add"";
""1433_withdrawAllEther"" -> ""1433_onlyManager"";
""1433_fallback"" -> ""1433_buyTokens"";
""1433_buyTokens"" -> ""1433_dateBonus"";
""1433_importTokens"" -> ""1433_presaleVolumeBonus"";
""1433_buyTokens"" -> ""1433_mulByFraction"";
""1433_fallback"" -> ""1433_onIcoRunning"";
""1433_sendTokensToBountyOwner"" -> ""1433_mulByFraction"";
""1433_sendTokensToFounders"" -> ""1433_whenInitialized"";
""1433_setBountyOwner"" -> ""1433_onlyManager"";
""1433_buyTokens"" -> ""1433_volumeBonus"";
""1433_burnTokens"" -> ""1433_notMigrated"";
""1433_init"" -> ""1433_onlyManager"";
""1433_sendTokensToBountyOwner"" -> ""1433_whenInitialized"";
""1433_setState"" -> ""1433_onlyManager"";
""1433_sendTokensToBountyOwner"" -> ""1433_add"";
""1433_burnTokens"" -> ""1433_onlyManager"";
""1433_setNewManager"" -> ""1433_onlyManager"";
""1433_sendTokensToFounders"" -> ""1433_onlyManager"";
}
"
0x4c84949b55f21a376dba12e732958ede8b033b0e.sol,TokenVesting,contract TokenVesting { using SafeMath for uint256; struct VestingGrant { bool isGranted; address issuer; address beneficiary; uint256 grantJiffys; uint256 startTimestamp; uint256 cliffTimestamp; uint256 endTimestamp; bool isRevocable; uint256 releasedJiffys; },1,"subgraph cluster_591_TokenVesting {
label=""TokenVesting"";
""591_initialize"" [label=""initialize""];
""591_TokenVesting"" [label=""TokenVesting""];
""591_getGrantBalanceOf"" [label=""getGrantBalanceOf""];
""591_getGrantBeneficiaries"" [label=""getGrantBeneficiaries""];
""591_fallback"" [label=""fallback""];
""591_revoke"" [label=""revoke""];
""591_getGrantBalance"" [label=""getGrantBalance""];
""591_release"" [label=""release""];
""591_grant"" [label=""grant""];
""591_releaseFor"" [label=""releaseFor""];
""591_releaseFor"" -> ""591_requireIsOperational"";
""591_getGrantBalance"" -> ""591_getGrantBalanceOf"";
""591_grant"" -> ""591_releaseFor"";
""591_release"" -> ""591_releaseFor"";
""591_initialize"" -> ""591_grant"";
""591_revoke"" -> ""591_requireIsOperational"";
""591_grant"" -> ""591_requireIsOperational"";
}
"
0x574fb6d9d090042a04d0d12a4e87217f8303a5ca.sol,GoldBackedToken,"contract GoldBackedToken is Ownable, SafeMath, ERC20, Pausable { event Transfer(address indexed from, address indexed to, uint value); event Approval(address indexed owner, address indexed spender, uint value); event DeductFees(address indexed owner,uint256 amount); event TokenMinted(address destination, uint256 amount); event TokenBurned(address source, uint256 amount); string public name = ; string public symbol = ; uint256 constant public decimals = 18; uint256 constant public hgtDecimals = 8; uint256 constant public allocationPool = 1 * 10**9 * 10**hgtDecimals; uint256 constant public maxAllocation = 38 * 10**5 * 10**decimals; uint256 public totAllocation; address public feeCalculator; address public HGT; function setFeeCalculator(address newFC) onlyOwner { feeCalculator = newFC; }",1,"subgraph cluster_2164_GoldBackedToken {
label=""GoldBackedToken"";
""2164_update"" [label=""update""];
""2164_mintTokens"" [label=""mintTokens""];
""2164_updatedBalance"" [label=""updatedBalance""];
""2164_balanceOf"" [label=""balanceOf""];
""2164_GoldBackedToken"" [label=""GoldBackedToken""];
""2164_calcFees"" [label=""calcFees""];
""2164_burnTokens"" [label=""burnTokens""];
""2164_approve"" [label=""approve""];
""2164_addAllocationPartOne"" [label=""addAllocationPartOne""];
""2164_allowance"" [label=""allowance""];
""2164_transfer"" [label=""transfer""];
""2164_addAllocationPartTwo"" [label=""addAllocationPartTwo""];
""2164_setHGT"" [label=""setHGT""];
""2164_setMinter"" [label=""setMinter""];
""2164_aotLength"" [label=""aotLength""];
""2164_parentFees"" [label=""parentFees""];
""2164_parentChange"" [label=""parentChange""];
""2164_currentAllocationLength"" [label=""currentAllocationLength""];
""2164_setFeeCalculator"" [label=""setFeeCalculator""];
""2164_transferFrom"" [label=""transferFrom""];
""2164_partAllocationLength"" [label=""partAllocationLength""];
""2164_mintTokens"" -> ""2164_update"";
""2164_mintTokens"" -> ""2164_safeAdd"";
""2164_approve"" -> ""2164_whenNotPaused"";
""2164_transfer"" -> ""2164_safeAdd"";
""2164_transfer"" -> ""2164_update"";
""2164_transferFrom"" -> ""2164_whenNotPaused"";
""2164_addAllocationPartTwo"" -> ""2164_calcFees"";
""2164_transfer"" -> ""2164_safeSub"";
""2164_setFeeCalculator"" -> ""2164_onlyOwner"";
""2164_parentChange"" -> ""2164_whenNotPaused"";
""2164_addAllocationPartTwo"" -> ""2164_onlyOwner"";
""2164_setHGT"" -> ""2164_onlyOwner"";
""2164_addAllocationPartOne"" -> ""2164_onlyOwner"";
""2164_transfer"" -> ""2164_whenNotPaused"";
""2164_addAllocationPartOne"" -> ""2164_calcFees"";
""2164_update"" -> ""2164_updatedBalance"";
""2164_parentFees"" -> ""2164_whenNotPaused"";
""2164_transferFrom"" -> ""2164_update"";
""2164_updatedBalance"" -> ""2164_calcFees"";
""2164_burnTokens"" -> ""2164_safeSub"";
""2164_burnTokens"" -> ""2164_update"";
""2164_transferFrom"" -> ""2164_safeAdd"";
""2164_transferFrom"" -> ""2164_safeSub"";
""2164_parentFees"" -> ""2164_update"";
""2164_balanceOf"" -> ""2164_updatedBalance"";
""2164_setMinter"" -> ""2164_onlyOwner"";
}
"
0xa304100e0d17a972f34ed8a961034ce2fc47f9ca.sol,FomoBet,contract FomoBet { using SafeMath for uint; struct bet { address maker; address taker; uint256 round; bool longOrShort; bool validated; uint256 betEnd; uint256 betSize; },1,"subgraph cluster_1090_FomoBet {
label=""FomoBet"";
""1090_vaultToWallet"" [label=""vaultToWallet""];
""1090_fallback"" [label=""fallback""];
""1090_getbetsInfo"" [label=""getbetsInfo""];
""1090_fomoroundInfo"" [label=""fomoroundInfo""];
""1090_addToExistingOffer"" [label=""addToExistingOffer""];
""1090_removeFromExistingOffer"" [label=""removeFromExistingOffer""];
""1090_fomoround"" [label=""fomoround""];
""1090_getOfferInfo"" [label=""getOfferInfo""];
""1090_validateBet"" [label=""validateBet""];
""1090_death"" [label=""death""];
""1090_setupOffer"" [label=""setupOffer""];
""1090_takeOffer"" [label=""takeOffer""];
""1090_validateBet"" -> ""1090_fomoroundInfo"";
}
"
0x00c315ac9ff89bb6afa7524cd159f0a9766e8c89.sol,IMDEXDexchange,"contract IMDEXDexchange is SafeMath { address public owner; address IMDEXtoken = 0x46705E8fef2E868FACAFeDc45F47114EC01c2EEd; mapping (address => uint256) public invalidOrder; event SetOwner(address indexed previousOwner, address indexed newOwner); modifier onlyOwner { require(msg.sender == owner); _; }",1,"subgraph cluster_1019_IMDEXDexchange {
label=""IMDEXDexchange"";
""1019_IMDEXadminWithdraw"" [label=""IMDEXadminWithdraw""];
""1019_IMDEXdeposit"" [label=""IMDEXdeposit""];
""1019_IMDEXsetInactivityReleasePeriod"" [label=""IMDEXsetInactivityReleasePeriod""];
""1019_IMDEXtrade"" [label=""IMDEXtrade""];
""1019_balanceOf"" [label=""balanceOf""];
""1019_IMDEXwithdrawToken"" [label=""IMDEXwithdrawToken""];
""1019_constructor"" [label=""constructor""];
""1019_IMDEXinvalidateOrdersBefore"" [label=""IMDEXinvalidateOrdersBefore""];
""1019_IMDEXsetAdmin"" [label=""IMDEXsetAdmin""];
""1019_fallback"" [label=""fallback""];
""1019_IMDEXdepositToken"" [label=""IMDEXdepositToken""];
""1019_IMDEXsetOwner"" [label=""IMDEXsetOwner""];
""1019_IMDEXwithdrawToken"" -> ""1019_safeSub"";
""1019_IMDEXtrade"" -> ""1019_safeMul"";
""1019_IMDEXtrade"" -> ""1019_safeAdd"";
""1019_IMDEXsetOwner"" -> ""1019_onlyOwner"";
""1019_IMDEXinvalidateOrdersBefore"" -> ""1019_onlyAdmin"";
""1019_IMDEXdeposit"" -> ""1019_safeAdd"";
""1019_IMDEXadminWithdraw"" -> ""1019_safeAdd"";
""1019_IMDEXadminWithdraw"" -> ""1019_onlyAdmin"";
""1019_IMDEXtrade"" -> ""1019_onlyAdmin"";
""1019_IMDEXdepositToken"" -> ""1019_safeAdd"";
""1019_IMDEXadminWithdraw"" -> ""1019_safeSub"";
""1019_IMDEXadminWithdraw"" -> ""1019_safeMul"";
""1019_IMDEXsetAdmin"" -> ""1019_onlyOwner"";
""1019_IMDEXsetInactivityReleasePeriod"" -> ""1019_onlyAdmin"";
""1019_IMDEXtrade"" -> ""1019_safeSub"";
}
"
0x21ad0028fea5fafa55b9b60e9c065db9f1c0616e.sol,LikeCrowdsale,"contract LikeCrowdsale is HasOperator { using SafeMath for uint256; LikeCoin public like = LikeCoin(0x0); uint public start = 0; uint public end = 0; uint256 public coinsPerEth = 0; mapping (address => bool) public kycDone; bool finalized = false; event PriceChanged(uint256 _newPrice); event AddPrivateFund(address indexed _addr, uint256 _value); event RegisterKYC(address indexed _addr); event Purchase(address indexed _addr, uint256 _ethers, uint256 _coins); event LikeTransfer(address indexed _to, uint256 _value); event Finalize(); function LikeCrowdsale(address _likeAddr, uint _start, uint _end, uint256 _coinsPerEth) public { require(_coinsPerEth != 0); require(now < _start); require(_start < _end); owner = msg.sender; like = LikeCoin(_likeAddr); start = _start; end = _end; coinsPerEth = _coinsPerEth; }",1,"subgraph cluster_1949_LikeCrowdsale {
label=""LikeCrowdsale"";
""1949_LikeCrowdsale"" [label=""LikeCrowdsale""];
""1949_fallback"" [label=""fallback""];
""1949_finalize"" [label=""finalize""];
""1949_transferLike"" [label=""transferLike""];
""1949_addPrivateFund"" [label=""addPrivateFund""];
""1949_registerKYC"" [label=""registerKYC""];
""1949_changePrice"" [label=""changePrice""];
""1949_changePrice"" -> ""1949_onlyOwner"";
""1949_finalize"" -> ""1949_ownerOrOperator"";
""1949_transferLike"" -> ""1949_onlyOwner"";
""1949_registerKYC"" -> ""1949_ownerOrOperator"";
""1949_addPrivateFund"" -> ""1949_onlyOwner"";
}
"
0x2898ca01df2dc4062e8b269806de4996295a1f5c.sol,SaleAuction,contract SaleAuction is AuctionBase { address public beneficiary = msg.sender; function SaleAuction(address _nftAddress) public { ERC721 candidateContract = ERC721(_nftAddress); nonFungibleContract = candidateContract; },1,"subgraph cluster_579_SaleAuction {
label=""SaleAuction"";
""579_getAuction"" [label=""getAuction""];
""579_createAuction"" [label=""createAuction""];
""579_SaleAuction"" [label=""SaleAuction""];
""579_withdrawBalance"" [label=""withdrawBalance""];
""579_bid"" [label=""bid""];
""579_bidCustomAuction"" [label=""bidCustomAuction""];
""579_bidCustomAuction"" -> ""579__transfer"";
""579_createAuction"" -> ""579__escrow"";
""579_createAuction"" -> ""579__addAuction"";
""579_bid"" -> ""579__transfer"";
""579_bid"" -> ""579__bid"";
""579_bidCustomAuction"" -> ""579__bid"";
}
"
0x797d713d8d7a2815ccf3dcf9719e3e9f1712c370.sol,Trustee,contract Trustee is Ownable { using SaferMath for uint256; StoxSmartToken public stox; struct Grant { uint256 value; uint256 start; uint256 cliff; uint256 end; uint256 transferred; bool revokable; },1,"subgraph cluster_1489_Trustee {
label=""Trustee"";
""1489_vestedTokens"" [label=""vestedTokens""];
""1489_revoke"" [label=""revoke""];
""1489_unlockVestedTokens"" [label=""unlockVestedTokens""];
""1489_grant"" [label=""grant""];
""1489_Trustee"" [label=""Trustee""];
""1489_calculateVestedTokens"" [label=""calculateVestedTokens""];
""1489_unlockVestedTokens"" -> ""1489_calculateVestedTokens"";
""1489_vestedTokens"" -> ""1489_calculateVestedTokens"";
""1489_grant"" -> ""1489_onlyOwner"";
""1489_revoke"" -> ""1489_onlyOwner"";
}
"
0x174bb5d84b78e9e2248e7aa2c789aeba82f72f68.sol,LuckyTree,"contract LuckyTree is Owned, SafeMath{ uint public leafPrice; uint public gameStart; uint public gameDuration; uint public tokenLockDuration; uint public totalParticipationAmount; uint public totalLockedAmount; uint public numberOfLeafs; uint public participantIndex; bool public fundsTransfered; address public winner; mapping(uint => address) public participants; mapping(uint => uint) public participationAmount; mapping(address => bool) public hasParticipated; mapping(address => bool) public hasWithdrawn; mapping(address => uint) public participantIndexes; mapping(uint => address) public leafOwners; event GameWinner(address winner); event GameEnded(uint block); event GameStarted(uint block); event GameFailed(uint block); event GameLocked(uint block); event GameUnlocked(uint block); enum state{ pending, running, paused, finished, closed, claimed }",1,"subgraph cluster_1043_LuckyTree {
label=""LuckyTree"";
""1043_random"" [label=""random""];
""1043_lockFunds"" [label=""lockFunds""];
""1043_processTransaction"" [label=""processTransaction""];
""1043_closeGame"" [label=""closeGame""];
""1043_pickWinner"" [label=""pickWinner""];
""1043_manuallyProcessTransaction"" [label=""manuallyProcessTransaction""];
""1043_unlockFunds"" [label=""unlockFunds""];
""1043_setCreditGameAddress"" [label=""setCreditGameAddress""];
""1043_checkInternalBalance"" [label=""checkInternalBalance""];
""1043_salvageTokensFromContract"" [label=""salvageTokensFromContract""];
""1043_setTokenAddress"" [label=""setTokenAddress""];
""1043_receiveApproval"" [label=""receiveApproval""];
""1043_LuckyTree"" [label=""LuckyTree""];
""1043_getVariablesForDapp"" [label=""getVariablesForDapp""];
""1043_manualLockFunds"" [label=""manualLockFunds""];
""1043_killContract"" [label=""killContract""];
""1043_salvageTokensFromContract"" -> ""1043_onlyOwner"";
""1043_manuallyProcessTransaction"" -> ""1043_onlyOwner"";
""1043_manualLockFunds"" -> ""1043_onlyOwner"";
""1043_setCreditGameAddress"" -> ""1043_onlyOwner"";
""1043_setTokenAddress"" -> ""1043_onlyOwner"";
""1043_pickWinner"" -> ""1043_random"";
""1043_closeGame"" -> ""1043_onlyOwner"";
""1043_killContract"" -> ""1043_onlyOwner"";
""1043_receiveApproval"" -> ""1043_processTransaction"";
""1043_manualLockFunds"" -> ""1043_pickWinner"";
""1043_pickWinner"" -> ""1043_lockFunds"";
""1043_processTransaction"" -> ""1043_pickWinner"";
""1043_manuallyProcessTransaction"" -> ""1043_processTransaction"";
}
"
0xc3e329ca5380c6b416cf095ed1a662c378a2b630.sol,TaurusPay,"contract TaurusPay is StandardToken { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant INITIAL_SUPPLY = 950 * 10**6 * (10**uint256(decimals)); address public owner; mapping (address => bool) public contractUsers; bool public mintingFinished; uint256 public tokenAllocated = 0; mapping (address => uint) public countClaimsToken; uint256 public priceToken = 950000; uint256 public priceClaim = 0.0005 ether; uint256 public numberClaimToken = 200 * (10**uint256(decimals)); uint256 public startTimeDay = 50400; uint256 public endTimeDay = 51300; event OwnerChanged(address indexed previousOwner, address indexed newOwner); event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount); event TokenLimitReached(uint256 tokenRaised, uint256 purchasedToken); event MinWeiLimitReached(address indexed sender, uint256 weiAmount); event Mint(address indexed to, uint256 amount); event MintFinished(); constructor(address _owner) public { totalSupply = INITIAL_SUPPLY; owner = _owner; balances[owner] = INITIAL_SUPPLY; transfersEnabled = true; mintingFinished = false; }",1,"subgraph cluster_1389_TaurusPay {
label=""TaurusPay"";
""1389_constructor"" [label=""constructor""];
""1389_enableTransfers"" [label=""enableTransfers""];
""1389_claim"" [label=""claim""];
""1389_claimTokensToOwner"" [label=""claimTokensToOwner""];
""1389_validPurchaseTokens"" [label=""validPurchaseTokens""];
""1389_setPriceClaim"" [label=""setPriceClaim""];
""1389_fallback"" [label=""fallback""];
""1389_validPurchaseTime"" [label=""validPurchaseTime""];
""1389_finishMinting"" [label=""finishMinting""];
""1389_buyTokens"" [label=""buyTokens""];
""1389_mint"" [label=""mint""];
""1389_calcAmount"" [label=""calcAmount""];
""1389_changeTime"" [label=""changeTime""];
""1389_setNumberClaimToken"" [label=""setNumberClaimToken""];
""1389_changeOwner"" [label=""changeOwner""];
""1389_changeOwner"" -> ""1389_onlyOwner"";
""1389_setNumberClaimToken"" -> ""1389_onlyOwner"";
""1389_finishMinting"" -> ""1389_onlyOwner"";
""1389_claim"" -> ""1389_calcAmount"";
""1389_claim"" -> ""1389_validPurchaseTime"";
""1389_calcAmount"" -> ""1389_canMint"";
""1389_buyTokens"" -> ""1389_validPurchaseTokens"";
""1389_buyTokens"" -> ""1389_mint"";
""1389_validPurchaseTime"" -> ""1389_canMint"";
""1389_fallback"" -> ""1389_buyTokens"";
""1389_setPriceClaim"" -> ""1389_onlyOwner"";
""1389_enableTransfers"" -> ""1389_onlyOwner"";
""1389_finishMinting"" -> ""1389_canMint"";
""1389_mint"" -> ""1389_canMint"";
""1389_claimTokensToOwner"" -> ""1389_onlyOwner"";
""1389_claim"" -> ""1389_canMint"";
}
"
0x0356e14c2f8de339131c668c1747def594467a9a.sol,Club1VIT,"contract Club1VIT is Ownable { using SafeMath for uint256; string public name = ; string public symbol = ; uint8 public decimals = 0; uint256 public initialSupply = 1; mapping(address => uint256) balances; mapping (address => mapping (address => uint256)) internal allowed; event Transfer(address indexed from, address indexed to); function totalSupply() public view returns (uint256) { return initialSupply; }",1,"subgraph cluster_329_Club1VIT {
label=""Club1VIT"";
""329_transfer"" [label=""transfer""];
""329_Club1VIT"" [label=""Club1VIT""];
""329_transferFrom"" [label=""transferFrom""];
""329_totalSupply"" [label=""totalSupply""];
""329_balanceOf"" [label=""balanceOf""];
""329_transferFrom"" -> ""329_onlyOwner"";
}
"
0xaa63c8683647ef91b3fdab4b4989ee9588da297b.sol,DSProxyFactory,"contract DSProxyFactory { event Created(address indexed sender, address proxy, address cache); mapping(address=>bool) public isProxy; DSProxyCache public cache = new DSProxyCache(); function build() public returns (DSProxy proxy) { proxy = build(msg.sender); }",1,"subgraph cluster_346_DSProxyFactory {
label=""DSProxyFactory"";
""346_build"" [label=""build""];
""346_build"" -> ""346_build"";
}
"
0x861a174d677946d8c2bea8f9636a53fde1668215.sol,SmartContractBank,contract SmartContractBank { using SafeMath for uint256; struct Investor { uint256 deposit; uint256 paymentTime; uint256 withdrawals; bool increasedPercent; bool insured; },1,"subgraph cluster_1079_SmartContractBank {
label=""SmartContractBank"";
""1079_fallback"" [label=""fallback""];
""1079_allocation"" [label=""allocation""];
""1079_getPhasePercent"" [label=""getPhasePercent""];
""1079_increasePercent"" [label=""increasePercent""];
""1079_withdraw"" [label=""withdraw""];
""1079_setInsured"" [label=""setInsured""];
""1079_setInsuranceFundAddress"" [label=""setInsuranceFundAddress""];
""1079_getUserBalance"" [label=""getUserBalance""];
""1079_closeEntrance"" [label=""closeEntrance""];
""1079_getUserBalance"" -> ""1079_getPhasePercent"";
""1079_fallback"" -> ""1079_increasePercent"";
""1079_setInsured"" -> ""1079_onlyIF"";
""1079_withdraw"" -> ""1079_getUserBalance"";
""1079_fallback"" -> ""1079_allocation"";
""1079_fallback"" -> ""1079_withdraw"";
}
"
0x6fc22d1f6852af2bcea6cb749033ccb6b4d3177a.sol,BitSTDView,"contract BitSTDView { BitSTDLogic private logic; address public owner; event Transfer(address indexed from, address indexed to, uint256 value); event FrozenFunds(address target, bool frozen); event Burn(address indexed from, uint256 value); function balanceOf(address add)constant public returns (uint256) { return logic.balanceOf(add); }",1,"subgraph cluster_1510_BitSTDView {
label=""BitSTDView"";
""1510_frozenAccount"" [label=""frozenAccount""];
""1510_decimals"" [label=""decimals""];
""1510_transferFrom"" [label=""transferFrom""];
""1510_buy"" [label=""buy""];
""1510_symbol"" [label=""symbol""];
""1510_mintToken"" [label=""mintToken""];
""1510_buyPrice"" [label=""buyPrice""];
""1510_freezeAccount"" [label=""freezeAccount""];
""1510_transferDataAuthority"" [label=""transferDataAuthority""];
""1510_transferAuthority"" [label=""transferAuthority""];
""1510_approve"" [label=""approve""];
""1510_sellPrice"" [label=""sellPrice""];
""1510_constructor"" [label=""constructor""];
""1510_burn"" [label=""burn""];
""1510_transferLogicAuthority"" [label=""transferLogicAuthority""];
""1510_totalSupply"" [label=""totalSupply""];
""1510_balanceOf"" [label=""balanceOf""];
""1510_migration"" [label=""migration""];
""1510_setBitSTD"" [label=""setBitSTD""];
""1510_transfer"" [label=""transfer""];
""1510_sell"" [label=""sell""];
""1510_allowance"" [label=""allowance""];
""1510_name"" [label=""name""];
""1510_burnFrom"" [label=""burnFrom""];
""1510_approveAndCall"" [label=""approveAndCall""];
""1510_mintToken"" -> ""1510_onlyOwner"";
""1510_transferAuthority"" -> ""1510_onlyOwner"";
""1510_transferLogicAuthority"" -> ""1510_onlyOwner"";
""1510_freezeAccount"" -> ""1510_onlyOwner"";
""1510_setBitSTD"" -> ""1510_onlyOwner"";
""1510_transferDataAuthority"" -> ""1510_onlyOwner"";
}
"
0x58b334f15d7c7e08287b4ae57d11f35e0c2ad497.sol,LockinManager,contract LockinManager { using SafeMath for uint256; struct Lock { uint256 amount; uint256 unlockDate; uint256 lockedFor; },1,"subgraph cluster_1738_LockinManager {
label=""LockinManager"";
""1738_lockIt"" [label=""lockIt""];
""1738_getLocksLockedFor"" [label=""getLocksLockedFor""];
""1738_getLock"" [label=""getLock""];
""1738_ifInAllowedLocks"" [label=""ifInAllowedLocks""];
""1738_getLocks"" [label=""getLocks""];
""1738_removeAllowedLock"" [label=""removeAllowedLock""];
""1738_setDefaultAllowedLock"" [label=""setDefaultAllowedLock""];
""1738_LockinManager"" [label=""LockinManager""];
""1738_lockForDays"" [label=""lockForDays""];
""1738_addValidContract"" [label=""addValidContract""];
""1738_removeValidContract"" [label=""removeValidContract""];
""1738_defaultLockin"" [label=""defaultLockin""];
""1738_getLocksAmount"" [label=""getLocksAmount""];
""1738_addAllowedLock"" [label=""addAllowedLock""];
""1738_getLocksUnlockDate"" [label=""getLocksUnlockDate""];
""1738_getLocksUnlockDate"" -> ""1738_validContractOnly"";
""1738_removeValidContract"" -> ""1738_adminOnly"";
""1738_setDefaultAllowedLock"" -> ""1738_adminOnly"";
""1738_getLocksAmount"" -> ""1738_validContractOnly"";
""1738_getLocksLockedFor"" -> ""1738_validContractOnly"";
""1738_getLocks"" -> ""1738_validContractOnly"";
""1738_removeAllowedLock"" -> ""1738_adminOnly"";
""1738_getLock"" -> ""1738_validContractOnly"";
""1738_addAllowedLock"" -> ""1738_adminOnly"";
""1738_defaultLockin"" -> ""1738_lockIt"";
""1738_lockForDays"" -> ""1738_ifInAllowedLocks"";
""1738_lockForDays"" -> ""1738_lockIt"";
""1738_addValidContract"" -> ""1738_adminOnly"";
""1738_defaultLockin"" -> ""1738_validContractOnly"";
}
"
0x4c13184721de2d1b47a8875775ba3ce0b2e00ee0.sol,SharkPool,"contract SharkPool is Ownable, ReentrancyGuard { string constant public pool_name = ; uint256 public pool_percentage = 5; uint256 constant public max_users = 100; uint256 public total_users = 0; uint256 public constant divisible_units = 10000000; uint256 public contract_period = 100; uint256 public mined_blocks = 1; uint256 public claimed_blocks = 1; uint256 public blockCreationRate = 0; BitcoineumInterface base_contract; struct user { uint256 start_block; uint256 end_block; uint256 proportional_contribution; }",1,"subgraph cluster_893_SharkPool {
label=""SharkPool"";
""893_current_external_block"" [label=""current_external_block""];
""893_SharkPool"" [label=""SharkPool""];
""893_find_contribution"" [label=""find_contribution""];
""893_mine"" [label=""mine""];
""893_checkMiningAttempt"" [label=""checkMiningAttempt""];
""893_checkWinning"" [label=""checkWinning""];
""893_allocate_slot"" [label=""allocate_slot""];
""893_fallback"" [label=""fallback""];
""893_available_slots"" [label=""available_slots""];
""893_get_bitcoineum_contract_address"" [label=""get_bitcoineum_contract_address""];
""893_external_to_internal_block_number"" [label=""external_to_internal_block_number""];
""893_do_redemption"" [label=""do_redemption""];
""893_redeem"" [label=""redeem""];
""893_set_pool_percentage"" [label=""set_pool_percentage""];
""893_balanceOf"" [label=""balanceOf""];
""893_distribute_reward"" [label=""distribute_reward""];
""893_calculate_minimum_contribution"" [label=""calculate_minimum_contribution""];
""893_claim"" [label=""claim""];
""893_SharkPool"" -> ""893_get_bitcoineum_contract_address"";
""893_redeem"" -> ""893_do_redemption"";
""893_set_pool_percentage"" -> ""893_nonReentrant"";
""893_redeem"" -> ""893_nonReentrant"";
""893_set_pool_percentage"" -> ""893_onlyOwner"";
""893_mine"" -> ""893_external_to_internal_block_number"";
""893_fallback"" -> ""893_do_redemption"";
""893_claim"" -> ""893_distribute_reward"";
""893_mine"" -> ""893_current_external_block"";
""893_fallback"" -> ""893_allocate_slot"";
""893_fallback"" -> ""893_calculate_minimum_contribution"";
""893_claim"" -> ""893_nonReentrant"";
""893_mine"" -> ""893_nonReentrant"";
}
"
0x3a37dcda0503f92626c082540dfbc9d95104ab96.sol,EthernautsLogic,contract EthernautsLogic is EthernautsOwnership { address public newContractAddress; function EthernautsLogic() public { ceoAddress = msg.sender; ctoAddress = msg.sender; cooAddress = msg.sender; oracleAddress = msg.sender; paused = true; },1,"subgraph cluster_1987_EthernautsLogic {
label=""EthernautsLogic"";
""1987_withdrawBalances"" [label=""withdrawBalances""];
""1987_EthernautsLogic"" [label=""EthernautsLogic""];
""1987_unpause"" [label=""unpause""];
""1987_getBalance"" [label=""getBalance""];
""1987_setNewAddress"" [label=""setNewAddress""];
""1987_setEthernautsStorageContract"" [label=""setEthernautsStorageContract""];
""1987_unpause"" -> ""1987_whenPaused"";
""1987_unpause"" -> ""1987_unpause"";
""1987_unpause"" -> ""1987_onlyCEO"";
""1987_withdrawBalances"" -> ""1987_onlyCLevel"";
""1987_getBalance"" -> ""1987_onlyCLevel"";
""1987_setNewAddress"" -> ""1987_onlyCTO"";
""1987_setEthernautsStorageContract"" -> ""1987_onlyCLevel"";
""1987_setNewAddress"" -> ""1987_whenPaused"";
""1987_setEthernautsStorageContract"" -> ""1987_whenPaused"";
}
"
0x0e752b742f744fdc2d93774da44c37b72c3e6952.sol,CraftyCrowdsale,"contract CraftyCrowdsale is Pausable { using SafeMath for uint256; mapping(address => uint256) received; MintableToken public token; uint256 public preSaleStart; uint256 public preSaleEnd; uint256 public saleStart; uint256 public saleEnd; uint256 public issuedTokens = 0; uint256 public constant hardCap = 5000000000 * 10**8; uint256 constant teamCap = 1450000000 * 10**8; uint256 constant advisorCap = 450000000 * 10**8; uint256 constant bountyCap = 100000000 * 10**8; uint256 constant fundCap = 3000000000 * 10**8; uint256 constant lockTime = 180 days; address public etherWallet; address public teamWallet; address public advisorWallet; address public fundWallet; address public bountyWallet; TokenTimelock teamTokens; uint256 public rate; enum State { BEFORE_START, SALE, REFUND, CLOSED }",1,"subgraph cluster_1475_CraftyCrowdsale {
label=""CraftyCrowdsale"";
""1475_releaseTeamTokens"" [label=""releaseTeamTokens""];
""1475_setWallets"" [label=""setWallets""];
""1475_setRate"" [label=""setRate""];
""1475_enableRefund"" [label=""enableRefund""];
""1475_receivedFrom"" [label=""receivedFrom""];
""1475_getRate"" [label=""getRate""];
""1475_generateTokens"" [label=""generateTokens""];
""1475_claimRefund"" [label=""claimRefund""];
""1475_reclaimEther"" [label=""reclaimEther""];
""1475_buyTokens"" [label=""buyTokens""];
""1475_CraftyCrowdsale"" [label=""CraftyCrowdsale""];
""1475_fallback"" [label=""fallback""];
""1475_finishCrowdsale"" [label=""finishCrowdsale""];
""1475_finishCrowdsale"" -> ""1475_inState"";
""1475_setWallets"" -> ""1475_inState"";
""1475_buyTokens"" -> ""1475_whenNotPaused"";
""1475_setRate"" -> ""1475_onlyOwner"";
""1475_claimRefund"" -> ""1475_whenNotPaused"";
""1475_buyTokens"" -> ""1475_saleIsOn"";
""1475_buyTokens"" -> ""1475_getRate"";
""1475_enableRefund"" -> ""1475_inState"";
""1475_enableRefund"" -> ""1475_onlyOwner"";
""1475_setRate"" -> ""1475_beforeSale"";
""1475_claimRefund"" -> ""1475_inState"";
""1475_reclaimEther"" -> ""1475_onlyOwner"";
""1475_finishCrowdsale"" -> ""1475_onlyOwner"";
""1475_generateTokens"" -> ""1475_onlyOwner"";
""1475_setWallets"" -> ""1475_onlyOwner"";
""1475_fallback"" -> ""1475_buyTokens"";
}
"
0x58b334f15d7c7e08287b4ae57d11f35e0c2ad497.sol,Token,"contract Token { using SafeMath for uint256; mapping (address => uint256) public balances; mapping(address => mapping (address => uint256)) allowed; address[] allTokenHolders; string public name; string public symbol; uint8 public decimals; uint256 totalSupplyAmount = 0; address public refundManagerContractAddress; AuthenticationManager authenticationManager; LockinManager lockinManager; function availableBalance(address _owner) constant returns(uint256) { uint256 length = lockinManager.getLocks(_owner); uint256 lockedValue = 0; for(uint256 i = 0; i < length; i++) { if(lockinManager.getLocksUnlockDate(_owner, i) > now) { uint256 _value = lockinManager.getLocksAmount(_owner, i); lockedValue = lockedValue.add(_value); }",1,"subgraph cluster_1291_Token {
label=""Token"";
""1291_availableBalance"" [label=""availableBalance""];
""1291_mintTokens"" [label=""mintTokens""];
""1291_balanceOf"" [label=""balanceOf""];
""1291_tokenHolderCount"" [label=""tokenHolderCount""];
""1291_transfer"" [label=""transfer""];
""1291_totalSupply"" [label=""totalSupply""];
""1291_Token"" [label=""Token""];
""1291_tokenOwnerRemove"" [label=""tokenOwnerRemove""];
""1291_approve"" [label=""approve""];
""1291_setLockinManagerAddress"" [label=""setLockinManagerAddress""];
""1291_transferFrom"" [label=""transferFrom""];
""1291_allowance"" [label=""allowance""];
""1291_setRefundManagerContract"" [label=""setRefundManagerContract""];
""1291_tokenOwnerAdd"" [label=""tokenOwnerAdd""];
""1291_tokenHolder"" [label=""tokenHolder""];
""1291_destroyTokens"" [label=""destroyTokens""];
""1291_transferFrom"" -> ""1291_tokenOwnerRemove"";
""1291_transferFrom"" -> ""1291_tokenOwnerAdd"";
""1291_transfer"" -> ""1291_onlyPayloadSize"";
""1291_approve"" -> ""1291_onlyPayloadSize"";
""1291_mintTokens"" -> ""1291_onlyPayloadSize"";
""1291_transferFrom"" -> ""1291_onlyPayloadSize"";
""1291_mintTokens"" -> ""1291_tokenOwnerAdd"";
""1291_transfer"" -> ""1291_availableBalance"";
""1291_setLockinManagerAddress"" -> ""1291_adminOnly"";
""1291_transfer"" -> ""1291_tokenOwnerRemove"";
""1291_setRefundManagerContract"" -> ""1291_adminOnly"";
""1291_destroyTokens"" -> ""1291_availableBalance"";
""1291_tokenHolder"" -> ""1291_accountReaderOnly"";
""1291_destroyTokens"" -> ""1291_tokenOwnerRemove"";
""1291_tokenHolderCount"" -> ""1291_accountReaderOnly"";
""1291_transferFrom"" -> ""1291_availableBalance"";
""1291_transfer"" -> ""1291_tokenOwnerAdd"";
}
"
0x5af9ec6df6edea0761fa841ce56c2e4deb000b31.sol,ZebiMainCrowdsale,contract ZebiMainCrowdsale is Ownable{ using SafeMath for uint256; ZebiCoin public token; uint256 currentYearMinted; uint256 calenderYearMintCap; uint256 calenderYearStart; uint256 calenderYearEnd; uint256 vestedMintStartTime; uint256 zebiZCOShare; uint256 crowdsaleZCOCap; uint256 transStartTime; ZebiCoinCrowdsale public zcc; ZebiCoinTempMgr public tempMngr; uint64 public tokenDecimals; uint256 public startTime; uint256 public endTime; uint256 public goldListPeriod; uint256 public postGoldPeriod; uint256 public minTransAmount; uint256 public ethCap; mapping(address => uint256) mainContribution; mapping(address => bool) mainCancelledList; uint256 goldPeriodCap; bool goldListPeriodFlag; mapping(address=>uint256) goldListContribution; mapping(address => bool) goldList; mapping(address => bool) kycAcceptedList; address public wallet; bool public withinRefundPeriod; mapping(address => uint256) preSaleRefundsInMainSale; uint256 public tokens; uint256 public weiAmount; uint256 public ETHtoZWeirate; uint256 public mainWeiRaised; modifier inCancelledList { require(mainCancelledList[msg.sender]); _; },1,"subgraph cluster_3258_ZebiMainCrowdsale {
label=""ZebiMainCrowdsale"";
""3258_addCancellation"" [label=""addCancellation""];
""3258_enableRefundPeriod"" [label=""enableRefundPeriod""];
""3258_fallback"" [label=""fallback""];
""3258_viewGoldList"" [label=""viewGoldList""];
""3258_getTokenAmount"" [label=""getTokenAmount""];
""3258_viewContribution"" [label=""viewContribution""];
""3258_transferTokenOwnership"" [label=""transferTokenOwnership""];
""3258_resumeMint"" [label=""resumeMint""];
""3258_addToGoldList"" [label=""addToGoldList""];
""3258_addToKYCList"" [label=""addToKYCList""];
""3258_forwardFunds"" [label=""forwardFunds""];
""3258_withdraw"" [label=""withdraw""];
""3258_validPurchase"" [label=""validPurchase""];
""3258_viewKYCAccepted"" [label=""viewKYCAccepted""];
""3258_mintvestedTokens"" [label=""mintvestedTokens""];
""3258_endTransfer"" [label=""endTransfer""];
""3258_startTransfer"" [label=""startTransfer""];
""3258_viewCancelledList"" [label=""viewCancelledList""];
""3258_takeEth"" [label=""takeEth""];
""3258_disableRefundPeriod"" [label=""disableRefundPeriod""];
""3258_buyTokens"" [label=""buyTokens""];
""3258_viewPreSaleRefundsInMainSale"" [label=""viewPreSaleRefundsInMainSale""];
""3258_removeFromKYCList"" [label=""removeFromKYCList""];
""3258_ZebiMainCrowdsale"" [label=""ZebiMainCrowdsale""];
""3258_forcedRefund"" [label=""forcedRefund""];
""3258_finishMint"" [label=""finishMint""];
""3258_mintAndAllocateZCO"" [label=""mintAndAllocateZCO""];
""3258_refund"" [label=""refund""];
""3258_removeFromGoldList"" [label=""removeFromGoldList""];
""3258_fallback"" -> ""3258_buyTokens"";
""3258_mintAndAllocateZCO"" -> ""3258_onlyOwner"";
""3258_removeFromKYCList"" -> ""3258_onlyOwner"";
""3258_refund"" -> ""3258_inCancelledList"";
""3258_forcedRefund"" -> ""3258_onlyOwner"";
""3258_removeFromGoldList"" -> ""3258_onlyOwner"";
""3258_endTransfer"" -> ""3258_onlyOwner"";
""3258_buyTokens"" -> ""3258_forwardFunds"";
""3258_withdraw"" -> ""3258_onlyOwner"";
""3258_buyTokens"" -> ""3258_validPurchase"";
""3258_startTransfer"" -> ""3258_onlyOwner"";
""3258_refund"" -> ""3258_inRefundPeriod"";
""3258_finishMint"" -> ""3258_onlyOwner"";
""3258_transferTokenOwnership"" -> ""3258_onlyOwner"";
""3258_enableRefundPeriod"" -> ""3258_onlyOwner"";
""3258_mintvestedTokens"" -> ""3258_onlyOwner"";
""3258_disableRefundPeriod"" -> ""3258_onlyOwner"";
""3258_addToGoldList"" -> ""3258_onlyOwner"";
""3258_buyTokens"" -> ""3258_getTokenAmount"";
""3258_addCancellation"" -> ""3258_onlyOwner"";
""3258_addToKYCList"" -> ""3258_onlyOwner"";
""3258_resumeMint"" -> ""3258_onlyOwner"";
}
"
0xdda80deeb2db6d63247b9be73bacd00184fbc83f.sol,OwnerContract,contract OwnerContract is Claimable { Claimable public ownedContract; address internal origOwner; function bindContract(address _contract) onlyOwner public returns (bool) { require(_contract != address(0)); ownedContract = Claimable(_contract); origOwner = ownedContract.owner(); ownedContract.claimOwnership(); return true; },1,"subgraph cluster_564_OwnerContract {
label=""OwnerContract"";
""564_bindContract"" [label=""bindContract""];
""564_changeOwnershipto"" [label=""changeOwnershipto""];
""564_transferOwnershipBack"" [label=""transferOwnershipBack""];
""564_changeOwnershipto"" -> ""564_onlyOwner"";
""564_transferOwnershipBack"" -> ""564_onlyOwner"";
""564_bindContract"" -> ""564_onlyOwner"";
}
"
0xec2e5c8d51fdd54fef83db8300399a3c2e167922.sol,CrowdsaleToken,"contract CrowdsaleToken is Manageable { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public totalSupply; mapping(address => uint256) balances; mapping (address => mapping (address => uint256)) internal allowed; mapping (address => uint256) public releaseTime; bool public released; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Mint(address indexed _to, uint256 _value); event ReleaseTimeChanged(address indexed _owner, uint256 _oldReleaseTime, uint256 _newReleaseTime); event ReleasedChanged(bool _oldReleased, bool _newReleased); modifier canTransfer(address _from) { if (releaseTime[_from] == 0) { require(released); }",1,"subgraph cluster_860_CrowdsaleToken {
label=""CrowdsaleToken"";
""860_approve"" [label=""approve""];
""860_allocate"" [label=""allocate""];
""860_allowance"" [label=""allowance""];
""860_setReleaseTime"" [label=""setReleaseTime""];
""860_transferFrom"" [label=""transferFrom""];
""860_transfer"" [label=""transfer""];
""860_mint"" [label=""mint""];
""860_setReleased"" [label=""setReleased""];
""860_deallocate"" [label=""deallocate""];
""860_balanceOf"" [label=""balanceOf""];
""860_allocate"" -> ""860_onlyOwnerOrManager"";
""860_transfer"" -> ""860_canTransfer"";
""860_mint"" -> ""860_onlyOwnerOrManager"";
""860_transferFrom"" -> ""860_canTransfer"";
""860_setReleased"" -> ""860_onlyOwnerOrManager"";
""860_deallocate"" -> ""860_onlyOwnerOrManager"";
""860_setReleaseTime"" -> ""860_onlyOwnerOrManager"";
""860_mint"" -> ""860_setReleaseTime"";
}
"
0x2737e022e8bf733b05fa0706b0e80003a576ccb4.sol,TokenValueRelayer,contract TokenValueRelayer { struct TokenValueRepresentation { uint256 value; string currency; uint256 timestamp; },1,"subgraph cluster_540_TokenValueRelayer {
label=""TokenValueRelayer"";
""540_tokenValueCount"" [label=""tokenValueCount""];
""540_tokenValuePublish"" [label=""tokenValuePublish""];
""540_TokenValueRelayer"" [label=""TokenValueRelayer""];
""540_tokenValuePublish"" -> ""540_adminOnly"";
}
"
0x3325e30f4326f17bdd79146db0a3835175f0e982.sol,SAMIToken,contract SAMIToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 100000000000000000000 * (10**8); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; function SAMIToken () { owner = msg.sender; },1,"subgraph cluster_756_SAMIToken {
label=""SAMIToken"";
""756_refundTokens"" [label=""refundTokens""];
""756_totalSupply"" [label=""totalSupply""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_SAMIToken"" [label=""SAMIToken""];
""756_transferFrom"" [label=""transferFrom""];
""756_approve"" [label=""approve""];
""756_transfer"" [label=""transfer""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_createTokens"" [label=""createTokens""];
""756_setOwner"" [label=""setOwner""];
""756_createTokens"" -> ""756_safeAdd"";
""756_approve"" -> ""756_allowance"";
""756_transfer"" -> ""756_transfer"";
""756_createTokens"" -> ""756_safeSub"";
""756_transferFrom"" -> ""756_transferFrom"";
""756_approve"" -> ""756_approve"";
}
"
0x3a966ffa8451cbf3769b7d1f94d5b47da254edb0.sol,Play0x_LottoBall,contract Play0x_LottoBall { using SafeMath for uint256; using SafeMath for uint128; using SafeMath for uint40; using SafeMath for uint8; uint public jackpotSize; uint public tokenJackpotSize; uint public MIN_BET; uint public MAX_BET; uint public MAX_AMOUNT; uint public maxProfit; uint public maxTokenProfit; uint8 public platformFeePercentage = 15; uint8 public jackpotFeePercentage = 5; uint8 public ERC20rewardMultiple = 5; uint constant BetExpirationBlocks = 250; uint public lockedInBets; uint public lockedTokenInBets; bytes32 bitComparisonMask = 0xF; address public owner; address private nextOwner; address public manager; address private nextManager; address[] public secretSignerList; address public ERC20ContractAddres; address constant DUMMY_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; struct Bet { uint amount; uint40 placeBlockNumber; address gambler; },1,"subgraph cluster_3084_Play0x_LottoBall {
label=""Play0x_LottoBall"";
""3084_setMaxProfit"" [label=""setMaxProfit""];
""3084_getJackpotWinBonus"" [label=""getJackpotWinBonus""];
""3084_sendFunds"" [label=""sendFunds""];
""3084_sendTokenFundsToManager"" [label=""sendTokenFundsToManager""];
""3084_updateMAX_AMOUNT"" [label=""updateMAX_AMOUNT""];
""3084_approveNextOwner"" [label=""approveNextOwner""];
""3084_getBonusPercentageByMachineMode"" [label=""getBonusPercentageByMachineMode""];
""3084_withdrawAlltokenFunds"" [label=""withdrawAlltokenFunds""];
""3084_updateBitComparisonMask"" [label=""updateBitComparisonMask""];
""3084_settleBetVerifi"" [label=""settleBetVerifi""];
""3084_withdrawToken"" [label=""withdrawToken""];
""3084_getPossibleWinAmount"" [label=""getPossibleWinAmount""];
""3084_setTokenAddress"" [label=""setTokenAddress""];
""3084_withdrawFunds"" [label=""withdrawFunds""];
""3084_updateJackpotFeePercentage"" [label=""updateJackpotFeePercentage""];
""3084_updatePlatformFeePercentage"" [label=""updatePlatformFeePercentage""];
""3084_refundBet"" [label=""refundBet""];
""3084_updateERC20rewardMultiple"" [label=""updateERC20rewardMultiple""];
""3084_updateMIN_BET"" [label=""updateMIN_BET""];
""3084_settleBet"" [label=""settleBet""];
""3084_clearProcessedBet"" [label=""clearProcessedBet""];
""3084_getContractInformation"" [label=""getContractInformation""];
""3084_withdrawAllFunds"" [label=""withdrawAllFunds""];
""3084_refundTokenBet"" [label=""refundTokenBet""];
""3084_updateWithdrawalModeByIndex"" [label=""updateWithdrawalModeByIndex""];
""3084_setSecretSignerByIndex"" [label=""setSecretSignerByIndex""];
""3084_runRotateTime"" [label=""runRotateTime""];
""3084_getContractAddress"" [label=""getContractAddress""];
""3084_initialParameter"" [label=""initialParameter""];
""3084_setSecretSignerList"" [label=""setSecretSignerList""];
""3084_fallback"" [label=""fallback""];
""3084_placeTokenBet"" [label=""placeTokenBet""];
""3084_sendFundsToOwner"" [label=""sendFundsToOwner""];
""3084_constructor"" [label=""constructor""];
""3084_acceptNextOwner"" [label=""acceptNextOwner""];
""3084_updateWithdrawalMode"" [label=""updateWithdrawalMode""];
""3084_sendFundsToManager"" [label=""sendFundsToManager""];
""3084_kill"" [label=""kill""];
""3084_acceptNextManager"" [label=""acceptNextManager""];
""3084_clearStorage"" [label=""clearStorage""];
""3084_updateMAX_BET"" [label=""updateMAX_BET""];
""3084_placeBet"" [label=""placeBet""];
""3084_approveNextManager"" [label=""approveNextManager""];
""3084_withdrawToken"" -> ""3084_onlyOwner"";
""3084_updateBitComparisonMask"" -> ""3084_onlyOwner"";
""3084_clearStorage"" -> ""3084_clearProcessedBet"";
""3084_withdrawAllFunds"" -> ""3084_onlyOwner"";
""3084_sendFundsToManager"" -> ""3084_onlyOwner"";
""3084_refundTokenBet"" -> ""3084_getPossibleWinAmount"";
""3084_updateJackpotFeePercentage"" -> ""3084_onlyOwner"";
""3084_setMaxProfit"" -> ""3084_onlyOwner"";
""3084_withdrawAlltokenFunds"" -> ""3084_onlyOwner"";
""3084_settleBet"" -> ""3084_sendFunds"";
""3084_setTokenAddress"" -> ""3084_onlyManager"";
""3084_updateWithdrawalModeByIndex"" -> ""3084_onlyManager"";
""3084_updateERC20rewardMultiple"" -> ""3084_onlyManager"";
""3084_updateMIN_BET"" -> ""3084_onlyManager"";
""3084_initialParameter"" -> ""3084_onlyOwner"";
""3084_setSecretSignerByIndex"" -> ""3084_onlyOwner"";
""3084_withdrawFunds"" -> ""3084_onlyOwner"";
""3084_approveNextManager"" -> ""3084_onlyManager"";
""3084_setSecretSignerList"" -> ""3084_onlyOwner"";
""3084_withdrawFunds"" -> ""3084_sendFunds"";
""3084_refundBet"" -> ""3084_getBonusPercentageByMachineMode"";
""3084_sendTokenFundsToManager"" -> ""3084_onlyOwner"";
""3084_refundTokenBet"" -> ""3084_getBonusPercentageByMachineMode"";
""3084_kill"" -> ""3084_onlyOwner"";
""3084_settleBet"" -> ""3084_runRotateTime"";
""3084_sendFundsToOwner"" -> ""3084_onlyOwner"";
""3084_approveNextOwner"" -> ""3084_onlyOwner"";
""3084_updateMAX_AMOUNT"" -> ""3084_onlyManager"";
""3084_refundBet"" -> ""3084_getPossibleWinAmount"";
""3084_updatePlatformFeePercentage"" -> ""3084_onlyOwner"";
""3084_settleBetVerifi"" -> ""3084_runRotateTime"";
""3084_updateWithdrawalMode"" -> ""3084_onlyManager"";
""3084_refundBet"" -> ""3084_sendFunds"";
""3084_runRotateTime"" -> ""3084_getJackpotWinBonus"";
""3084_updateMAX_BET"" -> ""3084_onlyManager"";
}
"
0x88355a32a8c5cc399aa09b9d21ebcba935ae5d2f.sol,BankWallet,"contract BankWallet is Pausable, RequiringAuthorization, SafeMath { address public edgelessToken; address public edgelessCasino; uint public maxFundAmount = 0.22 ether; event Withdrawal(address _token, uint _amount); event Deposit(address _receiver, uint _amount); event Fund(address _receiver, uint _amount); constructor(address _token, address _casino) public { edgelessToken = _token; edgelessCasino = _casino; owner = msg.sender; }",1,"subgraph cluster_666_BankWallet {
label=""BankWallet"";
""666_setMaxFundAmount"" [label=""setMaxFundAmount""];
""666_setCasinoContract"" [label=""setCasinoContract""];
""666_withdraw"" [label=""withdraw""];
""666_fallback"" [label=""fallback""];
""666_constructor"" [label=""constructor""];
""666__approveForCasino"" [label=""_approveForCasino""];
""666_approve"" [label=""approve""];
""666_deposit"" [label=""deposit""];
""666_fund"" [label=""fund""];
""666_withdraw"" -> ""666_onlyAdmin"";
""666_setMaxFundAmount"" -> ""666_onlyAdmin"";
""666_setCasinoContract"" -> ""666__approveForCasino"";
""666_setCasinoContract"" -> ""666_onlyAdmin"";
""666_fund"" -> ""666_onlyAuthorized"";
""666_deposit"" -> ""666_onlyAuthorized"";
""666_approve"" -> ""666__approveForCasino"";
""666_approve"" -> ""666_onlyAuthorized"";
}
"
0xb620cee6b52f96f3c6b253e6eea556aa2d214a99.sol,DrainMe,"contract DrainMe { address public winner = 0x0; address public owner; address public firstTarget = 0x461ec7309F187dd4650EE6b4D25D93c922d7D56b; address public secondTarget = 0x1C3E062c77f09fC61550703bDd1D59842C22c766; address[] public players; mapping(address=>bool) approvedPlayers; uint256 public secret; uint256[] public seed = [951828771,158769871220]; uint256[] public balance; function DranMe() public payable{ owner = msg.sender; }",1,"subgraph cluster_387_DrainMe {
label=""DrainMe"";
""387_getPlayerCount"" [label=""getPlayerCount""];
""387_guessSeed"" [label=""guessSeed""];
""387_DranMe"" [label=""DranMe""];
""387_callFirstTarget"" [label=""callFirstTarget""];
""387_setSeed"" [label=""setSeed""];
""387_becomePlayer"" [label=""becomePlayer""];
""387_manipulateSecret"" [label=""manipulateSecret""];
""387_fallback"" [label=""fallback""];
""387_winPrize"" [label=""winPrize""];
""387_unlockSecret"" [label=""unlockSecret""];
""387_checkSecret"" [label=""checkSecret""];
""387_getPrize"" [label=""getPrize""];
""387_getLength"" [label=""getLength""];
""387_setSecret"" [label=""setSecret""];
""387_callSecondTarget"" [label=""callSecondTarget""];
""387_claimPrize"" [label=""claimPrize""];
""387_addSeed"" [label=""addSeed""];
""387_manipulateSecret"" -> ""387_unlockSecret"";
""387_winPrize"" -> ""387_onlyOwner"";
""387_checkSecret"" -> ""387_onlyPlayers"";
""387_manipulateSecret"" -> ""387_onlyPlayers"";
""387_callSecondTarget"" -> ""387_onlyPlayers"";
""387_setSecret"" -> ""387_onlyOwner"";
""387_callFirstTarget"" -> ""387_onlyPlayers"";
""387_addSeed"" -> ""387_onlyPlayers"";
""387_setSeed"" -> ""387_onlyPlayers"";
""387_claimPrize"" -> ""387_onlyWinner"";
""387_guessSeed"" -> ""387_onlyPlayers"";
}
"
0x4c7f666ca30fe548fbdc08b0308927327f08336d.sol,EthicHubTokenDistributionStrategy,"contract EthicHubTokenDistributionStrategy is Ownable, WhitelistedDistributionStrategy { event UnsoldTokensReturned(address indexed destination, uint256 amount); function EthicHubTokenDistributionStrategy(EthixToken _token, uint256 _rate, uint256 _rateForWhitelisted) WhitelistedDistributionStrategy(_token, _rate, _rateForWhitelisted) public { }",1,"subgraph cluster_1658_EthicHubTokenDistributionStrategy {
label=""EthicHubTokenDistributionStrategy"";
""1658_returnUnsoldTokens"" [label=""returnUnsoldTokens""];
""1658_EthicHubTokenDistributionStrategy"" [label=""EthicHubTokenDistributionStrategy""];
""1658_initIntervals"" [label=""initIntervals""];
""1658_initIntervals"" -> ""1658_validateIntervals"";
""1658_initIntervals"" -> ""1658_onlyOwner"";
""1658_EthicHubTokenDistributionStrategy"" -> ""1658_WhitelistedDistributionStrategy"";
""1658_returnUnsoldTokens"" -> ""1658_onlyCrowdsale"";
}
"
0x470142a1834438515b757118f322703aba6e1e05.sol,PolicyPalNetworkAirdrop,contract PolicyPalNetworkAirdrop { struct BountyType { bool twitter; bool signature; },1,"subgraph cluster_662_PolicyPalNetworkAirdrop {
label=""PolicyPalNetworkAirdrop"";
""662_signatureDropMultipleAmount"" [label=""signatureDropMultipleAmount""];
""662_airDropSingleAmount"" [label=""airDropSingleAmount""];
""662_twitterDropSingleAmount"" [label=""twitterDropSingleAmount""];
""662_signatureDropSingleAmount"" [label=""signatureDropSingleAmount""];
""662_emergencyDrain"" [label=""emergencyDrain""];
""662_twitterDropMultipleAmount"" [label=""twitterDropMultipleAmount""];
""662_PolicyPalNetworkAirdrop"" [label=""PolicyPalNetworkAirdrop""];
""662_airDropMultipleAmount"" [label=""airDropMultipleAmount""];
""662_twitterDropSingleAmount"" -> ""662_onlyAdmin"";
""662_signatureDropSingleAmount"" -> ""662_validBalance"";
""662_airDropSingleAmount"" -> ""662_onlyAdmin"";
""662_emergencyDrain"" -> ""662_onlyAdmin"";
""662_signatureDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_airDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropSingleAmount"" -> ""662_validBalance"";
""662_signatureDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_signatureDropSingleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropSingleAmount"" -> ""662_validBalance"";
""662_PolicyPalNetworkAirdrop"" -> ""662_validAddress"";
""662_twitterDropMultipleAmount"" -> ""662_onlyAdmin"";
}
"
0x6fbc1b8f756f43cfbfd45085380cc375650ff3d6.sol,ZethrSnap,contract ZethrSnap { struct SnapEntry { uint blockNumber; uint profit; },1,"subgraph cluster_563_ZethrSnap {
label=""ZethrSnap"";
""563_walletSetWallet"" [label=""walletSetWallet""];
""563_withdraw"" [label=""withdraw""];
""563_walletCreateSnap"" [label=""walletCreateSnap""];
""563_tokenFallback"" [label=""tokenFallback""];
""563_walletSetSigner"" [label=""walletSetSigner""];
""563_walletWithdrawTokens"" [label=""walletWithdrawTokens""];
""563_constructor"" [label=""constructor""];
""563_getSnap"" [label=""getSnap""];
""563_toUint"" [label=""toUint""];
""563_toSig"" [label=""toSig""];
""563_fallback"" [label=""fallback""];
""563_getSnapsLength"" [label=""getSnapsLength""];
""563_claim"" [label=""claim""];
""563_ownerSetPaused"" [label=""ownerSetPaused""];
""563_walletSetWallet"" -> ""563_walletOnly"";
""563_walletWithdrawTokens"" -> ""563_walletOnly"";
""563_claim"" -> ""563_toSig"";
""563_walletSetSigner"" -> ""563_walletOnly"";
""563_toSig"" -> ""563_toUint"";
""563_walletCreateSnap"" -> ""563_walletOnly"";
""563_ownerSetPaused"" -> ""563_ownerOnly"";
}
"
0x402fa04ccd2c2568e1a53dbecec1bd572303663a.sol,HarborPresale,"contract HarborPresale is Haltable { using SafeMath for uint256; HarborToken public token; uint256 public startTime; uint256 public endTime; address public wallet; uint256 public rate; uint256 public weiRaised; uint256 public cap; bool public isFinalized = false; uint256 public minimumFundingGoal; uint256 public minSend; RefundVault public vault; uint public tokensMinted; mapping (address => uint256) public tokenDeposited; event Finalized(); event TokenMinted(uint count); event Distributed(address investor, uint tokenAmount); event PeriodChanged(uint256 starttm,uint256 endtm); event TokenPurchase(address indexed purchaser, address indexed investor, uint256 value); function HarborPresale(address _token, uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, uint256 _cap, uint256 _minimumFundingGoal, uint256 _minSend) { require(_startTime >= now); require(_endTime >= _startTime); require(_rate > 0); require(_wallet != 0x0); require(_cap > 0); require(_minimumFundingGoal > 0); token = HarborToken(_token); startTime = _startTime; endTime = _endTime; rate = _rate; wallet = _wallet; cap = _cap; vault = new RefundVault(_wallet); minimumFundingGoal = _minimumFundingGoal; minSend = _minSend; }",1,"subgraph cluster_1508_HarborPresale {
label=""HarborPresale"";
""1508_finalize"" [label=""finalize""];
""1508_minFundingGoalReached"" [label=""minFundingGoalReached""];
""1508_fallback"" [label=""fallback""];
""1508_claimTokenAddress"" [label=""claimTokenAddress""];
""1508_HarborPresale"" [label=""HarborPresale""];
""1508_claimRefund"" [label=""claimRefund""];
""1508_withdrawFund"" [label=""withdrawFund""];
""1508_claimToken"" [label=""claimToken""];
""1508_hasEnded"" [label=""hasEnded""];
""1508_finalization"" [label=""finalization""];
""1508_mintForEverybody"" [label=""mintForEverybody""];
""1508_setPeriod"" [label=""setPeriod""];
""1508_validPurchase"" [label=""validPurchase""];
""1508_buyTokens"" [label=""buyTokens""];
""1508_claimRefund"" -> ""1508_stopInEmergency"";
""1508_claimRefund"" -> ""1508_minFundingGoalReached"";
""1508_finalize"" -> ""1508_hasEnded"";
""1508_finalization"" -> ""1508_minFundingGoalReached"";
""1508_claimToken"" -> ""1508_stopInEmergency"";
""1508_buyTokens"" -> ""1508_validPurchase"";
""1508_fallback"" -> ""1508_buyTokens"";
""1508_claimToken"" -> ""1508_claimTokenAddress"";
""1508_finalize"" -> ""1508_stopInEmergency"";
""1508_mintForEverybody"" -> ""1508_onlyOwner"";
""1508_claimTokenAddress"" -> ""1508_stopInEmergency"";
""1508_setPeriod"" -> ""1508_onlyOwner"";
""1508_buyTokens"" -> ""1508_stopInEmergency"";
""1508_finalize"" -> ""1508_finalization"";
""1508_withdrawFund"" -> ""1508_onlyOwner"";
""1508_withdrawFund"" -> ""1508_minFundingGoalReached"";
""1508_finalize"" -> ""1508_onlyOwner"";
}
"
0x56853ab9006e0712b05c68b586372fcdde5236b9.sol,AirDrop,"contract AirDrop is Ownable { Token token; event TransferredToken(address indexed to, uint256 value); event FailedTransfer(address indexed to, uint256 value); modifier whenDropIsActive() { assert(isActive()); _; }",1,"subgraph cluster_282_AirDrop {
label=""AirDrop"";
""282_sendTokens"" [label=""sendTokens""];
""282_AirDrop"" [label=""AirDrop""];
""282_sendInternally"" [label=""sendInternally""];
""282_tokensAvailable"" [label=""tokensAvailable""];
""282_sendTokensSingleValue"" [label=""sendTokensSingleValue""];
""282_destroy"" [label=""destroy""];
""282_isActive"" [label=""isActive""];
""282_sendTokens"" -> ""282_sendInternally"";
""282_sendTokensSingleValue"" -> ""282_onlyOwner"";
""282_sendInternally"" -> ""282_tokensAvailable"";
""282_sendTokensSingleValue"" -> ""282_sendInternally"";
""282_sendTokens"" -> ""282_onlyOwner"";
""282_sendTokensSingleValue"" -> ""282_whenDropIsActive"";
""282_destroy"" -> ""282_onlyOwner"";
""282_destroy"" -> ""282_tokensAvailable"";
""282_sendTokens"" -> ""282_whenDropIsActive"";
""282_isActive"" -> ""282_tokensAvailable"";
}
"
0x7868fc162988289062dbcdb670a3cf6c8da66f84.sol,CDMarketplace,contract CDMarketplace is Ownable { bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba; address public wallet; uint256 public fee_percentage; ERC721Basic public token; address public manager; address internal checkAndBuySender; address public TVTokenAddress; address public TVCrowdsaleAddress; bytes4 constant TOKEN_RECEIVED = bytes4(keccak256()); modifier onlyOwnerOrManager() { require(msg.sender == owner || manager == msg.sender); _; },1,"subgraph cluster_790_CDMarketplace {
label=""CDMarketplace"";
""790_changeTVCrowdsaleAddress"" [label=""changeTVCrowdsaleAddress""];
""790_onERC721Received"" [label=""onERC721Received""];
""790_changeFeePercentage"" [label=""changeFeePercentage""];
""790_changeAndBuy"" [label=""changeAndBuy""];
""790_setManager"" [label=""setManager""];
""790_constructor"" [label=""constructor""];
""790_setToken"" [label=""setToken""];
""790_changeTVTokenAddress"" [label=""changeTVTokenAddress""];
""790_setWallet"" [label=""setWallet""];
""790_convertBytesToBytes32"" [label=""convertBytesToBytes32""];
""790_toBytes"" [label=""toBytes""];
""790_onTokenReceived"" [label=""onTokenReceived""];
""790_cancel"" [label=""cancel""];
""790_changeTVCrowdsaleAddress"" -> ""790_onlyOwnerOrManager"";
""790_setToken"" -> ""790_onlyOwnerOrManager"";
""790_setWallet"" -> ""790_onlyOwnerOrManager"";
""790_changeTVTokenAddress"" -> ""790_onlyOwnerOrManager"";
""790_onTokenReceived"" -> ""790_convertBytesToBytes32"";
""790_onERC721Received"" -> ""790_convertBytesToBytes32"";
""790_changeFeePercentage"" -> ""790_onlyOwnerOrManager"";
""790_setManager"" -> ""790_onlyOwner"";
""790_changeAndBuy"" -> ""790_toBytes"";
}
"
0x85b794252e7f1b2b24392a5267ff2086c0c3d7d1.sol,CashPokerProPreICO,"contract CashPokerProPreICO is Ownable, Pausable { using SafeMath for uint; address public tokenWallet; uint public tokensSold; uint public weiRaised; uint public investorCount; Token public token; uint constant minInvest = 0.01 ether; uint constant tokensLimit = 10000000 * 1 ether; uint256 public startTime = 1503770400; uint256 public endTime = 1504893600; uint price = 0.00017 * 1 ether; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); function CashPokerProPreICO() { tokenWallet = msg.sender; }",1,"subgraph cluster_489_CashPokerProPreICO {
label=""CashPokerProPreICO"";
""489_fallback"" [label=""fallback""];
""489_setTokenWallet"" [label=""setTokenWallet""];
""489_withdrawal"" [label=""withdrawal""];
""489_setToken"" [label=""setToken""];
""489_buyTokens"" [label=""buyTokens""];
""489_transfer"" [label=""transfer""];
""489_CashPokerProPreICO"" [label=""CashPokerProPreICO""];
""489_setTokenWallet"" -> ""489_onlyOwner"";
""489_withdrawal"" -> ""489_onlyOwner"";
""489_setToken"" -> ""489_onlyOwner"";
""489_buyTokens"" -> ""489_whenNotPaused"";
""489_transfer"" -> ""489_onlyOwner"";
""489_fallback"" -> ""489_buyTokens"";
}
"
0x514bc174df04a4b04ae2be81ee8c788c3796b06b.sol,Deco,contract Deco is ERC20ERC223 { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant totalSupply = 6*10**26; mapping(address => Account) private accounts; struct Account { uint256 balance; mapping(address => uint256) allowed; mapping(address => bool) isAllowanceAuthorized; },1,"subgraph cluster_615_Deco {
label=""Deco"";
""615_hasApproval"" [label=""hasApproval""];
""615_allowance"" [label=""allowance""];
""615_removeApproval"" [label=""removeApproval""];
""615_balanceOf"" [label=""balanceOf""];
""615_approve"" [label=""approve""];
""615_isContract"" [label=""isContract""];
""615_transfer"" [label=""transfer""];
""615_Deco"" [label=""Deco""];
""615_transferFrom"" [label=""transferFrom""];
""615_performTransfer"" [label=""performTransfer""];
""615_transfer"" -> ""615_performTransfer"";
""615_transferFrom"" -> ""615_performTransfer"";
""615_transferFrom"" -> ""615_hasApproval"";
""615_performTransfer"" -> ""615_isContract"";
""615_transfer"" -> ""615_onlyPayloadSize"";
""615_transferFrom"" -> ""615_onlyPayloadSize"";
}
"
0x18f0cd26c06449d967ca6aef8b5f9d8ee9fd7992.sol,Exch,"contract Exch is SafeMath { address public admin; address public feeAccount; address public accountLevelsAddr; uint public feeMake; uint public feeTake; uint public feeRebate; mapping (address => mapping (address => uint)) public tokens; mapping (address => mapping (bytes32 => bool)) public orders; mapping (address => mapping (bytes32 => uint)) public orderFills; mapping (address => bool) public whiteListERC20; mapping (address => bool) public whiteListERC223; event Order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user); event Cancel(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s); event Trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give); event Deposit(address token, address user, uint amount, uint balance); event Withdraw(address token, address user, uint amount, uint balance); modifier onlyAdmin() { require(msg.sender==admin); _; }",1,"subgraph cluster_1411_Exch {
label=""Exch"";
""1411_withdrawToken"" [label=""withdrawToken""];
""1411_changeAccountLevelsAddr"" [label=""changeAccountLevelsAddr""];
""1411_setBlackListERC223"" [label=""setBlackListERC223""];
""1411_constructor"" [label=""constructor""];
""1411_amountFilled"" [label=""amountFilled""];
""1411_setWhiteListERC20"" [label=""setWhiteListERC20""];
""1411_changeFeeTake"" [label=""changeFeeTake""];
""1411_availableVolume"" [label=""availableVolume""];
""1411_trade"" [label=""trade""];
""1411_changeFeeMake"" [label=""changeFeeMake""];
""1411_depositToken"" [label=""depositToken""];
""1411_changeFeeRebate"" [label=""changeFeeRebate""];
""1411_tradeBalances"" [label=""tradeBalances""];
""1411_changeAdmin"" [label=""changeAdmin""];
""1411_withdraw"" [label=""withdraw""];
""1411_fallback"" [label=""fallback""];
""1411_balanceOf"" [label=""balanceOf""];
""1411_deposit"" [label=""deposit""];
""1411_cancelOrder"" [label=""cancelOrder""];
""1411_tokenFallback"" [label=""tokenFallback""];
""1411_setBlackListERC20"" [label=""setBlackListERC20""];
""1411_setWhiteListERC223"" [label=""setWhiteListERC223""];
""1411_changeFeeAccount"" [label=""changeFeeAccount""];
""1411_testTrade"" [label=""testTrade""];
""1411_order"" [label=""order""];
""1411_setWhiteListERC20"" -> ""1411_onlyAdmin"";
""1411_tokenFallback"" -> ""1411_safeAdd"";
""1411_depositToken"" -> ""1411_safeAdd"";
""1411_withdrawToken"" -> ""1411_safeSub"";
""1411_availableVolume"" -> ""1411_safeMul"";
""1411_availableVolume"" -> ""1411_safeSub"";
""1411_deposit"" -> ""1411_safeAdd"";
""1411_withdraw"" -> ""1411_safeSub"";
""1411_setBlackListERC20"" -> ""1411_onlyAdmin"";
""1411_setBlackListERC223"" -> ""1411_onlyAdmin"";
""1411_changeFeeAccount"" -> ""1411_onlyAdmin"";
""1411_trade"" -> ""1411_tradeBalances"";
""1411_changeFeeTake"" -> ""1411_onlyAdmin"";
""1411_trade"" -> ""1411_safeAdd"";
""1411_tradeBalances"" -> ""1411_safeSub"";
""1411_changeFeeRebate"" -> ""1411_onlyAdmin"";
""1411_testTrade"" -> ""1411_availableVolume"";
""1411_changeAccountLevelsAddr"" -> ""1411_onlyAdmin"";
""1411_changeAdmin"" -> ""1411_onlyAdmin"";
""1411_tradeBalances"" -> ""1411_safeAdd"";
""1411_tradeBalances"" -> ""1411_safeMul"";
""1411_setWhiteListERC223"" -> ""1411_onlyAdmin"";
""1411_changeFeeMake"" -> ""1411_onlyAdmin"";
}
"
0x44f958d420f0543353a5e4f14e827d73f01b4261.sol,EBBToken,"contract EBBToken is StandardToken, SafeMath { string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 18; string public version = ; address public ethFundDeposit; address public newContractAddr; bool public isFunding; uint256 public fundingStartBlock; uint256 public fundingStopBlock; uint256 public currentSupply; uint256 public tokenRaised = 0; uint256 public tokenMigrated = 0; uint256 public tokenExchangeRate = 5963; event AllocateToken(address indexed _to, uint256 _value); event IssueToken(address indexed _to, uint256 _value); event IncreaseSupply(uint256 _value); event DecreaseSupply(uint256 _value); event Migrate(address indexed _to, uint256 _value); function formatDecimals(uint256 _value) internal returns (uint256 ) { return _value * 10 ** decimals; }",1,"subgraph cluster_849_EBBToken {
label=""EBBToken"";
""849_decreaseSupply"" [label=""decreaseSupply""];
""849_increaseSupply"" [label=""increaseSupply""];
""849_stopFunding"" [label=""stopFunding""];
""849_changeOwner"" [label=""changeOwner""];
""849_transferETH"" [label=""transferETH""];
""849_setMigrateContract"" [label=""setMigrateContract""];
""849_allocateToken"" [label=""allocateToken""];
""849_startFunding"" [label=""startFunding""];
""849_fallback"" [label=""fallback""];
""849_setTokenExchangeRate"" [label=""setTokenExchangeRate""];
""849_EBBToken"" [label=""EBBToken""];
""849_migrate"" [label=""migrate""];
""849_formatDecimals"" [label=""formatDecimals""];
""849_migrate"" -> ""849_safeAdd"";
""849_decreaseSupply"" -> ""849_formatDecimals"";
""849_decreaseSupply"" -> ""849_safeSubtract"";
""849_transferETH"" -> ""849_isOwner"";
""849_allocateToken"" -> ""849_isOwner"";
""849_startFunding"" -> ""849_isOwner"";
""849_fallback"" -> ""849_safeMult"";
""849_allocateToken"" -> ""849_safeMult"";
""849_increaseSupply"" -> ""849_isOwner"";
""849_setMigrateContract"" -> ""849_isOwner"";
""849_EBBToken"" -> ""849_formatDecimals"";
""849_allocateToken"" -> ""849_formatDecimals"";
""849_allocateToken"" -> ""849_safeAdd"";
""849_setTokenExchangeRate"" -> ""849_isOwner"";
""849_changeOwner"" -> ""849_isOwner"";
""849_increaseSupply"" -> ""849_formatDecimals"";
""849_fallback"" -> ""849_safeAdd"";
""849_stopFunding"" -> ""849_isOwner"";
""849_increaseSupply"" -> ""849_safeAdd"";
""849_decreaseSupply"" -> ""849_isOwner"";
}
"
0x9ac36892387ed90df9af3de1b7082153f08f3ef8.sol,DSProxy,"contract DSProxy is DSAuth, DSNote { DSProxyCache public cache; constructor(address _cacheAddr) public { require(setCache(_cacheAddr)); }",1,"subgraph cluster_394_DSProxyCache {
label=""DSProxyCache"";
""394_write"" [label=""write""];
""394_read"" [label=""read""];
}
"
0xee91e81927bb047ea0f4b24e43dd5dc0684827a0.sol,BINGToken,contract BINGToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 1000000000 * (10**18); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; function BINGToken () { owner = msg.sender; },1,"subgraph cluster_756_BINGToken {
label=""BINGToken"";
""756_setOwner"" [label=""setOwner""];
""756_totalSupply"" [label=""totalSupply""];
""756_BINGToken"" [label=""BINGToken""];
""756_createTokens"" [label=""createTokens""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_transfer"" [label=""transfer""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_approve"" [label=""approve""];
""756_transferFrom"" [label=""transferFrom""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_refundTokens"" [label=""refundTokens""];
""756_transferFrom"" -> ""756_transferFrom"";
""756_approve"" -> ""756_allowance"";
""756_createTokens"" -> ""756_safeAdd"";
""756_approve"" -> ""756_approve"";
""756_transfer"" -> ""756_transfer"";
""756_createTokens"" -> ""756_safeSub"";
}
"
0x5af9ec6df6edea0761fa841ce56c2e4deb000b31.sol,ZebiCoinTempMgr,contract ZebiCoinTempMgr is Ownable{ using SafeMath for uint256; address public wallet; ZebiCoinCrowdsale public preSaleCSSC; ZebiCoin public tsc; uint64 tokenDecimals; mapping(address => bool) preSaleCancelledList; mapping(address => uint256) noncsAllocations; bool public withinRefundPeriod; mapping(address => uint256) preSaleRefunds; modifier inPreSaleCancelledList { require(preSaleCancelledList[msg.sender]); _; },1,"subgraph cluster_1923_ZebiCoinTempMgr {
label=""ZebiCoinTempMgr"";
""1923_allocatenonCSTokens"" [label=""allocatenonCSTokens""];
""1923_endTransfer"" [label=""endTransfer""];
""1923_enableRefundPeriod"" [label=""enableRefundPeriod""];
""1923_takeEth"" [label=""takeEth""];
""1923_withdraw"" [label=""withdraw""];
""1923_viewNoncsallocations"" [label=""viewNoncsallocations""];
""1923_viewPreSaleRefunds"" [label=""viewPreSaleRefunds""];
""1923_disableRefundPeriod"" [label=""disableRefundPeriod""];
""1923_ZebiCoinTempMgr"" [label=""ZebiCoinTempMgr""];
""1923_resumeMint"" [label=""resumeMint""];
""1923_startTransfer"" [label=""startTransfer""];
""1923_revertNoncsallocation"" [label=""revertNoncsallocation""];
""1923_forcedRefund"" [label=""forcedRefund""];
""1923_finishMint"" [label=""finishMint""];
""1923_addCancellation"" [label=""addCancellation""];
""1923_transferTokenOwnership"" [label=""transferTokenOwnership""];
""1923_refund"" [label=""refund""];
""1923_viewPreSaleCancelledList"" [label=""viewPreSaleCancelledList""];
""1923_refund"" -> ""1923_inPreSaleCancelledList"";
""1923_addCancellation"" -> ""1923_onlyOwner"";
""1923_refund"" -> ""1923_inRefundPeriod"";
""1923_revertNoncsallocation"" -> ""1923_onlyOwner"";
""1923_disableRefundPeriod"" -> ""1923_onlyOwner"";
""1923_startTransfer"" -> ""1923_onlyOwner"";
""1923_transferTokenOwnership"" -> ""1923_onlyOwner"";
""1923_withdraw"" -> ""1923_onlyOwner"";
""1923_enableRefundPeriod"" -> ""1923_onlyOwner"";
""1923_allocatenonCSTokens"" -> ""1923_onlyOwner"";
""1923_endTransfer"" -> ""1923_onlyOwner"";
""1923_forcedRefund"" -> ""1923_onlyOwner"";
""1923_resumeMint"" -> ""1923_onlyOwner"";
""1923_finishMint"" -> ""1923_onlyOwner"";
}
"
0xa5e5be69c923c701ae6ac8f1f5936af3ae610c68.sol,Collectables,"contract Collectables is ERC721Full(, ), Ownable { using Strings for string; mapping(uint32 => address) public delegates; uint32[] public collectables; uint public delegateCount; event DelegateAdded(address indexed delegate, uint32 indexed delegateID); function addDelegate(address delegate) public onlyOwner { uint32 delegateID = uint32(delegateCount++); require(delegates[delegateID] == address(0), ); delegates[delegateID] = delegate; emit DelegateAdded(delegate, delegateID); }",1,"subgraph cluster_2118_Collectables {
label=""Collectables"";
""2118_getTokenDelegate"" [label=""getTokenDelegate""];
""2118_safeTransferFrom"" [label=""safeTransferFrom""];
""2118_addDelegate"" [label=""addDelegate""];
""2118_mint"" [label=""mint""];
""2118_getDelegate"" [label=""getDelegate""];
""2118_tokenURI"" [label=""tokenURI""];
""2118_transferFrom"" [label=""transferFrom""];
""2118_approve"" [label=""approve""];
""2118_approve"" -> ""2118_approve"";
""2118_addDelegate"" -> ""2118_onlyOwner"";
""2118_transferFrom"" -> ""2118_transferFrom"";
""2118_mint"" -> ""2118__mint"";
""2118_transferFrom"" -> ""2118_getTokenDelegate"";
""2118_approve"" -> ""2118_getTokenDelegate"";
""2118_tokenURI"" -> ""2118__exists"";
""2118_safeTransferFrom"" -> ""2118_getTokenDelegate"";
""2118_mint"" -> ""2118_getDelegate"";
""2118_safeTransferFrom"" -> ""2118_safeTransferFrom"";
}
"
0x4cf488387f035ff08c371515562cba712f9015d4.sol,WPR,"contract WPR is MintableToken, PausableToken { string constant public name = ; string constant public symbol = ; uint constant public decimals = 18; function WPR() { }",1,"subgraph cluster_880_WPR {
label=""WPR"";
""880_WPR"" [label=""WPR""];
""880_claimTokens"" [label=""claimTokens""];
""880_disown"" [label=""disown""];
""880_disown"" -> ""880_onlyOwner"";
""880_claimTokens"" -> ""880_onlyOwner"";
}
"
0xa2edca10311a70883c5019b51048f55fd1508fe6.sol,FoMo3DshortAgain,"contract FoMo3DshortAgain is modularShort { using SafeMath for *; using NameFilter for string; using F3DKeysCalcShort for uint256; PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0xF6b8836492f8332D17B1496828d2bEE71ad511DA); address private admin = msg.sender; string constant public name = ; string constant public symbol = ; uint256 private rndExtra_ = 30 minutes; uint256 private rndGap_ = 30 minutes; uint256 constant private rndInit_ = 30 minutes; uint256 constant private rndInc_ = 10 seconds; uint256 constant private rndMax_ = 30 minutes; uint256 public airDropPot_; uint256 public airDropTracker_ = 0; uint256 public rID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => F3Ddatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => F3Ddatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => F3Ddatasets.Round) public round_; mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping (uint256 => F3Ddatasets.TeamFee) public fees_; mapping (uint256 => F3Ddatasets.PotSplit) public potSplit_; constructor() public { fees_[0] = F3Ddatasets.TeamFee(30,6); fees_[1] = F3Ddatasets.TeamFee(43,0); fees_[2] = F3Ddatasets.TeamFee(56,10); fees_[3] = F3Ddatasets.TeamFee(43,8); potSplit_[0] = F3Ddatasets.PotSplit(15,10); potSplit_[1] = F3Ddatasets.PotSplit(25,0); potSplit_[2] = F3Ddatasets.PotSplit(20,20); potSplit_[3] = F3Ddatasets.PotSplit(30,10); }",1,"subgraph cluster_4209_FoMo3DshortAgain {
label=""FoMo3DshortAgain"";
""4209_determinePID"" [label=""determinePID""];
""4209_distributeInternal"" [label=""distributeInternal""];
""4209_reLoadCore"" [label=""reLoadCore""];
""4209_verifyTeam"" [label=""verifyTeam""];
""4209_reLoadXid"" [label=""reLoadXid""];
""4209_updateGenVault"" [label=""updateGenVault""];
""4209_reLoadXname"" [label=""reLoadXname""];
""4209_airdrop"" [label=""airdrop""];
""4209_fallback"" [label=""fallback""];
""4209_buyXid"" [label=""buyXid""];
""4209_receivePlayerNameList"" [label=""receivePlayerNameList""];
""4209_getBuyPrice"" [label=""getBuyPrice""];
""4209_potSwap"" [label=""potSwap""];
""4209_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""4209_buyXaddr"" [label=""buyXaddr""];
""4209_activate"" [label=""activate""];
""4209_constructor"" [label=""constructor""];
""4209_iWantXKeys"" [label=""iWantXKeys""];
""4209_getTimeLeft"" [label=""getTimeLeft""];
""4209_withdraw"" [label=""withdraw""];
""4209_registerNameXaddr"" [label=""registerNameXaddr""];
""4209_endTx"" [label=""endTx""];
""4209_managePlayer"" [label=""managePlayer""];
""4209_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""4209_core"" [label=""core""];
""4209_buyXname"" [label=""buyXname""];
""4209_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""4209_endRound"" [label=""endRound""];
""4209_registerNameXname"" [label=""registerNameXname""];
""4209_registerNameXID"" [label=""registerNameXID""];
""4209_updateTimer"" [label=""updateTimer""];
""4209_withdrawEarnings"" [label=""withdrawEarnings""];
""4209_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""4209_calcKeysReceived"" [label=""calcKeysReceived""];
""4209_getPlayerVaults"" [label=""getPlayerVaults""];
""4209_receivePlayerInfo"" [label=""receivePlayerInfo""];
""4209_distributeExternal"" [label=""distributeExternal""];
""4209_updateMasks"" [label=""updateMasks""];
""4209_buyCore"" [label=""buyCore""];
""4209_reLoadXaddr"" [label=""reLoadXaddr""];
""4209_buyXid"" -> ""4209_verifyTeam"";
""4209_buyXname"" -> ""4209_verifyTeam"";
""4209_reLoadCore"" -> ""4209_core"";
""4209_buyXaddr"" -> ""4209_verifyTeam"";
""4209_core"" -> ""4209_updateTimer"";
""4209_managePlayer"" -> ""4209_updateGenVault"";
""4209_buyXaddr"" -> ""4209_determinePID"";
""4209_reLoadXid"" -> ""4209_isHuman"";
""4209_buyXid"" -> ""4209_isActivated"";
""4209_buyCore"" -> ""4209_endRound"";
""4209_buyXname"" -> ""4209_determinePID"";
""4209_reLoadCore"" -> ""4209_endRound"";
""4209_getPlayerVaults"" -> ""4209_calcUnMaskedEarnings"";
""4209_buyXname"" -> ""4209_buyCore"";
""4209_buyXid"" -> ""4209_determinePID"";
""4209_reLoadXid"" -> ""4209_isActivated"";
""4209_reLoadXname"" -> ""4209_verifyTeam"";
""4209_withdraw"" -> ""4209_endRound"";
""4209_distributeInternal"" -> ""4209_updateMasks"";
""4209_fallback"" -> ""4209_buyCore"";
""4209_buyXid"" -> ""4209_isHuman"";
""4209_withdraw"" -> ""4209_isActivated"";
""4209_core"" -> ""4209_managePlayer"";
""4209_registerNameXname"" -> ""4209_isHuman"";
""4209_reLoadXaddr"" -> ""4209_isWithinLimits"";
""4209_reLoadXname"" -> ""4209_isWithinLimits"";
""4209_reLoadXname"" -> ""4209_isHuman"";
""4209_reLoadXid"" -> ""4209_reLoadCore"";
""4209_buyXaddr"" -> ""4209_isActivated"";
""4209_registerNameXaddr"" -> ""4209_isHuman"";
""4209_reLoadXaddr"" -> ""4209_reLoadCore"";
""4209_buyXaddr"" -> ""4209_isHuman"";
""4209_reLoadXname"" -> ""4209_isActivated"";
""4209_core"" -> ""4209_distributeExternal"";
""4209_buyXname"" -> ""4209_isActivated"";
""4209_buyXname"" -> ""4209_isHuman"";
""4209_reLoadXname"" -> ""4209_reLoadCore"";
""4209_fallback"" -> ""4209_isWithinLimits"";
""4209_reLoadXaddr"" -> ""4209_isActivated"";
""4209_fallback"" -> ""4209_isHuman"";
""4209_reLoadXaddr"" -> ""4209_verifyTeam"";
""4209_core"" -> ""4209_airdrop"";
""4209_fallback"" -> ""4209_determinePID"";
""4209_getPlayerInfoByAddress"" -> ""4209_calcUnMaskedEarnings"";
""4209_withdraw"" -> ""4209_withdrawEarnings"";
""4209_reLoadXid"" -> ""4209_isWithinLimits"";
""4209_buyXid"" -> ""4209_isWithinLimits"";
""4209_registerNameXID"" -> ""4209_isHuman"";
""4209_reLoadXid"" -> ""4209_verifyTeam"";
""4209_reLoadXaddr"" -> ""4209_isHuman"";
""4209_getPlayerVaults"" -> ""4209_getPlayerVaultsHelper"";
""4209_buyXaddr"" -> ""4209_buyCore"";
""4209_core"" -> ""4209_endTx"";
""4209_core"" -> ""4209_distributeInternal"";
""4209_updateGenVault"" -> ""4209_calcUnMaskedEarnings"";
""4209_buyXname"" -> ""4209_isWithinLimits"";
""4209_withdrawEarnings"" -> ""4209_updateGenVault"";
""4209_buyXid"" -> ""4209_buyCore"";
""4209_buyCore"" -> ""4209_core"";
""4209_withdraw"" -> ""4209_isHuman"";
""4209_fallback"" -> ""4209_isActivated"";
""4209_reLoadCore"" -> ""4209_withdrawEarnings"";
""4209_buyXaddr"" -> ""4209_isWithinLimits"";
}
"
0x5155a0722a45905dacf49598a02eff3777340acd.sol,RegistryUpdater,"contract RegistryUpdater is Ownable { address public polymathRegistry; address public moduleRegistry; address public securityTokenRegistry; address public featureRegistry; address public polyToken; constructor (address _polymathRegistry) public { require(_polymathRegistry != address(0), ); polymathRegistry = _polymathRegistry; }",1,"subgraph cluster_1350_RegistryUpdater {
label=""RegistryUpdater"";
""1350_constructor"" [label=""constructor""];
""1350_updateFromRegistry"" [label=""updateFromRegistry""];
""1350_updateFromRegistry"" -> ""1350_onlyOwner"";
}
"
0x3420894bf786866a09937b0369d5b4781870c21f.sol,LikeCoin,"contract LikeCoin is ERC20, HasOperator { using SafeMath for uint256; string constant public name = ; string constant public symbol = ; uint8 constant public decimals = 18; uint256 public supply = 0; mapping(address => uint256) public balances; mapping(address => mapping(address => uint256)) public allowed; address public crowdsaleAddr = 0x0; address public contributorPoolAddr = 0x0; uint256 public contributorPoolMintQuota = 0; address[] public creatorsPoolAddrs; mapping(address => bool) isCreatorsPool; uint256 public creatorsPoolMintQuota = 0; mapping(address => uint256) public lockedBalances; uint public unlockTime = 0; SignatureChecker public signatureChecker = SignatureChecker(0x0); bool public signatureCheckerFreezed = false; address public signatureOwner = 0x0; bool public allowDelegate = true; mapping (address => mapping (uint256 => bool)) public usedNonce; mapping (address => bool) public transferAndCallWhitelist; event Lock(address indexed _addr, uint256 _value); event SignatureCheckerChanged(address _newSignatureChecker); function LikeCoin(uint256 _initialSupply, address _signatureOwner, address _sigCheckerAddr) public { supply = _initialSupply; balances[owner] = _initialSupply; signatureOwner = _signatureOwner; signatureChecker = SignatureChecker(_sigCheckerAddr); Transfer(0x0, owner, _initialSupply); }",1,"subgraph cluster_1696_LikeCoin {
label=""LikeCoin"";
""1696_switchDelegate"" [label=""switchDelegate""];
""1696_transfer"" [label=""transfer""];
""1696__transfer"" [label=""_transfer""];
""1696_transferDelegated"" [label=""transferDelegated""];
""1696_registerContributorPool"" [label=""registerContributorPool""];
""1696_registerCreatorsPools"" [label=""registerCreatorsPools""];
""1696_transferAndCall"" [label=""transferAndCall""];
""1696_transferMultipleDelegated"" [label=""transferMultipleDelegated""];
""1696__transferMultiple"" [label=""_transferMultiple""];
""1696_allowance"" [label=""allowance""];
""1696_totalSupply"" [label=""totalSupply""];
""1696_setSignatureChecker"" [label=""setSignatureChecker""];
""1696_removeTransferAndCallWhitelist"" [label=""removeTransferAndCallWhitelist""];
""1696__tryUnlockBalance"" [label=""_tryUnlockBalance""];
""1696_transferAndCallDelegated"" [label=""transferAndCallDelegated""];
""1696_mintForCreatorsPool"" [label=""mintForCreatorsPool""];
""1696_freezeSignatureChecker"" [label=""freezeSignatureChecker""];
""1696_LikeCoin"" [label=""LikeCoin""];
""1696_addTransferAndCallWhitelist"" [label=""addTransferAndCallWhitelist""];
""1696_transferMultiple"" [label=""transferMultiple""];
""1696_approve"" [label=""approve""];
""1696_registerCrowdsales"" [label=""registerCrowdsales""];
""1696_transferAndLock"" [label=""transferAndLock""];
""1696_balanceOf"" [label=""balanceOf""];
""1696_mintForContributorPool"" [label=""mintForContributorPool""];
""1696__transferAndCall"" [label=""_transferAndCall""];
""1696__isContract"" [label=""_isContract""];
""1696_transferFrom"" [label=""transferFrom""];
""1696_burn"" [label=""burn""];
""1696_transferMultipleDelegated"" -> ""1696__transferMultiple"";
""1696_transferAndCall"" -> ""1696__transferAndCall"";
""1696__transfer"" -> ""1696__tryUnlockBalance"";
""1696__transferAndCall"" -> ""1696__isContract"";
""1696_transferDelegated"" -> ""1696__transfer"";
""1696_registerContributorPool"" -> ""1696__isContract"";
""1696_registerCrowdsales"" -> ""1696__isContract"";
""1696_transferMultiple"" -> ""1696__transferMultiple"";
""1696_removeTransferAndCallWhitelist"" -> ""1696_ownerOrOperator"";
""1696_registerCrowdsales"" -> ""1696_onlyOwner"";
""1696_registerCreatorsPools"" -> ""1696_onlyOwner"";
""1696_transferFrom"" -> ""1696__transfer"";
""1696_transferDelegated"" -> ""1696_isDelegated"";
""1696_registerCreatorsPools"" -> ""1696__isContract"";
""1696_transferMultipleDelegated"" -> ""1696_isDelegated"";
""1696_switchDelegate"" -> ""1696_ownerOrOperator"";
""1696__transferMultiple"" -> ""1696__tryUnlockBalance"";
""1696__transferAndCall"" -> ""1696__transfer"";
""1696_transfer"" -> ""1696__transfer"";
""1696_addTransferAndCallWhitelist"" -> ""1696__isContract"";
""1696_addTransferAndCallWhitelist"" -> ""1696_ownerOrOperator"";
""1696_transferAndCallDelegated"" -> ""1696__transferAndCall"";
""1696_registerContributorPool"" -> ""1696_onlyOwner"";
""1696_transferAndCallDelegated"" -> ""1696_isDelegated"";
}
"
0xb4a3fb248d39370c1f8081b73fa7098167c8142b.sol,LPCWalletReserveWrapper,"contract LPCWalletReserveWrapper is DSThing { ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee); address public walletReserve; WETH public weth; ERC20 public dai; SaiLPC public lpc; function LPCWalletReserveWrapper(address walletReserve_, WETH weth_, ERC20 dai_, SaiLPC lpc_) public { assert(address(walletReserve_) != 0); assert(address(weth_) != 0); assert(address(dai_) != 0); assert(address(lpc_) != 0); walletReserve = walletReserve_; weth = weth_; lpc = lpc_; dai = dai_; }",1,"subgraph cluster_1844_LPCWalletReserveWrapper {
label=""LPCWalletReserveWrapper"";
""1844_switchReserve"" [label=""switchReserve""];
""1844_withdraw"" [label=""withdraw""];
""1844_switchLPC"" [label=""switchLPC""];
""1844_approveToken"" [label=""approveToken""];
""1844_take"" [label=""take""];
""1844_LPCWalletReserveWrapper"" [label=""LPCWalletReserveWrapper""];
""1844_approveToken"" -> ""1844_note"";
""1844_switchReserve"" -> ""1844_note"";
""1844_take"" -> ""1844_wdiv"";
""1844_switchReserve"" -> ""1844_auth"";
""1844_switchLPC"" -> ""1844_auth"";
""1844_withdraw"" -> ""1844_note"";
""1844_take"" -> ""1844_auth"";
""1844_switchLPC"" -> ""1844_note"";
""1844_approveToken"" -> ""1844_auth"";
""1844_take"" -> ""1844_wmul"";
""1844_withdraw"" -> ""1844_auth"";
}
"
0xdc919494349e803fbd2d4064106944418381edb3.sol,SaiTub,"contract SaiTub is DSThing, SaiTubEvents { DSToken public sai; DSToken public sin; DSToken public skr; ERC20 public gem; DSToken public gov; SaiVox public vox; DSValue public pip; DSValue public pep; address public tap; address public pit; uint256 public axe; uint256 public cap; uint256 public mat; uint256 public tax; uint256 public fee; uint256 public gap; bool public off; bool public out; uint256 public fit; uint256 public rho; uint256 _chi; uint256 _rhi; uint256 public rum; uint256 public cupi; mapping (bytes32 => Cup) public cups; struct Cup { address lad; uint256 ink; uint256 art; uint256 ire; }",1,"subgraph cluster_2781_SaiTub {
label=""SaiTub"";
""2781_bite"" [label=""bite""];
""2781_ask"" [label=""ask""];
""2781_lad"" [label=""lad""];
""2781_drip"" [label=""drip""];
""2781_tag"" [label=""tag""];
""2781_air"" [label=""air""];
""2781_give"" [label=""give""];
""2781_chi"" [label=""chi""];
""2781_lock"" [label=""lock""];
""2781_era"" [label=""era""];
""2781_exit"" [label=""exit""];
""2781_per"" [label=""per""];
""2781_ink"" [label=""ink""];
""2781_free"" [label=""free""];
""2781_flow"" [label=""flow""];
""2781_setVox"" [label=""setVox""];
""2781_din"" [label=""din""];
""2781_join"" [label=""join""];
""2781_tab"" [label=""tab""];
""2781_shut"" [label=""shut""];
""2781_rhi"" [label=""rhi""];
""2781_turn"" [label=""turn""];
""2781_mold"" [label=""mold""];
""2781_open"" [label=""open""];
""2781_safe"" [label=""safe""];
""2781_wipe"" [label=""wipe""];
""2781_rap"" [label=""rap""];
""2781_draw"" [label=""draw""];
""2781_setPep"" [label=""setPep""];
""2781_setPip"" [label=""setPip""];
""2781_cage"" [label=""cage""];
""2781_pie"" [label=""pie""];
""2781_bid"" [label=""bid""];
""2781_SaiTub"" [label=""SaiTub""];
""2781_lock"" -> ""2781_add"";
""2781_chi"" -> ""2781_drip"";
""2781_open"" -> ""2781_add"";
""2781_wipe"" -> ""2781_wdiv"";
""2781_tag"" -> ""2781_per"";
""2781_open"" -> ""2781_note"";
""2781_give"" -> ""2781_note"";
""2781_ask"" -> ""2781_rmul"";
""2781_SaiTub"" -> ""2781_era"";
""2781_setPip"" -> ""2781_note"";
""2781_setPep"" -> ""2781_auth"";
""2781_wipe"" -> ""2781_rhi"";
""2781_cage"" -> ""2781_note"";
""2781_bite"" -> ""2781_sub"";
""2781_rap"" -> ""2781_tab"";
""2781_wipe"" -> ""2781_tab"";
""2781_free"" -> ""2781_safe"";
""2781_rap"" -> ""2781_sub"";
""2781_exit"" -> ""2781_note"";
""2781_drip"" -> ""2781_note"";
""2781_setPep"" -> ""2781_note"";
""2781_tab"" -> ""2781_rmul"";
""2781_rap"" -> ""2781_rhi"";
""2781_wipe"" -> ""2781_sub"";
""2781_free"" -> ""2781_note"";
""2781_bid"" -> ""2781_wmul"";
""2781_bite"" -> ""2781_rdiv"";
""2781_draw"" -> ""2781_note"";
""2781_drip"" -> ""2781_rmul"";
""2781_din"" -> ""2781_chi"";
""2781_flow"" -> ""2781_note"";
""2781_shut"" -> ""2781_tab"";
""2781_flow"" -> ""2781_auth"";
""2781_draw"" -> ""2781_chi"";
""2781_tag"" -> ""2781_wmul"";
""2781_mold"" -> ""2781_note"";
""2781_bite"" -> ""2781_note"";
""2781_rhi"" -> ""2781_drip"";
""2781_join"" -> ""2781_ask"";
""2781_drip"" -> ""2781_era"";
""2781_wipe"" -> ""2781_rdiv"";
""2781_mold"" -> ""2781_auth"";
""2781_wipe"" -> ""2781_note"";
""2781_safe"" -> ""2781_ink"";
""2781_wipe"" -> ""2781_rap"";
""2781_safe"" -> ""2781_rmul"";
""2781_per"" -> ""2781_pie"";
""2781_setVox"" -> ""2781_note"";
""2781_setVox"" -> ""2781_auth"";
""2781_ask"" -> ""2781_wmul"";
""2781_ask"" -> ""2781_per"";
""2781_bite"" -> ""2781_tag"";
""2781_cage"" -> ""2781_auth"";
""2781_din"" -> ""2781_rmul"";
""2781_tab"" -> ""2781_chi"";
""2781_draw"" -> ""2781_safe"";
""2781_wipe"" -> ""2781_add"";
""2781_safe"" -> ""2781_tag"";
""2781_setPip"" -> ""2781_auth"";
""2781_shut"" -> ""2781_wipe"";
""2781_safe"" -> ""2781_tab"";
""2781_drip"" -> ""2781_sub"";
""2781_bid"" -> ""2781_sub"";
""2781_mold"" -> ""2781_drip"";
""2781_drip"" -> ""2781_rpow"";
""2781_draw"" -> ""2781_rhi"";
""2781_bid"" -> ""2781_rmul"";
""2781_shut"" -> ""2781_ink"";
""2781_per"" -> ""2781_rdiv"";
""2781_lock"" -> ""2781_note"";
""2781_turn"" -> ""2781_note"";
""2781_wipe"" -> ""2781_rmul"";
""2781_wipe"" -> ""2781_chi"";
""2781_bite"" -> ""2781_safe"";
""2781_rap"" -> ""2781_rmul"";
""2781_bite"" -> ""2781_tab"";
""2781_shut"" -> ""2781_free"";
""2781_free"" -> ""2781_sub"";
""2781_draw"" -> ""2781_rdiv"";
""2781_join"" -> ""2781_note"";
""2781_draw"" -> ""2781_add"";
""2781_shut"" -> ""2781_note"";
""2781_bid"" -> ""2781_per"";
""2781_exit"" -> ""2781_bid"";
""2781_bite"" -> ""2781_rmul"";
}
"
0x6f9ef4d30498f23e7d3116e272b855597fba83bd.sol,P3DRaffle,contract P3DRaffle is Owned { using SafeMath for uint; HourglassInterface constant P3Dcontract_ = HourglassInterface(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe); function harvestabledivs() view public returns(uint256) { return ( P3Dcontract_.dividendsOf(address(this))) ; },1,"subgraph cluster_774_P3DRaffle {
label=""P3DRaffle"";
""774_raffleinfo"" [label=""raffleinfo""];
""774_harvestabledivs"" [label=""harvestabledivs""];
""774_devfeesoutstanding"" [label=""devfeesoutstanding""];
""774_startraffle"" [label=""startraffle""];
""774_validateraffle"" [label=""validateraffle""];
""774_nextlotnumber"" [label=""nextlotnumber""];
""774_pots"" [label=""pots""];
""774_nextrafflenumber"" [label=""nextrafflenumber""];
""774_FetchVanity"" [label=""FetchVanity""];
""774_buytickets"" [label=""buytickets""];
""774_fetchdivstopot"" [label=""fetchdivstopot""];
""774_devfeetodev"" [label=""devfeetodev""];
""774_fallback"" [label=""fallback""];
""774_changevanity"" [label=""changevanity""];
""774_constructor"" [label=""constructor""];
}
"
0x470142a1834438515b757118f322703aba6e1e05.sol,PolicyPalNetworkAirdrop,contract PolicyPalNetworkAirdrop { struct BountyType { bool twitter; bool signature; },1,"subgraph cluster_662_PolicyPalNetworkAirdrop {
label=""PolicyPalNetworkAirdrop"";
""662_signatureDropMultipleAmount"" [label=""signatureDropMultipleAmount""];
""662_airDropSingleAmount"" [label=""airDropSingleAmount""];
""662_twitterDropSingleAmount"" [label=""twitterDropSingleAmount""];
""662_signatureDropSingleAmount"" [label=""signatureDropSingleAmount""];
""662_emergencyDrain"" [label=""emergencyDrain""];
""662_twitterDropMultipleAmount"" [label=""twitterDropMultipleAmount""];
""662_PolicyPalNetworkAirdrop"" [label=""PolicyPalNetworkAirdrop""];
""662_airDropMultipleAmount"" [label=""airDropMultipleAmount""];
""662_twitterDropSingleAmount"" -> ""662_onlyAdmin"";
""662_signatureDropSingleAmount"" -> ""662_validBalance"";
""662_airDropSingleAmount"" -> ""662_onlyAdmin"";
""662_emergencyDrain"" -> ""662_onlyAdmin"";
""662_signatureDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_airDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropSingleAmount"" -> ""662_validBalance"";
""662_signatureDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_signatureDropSingleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropSingleAmount"" -> ""662_validBalance"";
""662_PolicyPalNetworkAirdrop"" -> ""662_validAddress"";
""662_twitterDropMultipleAmount"" -> ""662_onlyAdmin"";
}
"
0x359a46571d4bc22a6a9310038b51e2d91163412f.sol,TokenSale,"contract TokenSale is Pausable { using SafeMath for uint256; ServusTokenInterface public servusToken; uint256 public totalWeiRaised; uint256 public tokensMinted; uint256 public totalSupply; uint256 public contributors; uint256 public decimalsMultiplier; uint256 public startTime; uint256 public endTime; uint256 public remainingTokens; uint256 public allocatedTokens; bool public finalized; bool public servusTokensAllocated; address public servusMultiSig = 0x0cc3e09c8a52fa0313154321be706635cdbdec37; uint256 public constant BASE_PRICE_IN_WEI = 1000000000000000; uint256 public constant PUBLIC_TOKENS = 100000000 * (10 ** 6); uint256 public constant TOTAL_PRESALE_TOKENS = 50000000 * (10 ** 6); uint256 public constant TOKENS_ALLOCATED_TO_SERVUS = 100000000 * (10 ** 6); uint256 public tokenCap = PUBLIC_TOKENS - TOTAL_PRESALE_TOKENS; uint256 public cap = tokenCap; uint256 public weiCap = cap * BASE_PRICE_IN_WEI; uint256 public firstDiscountPrice = (BASE_PRICE_IN_WEI * 85) / 100; uint256 public secondDiscountPrice = (BASE_PRICE_IN_WEI * 90) / 100; uint256 public thirdDiscountPrice = (BASE_PRICE_IN_WEI * 95) / 100; uint256 public firstDiscountCap = (weiCap * 5) / 100; uint256 public secondDiscountCap = (weiCap * 10) / 100; uint256 public thirdDiscountCap = (weiCap * 20) / 100; bool public started = false; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); event NewClonedToken(address indexed _cloneToken); event OnTransfer(address _from, address _to, uint _amount); event OnApprove(address _owner, address _spender, uint _amount); event LogInt(string _name, uint256 _value); event Finalized(); function TokenSale(address _tokenAddress, uint256 _startTime, uint256 _endTime) public { require(_tokenAddress != 0x0); require(_startTime > 0); require(_endTime > _startTime); startTime = _startTime; endTime = _endTime; servusToken = ServusTokenInterface(_tokenAddress); decimalsMultiplier = (10 ** 6); }",1,"subgraph cluster_2025_TokenSale {
label=""TokenSale"";
""2025_finalize"" [label=""finalize""];
""2025_getPriceInWei"" [label=""getPriceInWei""];
""2025_enableMasterTransfers"" [label=""enableMasterTransfers""];
""2025_buyTokens"" [label=""buyTokens""];
""2025_enableTransfers"" [label=""enableTransfers""];
""2025_lockTransfers"" [label=""lockTransfers""];
""2025_forwardFunds"" [label=""forwardFunds""];
""2025_isContract"" [label=""isContract""];
""2025_TokenSale"" [label=""TokenSale""];
""2025_changeController"" [label=""changeController""];
""2025_validPurchase"" [label=""validPurchase""];
""2025_balanceOf"" [label=""balanceOf""];
""2025_allocateServusTokens"" [label=""allocateServusTokens""];
""2025_totalSupply"" [label=""totalSupply""];
""2025_fallback"" [label=""fallback""];
""2025_lockMasterTransfers"" [label=""lockMasterTransfers""];
""2025_forceStart"" [label=""forceStart""];
""2025_buyTokens"" -> ""2025_validPurchase"";
""2025_forceStart"" -> ""2025_onlyOwner"";
""2025_buyTokens"" -> ""2025_forwardFunds"";
""2025_buyTokens"" -> ""2025_whenNotFinalized"";
""2025_lockMasterTransfers"" -> ""2025_onlyOwner"";
""2025_buyTokens"" -> ""2025_getPriceInWei"";
""2025_allocateServusTokens"" -> ""2025_whenNotFinalized"";
""2025_buyTokens"" -> ""2025_whenNotPaused"";
""2025_finalize"" -> ""2025_onlyOwner"";
""2025_changeController"" -> ""2025_isContract"";
""2025_enableMasterTransfers"" -> ""2025_onlyOwner"";
""2025_fallback"" -> ""2025_buyTokens"";
""2025_lockTransfers"" -> ""2025_onlyOwner"";
""2025_allocateServusTokens"" -> ""2025_onlyOwner"";
}
"
0x5af7af54e8bc34b293e356ef11fffe51d6f9ae78.sol,Sample,"contract Sample is Ownable { mapping (uint => address) internal tokensForOwner; mapping (address => uint[]) internal tokensOwned; mapping (uint => uint) internal tokenPosInArr; mapping (uint => uint) public tokenType; uint public numOfSamples; address public cryptoJingles; SampleStorage public sampleStorage; event Mint(address indexed _to, uint256 indexed _tokenId); modifier onlyCryptoJingles() { require(msg.sender == cryptoJingles); _; }",1,"subgraph cluster_256_SampleStorage {
label=""SampleStorage"";
""256_getType"" [label=""getType""];
""256_addNewSampleType"" [label=""addNewSampleType""];
""256_addNewSampleType"" -> ""256_onlyOwner"";
}
"
0x46c9f93c3249c430c6ca19f02240ef9e038ba9d1.sol,Escapable,"contract Escapable is Owned { address public escapeHatchCaller; address public escapeHatchDestination; mapping (address=>bool) private escapeBlacklist; function Escapable(address _escapeHatchCaller, address _escapeHatchDestination) { escapeHatchCaller = _escapeHatchCaller; escapeHatchDestination = _escapeHatchDestination; }",1,"subgraph cluster_371_Escapable {
label=""Escapable"";
""371_Escapable"" [label=""Escapable""];
""371_escapeHatch"" [label=""escapeHatch""];
""371_changeEscapeCaller"" [label=""changeEscapeCaller""];
""371_isTokenEscapable"" [label=""isTokenEscapable""];
""371_blacklistEscapeToken"" [label=""blacklistEscapeToken""];
""371_changeEscapeCaller"" -> ""371_onlyEscapeHatchCallerOrOwner"";
""371_escapeHatch"" -> ""371_onlyEscapeHatchCallerOrOwner"";
}
"
0xc3e43d422d5e6f94315622d96a96058689c52ec8.sol,BitNauticCrowdsaleTokenDistributor,"contract BitNauticCrowdsaleTokenDistributor is Ownable { using SafeMath for uint256; uint256 public constant ICOStartTime = 1531267200; uint256 public constant ICOEndTime = 1536969600; uint256 public teamSupply = 3000000 * 10 ** 18; uint256 public bountySupply = 2500000 * 10 ** 18; uint256 public reserveSupply = 5000000 * 10 ** 18; uint256 public advisorSupply = 2500000 * 10 ** 18; uint256 public founderSupply = 2000000 * 10 ** 18; MintableToken public token; BitNauticWhitelist public whitelist; BitNauticCrowdsale public crowdsale; mapping (address => bool) public hasClaimedTokens; constructor(MintableToken _token, BitNauticWhitelist _whitelist, BitNauticCrowdsale _crowdsale) public { token = _token; whitelist = _whitelist; crowdsale = _crowdsale; }",1,"subgraph cluster_494_BitNauticCrowdsaleTokenDistributor {
label=""BitNauticCrowdsaleTokenDistributor"";
""494_privateSale"" [label=""privateSale""];
""494_constructor"" [label=""constructor""];
""494_transferTokenOwnership"" [label=""transferTokenOwnership""];
""494_claimBitNauticTokens"" [label=""claimBitNauticTokens""];
""494_grantAdvisorsTokens"" [label=""grantAdvisorsTokens""];
""494_grantBountyTokens"" [label=""grantBountyTokens""];
""494_grantFoundersTokens"" [label=""grantFoundersTokens""];
""494_grantReserveTokens"" [label=""grantReserveTokens""];
""494_grantTeamTokens"" [label=""grantTeamTokens""];
""494_grantContributorTokens"" [label=""grantContributorTokens""];
""494_grantFoundersTokens"" -> ""494_onlyOwner"";
""494_grantReserveTokens"" -> ""494_onlyOwner"";
""494_privateSale"" -> ""494_onlyOwner"";
""494_transferTokenOwnership"" -> ""494_onlyOwner"";
""494_claimBitNauticTokens"" -> ""494_grantContributorTokens"";
""494_grantTeamTokens"" -> ""494_onlyOwner"";
""494_grantBountyTokens"" -> ""494_onlyOwner"";
""494_grantAdvisorsTokens"" -> ""494_onlyOwner"";
}
"
0xec841c878435ba4f28bf305a00c1483db0d96a20.sol,Events,contract Events { DBInterface public database; constructor(address _database) public{ database = DBInterface(_database); },1,"subgraph cluster_1000_Events {
label=""Events"";
""1000_escrow"" [label=""escrow""];
""1000_contractChange"" [label=""contractChange""];
""1000_consensus"" [label=""consensus""];
""1000_registration"" [label=""registration""];
""1000_operator"" [label=""operator""];
""1000_transaction"" [label=""transaction""];
""1000_asset"" [label=""asset""];
""1000_order"" [label=""order""];
""1000_message"" [label=""message""];
""1000_constructor"" [label=""constructor""];
""1000_exchange"" [label=""exchange""];
""1000_message"" -> ""1000_onlyApprovedContract"";
""1000_escrow"" -> ""1000_onlyApprovedContract"";
""1000_contractChange"" -> ""1000_onlyApprovedContract"";
""1000_exchange"" -> ""1000_onlyApprovedContract"";
""1000_registration"" -> ""1000_onlyApprovedContract"";
""1000_consensus"" -> ""1000_onlyApprovedContract"";
""1000_order"" -> ""1000_onlyApprovedContract"";
""1000_transaction"" -> ""1000_onlyApprovedContract"";
""1000_asset"" -> ""1000_onlyApprovedContract"";
""1000_operator"" -> ""1000_onlyApprovedContract"";
}
"
0x29632c10d76bd1aed6b1524bf5bde4c992610670.sol,ApplicationEntity,"contract ApplicationEntity { bytes32 sourceCodeUrl; bool public _initialized = false; bool public _locked = false; uint8 public CurrentEntityState; mapping (bytes32 => uint8) public EntityStates; address public GatewayInterfaceAddress; ABIGatewayInterface GatewayInterfaceEntity; ABIProposals public ProposalsEntity; ABIFunding public FundingEntity; ABIMilestones public MilestonesEntity; ABIMeetings public MeetingsEntity; ABIBountyManager public BountyManagerEntity; ABITokenManager public TokenManagerEntity; ABIListingContract public ListingContractEntity; ABIFundingManager public FundingManagerEntity; ABINewsContract public NewsContractEntity; mapping (bytes32 => address) public AssetCollection; mapping (uint8 => bytes32) public AssetCollectionIdToName; uint8 public AssetCollectionNum = 0; event EventAppEntityReady ( address indexed _address ); event EventAppEntityCodeUpgradeProposal ( address indexed _address, bytes32 indexed _sourceCodeUrl ); event EventAppEntityInitAsset ( bytes32 indexed _name, address indexed _address ); event EventAppEntityInitAssetsToThis ( uint8 indexed _assetNum ); event EventAppEntityAssetsToNewApplication ( address indexed _address ); event EventAppEntityLocked ( address indexed _address ); address public deployerAddress; function ApplicationEntity() public { deployerAddress = msg.sender; setEntityStates(); CurrentEntityState = getEntityState(); }",1,"subgraph cluster_236_ApplicationEntityABI {
label=""ApplicationEntityABI"";
""236_extendedAnyAssetHasChanges"" [label=""extendedAnyAssetHasChanges""];
""236_getBylawBytes32"" [label=""getBylawBytes32""];
""236_getTimestamp"" [label=""getTimestamp""];
""236_setUpgradeState"" [label=""setUpgradeState""];
""236_createCodeUpgradeProposal"" [label=""createCodeUpgradeProposal""];
""236_addAssetBountyManager"" [label=""addAssetBountyManager""];
""236_setBylawUint256"" [label=""setBylawUint256""];
""236_getEntityState"" [label=""getEntityState""];
""236_addAssetMeetings"" [label=""addAssetMeetings""];
""236_lock"" [label=""lock""];
""236_ApplicationEntity"" [label=""ApplicationEntity""];
""236_hasRequiredStateChanges"" [label=""hasRequiredStateChanges""];
""236_addAssetFundingManager"" [label=""addAssetFundingManager""];
""236_linkToGateway"" [label=""linkToGateway""];
""236_getAssetAddressByName"" [label=""getAssetAddressByName""];
""236_doStateChanges"" [label=""doStateChanges""];
""236_anyAssetHasChanges"" [label=""anyAssetHasChanges""];
""236_initializeAssetsToThisApplication"" [label=""initializeAssetsToThisApplication""];
""236_addAssetProposals"" [label=""addAssetProposals""];
""236_setBylawBytes32"" [label=""setBylawBytes32""];
""236_acceptCodeUpgradeProposal"" [label=""acceptCodeUpgradeProposal""];
""236_addAssetTokenManager"" [label=""addAssetTokenManager""];
""236_getRequiredStateChanges"" [label=""getRequiredStateChanges""];
""236_initialize"" [label=""initialize""];
""236_getParentAddress"" [label=""getParentAddress""];
""236_transferAssetsToNewApplication"" [label=""transferAssetsToNewApplication""];
""236_addAssetListingContract"" [label=""addAssetListingContract""];
""236_addAssetFunding"" [label=""addAssetFunding""];
""236_canInitiateCodeUpgrade"" [label=""canInitiateCodeUpgrade""];
""236_addAssetMilestones"" [label=""addAssetMilestones""];
""236_addAssetNewsContract"" [label=""addAssetNewsContract""];
""236_getBylawUint256"" [label=""getBylawUint256""];
}
"
0x6d84769b1e287a27f282a938c8110b22714dbf78.sol,ABIO_preICO,"contract ABIO_preICO is ABIO_BaseICO{ address ICOAddress; ABIO_ICO ICO; uint finalDeadline; constructor(address _abioAddress, uint _lenInMins, uint _minWeiInvestment, address _treasury, uint _priceInWei, uint _goalInWei){ treasury = _treasury; abioToken = ABIO_Token(_abioAddress); weiPerABIO = _priceInWei; fundingGoal = _goalInWei; minInvestment = _minWeiInvestment; startDate = now; length = _lenInMins * 1 minutes; }",1,"subgraph cluster_638_ABIO_preICO {
label=""ABIO_preICO"";
""638_supplyICOContract"" [label=""supplyICOContract""];
""638_constructor"" [label=""constructor""];
""638_goalReached"" [label=""goalReached""];
""638_extGoalReached"" [label=""extGoalReached""];
""638_safeWithdrawal"" [label=""safeWithdrawal""];
""638_extGoalReached"" -> ""638_goalReached"";
""638_supplyICOContract"" -> ""638_onlyOwner"";
""638_safeWithdrawal"" -> ""638_afterDeadline"";
""638_safeWithdrawal"" -> ""638_stopOnPause"";
""638_extGoalReached"" -> ""638_afterDeadline"";
""638_supplyICOContract"" -> ""638_goalReached"";
}
"
0x5b82f83eeb171f829e5ca6d2c6205cd22ce7b821.sol,FBBCToken,"contract FBBCToken is StandardToken, SafeMath { string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 18; string public version = ; address public ethFundDeposit; address public newContractAddr; bool public isFunding; uint256 public fundingStartBlock; uint256 public fundingStopBlock; uint256 public currentSupply; uint256 public tokenRaised = 0; uint256 public tokenMigrated = 0; uint256 public tokenExchangeRate = 625; event AllocateToken(address indexed _to, uint256 _value); event IssueToken(address indexed _to, uint256 _value); event IncreaseSupply(uint256 _value); event DecreaseSupply(uint256 _value); event Migrate(address indexed _to, uint256 _value); function formatDecimals(uint256 _value) internal returns (uint256 ) { return _value * 10 ** decimals; }",1,"subgraph cluster_817_FBBCToken {
label=""FBBCToken"";
""817_transferETH"" [label=""transferETH""];
""817_stopFunding"" [label=""stopFunding""];
""817_allocateToken"" [label=""allocateToken""];
""817_setMigrateContract"" [label=""setMigrateContract""];
""817_startFunding"" [label=""startFunding""];
""817_changeOwner"" [label=""changeOwner""];
""817_decreaseSupply"" [label=""decreaseSupply""];
""817_FBBCToken"" [label=""FBBCToken""];
""817_setTokenExchangeRate"" [label=""setTokenExchangeRate""];
""817_fallback"" [label=""fallback""];
""817_formatDecimals"" [label=""formatDecimals""];
""817_migrate"" [label=""migrate""];
""817_allocateToken"" -> ""817_safeAdd"";
""817_setMigrateContract"" -> ""817_isOwner"";
""817_allocateToken"" -> ""817_safeMult"";
""817_decreaseSupply"" -> ""817_isOwner"";
""817_decreaseSupply"" -> ""817_safeSubtract"";
""817_startFunding"" -> ""817_isOwner"";
""817_allocateToken"" -> ""817_formatDecimals"";
""817_stopFunding"" -> ""817_isOwner"";
""817_migrate"" -> ""817_safeAdd"";
""817_fallback"" -> ""817_safeMult"";
""817_fallback"" -> ""817_safeAdd"";
""817_FBBCToken"" -> ""817_formatDecimals"";
""817_changeOwner"" -> ""817_isOwner"";
""817_transferETH"" -> ""817_isOwner"";
""817_setTokenExchangeRate"" -> ""817_isOwner"";
""817_allocateToken"" -> ""817_isOwner"";
""817_decreaseSupply"" -> ""817_formatDecimals"";
}
"
0x750c1d91864171d7e1715a6b53ee28c72b8faa09.sol,EthicHubUser,"contract EthicHubUser is Ownable, EthicHubBase { event UserStatusChanged(address target, string profile, bool isRegistered); constructor(address _storageAddress) EthicHubBase(_storageAddress) public { version = 3; }",1,"subgraph cluster_660_EthicHubUser {
label=""EthicHubUser"";
""660_deleteUserStatus"" [label=""deleteUserStatus""];
""660_registerPaymentGateway"" [label=""registerPaymentGateway""];
""660_registerLocalNode"" [label=""registerLocalNode""];
""660_unregisterLocalNode"" [label=""unregisterLocalNode""];
""660_registerRepresentative"" [label=""registerRepresentative""];
""660_constructor"" [label=""constructor""];
""660_unregisterPaymentGateway"" [label=""unregisterPaymentGateway""];
""660_changeUserStatus"" [label=""changeUserStatus""];
""660_unregisterCommunity"" [label=""unregisterCommunity""];
""660_unregisterRepresentative"" [label=""unregisterRepresentative""];
""660_unregisterInvestor"" [label=""unregisterInvestor""];
""660_registerInvestor"" [label=""registerInvestor""];
""660_viewRegistrationStatus"" [label=""viewRegistrationStatus""];
""660_registerCommunity"" [label=""registerCommunity""];
""660_unregisterCommunity"" -> ""660_onlyOwner"";
""660_registerLocalNode"" -> ""660_changeUserStatus"";
""660_constructor"" -> ""660_constructor"";
""660_registerInvestor"" -> ""660_onlyOwner"";
""660_unregisterInvestor"" -> ""660_deleteUserStatus"";
""660_unregisterLocalNode"" -> ""660_onlyOwner"";
""660_unregisterInvestor"" -> ""660_onlyOwner"";
""660_unregisterRepresentative"" -> ""660_onlyOwner"";
""660_registerCommunity"" -> ""660_changeUserStatus"";
""660_registerLocalNode"" -> ""660_onlyOwner"";
""660_unregisterLocalNode"" -> ""660_deleteUserStatus"";
""660_registerCommunity"" -> ""660_onlyOwner"";
""660_unregisterPaymentGateway"" -> ""660_onlyOwner"";
""660_registerRepresentative"" -> ""660_onlyOwner"";
""660_unregisterPaymentGateway"" -> ""660_deleteUserStatus"";
""660_unregisterCommunity"" -> ""660_deleteUserStatus"";
""660_unregisterRepresentative"" -> ""660_deleteUserStatus"";
""660_deleteUserStatus"" -> ""660_onlyOwner"";
""660_registerPaymentGateway"" -> ""660_changeUserStatus"";
""660_registerRepresentative"" -> ""660_changeUserStatus"";
""660_changeUserStatus"" -> ""660_onlyOwner"";
""660_registerPaymentGateway"" -> ""660_onlyOwner"";
""660_registerInvestor"" -> ""660_changeUserStatus"";
}
"
0x44f958d420f0543353a5e4f14e827d73f01b4261.sol,EBBToken,"contract EBBToken is StandardToken, SafeMath { string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 18; string public version = ; address public ethFundDeposit; address public newContractAddr; bool public isFunding; uint256 public fundingStartBlock; uint256 public fundingStopBlock; uint256 public currentSupply; uint256 public tokenRaised = 0; uint256 public tokenMigrated = 0; uint256 public tokenExchangeRate = 5963; event AllocateToken(address indexed _to, uint256 _value); event IssueToken(address indexed _to, uint256 _value); event IncreaseSupply(uint256 _value); event DecreaseSupply(uint256 _value); event Migrate(address indexed _to, uint256 _value); function formatDecimals(uint256 _value) internal returns (uint256 ) { return _value * 10 ** decimals; }",1,"subgraph cluster_849_EBBToken {
label=""EBBToken"";
""849_decreaseSupply"" [label=""decreaseSupply""];
""849_increaseSupply"" [label=""increaseSupply""];
""849_stopFunding"" [label=""stopFunding""];
""849_changeOwner"" [label=""changeOwner""];
""849_transferETH"" [label=""transferETH""];
""849_setMigrateContract"" [label=""setMigrateContract""];
""849_allocateToken"" [label=""allocateToken""];
""849_startFunding"" [label=""startFunding""];
""849_fallback"" [label=""fallback""];
""849_setTokenExchangeRate"" [label=""setTokenExchangeRate""];
""849_EBBToken"" [label=""EBBToken""];
""849_migrate"" [label=""migrate""];
""849_formatDecimals"" [label=""formatDecimals""];
""849_migrate"" -> ""849_safeAdd"";
""849_decreaseSupply"" -> ""849_formatDecimals"";
""849_decreaseSupply"" -> ""849_safeSubtract"";
""849_transferETH"" -> ""849_isOwner"";
""849_allocateToken"" -> ""849_isOwner"";
""849_startFunding"" -> ""849_isOwner"";
""849_fallback"" -> ""849_safeMult"";
""849_allocateToken"" -> ""849_safeMult"";
""849_increaseSupply"" -> ""849_isOwner"";
""849_setMigrateContract"" -> ""849_isOwner"";
""849_EBBToken"" -> ""849_formatDecimals"";
""849_allocateToken"" -> ""849_formatDecimals"";
""849_allocateToken"" -> ""849_safeAdd"";
""849_setTokenExchangeRate"" -> ""849_isOwner"";
""849_changeOwner"" -> ""849_isOwner"";
""849_increaseSupply"" -> ""849_formatDecimals"";
""849_fallback"" -> ""849_safeAdd"";
""849_stopFunding"" -> ""849_isOwner"";
""849_increaseSupply"" -> ""849_safeAdd"";
""849_decreaseSupply"" -> ""849_isOwner"";
}
"
0xc58f1f3ec051b51f10c4feb0cfd10d811d055ef5.sol,ldoh,"contract ldoh is EthereumSmartContract { event onCashbackCode (address indexed hodler, address cashbackcode); event onAffiliateBonus (address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime); event onClaimTokens (address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime); event onHoldplatform (address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime); event onAddContractAddress(address indexed contracthodler, bool contractstatus, uint256 _maxcontribution, string _ContractSymbol, uint256 _PercentPermonth, uint256 _HodlingTime); event onHoldplatformsetting(address indexed Tokenairdrop, bool HPM_status, uint256 HPM_divider, uint256 HPM_ratio, uint256 datetime); event onHoldplatformdeposit(uint256 amount, uint256 newbalance, uint256 datetime); event onHoldplatformwithdraw(uint256 amount, uint256 newbalance, uint256 datetime); event onReceiveAirdrop(uint256 amount, uint256 datetime); address public DefaultToken; struct Safe { uint256 id; uint256 amount; uint256 endtime; address user; address tokenAddress; string tokenSymbol; uint256 amountbalance; uint256 cashbackbalance; uint256 lasttime; uint256 percentage; uint256 percentagereceive; uint256 tokenreceive; uint256 lastwithdraw; address referrer; bool cashbackstatus; }",1,"subgraph cluster_2349_ldoh {
label=""ldoh"";
""2349_WithdrawAffiliate"" [label=""WithdrawAffiliate""];
""2349_HodlTokens4"" [label=""HodlTokens4""];
""2349_GetUserSafesLength"" [label=""GetUserSafesLength""];
""2349_TokenPrice"" [label=""TokenPrice""];
""2349_div"" [label=""div""];
""2349_AddContractAddress"" [label=""AddContractAddress""];
""2349_fallback"" [label=""fallback""];
""2349_Holdplatform"" [label=""Holdplatform""];
""2349_UnlockToken2"" [label=""UnlockToken2""];
""2349_Holdplatform_Airdrop"" [label=""Holdplatform_Airdrop""];
""2349_UnlockToken3"" [label=""UnlockToken3""];
""2349_mul"" [label=""mul""];
""2349_CashbackCode"" [label=""CashbackCode""];
""2349_GetTotalAffiliate"" [label=""GetTotalAffiliate""];
""2349_constructor"" [label=""constructor""];
""2349_ClaimTokens"" [label=""ClaimTokens""];
""2349_ReturnAllTokens"" [label=""ReturnAllTokens""];
""2349_Holdplatform_Withdraw"" [label=""Holdplatform_Withdraw""];
""2349_Holdplatform_Deposit"" [label=""Holdplatform_Deposit""];
""2349_UnlockToken4"" [label=""UnlockToken4""];
""2349_HodlTokens3"" [label=""HodlTokens3""];
""2349_AirdropToken"" [label=""AirdropToken""];
""2349_GetSafe"" [label=""GetSafe""];
""2349_sub"" [label=""sub""];
""2349_add"" [label=""add""];
""2349_HodlTokens2"" [label=""HodlTokens2""];
""2349_PayToken"" [label=""PayToken""];
""2349_UnlockToken4"" -> ""2349_sub"";
""2349_Holdplatform_Airdrop"" -> ""2349_div"";
""2349_AirdropToken"" -> ""2349_div"";
""2349_Holdplatform_Deposit"" -> ""2349_restricted"";
""2349_HodlTokens2"" -> ""2349_HodlTokens3"";
""2349_HodlTokens3"" -> ""2349_sub"";
""2349_AddContractAddress"" -> ""2349_restricted"";
""2349_Holdplatform"" -> ""2349_HodlTokens2"";
""2349_HodlTokens2"" -> ""2349_div"";
""2349_Holdplatform_Withdraw"" -> ""2349_restricted"";
""2349_ReturnAllTokens"" -> ""2349_add"";
""2349_HodlTokens2"" -> ""2349_sub"";
""2349_UnlockToken2"" -> ""2349_mul"";
""2349_UnlockToken2"" -> ""2349_sub"";
""2349_UnlockToken3"" -> ""2349_mul"";
""2349_AddContractAddress"" -> ""2349_mul"";
""2349_TokenPrice"" -> ""2349_restricted"";
""2349_WithdrawAffiliate"" -> ""2349_add"";
""2349_UnlockToken4"" -> ""2349_PayToken"";
""2349_HodlTokens4"" -> ""2349_add"";
""2349_UnlockToken4"" -> ""2349_mul"";
""2349_Holdplatform_Airdrop"" -> ""2349_restricted"";
""2349_UnlockToken3"" -> ""2349_div"";
""2349_AddContractAddress"" -> ""2349_div"";
""2349_HodlTokens3"" -> ""2349_mul"";
""2349_UnlockToken4"" -> ""2349_div"";
""2349_Holdplatform"" -> ""2349_add"";
""2349_Holdplatform_Deposit"" -> ""2349_add"";
""2349_UnlockToken2"" -> ""2349_add"";
""2349_PayToken"" -> ""2349_AirdropToken"";
""2349_Holdplatform_Withdraw"" -> ""2349_sub"";
""2349_UnlockToken3"" -> ""2349_add"";
""2349_WithdrawAffiliate"" -> ""2349_sub"";
""2349_ReturnAllTokens"" -> ""2349_PayToken"";
""2349_UnlockToken2"" -> ""2349_UnlockToken3"";
""2349_UnlockToken2"" -> ""2349_PayToken"";
""2349_ReturnAllTokens"" -> ""2349_restricted"";
""2349_UnlockToken2"" -> ""2349_div"";
""2349_ClaimTokens"" -> ""2349_UnlockToken2"";
""2349_UnlockToken3"" -> ""2349_UnlockToken4"";
""2349_HodlTokens3"" -> ""2349_add"";
""2349_AirdropToken"" -> ""2349_sub"";
""2349_UnlockToken3"" -> ""2349_sub"";
""2349_HodlTokens3"" -> ""2349_HodlTokens4"";
""2349_HodlTokens3"" -> ""2349_div"";
""2349_PayToken"" -> ""2349_sub"";
""2349_PayToken"" -> ""2349_add"";
}
"
0x6a2b112e5314a3462a3df18c0b73a2de14fd6b06.sol,BreedingClockAuction,"contract BreedingClockAuction is ClockAuction { bool public isBreedingClockAuction = true; constructor(address _nftAddr, uint256 _cut) public ClockAuction(_nftAddr, _cut) {}",1,"subgraph cluster_2882_BreedingClockAuction {
label=""BreedingClockAuction"";
""2882_createAuction"" [label=""createAuction""];
""2882_bid"" [label=""bid""];
""2882_isBreedingClockAuction"" [label=""isBreedingClockAuction""];
""2882_getCurrentPrice"" [label=""getCurrentPrice""];
""2882_constructor"" [label=""constructor""];
""2882_bid"" -> ""2882__transfer"";
""2882_createAuction"" -> ""2882__escrow"";
""2882_getCurrentPrice"" -> ""2882__isOnAuction"";
""2882_createAuction"" -> ""2882__addAuction"";
""2882_getCurrentPrice"" -> ""2882__currentPrice"";
""2882_bid"" -> ""2882__bid"";
""2882_constructor"" -> ""2882_constructor"";
}
"
0x003ffefefbc4a6f34a62a3ca7b7937a880065bcb.sol,Token,"contract Token is owned, TokenERC20 { address public ico_address; address public old_address; address public app_address; constructor() public { owner = msg.sender; }",1,"subgraph cluster_525_TokenERC20 {
label=""TokenERC20"";
""525_getOwner"" [label=""getOwner""];
""525_transfer"" [label=""transfer""];
""525_constructor"" [label=""constructor""];
""525_transferFrom"" [label=""transferFrom""];
""525_burn"" [label=""burn""];
""525__transfer"" [label=""_transfer""];
""525_getOwnerCount"" [label=""getOwnerCount""];
""525_totalSupply"" [label=""totalSupply""];
""525_approveAndCall"" [label=""approveAndCall""];
""525_approve"" [label=""approve""];
""525_burnFrom"" [label=""burnFrom""];
""525_transferFrom"" -> ""525__transfer"";
""525_transfer"" -> ""525__transfer"";
""525_approveAndCall"" -> ""525_approve"";
}
"
0xc45865b235a7c6693b9db5fed46ea8a3022d9b07.sol,DcorpCrowdsaleProxy,"contract DcorpCrowdsaleProxy is IDcorpCrowdsaleProxy, Ownership, TokenObserver, TokenRetriever { enum Stages { Deploying, Attached, Deployed }",1,"subgraph cluster_941_DcorpCrowdsaleProxy {
label=""DcorpCrowdsaleProxy"";
""941_retrieveTokens"" [label=""retrieveTokens""];
""941_deploy"" [label=""deploy""];
""941_requestTokensFromCrowdsale"" [label=""requestTokensFromCrowdsale""];
""941_setup"" [label=""setup""];
""941_attachCrowdsale"" [label=""attachCrowdsale""];
""941_createPersonalDepositAddress"" [label=""createPersonalDepositAddress""];
""941_contributedAmountOf"" [label=""contributedAmountOf""];
""941_hasRecord"" [label=""hasRecord""];
""941_balanceOf"" [label=""balanceOf""];
""941__handleTransaction"" [label=""_handleTransaction""];
""941_shareOf"" [label=""shareOf""];
""941_updateBalances"" [label=""updateBalances""];
""941_onTokensReceived"" [label=""onTokensReceived""];
""941_createPersonalDepositAddressFor"" [label=""createPersonalDepositAddressFor""];
""941_contributeFor"" [label=""contributeFor""];
""941_withdrawTokens"" [label=""withdrawTokens""];
""941_contribute"" [label=""contribute""];
""941_fallback"" [label=""fallback""];
""941_DcorpCrowdsaleProxy"" [label=""DcorpCrowdsaleProxy""];
""941__getWeight"" [label=""_getWeight""];
""941_withdrawTokens"" -> ""941_balanceOf"";
""941_fallback"" -> ""941__handleTransaction"";
""941_balanceOf"" -> ""941_shareOf"";
""941__handleTransaction"" -> ""941_hasRecord"";
""941_retrieveTokens"" -> ""941_retrieveTokens"";
""941_contributeFor"" -> ""941__handleTransaction"";
""941_attachCrowdsale"" -> ""941_only_owner"";
""941_setup"" -> ""941_only_owner"";
""941_deploy"" -> ""941_only_owner"";
""941_attachCrowdsale"" -> ""941_at_stage"";
""941_contribute"" -> ""941__handleTransaction"";
""941__handleTransaction"" -> ""941__getWeight"";
""941__handleTransaction"" -> ""941_only_when_not_updating"";
""941__handleTransaction"" -> ""941_at_stage"";
""941_updateBalances"" -> ""941_only_when_not_updating"";
""941_requestTokensFromCrowdsale"" -> ""941_only_when_not_updating"";
""941_retrieveTokens"" -> ""941_only_owner"";
""941_deploy"" -> ""941_at_stage"";
""941_withdrawTokens"" -> ""941_only_when_not_updating"";
""941_setup"" -> ""941_at_stage"";
""941_withdrawTokens"" -> ""941_only_when_ended"";
}
"
0x341f9c6c60c07fd11ef0bbc93586a2b9d68bfcf0.sol,VINContract,"contract VINContract is SafeMath { VINNDTokenContract public VINToken; enum Stage{ Pause, Init, Running, Stopped }",1,"subgraph cluster_1632_VINContract {
label=""VINContract"";
""1632_sendTokensToFounders"" [label=""sendTokensToFounders""];
""1632_setNewOwner"" [label=""setNewOwner""];
""1632_burnTokens"" [label=""burnTokens""];
""1632_emitTokensToOtherWallet"" [label=""emitTokensToOtherWallet""];
""1632_setStage"" [label=""setStage""];
""1632_buyTokens"" [label=""buyTokens""];
""1632_fallback"" [label=""fallback""];
""1632_setType"" [label=""setType""];
""1632_initialize"" [label=""initialize""];
""1632_VINContract"" [label=""VINContract""];
""1632_sendTokensToFounders"" -> ""1632_div"";
""1632_emitTokensToOtherWallet"" -> ""1632_buyTokens"";
""1632_setType"" -> ""1632_onlyManager"";
""1632_initialize"" -> ""1632_onlyManager"";
""1632_emitTokensToOtherWallet"" -> ""1632_onlyManager"";
""1632_emitTokensToOtherWallet"" -> ""1632_checkType"";
""1632_sendTokensToFounders"" -> ""1632_add"";
""1632_fallback"" -> ""1632_buyTokens"";
""1632_fallback"" -> ""1632_onStageRunning"";
""1632_setNewOwner"" -> ""1632_onlyManager"";
""1632_setType"" -> ""1632_onStageStopped"";
""1632_burnTokens"" -> ""1632_onlyManager"";
""1632_fallback"" -> ""1632_checkDateTime"";
""1632_sendTokensToFounders"" -> ""1632_mul"";
""1632_setStage"" -> ""1632_onlyManager"";
""1632_buyTokens"" -> ""1632_volumeBonus"";
""1632_fallback"" -> ""1632_checkType"";
""1632_sendTokensToFounders"" -> ""1632_whenInitialized"";
""1632_buyTokens"" -> ""1632_divToMul"";
""1632_buyTokens"" -> ""1632_add"";
""1632_sendTokensToFounders"" -> ""1632_onlyManager"";
""1632_buyTokens"" -> ""1632_dateBonus"";
}
"
0x75a17c63c2121447655955b55aaa1a413e750232.sol,CryderCrowdsale,contract CryderCrowdsale is Ownable { using SafeMath for uint256; address public wallet; CryderToken public presaleToken; CryderToken public token; bool public isBountyAllocated = false; mapping(address => bool) tokenRequests; uint public START_TIME = 1516467600; uint public CLOSE_TIME = 1519146000; uint256 public HARDCAP = 400000000000000000000000000; uint256 public exchangeRate = 3000; address public bounty = 0xa258Eb1817aA122acBa4Af66A7A064AE6E10552A; function () payable public { require(msg.sender == tx.origin); buyTokens(msg.sender); },1,"subgraph cluster_1198_CryderCrowdsale {
label=""CryderCrowdsale"";
""1198_CryderCrowdsale"" [label=""CryderCrowdsale""];
""1198_withdraw"" [label=""withdraw""];
""1198_allocateBounty"" [label=""allocateBounty""];
""1198_setExchangeRate"" [label=""setExchangeRate""];
""1198_setTime"" [label=""setTime""];
""1198_requestTokens"" [label=""requestTokens""];
""1198_fallback"" [label=""fallback""];
""1198_buyTokens"" [label=""buyTokens""];
""1198_fallback"" -> ""1198_buyTokens"";
""1198_withdraw"" -> ""1198_onlyOwner"";
""1198_setExchangeRate"" -> ""1198_onlyOwner"";
""1198_setTime"" -> ""1198_onlyOwner"";
}
"
0x9271a6512b8f27a5f8daa01a62bdc533709e859a.sol,LockToken,"contract LockToken is Ownable { using SafeMath for uint256; token token_reward; address public beneficiary; bool public isLocked = false; bool public isReleased = false; uint256 public start_time; uint256 public end_time; event TokenReleased(address beneficiary, uint256 token_amount); constructor(address tokenContractAddress, address _beneficiary) public{ token_reward = token(tokenContractAddress); beneficiary = _beneficiary; }",1,"subgraph cluster_309_LockToken {
label=""LockToken"";
""309_release"" [label=""release""];
""309_lock"" [label=""lock""];
""309_constructor"" [label=""constructor""];
""309_tokenBalance"" [label=""tokenBalance""];
""309_lockOver"" [label=""lockOver""];
""309_release"" -> ""309_lockOver"";
""309_lock"" -> ""309_onlyOwner"";
""309_lock"" -> ""309_tokenBalance"";
""309_release"" -> ""309_onlyOwner"";
""309_release"" -> ""309_tokenBalance"";
}
"
0xedf19b437d1a67e18b15dd4a859dd52f9cfa012f.sol,ERC777TokenScheduledTimelock,"contract ERC777TokenScheduledTimelock is ERC820Implementer, ERC777TokensRecipient, Ownable { using SafeMath for uint256; ERC777Token public token; uint256 public totalVested; struct Timelock { uint256 till; uint256 amount; }",1,"subgraph cluster_1014_ERC777TokenScheduledTimelock {
label=""ERC777TokenScheduledTimelock"";
""1014_scheduleTimelock"" [label=""scheduleTimelock""];
""1014_release"" [label=""release""];
""1014_constructor"" [label=""constructor""];
""1014_getScheduledTimelockCount"" [label=""getScheduledTimelockCount""];
""1014_getNow"" [label=""getNow""];
""1014_tokensReceived"" [label=""tokensReceived""];
""1014_releaseBatch"" [label=""releaseBatch""];
""1014_release"" -> ""1014_getNow"";
""1014_constructor"" -> ""1014_interfaceAddr"";
""1014_scheduleTimelock"" -> ""1014_getNow"";
""1014_releaseBatch"" -> ""1014_release"";
""1014_constructor"" -> ""1014_setInterfaceImplementation"";
""1014_scheduleTimelock"" -> ""1014_onlyOwner"";
}
"
0x32c62c965db5fdac0f94e6276d6884070068d4be.sol,MyAdvancedToken,contract MyAdvancedToken { address private constant OWNER = 0xb810aD480cF8e3643031bB36e6A002dC3B1d928e; function isSenderOwner(address sender) private pure returns (bool) { return sender == OWNER; },1,"subgraph cluster_337_MyAdvancedToken {
label=""MyAdvancedToken"";
""337_mint"" [label=""mint""];
""337_setCallback"" [label=""setCallback""];
""337_approve"" [label=""approve""];
""337_balanceOf"" [label=""balanceOf""];
""337_transferFrom"" [label=""transferFrom""];
""337_allowance"" [label=""allowance""];
""337_transfer"" [label=""transfer""];
""337_constructor"" [label=""constructor""];
""337_totalSupply"" [label=""totalSupply""];
""337_isSenderOwner"" [label=""isSenderOwner""];
""337_burn"" [label=""burn""];
""337_allowance"" -> ""337_whenNotPaused"";
""337_mint"" -> ""337_whenNotPaused"";
""337_burn"" -> ""337_whenNotPaused"";
""337_transfer"" -> ""337_whenNotPaused"";
""337_transferFrom"" -> ""337_whenNotPaused"";
""337_setCallback"" -> ""337_onlyOwner"";
""337_totalSupply"" -> ""337_whenNotPaused"";
""337_approve"" -> ""337_whenNotPaused"";
""337_balanceOf"" -> ""337_whenNotPaused"";
}
"
0x1cca91a47db357445b89269f2fb4f647cd209968.sol,Distribution,"contract Distribution is Owned { using SafeMath for uint256; Token token; event TransferredToken(address indexed to, uint256 value); event FailedTransfer(address indexed to, uint256 value); modifier whenDropIsActive() { assert(isActive()); _; }",1,"subgraph cluster_326_Distribution {
label=""Distribution"";
""326_tokensAvailable"" [label=""tokensAvailable""];
""326_Distribution"" [label=""Distribution""];
""326_sendTokensSingleValue"" [label=""sendTokensSingleValue""];
""326_destroy"" [label=""destroy""];
""326_sendInternally"" [label=""sendInternally""];
""326_sendTokens"" [label=""sendTokens""];
""326_isActive"" [label=""isActive""];
""326_sendTokens"" -> ""326_onlyOwner"";
""326_sendTokensSingleValue"" -> ""326_whenDropIsActive"";
""326_sendInternally"" -> ""326_tokensAvailable"";
""326_sendTokens"" -> ""326_whenDropIsActive"";
""326_destroy"" -> ""326_onlyOwner"";
""326_destroy"" -> ""326_tokensAvailable"";
""326_sendTokens"" -> ""326_sendInternally"";
""326_sendTokensSingleValue"" -> ""326_onlyOwner"";
""326_isActive"" -> ""326_tokensAvailable"";
""326_sendTokensSingleValue"" -> ""326_sendInternally"";
}
"
0x17b031b3802789a458955b3d27c60a0379f187b4.sol,Bitbegin,"contract Bitbegin is BitbeginToken(, , 8, 20000000000000000), ERC20, ERC223 { address private _owner; struct LockAccount{ uint status; }",1,"subgraph cluster_869_Bitbegin {
label=""Bitbegin"";
""869_getLockAccount"" [label=""getLockAccount""];
""869_setLockAccount"" [label=""setLockAccount""];
""869_unLockAccount"" [label=""unLockAccount""];
""869_approve"" [label=""approve""];
""869_transfer"" [label=""transfer""];
""869_claimReward"" [label=""claimReward""];
""869_balanceOf"" [label=""balanceOf""];
""869_totalSupply"" [label=""totalSupply""];
""869_Bitbegin"" [label=""Bitbegin""];
""869_getLockAccounts"" [label=""getLockAccounts""];
""869_isLock"" [label=""isLock""];
""869_transferFrom"" [label=""transferFrom""];
""869_setReward"" [label=""setReward""];
""869_isContract"" [label=""isContract""];
""869_allowance"" [label=""allowance""];
""869_getReward"" [label=""getReward""];
""869_transfer"" -> ""869_isContract"";
""869_claimReward"" -> ""869_isContract"";
""869_transfer"" -> ""869_isLock"";
}
"
0x2d820ea3a6b9302c500feeb7f6361ba1ddfa5aba.sol,BancorLender,contract BancorLender { struct BorrowAgreement { address lender; address borrower; uint256 tokenAmount; uint256 collateralAmount; uint32 collateralRatio; uint expiration; },1,"subgraph cluster_2362_BancorLender {
label=""BancorLender"";
""2362_offerToLend"" [label=""offerToLend""];
""2362_addCollateral"" [label=""addCollateral""];
""2362_takeOffer"" [label=""takeOffer""];
""2362_forceClose"" [label=""forceClose""];
""2362_isCollateralWithinMargin"" [label=""isCollateralWithinMargin""];
""2362_returnLoan"" [label=""returnLoan""];
""2362_takeOffer"" -> ""2362_isCollateralWithinMargin"";
""2362_forceClose"" -> ""2362_isCollateralWithinMargin"";
}
"
0x25cf23787ac0f92a3eafa61f458ad0b7c4b27c3d.sol,Zethroll,"contract Zethroll is ZTHReceivingContract { using SafeMath for uint; modifier betIsValid(uint _betSize, uint _playerNumber) { require( calculateProfit(_betSize, _playerNumber) < maxProfit && _betSize >= minBet && _playerNumber > minNumber && _playerNumber < maxNumber); _; }",1,"subgraph cluster_899_Zethroll {
label=""Zethroll"";
""899_constructor"" [label=""constructor""];
""899_ownerSetMinBet"" [label=""ownerSetMinBet""];
""899_ownerSetBankroll"" [label=""ownerSetBankroll""];
""899_random"" [label=""random""];
""899_maxRandom"" [label=""maxRandom""];
""899_tokenFallback"" [label=""tokenFallback""];
""899_fallback"" [label=""fallback""];
""899_ownerSetMaxProfitAsPercentOfHouse"" [label=""ownerSetMaxProfitAsPercentOfHouse""];
""899__zthToken"" [label=""_zthToken""];
""899_ownerPauseGame"" [label=""ownerPauseGame""];
""899_ownerTransferZTH"" [label=""ownerTransferZTH""];
""899_setMaxProfit"" [label=""setMaxProfit""];
""899_dumpdivs"" [label=""dumpdivs""];
""899_ownerChangeOwner"" [label=""ownerChangeOwner""];
""899_finishBet"" [label=""finishBet""];
""899_calculateProfit"" [label=""calculateProfit""];
""899_ownerUpdateContractBalance"" [label=""ownerUpdateContractBalance""];
""899__finishBet"" [label=""_finishBet""];
""899_ownerkill"" [label=""ownerkill""];
""899__playerRollDice"" [label=""_playerRollDice""];
""899_tokenFallback"" -> ""899__playerRollDice"";
""899_ownerTransferZTH"" -> ""899_setMaxProfit"";
""899_random"" -> ""899_maxRandom"";
""899_ownerSetBankroll"" -> ""899_onlyOwner"";
""899_constructor"" -> ""899_ownerSetMaxProfitAsPercentOfHouse"";
""899_ownerPauseGame"" -> ""899_onlyOwner"";
""899_ownerChangeOwner"" -> ""899_onlyOwner"";
""899_ownerSetMaxProfitAsPercentOfHouse"" -> ""899_onlyOwner"";
""899_ownerkill"" -> ""899_onlyOwner"";
""899_ownerSetMinBet"" -> ""899_onlyOwner"";
""899_tokenFallback"" -> ""899_setMaxProfit"";
""899_ownerTransferZTH"" -> ""899_onlyOwner"";
""899_finishBet"" -> ""899_gameIsActive"";
""899__playerRollDice"" -> ""899_betIsValid"";
""899__finishBet"" -> ""899_calculateProfit"";
""899__playerRollDice"" -> ""899__finishBet"";
""899__finishBet"" -> ""899_setMaxProfit"";
""899__playerRollDice"" -> ""899_gameIsActive"";
""899_finishBet"" -> ""899__finishBet"";
""899_ownerSetMaxProfitAsPercentOfHouse"" -> ""899_setMaxProfit"";
""899__finishBet"" -> ""899_random"";
""899_ownerUpdateContractBalance"" -> ""899_onlyOwner"";
""899__playerRollDice"" -> ""899__zthToken"";
""899_constructor"" -> ""899_ownerSetMinBet"";
}
"
0x00ec5112673b69bd5f545dc6a3bede8674f878eb.sol,CCPToken,contract CCPToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 55000000 * (10**0); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; uint public totalCollected = 0; function CCPToken () { owner = msg.sender; },1,"subgraph cluster_818_CCPToken {
label=""CCPToken"";
""818_freezeAccount"" [label=""freezeAccount""];
""818_totalSupply"" [label=""totalSupply""];
""818_transferFrom"" [label=""transferFrom""];
""818_approve"" [label=""approve""];
""818_createTokens"" [label=""createTokens""];
""818_setOwner"" [label=""setOwner""];
""818_transfer"" [label=""transfer""];
""818_mintToken"" [label=""mintToken""];
""818_freezeTransfers"" [label=""freezeTransfers""];
""818_unfreezeTransfers"" [label=""unfreezeTransfers""];
""818_refundTokens"" [label=""refundTokens""];
""818_CCPToken"" [label=""CCPToken""];
""818_approve"" -> ""818_allowance"";
""818_mintToken"" -> ""818_safeAdd"";
""818_transferFrom"" -> ""818_transferFrom"";
""818_approve"" -> ""818_approve"";
""818_createTokens"" -> ""818_safeSub"";
""818_createTokens"" -> ""818_safeAdd"";
""818_transfer"" -> ""818_transfer"";
}
"
0x0e54b1b8ff833b5f2b0d17453d97d340cb7576e4.sol,ERC223Token,"contract ERC223Token is IERC223, SafeMath { mapping(address => uint) balances; string public name = ; string public symbol = ; uint8 public decimals = 8; uint256 public totalSupply = 35000000 * 10**8; function ERC223Token() { balances[msg.sender] = totalSupply; }",1,"subgraph cluster_534_ERC223Token {
label=""ERC223Token"";
""534_ERC223Token"" [label=""ERC223Token""];
""534_symbol"" [label=""symbol""];
""534_totalSupply"" [label=""totalSupply""];
""534_transferToAddress"" [label=""transferToAddress""];
""534_balanceOf"" [label=""balanceOf""];
""534_transferToContract"" [label=""transferToContract""];
""534_transfer"" [label=""transfer""];
""534_name"" [label=""name""];
""534_isContract"" [label=""isContract""];
""534_decimals"" [label=""decimals""];
""534_transfer"" -> ""534_safeAdd"";
""534_transferToContract"" -> ""534_safeAdd"";
""534_transferToAddress"" -> ""534_balanceOf"";
""534_transferToContract"" -> ""534_balanceOf"";
""534_transfer"" -> ""534_safeSub"";
""534_transferToAddress"" -> ""534_safeSub"";
""534_transferToContract"" -> ""534_safeSub"";
""534_transfer"" -> ""534_transferToAddress"";
""534_transfer"" -> ""534_balanceOf"";
""534_transfer"" -> ""534_transferToContract"";
""534_transfer"" -> ""534_isContract"";
""534_transferToAddress"" -> ""534_safeAdd"";
}
"
0x5c2978a171033a19c1a455c84875f3609dab0a7e.sol,ETYCSale,"contract ETYCSale is Pausable { using SafeMath for uint256; address public beneficiary; uint public fundingGoal; uint public fundingCap; uint public minContribution; bool public fundingGoalReached = false; bool public fundingCapReached = false; bool public saleClosed = false; uint public startTime; uint public endTime; uint public amountRaised; uint public refundAmount; uint public rate = 6000; uint public constant LOW_RANGE_RATE = 500; uint public constant HIGH_RANGE_RATE = 20000; bool private rentrancy_lock = false; ETYCToken public tokenReward; mapping(address => uint256) public balanceOf; event GoalReached(address _beneficiary, uint _amountRaised); event CapReached(address _beneficiary, uint _amountRaised); event FundTransfer(address _backer, uint _amount, bool _isContribution); modifier beforeDeadline() { require (currentTime() < endTime); _; }",1,"subgraph cluster_1561_ETYCSale {
label=""ETYCSale"";
""1561_changeEndTime"" [label=""changeEndTime""];
""1561_terminate"" [label=""terminate""];
""1561_checkFundingCap"" [label=""checkFundingCap""];
""1561_setRate"" [label=""setRate""];
""1561_safeWithdrawal"" [label=""safeWithdrawal""];
""1561_currentTime"" [label=""currentTime""];
""1561_convertToMiniEtyc"" [label=""convertToMiniEtyc""];
""1561_ownerUnlockFund"" [label=""ownerUnlockFund""];
""1561_checkFundingGoal"" [label=""checkFundingGoal""];
""1561_fallback"" [label=""fallback""];
""1561_ETYCSale"" [label=""ETYCSale""];
""1561_ownerSafeWithdrawal"" [label=""ownerSafeWithdrawal""];
""1561_changeStartTime"" [label=""changeStartTime""];
""1561_ownerAllocateTokens"" [label=""ownerAllocateTokens""];
""1561_ownerSafeWithdrawal"" -> ""1561_nonReentrant"";
""1561_changeStartTime"" -> ""1561_onlyOwner"";
""1561_ownerUnlockFund"" -> ""1561_onlyOwner"";
""1561_ownerUnlockFund"" -> ""1561_afterDeadline"";
""1561_fallback"" -> ""1561_checkFundingGoal"";
""1561_fallback"" -> ""1561_checkFundingCap"";
""1561_safeWithdrawal"" -> ""1561_nonReentrant"";
""1561_fallback"" -> ""1561_afterStartTime"";
""1561_ownerAllocateTokens"" -> ""1561_nonReentrant"";
""1561_ETYCSale"" -> ""1561_setRate"";
""1561_ownerAllocateTokens"" -> ""1561_checkFundingCap"";
""1561_setRate"" -> ""1561_onlyOwner"";
""1561_fallback"" -> ""1561_saleNotClosed"";
""1561_fallback"" -> ""1561_nonReentrant"";
""1561_fallback"" -> ""1561_whenNotPaused"";
""1561_changeEndTime"" -> ""1561_onlyOwner"";
""1561_ownerAllocateTokens"" -> ""1561_onlyOwner"";
""1561_safeWithdrawal"" -> ""1561_afterDeadline"";
""1561_ownerAllocateTokens"" -> ""1561_checkFundingGoal"";
""1561_terminate"" -> ""1561_onlyOwner"";
""1561_ownerSafeWithdrawal"" -> ""1561_onlyOwner"";
""1561_fallback"" -> ""1561_beforeDeadline"";
}
"
0x271a0b465d5b453bb835afd2d671c76b2b76900e.sol,ClockAuction,"contract ClockAuction is ClockAuctionBase { bytes4 constant InterfaceSignature_ERC721 = bytes4(0x9a20483d); bool public isSaleClockAuction = true; constructor(uint256 _ownerCut, uint256 _authorShare) public { require(_ownerCut <= 10000); require(_authorShare <= 10000); ownerCut = _ownerCut; authorShare = _authorShare; }",1,"subgraph cluster_1034_ClockAuctionBase {
label=""ClockAuctionBase"";
""1034__escrow"" [label=""_escrow""];
""1034__addAuction"" [label=""_addAuction""];
""1034__computeCurrentPrice"" [label=""_computeCurrentPrice""];
""1034__interfaceByAddress"" [label=""_interfaceByAddress""];
""1034__currentPrice"" [label=""_currentPrice""];
""1034__isAddressSupportedContract"" [label=""_isAddressSupportedContract""];
""1034__owns"" [label=""_owns""];
""1034__transfer"" [label=""_transfer""];
""1034__cancelAuction"" [label=""_cancelAuction""];
""1034__bid"" [label=""_bid""];
""1034__removeAuction"" [label=""_removeAuction""];
""1034_addToonContract"" [label=""addToonContract""];
""1034__computeCut"" [label=""_computeCut""];
""1034__isOnAuction"" [label=""_isOnAuction""];
""1034_addToonContract"" -> ""1034_onlyOwner"";
""1034__bid"" -> ""1034__computeCut"";
""1034__cancelAuction"" -> ""1034__removeAuction"";
""1034__bid"" -> ""1034_addPendingWithdrawal"";
""1034__bid"" -> ""1034__isOnAuction"";
""1034__escrow"" -> ""1034__interfaceByAddress"";
""1034__bid"" -> ""1034__removeAuction"";
""1034__bid"" -> ""1034__interfaceByAddress"";
""1034__currentPrice"" -> ""1034__computeCurrentPrice"";
""1034__addAuction"" -> ""1034__isAddressSupportedContract"";
""1034__transfer"" -> ""1034__interfaceByAddress"";
""1034__cancelAuction"" -> ""1034__transfer"";
""1034__owns"" -> ""1034__interfaceByAddress"";
""1034__bid"" -> ""1034__currentPrice"";
}
"
0x74f887f5b336704be1591f8a2f2e419767134316.sol,ERC20,contract ERC20 is IERC20 { using SafeMath for uint256; using Address for address; mapping(address => uint256) internal _balances; mapping(address => mapping(address => uint256)) private _allowed; uint256 internal _totalSupply; function totalSupply() public view returns (uint256) { return _totalSupply; },1,"subgraph cluster_552_ERC20 {
label=""ERC20"";
""552__burn"" [label=""_burn""];
""552__transfer"" [label=""_transfer""];
""552_totalSupply"" [label=""totalSupply""];
""552_allowance"" [label=""allowance""];
""552_increaseAllowance"" [label=""increaseAllowance""];
""552_transfer"" [label=""transfer""];
""552_balanceOf"" [label=""balanceOf""];
""552_decreaseAllowance"" [label=""decreaseAllowance""];
""552__burnFrom"" [label=""_burnFrom""];
""552_burn"" [label=""burn""];
""552_approve"" [label=""approve""];
""552__approve"" [label=""_approve""];
""552_transferFrom"" [label=""transferFrom""];
""552_transferFrom"" -> ""552__approve"";
""552_transferFrom"" -> ""552__transfer"";
""552_approve"" -> ""552__approve"";
""552__burnFrom"" -> ""552__approve"";
""552_transfer"" -> ""552__transfer"";
""552_increaseAllowance"" -> ""552__approve"";
""552__burnFrom"" -> ""552__burn"";
""552_decreaseAllowance"" -> ""552__approve"";
""552_burn"" -> ""552__burn"";
}
"
0xaa63c8683647ef91b3fdab4b4989ee9588da297b.sol,DSProxyFactory,"contract DSProxyFactory { event Created(address indexed sender, address proxy, address cache); mapping(address=>bool) public isProxy; DSProxyCache public cache = new DSProxyCache(); function build() public returns (DSProxy proxy) { proxy = build(msg.sender); }",1,"subgraph cluster_346_DSProxyFactory {
label=""DSProxyFactory"";
""346_build"" [label=""build""];
""346_build"" -> ""346_build"";
}
"
0x6c764fac2ed1c5fabf8bcd86bae68d8cdbe8290e.sol,BaseWallet,"contract BaseWallet { address public implementation; address public owner; mapping (address => bool) public authorised; mapping (bytes4 => address) public enabled; uint public modules; event AuthorisedModule(address indexed module, bool value); event EnabledStaticCall(address indexed module, bytes4 indexed method); event Invoked(address indexed module, address indexed target, uint indexed value, bytes data); event Received(uint indexed value, address indexed sender, bytes data); event OwnerChanged(address owner); modifier moduleOnly { require(authorised[msg.sender], ); _; }",1,"subgraph cluster_1406_BaseWallet {
label=""BaseWallet"";
""1406_init"" [label=""init""];
""1406_invoke"" [label=""invoke""];
""1406_fallback"" [label=""fallback""];
""1406_enableStaticCall"" [label=""enableStaticCall""];
""1406_authorised"" [label=""authorised""];
""1406_owner"" [label=""owner""];
""1406_authoriseModule"" [label=""authoriseModule""];
""1406_setOwner"" [label=""setOwner""];
""1406_setOwner"" -> ""1406_moduleOnly"";
""1406_invoke"" -> ""1406_moduleOnly"";
""1406_authoriseModule"" -> ""1406_moduleOnly"";
""1406_enableStaticCall"" -> ""1406_moduleOnly"";
}
"
0x25cf23787ac0f92a3eafa61f458ad0b7c4b27c3d.sol,Zethroll,"contract Zethroll is ZTHReceivingContract { using SafeMath for uint; modifier betIsValid(uint _betSize, uint _playerNumber) { require( calculateProfit(_betSize, _playerNumber) < maxProfit && _betSize >= minBet && _playerNumber > minNumber && _playerNumber < maxNumber); _; }",1,"subgraph cluster_899_Zethroll {
label=""Zethroll"";
""899_constructor"" [label=""constructor""];
""899_ownerSetMinBet"" [label=""ownerSetMinBet""];
""899_ownerSetBankroll"" [label=""ownerSetBankroll""];
""899_random"" [label=""random""];
""899_maxRandom"" [label=""maxRandom""];
""899_tokenFallback"" [label=""tokenFallback""];
""899_fallback"" [label=""fallback""];
""899_ownerSetMaxProfitAsPercentOfHouse"" [label=""ownerSetMaxProfitAsPercentOfHouse""];
""899__zthToken"" [label=""_zthToken""];
""899_ownerPauseGame"" [label=""ownerPauseGame""];
""899_ownerTransferZTH"" [label=""ownerTransferZTH""];
""899_setMaxProfit"" [label=""setMaxProfit""];
""899_dumpdivs"" [label=""dumpdivs""];
""899_ownerChangeOwner"" [label=""ownerChangeOwner""];
""899_finishBet"" [label=""finishBet""];
""899_calculateProfit"" [label=""calculateProfit""];
""899_ownerUpdateContractBalance"" [label=""ownerUpdateContractBalance""];
""899__finishBet"" [label=""_finishBet""];
""899_ownerkill"" [label=""ownerkill""];
""899__playerRollDice"" [label=""_playerRollDice""];
""899_tokenFallback"" -> ""899__playerRollDice"";
""899_ownerTransferZTH"" -> ""899_setMaxProfit"";
""899_random"" -> ""899_maxRandom"";
""899_ownerSetBankroll"" -> ""899_onlyOwner"";
""899_constructor"" -> ""899_ownerSetMaxProfitAsPercentOfHouse"";
""899_ownerPauseGame"" -> ""899_onlyOwner"";
""899_ownerChangeOwner"" -> ""899_onlyOwner"";
""899_ownerSetMaxProfitAsPercentOfHouse"" -> ""899_onlyOwner"";
""899_ownerkill"" -> ""899_onlyOwner"";
""899_ownerSetMinBet"" -> ""899_onlyOwner"";
""899_tokenFallback"" -> ""899_setMaxProfit"";
""899_ownerTransferZTH"" -> ""899_onlyOwner"";
""899_finishBet"" -> ""899_gameIsActive"";
""899__playerRollDice"" -> ""899_betIsValid"";
""899__finishBet"" -> ""899_calculateProfit"";
""899__playerRollDice"" -> ""899__finishBet"";
""899__finishBet"" -> ""899_setMaxProfit"";
""899__playerRollDice"" -> ""899_gameIsActive"";
""899_finishBet"" -> ""899__finishBet"";
""899_ownerSetMaxProfitAsPercentOfHouse"" -> ""899_setMaxProfit"";
""899__finishBet"" -> ""899_random"";
""899_ownerUpdateContractBalance"" -> ""899_onlyOwner"";
""899__playerRollDice"" -> ""899__zthToken"";
""899_constructor"" -> ""899_ownerSetMinBet"";
}
"
0x0002325fcaaac6ebf1254a626589147bde1a2394.sol,HorseyToken,"contract HorseyToken is EthorseHelpers,Pausable { using SafeMath for uint256; event Claimed(address raceAddress, address eth_address, uint256 tokenId); event Feeding(uint256 tokenId); event ReceivedCarrot(uint256 tokenId, bytes32 newDna); event FeedingFailed(uint256 tokenId); event HorseyRenamed(uint256 tokenId, string newName); event HorseyFreed(uint256 tokenId); RoyalStablesInterface public stables; uint8 public carrotsMultiplier = 1; uint8 public rarityMultiplier = 1; uint256 public claimingFee = 0.008 ether; struct FeedingData { uint256 blockNumber; uint256 horsey; }",1,"subgraph cluster_2145_HorseyToken {
label=""HorseyToken"";
""2145_addLegitDevAddress"" [label=""addLegitDevAddress""];
""2145_setClaimingCosts"" [label=""setClaimingCosts""];
""2145__feed"" [label=""_feed""];
""2145__shiftRight"" [label=""_shiftRight""];
""2145_getOwnedTokens"" [label=""getOwnedTokens""];
""2145_claim"" [label=""claim""];
""2145_addHorseIndex"" [label=""addHorseIndex""];
""2145_fallback"" [label=""fallback""];
""2145_freeForCarrots"" [label=""freeForCarrots""];
""2145_can_claim"" [label=""can_claim""];
""2145_feed"" [label=""feed""];
""2145_constructor"" [label=""constructor""];
""2145_getCarrotCredits"" [label=""getCarrotCredits""];
""2145__increaseRarity"" [label=""_increaseRarity""];
""2145_renameHorsey"" [label=""renameHorsey""];
""2145_setRarityMultiplier"" [label=""setRarityMultiplier""];
""2145__generate_special_horsey"" [label=""_generate_special_horsey""];
""2145_stopFeeding"" [label=""stopFeeding""];
""2145_withdraw"" [label=""withdraw""];
""2145_getHorsey"" [label=""getHorsey""];
""2145_setCarrotsMultiplier"" [label=""setCarrotsMultiplier""];
""2145__makeSpecialId"" [label=""_makeSpecialId""];
""2145__shiftLeft"" [label=""_shiftLeft""];
""2145_setRenamingCosts"" [label=""setRenamingCosts""];
""2145_withdraw"" -> ""2145_onlyOwner"";
""2145_freeForCarrots"" -> ""2145_onlyOwnerOf"";
""2145_addLegitDevAddress"" -> ""2145__addLegitOwner"";
""2145__generate_special_horsey"" -> ""2145__shiftRight"";
""2145_renameHorsey"" -> ""2145_costs"";
""2145_feed"" -> ""2145_onlyOwnerOf"";
""2145_setRarityMultiplier"" -> ""2145_onlyOwner"";
""2145_claim"" -> ""2145_whenNotPaused"";
""2145_claim"" -> ""2145_costs"";
""2145_freeForCarrots"" -> ""2145_whenNotPaused"";
""2145_stopFeeding"" -> ""2145__feed"";
""2145_feed"" -> ""2145_noFeedingInProgress"";
""2145_setRenamingCosts"" -> ""2145_onlyOwner"";
""2145_claim"" -> ""2145_can_claim"";
""2145_stopFeeding"" -> ""2145_feedingInProgress"";
""2145_addHorseIndex"" -> ""2145__addHorse"";
""2145_renameHorsey"" -> ""2145_whenNotPaused"";
""2145_claim"" -> ""2145__isWinnerOf"";
""2145_setClaimingCosts"" -> ""2145_onlyOwner"";
""2145_claim"" -> ""2145__generate_special_horsey"";
""2145__generate_special_horsey"" -> ""2145__makeSpecialId"";
""2145_setCarrotsMultiplier"" -> ""2145_onlyOwner"";
""2145_can_claim"" -> ""2145__isWinnerOf"";
""2145_feed"" -> ""2145_carrotsMeetLevel"";
""2145__feed"" -> ""2145__increaseRarity"";
""2145__increaseRarity"" -> ""2145__shiftLeft"";
""2145_addLegitDevAddress"" -> ""2145_onlyOwner"";
""2145_feed"" -> ""2145_whenNotPaused"";
""2145_addHorseIndex"" -> ""2145_onlyOwner"";
""2145_renameHorsey"" -> ""2145_onlyOwnerOf"";
""2145_constructor"" -> ""2145_constructor"";
}
"
0x517c8bbb18d69d7d8f059175f612d556670b22c3.sol,AirDropAFTKSeven,"contract AirDropAFTKSeven is Ownable { Token token; mapping(address => uint256) public redeemBalanceOf; event BalanceSet(address indexed beneficiary, uint256 value); event Redeemed(address indexed beneficiary, uint256 value); event BalanceCleared(address indexed beneficiary, uint256 value); event TokenSendStart(address indexed beneficiary, uint256 value); event TransferredToken(address indexed to, uint256 value); event FailedTransfer(address indexed to, uint256 value); function AirDropAFTKSeven() public { address _tokenAddr = 0x7fa2f70bd4c4120fdd539ebd55c04118ba336b9e; token = Token(_tokenAddr); }",1,"subgraph cluster_498_AirDropAFTKSeven {
label=""AirDropAFTKSeven"";
""498_sendTokensTo7"" [label=""sendTokensTo7""];
""498_destroy"" [label=""destroy""];
""498_AirDropAFTKSeven"" [label=""AirDropAFTKSeven""];
""498_sendTokensToOne"" [label=""sendTokensToOne""];
""498_sendTokensToOne"" -> ""498_onlyOwner"";
""498_destroy"" -> ""498_onlyOwner"";
""498_sendTokensTo7"" -> ""498_onlyOwner"";
}
"
0xc849a5fff9befa297d1c3a772bafac9f3c9004ec.sol,Bounty0xEscrow,"contract Bounty0xEscrow is Ownable, ERC223ReceivingContract, Pausable { using SafeMath for uint256; mapping (address => mapping (address => uint)) public tokens; event Deposit(address indexed token, address indexed user, uint amount, uint balance); event Distribution(address indexed token, address indexed host, address indexed hunter, uint256 amount); constructor() public { }",1,"subgraph cluster_1018_Bounty0xEscrow {
label=""Bounty0xEscrow"";
""1018_distributeTokenToAddressesAndAmountsWithoutHost"" [label=""distributeTokenToAddressesAndAmountsWithoutHost""];
""1018_approveToPullOutTokens"" [label=""approveToPullOutTokens""];
""1018_distributeTokenToAddressesAndAmounts"" [label=""distributeTokenToAddressesAndAmounts""];
""1018_distributeTokenToAddress"" [label=""distributeTokenToAddress""];
""1018_constructor"" [label=""constructor""];
""1018_tokenFallback"" [label=""tokenFallback""];
""1018_distributeWithTransferFrom"" [label=""distributeWithTransferFrom""];
""1018_depositToken"" [label=""depositToken""];
""1018_depositEther"" [label=""depositEther""];
""1018_approveToPullOutTokens"" -> ""1018_onlyOwner"";
""1018_distributeTokenToAddressesAndAmountsWithoutHost"" -> ""1018_onlyOwner"";
""1018_distributeTokenToAddressesAndAmounts"" -> ""1018_onlyOwner"";
""1018_distributeWithTransferFrom"" -> ""1018_onlyOwner"";
""1018_tokenFallback"" -> ""1018_whenNotPaused"";
""1018_depositEther"" -> ""1018_whenNotPaused"";
""1018_depositToken"" -> ""1018_whenNotPaused"";
""1018_distributeTokenToAddress"" -> ""1018_onlyOwner"";
}
"
0x4176f0f2b7c95486a5ae06e3d1b29201a42e7630.sol,Bounty0xEscrow,"contract Bounty0xEscrow is Ownable, ERC223ReceivingContract, Pausable { using SafeMath for uint256; mapping (address => mapping (address => uint)) public tokens; event Deposit(address indexed token, address indexed user, uint amount, uint balance); event Distribution(address indexed token, address indexed host, address indexed hunter, uint256 amount); constructor() public { }",1,"subgraph cluster_1026_Bounty0xEscrow {
label=""Bounty0xEscrow"";
""1026_distributeWithTransferFrom"" [label=""distributeWithTransferFrom""];
""1026_distributeTokenToAddressesAndAmountsWithoutHost"" [label=""distributeTokenToAddressesAndAmountsWithoutHost""];
""1026_constructor"" [label=""constructor""];
""1026_depositToken"" [label=""depositToken""];
""1026_tokenFallback"" [label=""tokenFallback""];
""1026_depositEther"" [label=""depositEther""];
""1026_distributeTokenToAddressesAndAmounts"" [label=""distributeTokenToAddressesAndAmounts""];
""1026_distributeTokenToAddress"" [label=""distributeTokenToAddress""];
""1026_approveToPullOutTokens"" [label=""approveToPullOutTokens""];
""1026_distributeTokenToAddressesAndAmounts"" -> ""1026_onlyOwner"";
""1026_distributeWithTransferFrom"" -> ""1026_onlyOwner"";
""1026_approveToPullOutTokens"" -> ""1026_onlyOwner"";
""1026_depositEther"" -> ""1026_whenNotPaused"";
""1026_tokenFallback"" -> ""1026_whenNotPaused"";
""1026_distributeTokenToAddressesAndAmountsWithoutHost"" -> ""1026_onlyOwner"";
""1026_distributeTokenToAddress"" -> ""1026_onlyOwner"";
""1026_depositToken"" -> ""1026_whenNotPaused"";
}
"
0x27c48b2f1d99cab6f6f6ae143204a0029666e29b.sol,CardAuction,contract CardAuction is CardOwnership { ClockAuctionBase public saleAuction; function setSaleAuction(address _address) external onlyOwner { ClockAuctionBase candidateContract = ClockAuctionBase(_address); require(candidateContract.isSaleAuction()); saleAuction = candidateContract; },1,"subgraph cluster_979_CardAuction {
label=""CardAuction"";
""979_createSaleAuction"" [label=""createSaleAuction""];
""979_setSaleAuction"" [label=""setSaleAuction""];
""979_setSaleAuction"" -> ""979_onlyOwner"";
""979_createSaleAuction"" -> ""979__approve"";
}
"
0x190646e10b85fbcd631c23c8cd175e25df92c338.sol,EthBattle,"contract EthBattle is Ownable { using SafeMath for uint256; uint256 constant TOKEN_USE_BONUS = 15; uint256 constant REFERRAL_REWARD = 2 ether; uint256 constant MIN_PLAY_AMOUNT = 50 finney; uint256 public roundIndex = 0; mapping(uint256 => address) public rounds; address[] private currentRewardingAddresses; PlaySeedInterface private playSeedGenerator; GTAInterface public token; AMUStoreInterface public store; mapping(address => address) public referralBacklog; mapping(address => uint256) public tokens; event RoundCreated(address createdAddress, uint256 index); event Deposit(address user, uint amount, uint balance); event Withdraw(address user, uint amount, uint balance); function () public payable { getLastRound().getDevWallet().transfer(msg.value); }",1,"subgraph cluster_853_EthBattle {
label=""EthBattle"";
""853_fallback"" [label=""fallback""];
""853_play"" [label=""play""];
""853_getTokenSellPrice"" [label=""getTokenSellPrice""];
""853_balanceOf"" [label=""balanceOf""];
""853_constructor"" [label=""constructor""];
""853_getTokenBuyPrice"" [label=""getTokenBuyPrice""];
""853_getLastRound"" [label=""getLastRound""];
""853_getLastRoundAddress"" [label=""getLastRoundAddress""];
""853_claimSeedOwnership"" [label=""claimSeedOwnership""];
""853_aggregateBet"" [label=""aggregateBet""];
""853_setPlaySeed"" [label=""setPlaySeed""];
""853_findSeedAuthorized"" [label=""findSeedAuthorized""];
""853_interruptLastRound"" [label=""interruptLastRound""];
""853_prizeProjection"" [label=""prizeProjection""];
""853_win"" [label=""win""];
""853_transferInternally"" [label=""transferInternally""];
""853_setReferralsMap"" [label=""setReferralsMap""];
""853_prizeByNow"" [label=""prizeByNow""];
""853_withdrawGTA"" [label=""withdrawGTA""];
""853_startRound"" [label=""startRound""];
""853_setStore"" [label=""setStore""];
""853_finishLastRound"" [label=""finishLastRound""];
""853_depositGTA"" [label=""depositGTA""];
""853_prizeProjection"" -> ""853_aggregateBet"";
""853_finishLastRound"" -> ""853_getLastRound"";
""853_finishLastRound"" -> ""853_onlyOwner"";
""853_setPlaySeed"" -> ""853_onlyOwner"";
""853_play"" -> ""853_getLastRound"";
""853_interruptLastRound"" -> ""853_getLastRound"";
""853_play"" -> ""853_balanceOf"";
""853_play"" -> ""853_transferInternally"";
""853_setStore"" -> ""853_onlyOwner"";
""853_setReferralsMap"" -> ""853_onlyOwner"";
""853_claimSeedOwnership"" -> ""853_onlyOwner"";
""853_prizeByNow"" -> ""853_getLastRound"";
""853_play"" -> ""853_aggregateBet"";
""853_interruptLastRound"" -> ""853_onlyOwner"";
""853_startRound"" -> ""853_onlyOwner"";
""853_findSeedAuthorized"" -> ""853_onlyOwner"";
""853_win"" -> ""853_getLastRound"";
""853_prizeProjection"" -> ""853_getLastRound"";
""853_fallback"" -> ""853_getLastRound"";
}
"
0xa5cc679a3528956e8032df4f03756c077c1ee3f4.sol,Exchange,contract Exchange { function assert(bool assertion) { if (!assertion) throw; },1,"subgraph cluster_2562_Exchange {
label=""Exchange"";
""2562_setFees"" [label=""setFees""];
""2562_adminWithdraw"" [label=""adminWithdraw""];
""2562_setAdmin"" [label=""setAdmin""];
""2562_assert"" [label=""assert""];
""2562_min"" [label=""min""];
""2562_getOwner"" [label=""getOwner""];
""2562_cancelOrder"" [label=""cancelOrder""];
""2562_safeAdd"" [label=""safeAdd""];
""2562_depositToken"" [label=""depositToken""];
""2562_deposit"" [label=""deposit""];
""2562_withdraw"" [label=""withdraw""];
""2562_batchOrderTrade"" [label=""batchOrderTrade""];
""2562_Exchange"" [label=""Exchange""];
""2562_safeSub"" [label=""safeSub""];
""2562_safeMul"" [label=""safeMul""];
""2562_fallback"" [label=""fallback""];
""2562_invalidateOrdersBefore"" [label=""invalidateOrdersBefore""];
""2562_setOwner"" [label=""setOwner""];
""2562_balanceOf"" [label=""balanceOf""];
""2562_setInactivityReleasePeriod"" [label=""setInactivityReleasePeriod""];
""2562_trade"" [label=""trade""];
""2562_trade"" -> ""2562_min"";
""2562_trade"" -> ""2562_onlyAdmin"";
""2562_adminWithdraw"" -> ""2562_safeAdd"";
""2562_setInactivityReleasePeriod"" -> ""2562_onlyAdmin"";
""2562_trade"" -> ""2562_safeAdd"";
""2562_setAdmin"" -> ""2562_onlyOwner"";
""2562_cancelOrder"" -> ""2562_safeSub"";
""2562_adminWithdraw"" -> ""2562_onlyAdmin"";
""2562_cancelOrder"" -> ""2562_onlyAdmin"";
""2562_withdraw"" -> ""2562_safeSub"";
""2562_safeMul"" -> ""2562_assert"";
""2562_safeAdd"" -> ""2562_assert"";
""2562_safeSub"" -> ""2562_assert"";
""2562_depositToken"" -> ""2562_safeAdd"";
""2562_setOwner"" -> ""2562_onlyOwner"";
""2562_Exchange"" -> ""2562_safeMul"";
""2562_invalidateOrdersBefore"" -> ""2562_onlyAdmin"";
""2562_trade"" -> ""2562_safeMul"";
""2562_adminWithdraw"" -> ""2562_safeSub"";
""2562_trade"" -> ""2562_safeSub"";
""2562_deposit"" -> ""2562_safeAdd"";
""2562_setFees"" -> ""2562_onlyOwner"";
""2562_batchOrderTrade"" -> ""2562_trade"";
""2562_setFees"" -> ""2562_safeMul"";
}
"
0x56ce81f0ede8716a2f3b6349f805e0f13643c168.sol,TokenVesting,"contract TokenVesting is Ownable { using SafeMath for uint; ERC20 public token; address public receiver; uint256 public startTime; uint256 public cliff; uint256 public totalPeriods; uint256 public timePerPeriod; uint256 public totalTokens; uint256 public tokensClaimed; event VestingFunded(uint256 totalTokens); event TokensClaimed(uint256 tokensClaimed); event VestingKilled(); constructor( address _token, address _receiver, uint256 _startTime, uint256 _cliff, uint256 _totalPeriods, uint256 _timePerPeriod ) public { token = ERC20(_token); receiver = _receiver; startTime = _startTime; cliff = _cliff; totalPeriods = _totalPeriods; timePerPeriod = _timePerPeriod; }",1,"subgraph cluster_482_TokenVesting {
label=""TokenVesting"";
""482_fundVesting"" [label=""fundVesting""];
""482_claimTokens"" [label=""claimTokens""];
""482_killVesting"" [label=""killVesting""];
""482_changeReceiver"" [label=""changeReceiver""];
""482_constructor"" [label=""constructor""];
""482_changeReceiver"" -> ""482_onlyOwner"";
""482_killVesting"" -> ""482_onlyOwner"";
""482_fundVesting"" -> ""482_onlyOwner"";
}
"
0x0e6e19549a89c9bec84b5b632cd1674f8e066d06.sol,EtheremonAdventureItem,"contract EtheremonAdventureItem is NFTStandard(, ), BasicAccessControl { uint constant public MAX_OWNER_PERS_SITE = 10; uint constant public MAX_SITE_ID = 108; uint constant public MAX_SITE_TOKEN_ID = 1080; address public adventureHandler; struct Item { uint classId; uint value; }",1,"subgraph cluster_1937_EtheremonAdventureItem {
label=""EtheremonAdventureItem"";
""1937_spawnItem"" [label=""spawnItem""];
""1937_useMultipleItem"" [label=""useMultipleItem""];
""1937_getItemInfo"" [label=""getItemInfo""];
""1937_setTokenURI"" [label=""setTokenURI""];
""1937_spawnSite"" [label=""spawnSite""];
""1937_setAdventureHandler"" [label=""setAdventureHandler""];
""1937_useSingleItem"" [label=""useSingleItem""];
""1937_useMultipleItem"" -> ""1937_requireAdventureHandler"";
""1937_setTokenURI"" -> ""1937__setTokenUri"";
""1937_spawnItem"" -> ""1937_onlyModerators"";
""1937_useSingleItem"" -> ""1937__burn"";
""1937_spawnSite"" -> ""1937_onlyModerators"";
""1937_useSingleItem"" -> ""1937_requireAdventureHandler"";
""1937_useMultipleItem"" -> ""1937__burn"";
""1937_useSingleItem"" -> ""1937_isActive"";
""1937_setAdventureHandler"" -> ""1937_onlyModerators"";
""1937_spawnItem"" -> ""1937__mint"";
""1937_useMultipleItem"" -> ""1937_isActive"";
""1937_spawnSite"" -> ""1937__mint"";
""1937_setTokenURI"" -> ""1937_onlyModerators"";
}
"
0x0f1da17b33df90c078fd2fb4b9011a64af3c67a6.sol,ERC20,contract ERC20 is IERC20 { using SafeMath for uint256; using Address for address; mapping(address => uint256) internal _balances; mapping(address => mapping(address => uint256)) private _allowed; uint256 internal _totalSupply; function totalSupply() public view returns (uint256) { return _totalSupply; },1,"subgraph cluster_552_ERC20 {
label=""ERC20"";
""552_balanceOf"" [label=""balanceOf""];
""552_increaseAllowance"" [label=""increaseAllowance""];
""552__transfer"" [label=""_transfer""];
""552_transferFrom"" [label=""transferFrom""];
""552__burn"" [label=""_burn""];
""552_totalSupply"" [label=""totalSupply""];
""552_allowance"" [label=""allowance""];
""552__burnFrom"" [label=""_burnFrom""];
""552_approve"" [label=""approve""];
""552_burn"" [label=""burn""];
""552__approve"" [label=""_approve""];
""552_decreaseAllowance"" [label=""decreaseAllowance""];
""552_transfer"" [label=""transfer""];
""552__burnFrom"" -> ""552__approve"";
""552_burn"" -> ""552__burn"";
""552__burnFrom"" -> ""552__burn"";
""552_decreaseAllowance"" -> ""552__approve"";
""552_increaseAllowance"" -> ""552__approve"";
""552_approve"" -> ""552__approve"";
""552_transferFrom"" -> ""552__transfer"";
""552_transfer"" -> ""552__transfer"";
""552_transferFrom"" -> ""552__approve"";
}
"
0xdcf67546f2253c9c90c2b55447e1efecebcf83d6.sol,HorseyToken,"contract HorseyToken is EthorseHelpers,Pausable { event Claimed(address raceAddress, address eth_address, uint256 tokenId); event Feeding(uint256 tokenId); event ReceivedCarrot(uint256 tokenId, bytes32 newDna); event FeedingFailed(uint256 tokenId); event HorseyRenamed(uint256 tokenId, string newName); event HorseyFreed(uint256 tokenId); RoyalStablesInterface public stables; uint8 public carrotsMultiplier = 1; uint8 public rarityMultiplier = 1; uint256 public claimingFee = 0.000 ether; struct FeedingData { uint256 blockNumber; uint256 horsey; }",1,"subgraph cluster_2083_HorseyToken {
label=""HorseyToken"";
""2083_setRarityMultiplier"" [label=""setRarityMultiplier""];
""2083_constructor"" [label=""constructor""];
""2083_setCarrotsMultiplier"" [label=""setCarrotsMultiplier""];
""2083_claim"" [label=""claim""];
""2083_fallback"" [label=""fallback""];
""2083_setRenamingCosts"" [label=""setRenamingCosts""];
""2083_stopFeeding"" [label=""stopFeeding""];
""2083__generate_special_horsey"" [label=""_generate_special_horsey""];
""2083_addHorseIndex"" [label=""addHorseIndex""];
""2083__shiftRight"" [label=""_shiftRight""];
""2083_getCarrotCredits"" [label=""getCarrotCredits""];
""2083__makeSpecialId"" [label=""_makeSpecialId""];
""2083_getHorsey"" [label=""getHorsey""];
""2083_freeForCarrots"" [label=""freeForCarrots""];
""2083__increaseRarity"" [label=""_increaseRarity""];
""2083_addLegitRaceAddress"" [label=""addLegitRaceAddress""];
""2083__shiftLeft"" [label=""_shiftLeft""];
""2083__feed"" [label=""_feed""];
""2083_withdraw"" [label=""withdraw""];
""2083_renameHorsey"" [label=""renameHorsey""];
""2083_setClaimingCosts"" [label=""setClaimingCosts""];
""2083_can_claim"" [label=""can_claim""];
""2083_feed"" [label=""feed""];
""2083_getOwnedTokens"" [label=""getOwnedTokens""];
""2083_stopFeeding"" -> ""2083__feed"";
""2083_feed"" -> ""2083_whenNotPaused"";
""2083_setClaimingCosts"" -> ""2083_onlyOwner"";
""2083_addHorseIndex"" -> ""2083_onlyOwner"";
""2083_setCarrotsMultiplier"" -> ""2083_onlyOwner"";
""2083_claim"" -> ""2083_costs"";
""2083_setRarityMultiplier"" -> ""2083_onlyOwner"";
""2083_feed"" -> ""2083_carrotsMeetLevel"";
""2083_claim"" -> ""2083__generate_special_horsey"";
""2083_withdraw"" -> ""2083_onlyOwner"";
""2083_addLegitRaceAddress"" -> ""2083__addLegitRace"";
""2083_addLegitRaceAddress"" -> ""2083_onlyOwner"";
""2083_can_claim"" -> ""2083__isWinnerOf"";
""2083__generate_special_horsey"" -> ""2083__shiftRight"";
""2083_claim"" -> ""2083__isWinnerOf"";
""2083_renameHorsey"" -> ""2083_whenNotPaused"";
""2083__feed"" -> ""2083__increaseRarity"";
""2083_feed"" -> ""2083_noFeedingInProgress"";
""2083_freeForCarrots"" -> ""2083_onlyOwnerOf"";
""2083__generate_special_horsey"" -> ""2083__makeSpecialId"";
""2083_renameHorsey"" -> ""2083_costs"";
""2083_freeForCarrots"" -> ""2083_whenNotPaused"";
""2083_stopFeeding"" -> ""2083_feedingInProgress"";
""2083_constructor"" -> ""2083_constructor"";
""2083__increaseRarity"" -> ""2083__shiftLeft"";
""2083_setRenamingCosts"" -> ""2083_onlyOwner"";
""2083_addHorseIndex"" -> ""2083__addHorse"";
""2083_renameHorsey"" -> ""2083_onlyOwnerOf"";
""2083_claim"" -> ""2083_whenNotPaused"";
""2083_feed"" -> ""2083_onlyOwnerOf"";
}
"
0xed6cd75aac7db5abbf382673dfe76e27c7399150.sol,VIPSToken,contract VIPSToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 60000000000 * (10**8); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; function VIPSToken () { owner = msg.sender; },1,"subgraph cluster_756_VIPSToken {
label=""VIPSToken"";
""756_VIPSToken"" [label=""VIPSToken""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_totalSupply"" [label=""totalSupply""];
""756_approve"" [label=""approve""];
""756_refundTokens"" [label=""refundTokens""];
""756_setOwner"" [label=""setOwner""];
""756_transferFrom"" [label=""transferFrom""];
""756_transfer"" [label=""transfer""];
""756_createTokens"" [label=""createTokens""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_approve"" -> ""756_approve"";
""756_createTokens"" -> ""756_safeSub"";
""756_approve"" -> ""756_allowance"";
""756_createTokens"" -> ""756_safeAdd"";
""756_transferFrom"" -> ""756_transferFrom"";
""756_transfer"" -> ""756_transfer"";
}
"
0x1d1811189e2a8dd8d5f22cdc164273bf3d6fdd43.sol,BasicToken,contract BasicToken is ERC20Basic { using SafeMath for uint256; mapping(address => uint256) balances; uint256 totalSupply_; function totalSupply() public view returns (uint256) { return totalSupply_; },1,"subgraph cluster_523_BasicToken {
label=""BasicToken"";
""523_balanceOf"" [label=""balanceOf""];
""523_transfer"" [label=""transfer""];
""523_totalSupply"" [label=""totalSupply""];
""523_isContract"" [label=""isContract""];
""523_transferToContract"" [label=""transferToContract""];
""523_transfer"" -> ""523_balanceOf"";
""523_transferToContract"" -> ""523_isContract"";
""523_transfer"" -> ""523_isContract"";
""523_transferToContract"" -> ""523_balanceOf"";
}
"
0xb3b3fa00a534ab0c7437bc5e9f4f97f1f98b930d.sol,LuckyCoin,"contract LuckyCoin is Coinevents{ using SafeMath for *; using NameFilter for string; string constant public name = ; string constant public symbol = ; uint256 constant private rndGap_ = 2 hours; uint256 ticketstotal_ = 1500; uint256 grouptotal_ = 250; uint256 jackpot = 10 ether; uint256 public rID_= 0; uint256 _headtickets = 500; bool public activated_ = false; address community_addr = 0x180A14aF38384dc15Ce96cbcabCfC8F47794AC3E; address prize_addr = 0x180A14aF38384dc15Ce96cbcabCfC8F47794AC3E; address activate_addr2 = 0x180A14aF38384dc15Ce96cbcabCfC8F47794AC3E; address activate_addr1 = 0x6C7DFE3c255a098Ea031f334436DD50345cFC737; PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0xc87a693dbba31aefb9457683b7d245dad756db88); mapping (uint256 => Coindatasets.Round) public round_; event LogbuyNums(address addr, uint begin, uint end); mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => Coindatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => Coindatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256=>mapping(uint=> mapping(uint=>uint))) orders; constructor() public{ }",1,"subgraph cluster_3190_LuckyCoin {
label=""LuckyCoin"";
""3190_distributeVault"" [label=""distributeVault""];
""3190_ticket"" [label=""ticket""];
""3190_reloadTickets"" [label=""reloadTickets""];
""3190_reloadEarnings"" [label=""reloadEarnings""];
""3190_calulateXticket"" [label=""calulateXticket""];
""3190_withdraw"" [label=""withdraw""];
""3190_getBuyPrice"" [label=""getBuyPrice""];
""3190_receivePlayerInfo"" [label=""receivePlayerInfo""];
""3190_managePlayer"" [label=""managePlayer""];
""3190_activate"" [label=""activate""];
""3190_getTimeLeft"" [label=""getTimeLeft""];
""3190_fallback"" [label=""fallback""];
""3190_registerNameXaddr"" [label=""registerNameXaddr""];
""3190_reLoadXaddr"" [label=""reLoadXaddr""];
""3190_calcTicketEarnings"" [label=""calcTicketEarnings""];
""3190_judgeWin"" [label=""judgeWin""];
""3190_searchtickets"" [label=""searchtickets""];
""3190_buyXid"" [label=""buyXid""];
""3190_updateTicketVault"" [label=""updateTicketVault""];
""3190_constructor"" [label=""constructor""];
""3190_registerNameXname"" [label=""registerNameXname""];
""3190_buyXaddr"" [label=""buyXaddr""];
""3190_searchTicketsXaddr"" [label=""searchTicketsXaddr""];
""3190_buyXname"" [label=""buyXname""];
""3190_randNums"" [label=""randNums""];
""3190_buyTicket"" [label=""buyTicket""];
""3190_withdrawEarnings"" [label=""withdrawEarnings""];
""3190_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""3190_reLoadXname"" [label=""reLoadXname""];
""3190_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""3190_receivePlayerNameList"" [label=""receivePlayerNameList""];
""3190_determinePID"" [label=""determinePID""];
""3190_endRound"" [label=""endRound""];
""3190_buyXid"" -> ""3190_isTicketsLimits"";
""3190_registerNameXname"" -> ""3190_isHuman"";
""3190_activate"" -> ""3190_isHuman"";
""3190_buyXname"" -> ""3190_isWithinLimits"";
""3190_reloadTickets"" -> ""3190_isActivated"";
""3190_buyXaddr"" -> ""3190_isWithinLimits"";
""3190_buyXid"" -> ""3190_isHuman"";
""3190_buyXname"" -> ""3190_isTicketsLimits"";
""3190_buyXid"" -> ""3190_isWithinLimits"";
""3190_buyXid"" -> ""3190_determinePID"";
""3190_reLoadXaddr"" -> ""3190_reloadTickets"";
""3190_buyTicket"" -> ""3190_ticket"";
""3190_reLoadXname"" -> ""3190_reloadTickets"";
""3190_reloadTickets"" -> ""3190_reloadEarnings"";
""3190_buyXid"" -> ""3190_buyTicket"";
""3190_buyXname"" -> ""3190_buyTicket"";
""3190_withdraw"" -> ""3190_withdrawEarnings"";
""3190_buyXaddr"" -> ""3190_isHuman"";
""3190_buyTicket"" -> ""3190_endRound"";
""3190_reloadTickets"" -> ""3190_ticket"";
""3190_buyXaddr"" -> ""3190_determinePID"";
""3190_endRound"" -> ""3190_randNums"";
""3190_registerNameXaddr"" -> ""3190_isHuman"";
""3190_reLoadXaddr"" -> ""3190_isHuman"";
""3190_reloadEarnings"" -> ""3190_updateTicketVault"";
""3190_reLoadXname"" -> ""3190_isActivated"";
""3190_fallback"" -> ""3190_activate"";
""3190_fallback"" -> ""3190_getBuyPrice"";
""3190_buyXname"" -> ""3190_determinePID"";
""3190_buyXname"" -> ""3190_isActivated"";
""3190_buyXid"" -> ""3190_isActivated"";
""3190_managePlayer"" -> ""3190_updateTicketVault"";
""3190_buyXname"" -> ""3190_isHuman"";
""3190_reloadTickets"" -> ""3190_getBuyPrice"";
""3190_buyXaddr"" -> ""3190_buyTicket"";
""3190_ticket"" -> ""3190_managePlayer"";
""3190_reLoadXname"" -> ""3190_isHuman"";
""3190_buyXaddr"" -> ""3190_isActivated"";
""3190_fallback"" -> ""3190_buyTicket"";
""3190_reLoadXname"" -> ""3190_isTicketsLimits"";
""3190_ticket"" -> ""3190_distributeVault"";
""3190_getPlayerInfoByAddress"" -> ""3190_judgeWin"";
""3190_getPlayerInfoByAddress"" -> ""3190_calcTicketEarnings"";
""3190_reLoadXaddr"" -> ""3190_isActivated"";
""3190_withdraw"" -> ""3190_isHuman"";
""3190_buyXaddr"" -> ""3190_isTicketsLimits"";
""3190_updateTicketVault"" -> ""3190_judgeWin"";
""3190_distributeVault"" -> ""3190_getBuyPrice"";
""3190_reLoadXaddr"" -> ""3190_isTicketsLimits"";
""3190_fallback"" -> ""3190_determinePID"";
""3190_reloadTickets"" -> ""3190_endRound"";
""3190_ticket"" -> ""3190_calulateXticket"";
""3190_withdrawEarnings"" -> ""3190_updateTicketVault"";
}
"
0x4d4377ef856e89cbf76f8e994ab3065445d82f4f.sol,Airdrop,"contract Airdrop is Pausable { using SafeMath for uint256; GenbbyToken public token; uint256 public tokens_sold; uint256 public constant decimals = 18; uint256 public constant factor = 10 ** decimals; uint256 public constant total_tokens = 500000 * factor; event Drop(address to, uint256 amount); function setToken(address tokenAddress) onlyOwner public { token = GenbbyToken(tokenAddress); }",1,"subgraph cluster_1306_Airdrop {
label=""Airdrop"";
""1306_drop"" [label=""drop""];
""1306_fallback"" [label=""fallback""];
""1306_setToken"" [label=""setToken""];
""1306_drop"" -> ""1306_whenNotPaused"";
""1306_drop"" -> ""1306_onlyOwner"";
""1306_setToken"" -> ""1306_onlyOwner"";
}
"
0x78a73b6cbc5d183ce56e786f6e905cadec63547b.sol,FabricTokenFundraiser,"contract FabricTokenFundraiser is FabricToken, FabricTokenFundraiserConfig, Whitelist { bool public finalized = false; address public beneficiary; uint public conversionRate; uint public startDate; uint public endDate; uint public hardCap; FabricTokenSafe public fabricTokenSafe; uint internal minimumContribution; uint internal individualLimit; uint private tokensSold; bool private partnerTokensClaimed = false; event FundsReceived(address indexed _address, uint _ethers, uint _tokens, uint _newTotalSupply, uint _conversionRate); event BeneficiaryChange(address _beneficiary); event ConversionRateChange(uint _conversionRate); event Finalized(address _beneficiary, uint _ethers, uint _totalSupply); function FabricTokenFundraiser(address _beneficiary) public FabricToken(0) Whitelist(msg.sender) { require(_beneficiary != 0); beneficiary = _beneficiary; conversionRate = CONVERSION_RATE; startDate = START_DATE; endDate = END_DATE; hardCap = TOKENS_HARD_CAP; tokensSold = 0; minimumContribution = MIN_CONTRIBUTION; individualLimit = INDIVIDUAL_ETHER_LIMIT * CONVERSION_RATE; fabricTokenSafe = new FabricTokenSafe(this); freeze(); }",1,"subgraph cluster_1539_FabricTokenFundraiser {
label=""FabricTokenFundraiser"";
""1539_FabricTokenFundraiser"" [label=""FabricTokenFundraiser""];
""1539_claimPartnerTokens"" [label=""claimPartnerTokens""];
""1539_setConversionRate"" [label=""setConversionRate""];
""1539_setBeneficiary"" [label=""setBeneficiary""];
""1539_finalize"" [label=""finalize""];
""1539_buyTokens"" [label=""buyTokens""];
""1539_fallback"" [label=""fallback""];
""1539_setBeneficiary"" -> ""1539_onlyOwner"";
""1539_fallback"" -> ""1539_buyTokens"";
""1539_finalize"" -> ""1539_unfreeze"";
""1539_FabricTokenFundraiser"" -> ""1539_Whitelist"";
""1539_FabricTokenFundraiser"" -> ""1539_FabricToken"";
""1539_finalize"" -> ""1539_onlyOwner"";
""1539_setConversionRate"" -> ""1539_onlyOwner"";
""1539_buyTokens"" -> ""1539_onlyWhitelisted"";
""1539_FabricTokenFundraiser"" -> ""1539_freeze"";
}
"
0x0096dc2246fc3627cc2bf87a3b0d2e0f87b58589.sol,Zethroll,"contract Zethroll is ZTHReceivingContract { using SafeMath for uint; modifier betIsValid(uint _betSize, uint _playerNumber) { require( calculateProfit(_betSize, _playerNumber) < maxProfit && _betSize >= minBet && _playerNumber > minNumber && _playerNumber < maxNumber); _; }",1,"subgraph cluster_866_Zethroll {
label=""Zethroll"";
""866_calculateProfit"" [label=""calculateProfit""];
""866_ownerSetMinBet"" [label=""ownerSetMinBet""];
""866_ownerUpdateContractBalance"" [label=""ownerUpdateContractBalance""];
""866_ownerkill"" [label=""ownerkill""];
""866_setMaxProfit"" [label=""setMaxProfit""];
""866__finishBet"" [label=""_finishBet""];
""866_dumpdivs"" [label=""dumpdivs""];
""866_ownerTransferZTH"" [label=""ownerTransferZTH""];
""866__playerRollDice"" [label=""_playerRollDice""];
""866_tokenFallback"" [label=""tokenFallback""];
""866__zthToken"" [label=""_zthToken""];
""866_ownerSetBankroll"" [label=""ownerSetBankroll""];
""866_fallback"" [label=""fallback""];
""866_finishBet"" [label=""finishBet""];
""866_ownerSetMaxProfitAsPercentOfHouse"" [label=""ownerSetMaxProfitAsPercentOfHouse""];
""866_random"" [label=""random""];
""866_ownerChangeOwner"" [label=""ownerChangeOwner""];
""866_ownerPauseGame"" [label=""ownerPauseGame""];
""866_maxRandom"" [label=""maxRandom""];
""866_constructor"" [label=""constructor""];
""866_random"" -> ""866_maxRandom"";
""866_ownerTransferZTH"" -> ""866_onlyOwner"";
""866_ownerChangeOwner"" -> ""866_onlyOwner"";
""866_tokenFallback"" -> ""866_setMaxProfit"";
""866__playerRollDice"" -> ""866_betIsValid"";
""866__playerRollDice"" -> ""866_gameIsActive"";
""866_ownerSetMaxProfitAsPercentOfHouse"" -> ""866_onlyOwner"";
""866_finishBet"" -> ""866_gameIsActive"";
""866_ownerPauseGame"" -> ""866_onlyOwner"";
""866__finishBet"" -> ""866_setMaxProfit"";
""866_constructor"" -> ""866_ownerSetMinBet"";
""866__playerRollDice"" -> ""866__zthToken"";
""866_constructor"" -> ""866_ownerSetMaxProfitAsPercentOfHouse"";
""866__playerRollDice"" -> ""866__finishBet"";
""866_ownerSetBankroll"" -> ""866_onlyOwner"";
""866__finishBet"" -> ""866_random"";
""866_ownerSetMinBet"" -> ""866_onlyOwner"";
""866_ownerSetMaxProfitAsPercentOfHouse"" -> ""866_setMaxProfit"";
""866__finishBet"" -> ""866_calculateProfit"";
""866_ownerkill"" -> ""866_onlyOwner"";
""866_ownerTransferZTH"" -> ""866_setMaxProfit"";
""866_tokenFallback"" -> ""866__playerRollDice"";
""866_ownerUpdateContractBalance"" -> ""866_onlyOwner"";
""866_finishBet"" -> ""866__finishBet"";
}
"
0x3fe1bd3f808682e10cc16ccfc0e9476555ed93a7.sol,WFCToken,"contract WFCToken is StandardToken, SafeMath { string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 18; string public version = ; address public ethFundDeposit; address public newContractAddr; bool public isFunding; uint256 public fundingStartBlock; uint256 public fundingStopBlock; uint256 public currentSupply; uint256 public tokenRaised = 0; uint256 public tokenMigrated = 0; uint256 public tokenExchangeRate = 625; event AllocateToken(address indexed _to, uint256 _value); event IssueToken(address indexed _to, uint256 _value); event IncreaseSupply(uint256 _value); event DecreaseSupply(uint256 _value); event Migrate(address indexed _to, uint256 _value); function formatDecimals(uint256 _value) internal returns (uint256 ) { return _value * 10 ** decimals; }",1,"subgraph cluster_817_WFCToken {
label=""WFCToken"";
""817_startFunding"" [label=""startFunding""];
""817_allocateToken"" [label=""allocateToken""];
""817_changeOwner"" [label=""changeOwner""];
""817_formatDecimals"" [label=""formatDecimals""];
""817_setMigrateContract"" [label=""setMigrateContract""];
""817_stopFunding"" [label=""stopFunding""];
""817_transferETH"" [label=""transferETH""];
""817_fallback"" [label=""fallback""];
""817_migrate"" [label=""migrate""];
""817_WFCToken"" [label=""WFCToken""];
""817_decreaseSupply"" [label=""decreaseSupply""];
""817_setTokenExchangeRate"" [label=""setTokenExchangeRate""];
""817_WFCToken"" -> ""817_formatDecimals"";
""817_startFunding"" -> ""817_isOwner"";
""817_setTokenExchangeRate"" -> ""817_isOwner"";
""817_allocateToken"" -> ""817_formatDecimals"";
""817_allocateToken"" -> ""817_safeAdd"";
""817_fallback"" -> ""817_safeAdd"";
""817_allocateToken"" -> ""817_isOwner"";
""817_allocateToken"" -> ""817_safeMult"";
""817_migrate"" -> ""817_safeAdd"";
""817_transferETH"" -> ""817_isOwner"";
""817_stopFunding"" -> ""817_isOwner"";
""817_decreaseSupply"" -> ""817_formatDecimals"";
""817_decreaseSupply"" -> ""817_safeSubtract"";
""817_fallback"" -> ""817_safeMult"";
""817_changeOwner"" -> ""817_isOwner"";
""817_decreaseSupply"" -> ""817_isOwner"";
""817_setMigrateContract"" -> ""817_isOwner"";
}
"
0x0692de52a966c107021e8a84db8486b4be57ecf1.sol,OQToken,contract OQToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 1000000000 * (10**18); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; function OQToken () { owner = msg.sender; },1,"subgraph cluster_756_OQToken {
label=""OQToken"";
""756_transferFrom"" [label=""transferFrom""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_refundTokens"" [label=""refundTokens""];
""756_transfer"" [label=""transfer""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_setOwner"" [label=""setOwner""];
""756_OQToken"" [label=""OQToken""];
""756_approve"" [label=""approve""];
""756_totalSupply"" [label=""totalSupply""];
""756_createTokens"" [label=""createTokens""];
""756_approve"" -> ""756_approve"";
""756_approve"" -> ""756_allowance"";
""756_createTokens"" -> ""756_safeAdd"";
""756_transferFrom"" -> ""756_transferFrom"";
""756_createTokens"" -> ""756_safeSub"";
""756_transfer"" -> ""756_transfer"";
}
"
0x797d713d8d7a2815ccf3dcf9719e3e9f1712c370.sol,Trustee,contract Trustee is Ownable { using SaferMath for uint256; StoxSmartToken public stox; struct Grant { uint256 value; uint256 start; uint256 cliff; uint256 end; uint256 transferred; bool revokable; },1,"subgraph cluster_1489_Trustee {
label=""Trustee"";
""1489_vestedTokens"" [label=""vestedTokens""];
""1489_revoke"" [label=""revoke""];
""1489_unlockVestedTokens"" [label=""unlockVestedTokens""];
""1489_grant"" [label=""grant""];
""1489_Trustee"" [label=""Trustee""];
""1489_calculateVestedTokens"" [label=""calculateVestedTokens""];
""1489_unlockVestedTokens"" -> ""1489_calculateVestedTokens"";
""1489_vestedTokens"" -> ""1489_calculateVestedTokens"";
""1489_grant"" -> ""1489_onlyOwner"";
""1489_revoke"" -> ""1489_onlyOwner"";
}
"
0xc4aad17558fa95c8937d0856b2dad74c1a7a095f.sol,AgiCrowdsale,"contract AgiCrowdsale is Ownable, ReentrancyGuard { using SafeMath for uint256; uint256 public firstDayCap; uint256 public cap; uint256 public goal; uint256 public rate; uint256 public constant WEI_TO_COGS = 10**uint256(10); address public wallet; RefundVault public vault; SingularityNetToken public token; uint256 public startTime; uint256 public endTime; uint256 public firstDay; bool public isFinalized = false; uint256 public weiRaised; mapping(address => bool) public whitelist; mapping(address => uint256) public contribution; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); event TokenRelease(address indexed beneficiary, uint256 amount); event TokenRefund(address indexed refundee, uint256 amount); event Finalized(); function AgiCrowdsale( address _token, address _wallet, uint256 _startTime, uint256 _endTime, uint256 _rate, uint256 _cap, uint256 _firstDayCap, uint256 _goal ) { require(_startTime >= getBlockTimestamp()); require(_endTime >= _startTime); require(_rate > 0); require(_goal > 0); require(_cap > 0); require(_wallet != 0x0); vault = new RefundVault(_wallet); token = SingularityNetToken(_token); wallet = _wallet; startTime = _startTime; endTime = _endTime; firstDay = startTime + 1 * 1 days; firstDayCap = _firstDayCap; rate = _rate; goal = _goal; cap = _cap; }",1,"subgraph cluster_1528_AgiCrowdsale {
label=""AgiCrowdsale"";
""1528_getBlockTimestamp"" [label=""getBlockTimestamp""];
""1528_getTokens"" [label=""getTokens""];
""1528_claimUnsold"" [label=""claimUnsold""];
""1528_finalize"" [label=""finalize""];
""1528_capReached"" [label=""capReached""];
""1528_buyTokens"" [label=""buyTokens""];
""1528_validPurchase"" [label=""validPurchase""];
""1528_claimRefund"" [label=""claimRefund""];
""1528_updateWhitelist"" [label=""updateWhitelist""];
""1528_forwardFunds"" [label=""forwardFunds""];
""1528_AgiCrowdsale"" [label=""AgiCrowdsale""];
""1528_goalReached"" [label=""goalReached""];
""1528_fallback"" [label=""fallback""];
""1528_isWhitelisted"" [label=""isWhitelisted""];
""1528_hasEnded"" [label=""hasEnded""];
""1528_claimRefund"" -> ""1528_goalReached"";
""1528_hasEnded"" -> ""1528_capReached"";
""1528_claimUnsold"" -> ""1528_getBlockTimestamp"";
""1528_AgiCrowdsale"" -> ""1528_getBlockTimestamp"";
""1528_buyTokens"" -> ""1528_getTokens"";
""1528_claimUnsold"" -> ""1528_onlyOwner"";
""1528_finalize"" -> ""1528_goalReached"";
""1528_claimRefund"" -> ""1528_nonReentrant"";
""1528_hasEnded"" -> ""1528_getBlockTimestamp"";
""1528_finalize"" -> ""1528_hasEnded"";
""1528_fallback"" -> ""1528_buyTokens"";
""1528_buyTokens"" -> ""1528_validPurchase"";
""1528_validPurchase"" -> ""1528_getBlockTimestamp"";
""1528_buyTokens"" -> ""1528_getBlockTimestamp"";
""1528_updateWhitelist"" -> ""1528_onlyOwner"";
""1528_finalize"" -> ""1528_onlyOwner"";
""1528_buyTokens"" -> ""1528_forwardFunds"";
}
"
0x17f68886d00845867c154c912b4ccc506ec92fc7.sol,DelegatedShareholderAssociation,"contract DelegatedShareholderAssociation is TokenRecipient { uint public minimumQuorum; uint public debatingPeriodInMinutes; Proposal[] public proposals; uint public numProposals; ERC20 public sharesTokenAddress; mapping (address => address) public delegatesByDelegator; mapping (address => uint) public lockedDelegatingTokens; mapping (address => uint) public delegatedAmountsByDelegate; uint public totalLockedTokens; uint public requiredSharesToBeBoardMember; TokenLocker public tokenLocker; event ProposalAdded(uint proposalID, address recipient, uint amount, bytes metadataHash); event Voted(uint proposalID, bool position, address voter); event ProposalTallied(uint proposalID, uint yea, uint nay, uint quorum, bool active); event ChangeOfRules(uint newMinimumQuorum, uint newDebatingPeriodInMinutes, address newSharesTokenAddress); event TokensDelegated(address indexed delegator, uint numberOfTokens, address indexed delegate); event TokensUndelegated(address indexed delegator, uint numberOfTokens, address indexed delegate); struct Proposal { address recipient; uint amount; bytes metadataHash; uint timeCreated; uint votingDeadline; bool finalized; bool proposalPassed; uint numberOfVotes; bytes32 proposalHash; Vote[] votes; mapping (address => bool) voted; }",1,"subgraph cluster_1103_DelegatedShareholderAssociation {
label=""DelegatedShareholderAssociation"";
""1103_changeVotingRules"" [label=""changeVotingRules""];
""1103_hasVoted"" [label=""hasVoted""];
""1103_vote"" [label=""vote""];
""1103_executeProposal"" [label=""executeProposal""];
""1103_countVotes"" [label=""countVotes""];
""1103_checkProposalCode"" [label=""checkProposalCode""];
""1103_setDelegateAndLockTokens"" [label=""setDelegateAndLockTokens""];
""1103_clearDelegateAndUnlockTokens"" [label=""clearDelegateAndUnlockTokens""];
""1103_newProposal"" [label=""newProposal""];
""1103_newProposal"" -> ""1103_onlyBoardMembers"";
""1103_executeProposal"" -> ""1103_countVotes"";
""1103_setDelegateAndLockTokens"" -> ""1103_onlyShareholders"";
""1103_setDelegateAndLockTokens"" -> ""1103_onlyUndelegated"";
""1103_newProposal"" -> ""1103_notSelf"";
""1103_vote"" -> ""1103_onlyShareholders"";
""1103_vote"" -> ""1103_notSelf"";
""1103_clearDelegateAndUnlockTokens"" -> ""1103_onlyDelegated"";
""1103_executeProposal"" -> ""1103_notSelf"";
""1103_changeVotingRules"" -> ""1103_onlySelf"";
""1103_setDelegateAndLockTokens"" -> ""1103_notSelf"";
""1103_clearDelegateAndUnlockTokens"" -> ""1103_notSelf"";
}
"
0x470142a1834438515b757118f322703aba6e1e05.sol,PolicyPalNetworkAirdrop,contract PolicyPalNetworkAirdrop { struct BountyType { bool twitter; bool signature; },1,"subgraph cluster_662_PolicyPalNetworkAirdrop {
label=""PolicyPalNetworkAirdrop"";
""662_signatureDropMultipleAmount"" [label=""signatureDropMultipleAmount""];
""662_airDropSingleAmount"" [label=""airDropSingleAmount""];
""662_twitterDropSingleAmount"" [label=""twitterDropSingleAmount""];
""662_signatureDropSingleAmount"" [label=""signatureDropSingleAmount""];
""662_emergencyDrain"" [label=""emergencyDrain""];
""662_twitterDropMultipleAmount"" [label=""twitterDropMultipleAmount""];
""662_PolicyPalNetworkAirdrop"" [label=""PolicyPalNetworkAirdrop""];
""662_airDropMultipleAmount"" [label=""airDropMultipleAmount""];
""662_twitterDropSingleAmount"" -> ""662_onlyAdmin"";
""662_signatureDropSingleAmount"" -> ""662_validBalance"";
""662_airDropSingleAmount"" -> ""662_onlyAdmin"";
""662_emergencyDrain"" -> ""662_onlyAdmin"";
""662_signatureDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_airDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropSingleAmount"" -> ""662_validBalance"";
""662_signatureDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_signatureDropSingleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropSingleAmount"" -> ""662_validBalance"";
""662_PolicyPalNetworkAirdrop"" -> ""662_validAddress"";
""662_twitterDropMultipleAmount"" -> ""662_onlyAdmin"";
}
"
0x6fbc1b8f756f43cfbfd45085380cc375650ff3d6.sol,ZethrSnap,contract ZethrSnap { struct SnapEntry { uint blockNumber; uint profit; },1,"subgraph cluster_563_ZethrSnap {
label=""ZethrSnap"";
""563_walletSetWallet"" [label=""walletSetWallet""];
""563_withdraw"" [label=""withdraw""];
""563_walletCreateSnap"" [label=""walletCreateSnap""];
""563_tokenFallback"" [label=""tokenFallback""];
""563_walletSetSigner"" [label=""walletSetSigner""];
""563_walletWithdrawTokens"" [label=""walletWithdrawTokens""];
""563_constructor"" [label=""constructor""];
""563_getSnap"" [label=""getSnap""];
""563_toUint"" [label=""toUint""];
""563_toSig"" [label=""toSig""];
""563_fallback"" [label=""fallback""];
""563_getSnapsLength"" [label=""getSnapsLength""];
""563_claim"" [label=""claim""];
""563_ownerSetPaused"" [label=""ownerSetPaused""];
""563_walletSetWallet"" -> ""563_walletOnly"";
""563_walletWithdrawTokens"" -> ""563_walletOnly"";
""563_claim"" -> ""563_toSig"";
""563_walletSetSigner"" -> ""563_walletOnly"";
""563_toSig"" -> ""563_toUint"";
""563_walletCreateSnap"" -> ""563_walletOnly"";
""563_ownerSetPaused"" -> ""563_ownerOnly"";
}
"
0x0e69d0a2bbb30abcb7e5cfea0e4fde19c00a8d47.sol,ContractLock,"contract ContractLock is DSStop { uint public unlockTime; mapping (address => bool) public isAdmin; event LogAddAdmin(address whoAdded, address newAdmin); event LogRemoveAdmin(address whoRemoved, address admin); constructor(uint _unlockTime) public { unlockTime = _unlockTime; isAdmin[msg.sender] = true; emit LogAddAdmin(msg.sender, msg.sender); }",1,"subgraph cluster_1015_ContractLock {
label=""ContractLock"";
""1015_constructor"" [label=""constructor""];
""1015_addAdmin"" [label=""addAdmin""];
""1015_removeAdmin"" [label=""removeAdmin""];
""1015_setOwner"" [label=""setOwner""];
""1015_setUnlockTime"" [label=""setUnlockTime""];
""1015_setOwner"" -> ""1015_auth"";
""1015_setUnlockTime"" -> ""1015_auth"";
""1015_setOwner"" -> ""1015_addAdmin"";
""1015_addAdmin"" -> ""1015_auth"";
""1015_setOwner"" -> ""1015_removeAdmin"";
""1015_removeAdmin"" -> ""1015_auth"";
}
"
0x88355a32a8c5cc399aa09b9d21ebcba935ae5d2f.sol,BankWallet,"contract BankWallet is Pausable, RequiringAuthorization, SafeMath { address public edgelessToken; address public edgelessCasino; uint public maxFundAmount = 0.22 ether; event Withdrawal(address _token, uint _amount); event Deposit(address _receiver, uint _amount); event Fund(address _receiver, uint _amount); constructor(address _token, address _casino) public { edgelessToken = _token; edgelessCasino = _casino; owner = msg.sender; }",1,"subgraph cluster_666_BankWallet {
label=""BankWallet"";
""666_setMaxFundAmount"" [label=""setMaxFundAmount""];
""666_setCasinoContract"" [label=""setCasinoContract""];
""666_withdraw"" [label=""withdraw""];
""666_fallback"" [label=""fallback""];
""666_constructor"" [label=""constructor""];
""666__approveForCasino"" [label=""_approveForCasino""];
""666_approve"" [label=""approve""];
""666_deposit"" [label=""deposit""];
""666_fund"" [label=""fund""];
""666_withdraw"" -> ""666_onlyAdmin"";
""666_setMaxFundAmount"" -> ""666_onlyAdmin"";
""666_setCasinoContract"" -> ""666__approveForCasino"";
""666_setCasinoContract"" -> ""666_onlyAdmin"";
""666_fund"" -> ""666_onlyAuthorized"";
""666_deposit"" -> ""666_onlyAuthorized"";
""666_approve"" -> ""666__approveForCasino"";
""666_approve"" -> ""666_onlyAuthorized"";
}
"
0x27e1d539cb59518bf14e4525b1c3b4721aaa9080.sol,FourCrowdsale,"contract FourCrowdsale is TokenCappedCrowdsale, WhitelistCrowdsale, FinalizableCrowdsale { event RateChanged(uint256 newRate, string name); uint256 private constant E18 = 10**18; uint256 private TOKEN_SALE_CAP = 152000000 * E18; uint256 public constant TEAM_TOKENS = 50000000 * E18; address public constant TEAM_ADDRESS = 0x3EC2fC20c04656F4B0AA7372258A36FAfB1EF427; uint256 public constant ADVISORS_AND_CONTRIBUTORS_TOKENS = 39000000 * E18; address public constant ADVISORS_AND_CONTRIBUTORS_ADDRESS = 0x90adab6891514DC24411B9Adf2e11C0eD7739999; address public constant UNSOLD_ADDRESS = 0x4eC155995211C8639375Ae3106187bff3FF5DB46; uint256 public bonus; function FourCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, uint256 _bonus, address _wallet, address _token) TokenCappedCrowdsale(TOKEN_SALE_CAP) Crowdsale(_startTime, _endTime, _rate, _wallet, _token) public { bonus = _bonus; }",1,"subgraph cluster_2547_FourCrowdsale {
label=""FourCrowdsale"";
""2547_finalization"" [label=""finalization""];
""2547_processPresaleOrEarlyContributors"" [label=""processPresaleOrEarlyContributors""];
""2547_FourCrowdsale"" [label=""FourCrowdsale""];
""2547_changeStartAndEndTime"" [label=""changeStartAndEndTime""];
""2547_setRate"" [label=""setRate""];
""2547_releaseTokenOwnership"" [label=""releaseTokenOwnership""];
""2547_recoverERC20Tokens"" [label=""recoverERC20Tokens""];
""2547_setCrowdsaleWallet"" [label=""setCrowdsaleWallet""];
""2547_changeEndTime"" [label=""changeEndTime""];
""2547_getTokenAmount"" [label=""getTokenAmount""];
""2547_setBonus"" [label=""setBonus""];
""2547_setRate"" -> ""2547_onlyOwner"";
""2547_FourCrowdsale"" -> ""2547_TokenCappedCrowdsale"";
""2547_setCrowdsaleWallet"" -> ""2547_onlyOwner"";
""2547_recoverERC20Tokens"" -> ""2547_onlyOwner"";
""2547_processPresaleOrEarlyContributors"" -> ""2547_onlyOwner"";
""2547_changeEndTime"" -> ""2547_onlyOwner"";
""2547_setBonus"" -> ""2547_onlyOwner"";
""2547_changeStartAndEndTime"" -> ""2547_onlyOwner"";
""2547_FourCrowdsale"" -> ""2547_Crowdsale"";
""2547_releaseTokenOwnership"" -> ""2547_onlyOwner"";
""2547_finalization"" -> ""2547_finalization"";
}
"
0x0e8175729e02db48ca0e2ca80efb72fe84a7dedd.sol,MechanicKittyUnit,"contract MechanicKittyUnit is ERC20, PremiumUnit { using SafeMath for uint; string public constant name = ; string public constant symbol = ; uint256 public constant unitId = 3; uint256 public unitProductionSeconds = 43200; uint8 public constant decimals = 0; Units constant units = Units(0xf936AA9e1f22C915Abf4A66a5a6e94eb8716BA5e); address constant factories = 0xC767B1CEc507f1584469E8efE1a94AD4c75e02ed; mapping(address => uint256) balances; mapping(address => uint256) lastEquipTime; mapping(address => mapping(address => uint256)) allowed; uint256 public totalSupply; function totalSupply() external view returns (uint) { return totalSupply.sub(balances[address(0)]); }",1,"subgraph cluster_501_MechanicKittyUnit {
label=""MechanicKittyUnit"";
""501_transfer"" [label=""transfer""];
""501_approveAndCall"" [label=""approveAndCall""];
""501_allowance"" [label=""allowance""];
""501_approve"" [label=""approve""];
""501_mintUnit"" [label=""mintUnit""];
""501_unequipUnit"" [label=""unequipUnit""];
""501_totalSupply"" [label=""totalSupply""];
""501_balanceOf"" [label=""balanceOf""];
""501_transferFrom"" [label=""transferFrom""];
""501_equipUnit"" [label=""equipUnit""];
}
"
0xbccfe34a2c6c59e396d2873d0d5bcb4736c8e2e7.sol,SwapController,"contract SwapController is DSAuth, TokenController { TokenTransferGuard[] public guards; function SwapController(address[] _guards) { for (uint i=0; i<_guards.length; i++) { addGuard(_guards[i]); }",1,"subgraph cluster_405_SwapController {
label=""SwapController"";
""405_proxyPayment"" [label=""proxyPayment""];
""405_addGuard"" [label=""addGuard""];
""405_changeController"" [label=""changeController""];
""405_SwapController"" [label=""SwapController""];
""405_onTransfer"" [label=""onTransfer""];
""405_onApprove"" [label=""onApprove""];
""405_SwapController"" -> ""405_addGuard"";
""405_addGuard"" -> ""405_auth"";
""405_changeController"" -> ""405_auth"";
}
"
0x174bb5d84b78e9e2248e7aa2c789aeba82f72f68.sol,LuckyTree,"contract LuckyTree is Owned, SafeMath{ uint public leafPrice; uint public gameStart; uint public gameDuration; uint public tokenLockDuration; uint public totalParticipationAmount; uint public totalLockedAmount; uint public numberOfLeafs; uint public participantIndex; bool public fundsTransfered; address public winner; mapping(uint => address) public participants; mapping(uint => uint) public participationAmount; mapping(address => bool) public hasParticipated; mapping(address => bool) public hasWithdrawn; mapping(address => uint) public participantIndexes; mapping(uint => address) public leafOwners; event GameWinner(address winner); event GameEnded(uint block); event GameStarted(uint block); event GameFailed(uint block); event GameLocked(uint block); event GameUnlocked(uint block); enum state{ pending, running, paused, finished, closed, claimed }",1,"subgraph cluster_1043_LuckyTree {
label=""LuckyTree"";
""1043_random"" [label=""random""];
""1043_lockFunds"" [label=""lockFunds""];
""1043_processTransaction"" [label=""processTransaction""];
""1043_closeGame"" [label=""closeGame""];
""1043_pickWinner"" [label=""pickWinner""];
""1043_manuallyProcessTransaction"" [label=""manuallyProcessTransaction""];
""1043_unlockFunds"" [label=""unlockFunds""];
""1043_setCreditGameAddress"" [label=""setCreditGameAddress""];
""1043_checkInternalBalance"" [label=""checkInternalBalance""];
""1043_salvageTokensFromContract"" [label=""salvageTokensFromContract""];
""1043_setTokenAddress"" [label=""setTokenAddress""];
""1043_receiveApproval"" [label=""receiveApproval""];
""1043_LuckyTree"" [label=""LuckyTree""];
""1043_getVariablesForDapp"" [label=""getVariablesForDapp""];
""1043_manualLockFunds"" [label=""manualLockFunds""];
""1043_killContract"" [label=""killContract""];
""1043_salvageTokensFromContract"" -> ""1043_onlyOwner"";
""1043_manuallyProcessTransaction"" -> ""1043_onlyOwner"";
""1043_manualLockFunds"" -> ""1043_onlyOwner"";
""1043_setCreditGameAddress"" -> ""1043_onlyOwner"";
""1043_setTokenAddress"" -> ""1043_onlyOwner"";
""1043_pickWinner"" -> ""1043_random"";
""1043_closeGame"" -> ""1043_onlyOwner"";
""1043_killContract"" -> ""1043_onlyOwner"";
""1043_receiveApproval"" -> ""1043_processTransaction"";
""1043_manualLockFunds"" -> ""1043_pickWinner"";
""1043_pickWinner"" -> ""1043_lockFunds"";
""1043_processTransaction"" -> ""1043_pickWinner"";
""1043_manuallyProcessTransaction"" -> ""1043_processTransaction"";
}
"
0x39de38ba63d172b962db2fc2ee5e4376287c50bf.sol,ImmlaIco,"contract ImmlaIco is SafeMath { ImmlaToken public immlaToken; AbstractToken public preIcoToken; address public escrow; address public icoManager; address public tokenImporter = 0x0; address public founder1; address public founder2; address public founder3; address public team; address public bountyOwner; uint public constant teamsReward = 38548226701232220000000000; uint public constant bountyOwnersTokens = 9361712198870680000000000; uint constant BASE = 1000000000000000000; uint public constant defaultIcoStart = 1505422800; uint public icoStart = defaultIcoStart; uint public constant defaultIcoDeadline = 1508101200; uint public icoDeadline = defaultIcoDeadline; uint public constant defaultFoundersRewardTime = 1521061200; uint public foundersRewardTime = defaultFoundersRewardTime; uint public constant minIcoTokenLimit = 18000000 * BASE; uint public constant maxIcoTokenLimit = 434477177 * BASE; uint public importedTokens = 0; uint public soldTokensOnIco = 0; uint public constant soldTokensOnPreIco = 13232941687168431951684000; uint tokenPrice1 = 3640; uint tokenSupply1 = 170053520 * BASE; uint tokenPrice2 = 3549; uint tokenSupply2 = 103725856 * BASE; uint tokenPrice3 = 3458; uint tokenSupply3 = 100319718 * BASE; uint tokenPrice4 = 3367; uint tokenSupply4 = 60378083 * BASE; uint[] public tokenPrices; uint[] public tokenSupplies; bool public initialized = false; bool public migrated = false; bool public sentTokensToFounders = false; bool public icoStoppedManually = false; mapping (address => uint) public balances; event BuyTokens(address buyer, uint value, uint amount); event WithdrawEther(); event StopIcoManually(); event SendTokensToFounders(uint founder1Reward, uint founder2Reward, uint founder3Reward); event ReturnFundsFor(address account); modifier whenInitialized() { require(initialized); _; }",1,"subgraph cluster_1538_ImmlaIco {
label=""ImmlaIco"";
""1538_countTokens"" [label=""countTokens""];
""1538_setNewTokenImporter"" [label=""setNewTokenImporter""];
""1538_fallback"" [label=""fallback""];
""1538_removeTokens"" [label=""removeTokens""];
""1538_stopIco"" [label=""stopIco""];
""1538_ImmlaIco"" [label=""ImmlaIco""];
""1538_setNewManager"" [label=""setNewManager""];
""1538_buyTokens"" [label=""buyTokens""];
""1538_setStateMigrated"" [label=""setStateMigrated""];
""1538_sendTokensToFounders"" [label=""sendTokensToFounders""];
""1538_importTokens"" [label=""importTokens""];
""1538_burnTokens"" [label=""burnTokens""];
""1538_returnFundsFor"" [label=""returnFundsFor""];
""1538_withdrawEther"" [label=""withdrawEther""];
""1538_init"" [label=""init""];
""1538_importTokens"" -> ""1538_add"";
""1538_removeTokens"" -> ""1538_sub"";
""1538_buyTokens"" -> ""1538_add"";
""1538_init"" -> ""1538_onlyManager"";
""1538_withdrawEther"" -> ""1538_onGoalAchievedOrDeadline"";
""1538_sendTokensToFounders"" -> ""1538_add"";
""1538_sendTokensToFounders"" -> ""1538_whenInitialized"";
""1538_returnFundsFor"" -> ""1538_onGoalAchievedOrDeadline"";
""1538_fallback"" -> ""1538_onIcoRunning"";
""1538_sendTokensToFounders"" -> ""1538_onlyManager"";
""1538_buyTokens"" -> ""1538_countTokens"";
""1538_setStateMigrated"" -> ""1538_onlyManager"";
""1538_stopIco"" -> ""1538_onlyManager"";
""1538_sendTokensToFounders"" -> ""1538_mulByFraction"";
""1538_burnTokens"" -> ""1538_notMigrated"";
""1538_countTokens"" -> ""1538_div"";
""1538_countTokens"" -> ""1538_sub"";
""1538_buyTokens"" -> ""1538_removeTokens"";
""1538_setNewManager"" -> ""1538_onlyManager"";
""1538_setNewTokenImporter"" -> ""1538_onlyManager"";
""1538_countTokens"" -> ""1538_add"";
""1538_fallback"" -> ""1538_buyTokens"";
""1538_burnTokens"" -> ""1538_onlyManager"";
""1538_withdrawEther"" -> ""1538_returnFundsFor"";
}
"
0x39f89421c5bf8bb0d855c0216b00b45e3733b515.sol,DINOSale,"contract DINOSale is BaseDINOSale { using SafeMath for uint256; DINOToken public tokenReward; constructor( address ifSuccessfulSendTo, uint fundingGoalInEthers, uint fundingCapInEthers, uint minimumContribution, uint start, uint end, uint rateDINOToEther, address addressOfTokenUsedAsReward ) public { require(ifSuccessfulSendTo != address(0) && ifSuccessfulSendTo != address(this), ); require(addressOfTokenUsedAsReward != address(0) && addressOfTokenUsedAsReward != address(this), ); require(fundingGoalInEthers <= fundingCapInEthers, ); require(end > 0, ); beneficiary = ifSuccessfulSendTo; fundingGoal = fundingGoalInEthers * 1 ether; fundingCap = fundingCapInEthers * 1 ether; minContribution = minimumContribution * 1 ether; startTime = start; endTime = end; rate = rateDINOToEther; withdrawRate = rateDINOToEther; tokenReward = DINOToken(addressOfTokenUsedAsReward); }",1,"subgraph cluster_1796_DINOSale {
label=""DINOSale"";
""1796_fallback"" [label=""fallback""];
""1796_ownerSafeWithdrawal"" [label=""ownerSafeWithdrawal""];
""1796_owner"" [label=""owner""];
""1796_withdrawToken"" [label=""withdrawToken""];
""1796_ownerAllocateTokens"" [label=""ownerAllocateTokens""];
""1796_convertToMini"" [label=""convertToMini""];
""1796_safeWithdrawal"" [label=""safeWithdrawal""];
""1796_constructor"" [label=""constructor""];
""1796_fallback"" -> ""1796_checkFundingCap"";
""1796_ownerAllocateTokens"" -> ""1796_onlyOwner"";
""1796_withdrawToken"" -> ""1796_convertToMini"";
""1796_safeWithdrawal"" -> ""1796_afterDeadline"";
""1796_fallback"" -> ""1796_afterStartTime"";
""1796_fallback"" -> ""1796_saleNotClosed"";
""1796_fallback"" -> ""1796_beforeDeadline"";
""1796_fallback"" -> ""1796_checkFundingGoal"";
""1796_ownerAllocateTokens"" -> ""1796_checkFundingGoal"";
""1796_fallback"" -> ""1796_whenNotPaused"";
""1796_ownerAllocateTokens"" -> ""1796_checkFundingCap"";
""1796_safeWithdrawal"" -> ""1796_nonReentrant"";
""1796_fallback"" -> ""1796_nonReentrant"";
""1796_ownerAllocateTokens"" -> ""1796_nonReentrant"";
""1796_ownerSafeWithdrawal"" -> ""1796_nonReentrant"";
""1796_ownerSafeWithdrawal"" -> ""1796_onlyOwner"";
}
"
0xb44a823579aa618b96d6f20a3330901e85f96f73.sol,ClockAuction,"contract ClockAuction is Ownable, ClockAuctionBase { bytes4 public constant INTERFACE_SIGNATURE_ERC721 = bytes4(0x9a20483d); function ClockAuction(address _nftAddress, uint256 _cut) public { require(_cut <= 10000); ownerCut = _cut; ERC721 candidateContract = ERC721(_nftAddress); require(candidateContract.supportsInterface(INTERFACE_SIGNATURE_ERC721)); nonFungibleContract = candidateContract; }",1,"subgraph cluster_842_ClockAuction {
label=""ClockAuction"";
""842_getCurrentPrice"" [label=""getCurrentPrice""];
""842_ClockAuction"" [label=""ClockAuction""];
""842_cancelAuction"" [label=""cancelAuction""];
""842_createAuction"" [label=""createAuction""];
""842_bid"" [label=""bid""];
""842_getAuction"" [label=""getAuction""];
""842_withdrawBalance"" [label=""withdrawBalance""];
""842_cancelAuction"" -> ""842__cancelAuction"";
""842_createAuction"" -> ""842__addAuction"";
""842_getAuction"" -> ""842__isOnAuction"";
""842_bid"" -> ""842__bid"";
""842_getCurrentPrice"" -> ""842__isOnAuction"";
""842_bid"" -> ""842__transfer"";
""842_createAuction"" -> ""842__owns"";
""842_cancelAuction"" -> ""842__isOnAuction"";
""842_createAuction"" -> ""842__escrow"";
""842_getCurrentPrice"" -> ""842__currentPrice"";
}
"
0x6c26dab04c8f2bb07e60f205118e36850fe90981.sol,PoWMLottery,contract PoWMLottery { using SafeMath for uint256; bool public isLotteryOpen = false; address POWM_address = address(0xA146240bF2C04005A743032DC0D241ec0bB2BA2B); POWM maths = POWM(POWM_address); address owner; mapping (uint256 => address) public gamblers; mapping (address => uint256) public token_buyins; mapping (address => uint256) public last_round_bought; uint256 public num_tickets_current_round = 0; uint256 public current_round = 0; uint256 public numTokensInLottery = 0; address masternode_referrer; uint256 public MAX_TOKEN_BUYIN = 25; function PoWMLottery() public { current_round = 1; owner = msg.sender; masternode_referrer = msg.sender; },1,"subgraph cluster_349_PoWMLottery {
label=""PoWMLottery"";
""349_PoWMLottery"" [label=""PoWMLottery""];
""349_fallback"" [label=""fallback""];
""349_openLottery"" [label=""openLottery""];
""349_buyTickets"" [label=""buyTickets""];
""349_setMaxTokenBuyin"" [label=""setMaxTokenBuyin""];
""349_donateToLottery"" [label=""donateToLottery""];
""349_closeLotteryAndPickWinner"" [label=""closeLotteryAndPickWinner""];
""349_closeLotteryAndPickWinner"" -> ""349_onlyOwner"";
""349_setMaxTokenBuyin"" -> ""349_onlyOwner"";
""349_fallback"" -> ""349_buyTickets"";
""349_openLottery"" -> ""349_onlyOwner"";
}
"
0x18da8521c333aed9de8f512e847734cb7be42e38.sol,Crowdsale,"contract Crowdsale is Pausable, PullPayment { using SafeMath for uint; struct Backer { uint weiReceived; uint coinSent; }",1,"subgraph cluster_1189_Crowdsale {
label=""Crowdsale"";
""1189_setMultisig"" [label=""setMultisig""];
""1189_drain"" [label=""drain""];
""1189_receiveETH"" [label=""receiveETH""];
""1189_finalize"" [label=""finalize""];
""1189_getRemainCoins"" [label=""getRemainCoins""];
""1189_backProjectXOwner"" [label=""backProjectXOwner""];
""1189_refund"" [label=""refund""];
""1189_Crowdsale"" [label=""Crowdsale""];
""1189_bonus"" [label=""bonus""];
""1189_start"" [label=""start""];
""1189_fallback"" [label=""fallback""];
""1189_finalize"" -> ""1189_onlyOwner"";
""1189_drain"" -> ""1189_onlyOwner"";
""1189_receiveETH"" -> ""1189_bonus"";
""1189_getRemainCoins"" -> ""1189_bonus"";
""1189_backProjectXOwner"" -> ""1189_onlyOwner"";
""1189_fallback"" -> ""1189_stopInEmergency"";
""1189_setMultisig"" -> ""1189_onlyOwner"";
""1189_fallback"" -> ""1189_receiveETH"";
""1189_start"" -> ""1189_onlyOwner"";
""1189_fallback"" -> ""1189_respectTimeFrame"";
""1189_getRemainCoins"" -> ""1189_onlyOwner"";
""1189_refund"" -> ""1189_asyncSend"";
""1189_refund"" -> ""1189_minCapNotReached"";
}
"
0x0e752b742f744fdc2d93774da44c37b72c3e6952.sol,CraftyCrowdsale,"contract CraftyCrowdsale is Pausable { using SafeMath for uint256; mapping(address => uint256) received; MintableToken public token; uint256 public preSaleStart; uint256 public preSaleEnd; uint256 public saleStart; uint256 public saleEnd; uint256 public issuedTokens = 0; uint256 public constant hardCap = 5000000000 * 10**8; uint256 constant teamCap = 1450000000 * 10**8; uint256 constant advisorCap = 450000000 * 10**8; uint256 constant bountyCap = 100000000 * 10**8; uint256 constant fundCap = 3000000000 * 10**8; uint256 constant lockTime = 180 days; address public etherWallet; address public teamWallet; address public advisorWallet; address public fundWallet; address public bountyWallet; TokenTimelock teamTokens; uint256 public rate; enum State { BEFORE_START, SALE, REFUND, CLOSED }",1,"subgraph cluster_1475_CraftyCrowdsale {
label=""CraftyCrowdsale"";
""1475_releaseTeamTokens"" [label=""releaseTeamTokens""];
""1475_setWallets"" [label=""setWallets""];
""1475_setRate"" [label=""setRate""];
""1475_enableRefund"" [label=""enableRefund""];
""1475_receivedFrom"" [label=""receivedFrom""];
""1475_getRate"" [label=""getRate""];
""1475_generateTokens"" [label=""generateTokens""];
""1475_claimRefund"" [label=""claimRefund""];
""1475_reclaimEther"" [label=""reclaimEther""];
""1475_buyTokens"" [label=""buyTokens""];
""1475_CraftyCrowdsale"" [label=""CraftyCrowdsale""];
""1475_fallback"" [label=""fallback""];
""1475_finishCrowdsale"" [label=""finishCrowdsale""];
""1475_finishCrowdsale"" -> ""1475_inState"";
""1475_setWallets"" -> ""1475_inState"";
""1475_buyTokens"" -> ""1475_whenNotPaused"";
""1475_setRate"" -> ""1475_onlyOwner"";
""1475_claimRefund"" -> ""1475_whenNotPaused"";
""1475_buyTokens"" -> ""1475_saleIsOn"";
""1475_buyTokens"" -> ""1475_getRate"";
""1475_enableRefund"" -> ""1475_inState"";
""1475_enableRefund"" -> ""1475_onlyOwner"";
""1475_setRate"" -> ""1475_beforeSale"";
""1475_claimRefund"" -> ""1475_inState"";
""1475_reclaimEther"" -> ""1475_onlyOwner"";
""1475_finishCrowdsale"" -> ""1475_onlyOwner"";
""1475_generateTokens"" -> ""1475_onlyOwner"";
""1475_setWallets"" -> ""1475_onlyOwner"";
""1475_fallback"" -> ""1475_buyTokens"";
}
"
0x020ddc98365d0199b4c7a2d769d685480789f67e.sol,EOSclassic,"contract EOSclassic is StandardToken, HasNoEther { string public constant NAME = ; string public constant SYMBOL = ; uint8 public constant DECIMALS = 18; uint public constant TOTAL_SUPPLY = 1000000000 * (10 ** uint(DECIMALS)); uint public constant foundersAllocation = 100000000 * (10 ** uint(DECIMALS)); address public constant eosTokenAddress = 0x86Fa049857E0209aa7D9e616F7eb3b3B78ECfdb0; address public constant eosCrowdsaleAddress = 0xd0a6E6C54DbC68Db5db3A091B171A77407Ff7ccf; mapping (address => string) public keys; mapping (address => bool) public eosClassicClaimed; event LogClaim (address user, uint amount); event LogRegister (address user, string key); constructor() public { totalSupply_ = TOTAL_SUPPLY; balances[address(this)] = TOTAL_SUPPLY; emit Transfer(0x0, address(this), TOTAL_SUPPLY); balances[address(this)] = balances[address(this)].sub(foundersAllocation); balances[msg.sender] = balances[msg.sender].add(foundersAllocation); emit Transfer(address(this), msg.sender, foundersAllocation); }",1,"subgraph cluster_947_EOSclassic {
label=""EOSclassic"";
""947_queryEOSTokenBalance"" [label=""queryEOSTokenBalance""];
""947_constructor"" [label=""constructor""];
""947_register"" [label=""register""];
""947_getEOSKeyFor"" [label=""getEOSKeyFor""];
""947_isClaimed"" [label=""isClaimed""];
""947_getMyEOSKey"" [label=""getMyEOSKey""];
""947_queryEOSCrowdsaleKey"" [label=""queryEOSCrowdsaleKey""];
""947_claimEOSclassicFor"" [label=""claimEOSclassicFor""];
""947_claimEOSclassic"" [label=""claimEOSclassic""];
""947_claimEOSclassic"" -> ""947_claimEOSclassicFor"";
""947_claimEOSclassicFor"" -> ""947_queryEOSTokenBalance"";
""947_getEOSKeyFor"" -> ""947_queryEOSCrowdsaleKey"";
""947_claimEOSclassicFor"" -> ""947_isClaimed"";
""947_getMyEOSKey"" -> ""947_getEOSKeyFor"";
}
"
0x51c22c78d753939c8aebae437c2f18eee43ca296.sol,PrivateSale,"contract PrivateSale is Ownable { LamdenTau public lamdenTau; address public buyer; uint256 public priceInWei; function PrivateSale(address _tokenContractAddress, address _buyer, uint256 _priceInWei) public { require(_buyer != address(0)); require(_tokenContractAddress != address(0)); require(_priceInWei > 0); buyer = _buyer; priceInWei = _priceInWei; lamdenTau = LamdenTau(_tokenContractAddress); }",1,"subgraph cluster_806_PrivateSale {
label=""PrivateSale"";
""806_endTokenSale"" [label=""endTokenSale""];
""806_buyTokens"" [label=""buyTokens""];
""806_fallback"" [label=""fallback""];
""806_issueTokensToBuyer"" [label=""issueTokensToBuyer""];
""806_transferWeiToWallet"" [label=""transferWeiToWallet""];
""806_PrivateSale"" [label=""PrivateSale""];
""806_buyTokens"" -> ""806_transferWeiToWallet"";
""806_endTokenSale"" -> ""806_onlyOwner"";
""806_fallback"" -> ""806_buyTokens"";
""806_buyTokens"" -> ""806_issueTokensToBuyer"";
}
"
0x750c1d91864171d7e1715a6b53ee28c72b8faa09.sol,EthicHubUser,"contract EthicHubUser is Ownable, EthicHubBase { event UserStatusChanged(address target, string profile, bool isRegistered); constructor(address _storageAddress) EthicHubBase(_storageAddress) public { version = 3; }",1,"subgraph cluster_660_EthicHubUser {
label=""EthicHubUser"";
""660_deleteUserStatus"" [label=""deleteUserStatus""];
""660_registerPaymentGateway"" [label=""registerPaymentGateway""];
""660_registerLocalNode"" [label=""registerLocalNode""];
""660_unregisterLocalNode"" [label=""unregisterLocalNode""];
""660_registerRepresentative"" [label=""registerRepresentative""];
""660_constructor"" [label=""constructor""];
""660_unregisterPaymentGateway"" [label=""unregisterPaymentGateway""];
""660_changeUserStatus"" [label=""changeUserStatus""];
""660_unregisterCommunity"" [label=""unregisterCommunity""];
""660_unregisterRepresentative"" [label=""unregisterRepresentative""];
""660_unregisterInvestor"" [label=""unregisterInvestor""];
""660_registerInvestor"" [label=""registerInvestor""];
""660_viewRegistrationStatus"" [label=""viewRegistrationStatus""];
""660_registerCommunity"" [label=""registerCommunity""];
""660_unregisterCommunity"" -> ""660_onlyOwner"";
""660_registerLocalNode"" -> ""660_changeUserStatus"";
""660_constructor"" -> ""660_constructor"";
""660_registerInvestor"" -> ""660_onlyOwner"";
""660_unregisterInvestor"" -> ""660_deleteUserStatus"";
""660_unregisterLocalNode"" -> ""660_onlyOwner"";
""660_unregisterInvestor"" -> ""660_onlyOwner"";
""660_unregisterRepresentative"" -> ""660_onlyOwner"";
""660_registerCommunity"" -> ""660_changeUserStatus"";
""660_registerLocalNode"" -> ""660_onlyOwner"";
""660_unregisterLocalNode"" -> ""660_deleteUserStatus"";
""660_registerCommunity"" -> ""660_onlyOwner"";
""660_unregisterPaymentGateway"" -> ""660_onlyOwner"";
""660_registerRepresentative"" -> ""660_onlyOwner"";
""660_unregisterPaymentGateway"" -> ""660_deleteUserStatus"";
""660_unregisterCommunity"" -> ""660_deleteUserStatus"";
""660_unregisterRepresentative"" -> ""660_deleteUserStatus"";
""660_deleteUserStatus"" -> ""660_onlyOwner"";
""660_registerPaymentGateway"" -> ""660_changeUserStatus"";
""660_registerRepresentative"" -> ""660_changeUserStatus"";
""660_changeUserStatus"" -> ""660_onlyOwner"";
""660_registerPaymentGateway"" -> ""660_onlyOwner"";
""660_registerInvestor"" -> ""660_changeUserStatus"";
}
"
0x470142a1834438515b757118f322703aba6e1e05.sol,PolicyPalNetworkAirdrop,contract PolicyPalNetworkAirdrop { struct BountyType { bool twitter; bool signature; },1,"subgraph cluster_662_PolicyPalNetworkAirdrop {
label=""PolicyPalNetworkAirdrop"";
""662_signatureDropMultipleAmount"" [label=""signatureDropMultipleAmount""];
""662_airDropSingleAmount"" [label=""airDropSingleAmount""];
""662_twitterDropSingleAmount"" [label=""twitterDropSingleAmount""];
""662_signatureDropSingleAmount"" [label=""signatureDropSingleAmount""];
""662_emergencyDrain"" [label=""emergencyDrain""];
""662_twitterDropMultipleAmount"" [label=""twitterDropMultipleAmount""];
""662_PolicyPalNetworkAirdrop"" [label=""PolicyPalNetworkAirdrop""];
""662_airDropMultipleAmount"" [label=""airDropMultipleAmount""];
""662_twitterDropSingleAmount"" -> ""662_onlyAdmin"";
""662_signatureDropSingleAmount"" -> ""662_validBalance"";
""662_airDropSingleAmount"" -> ""662_onlyAdmin"";
""662_emergencyDrain"" -> ""662_onlyAdmin"";
""662_signatureDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_airDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropSingleAmount"" -> ""662_validBalance"";
""662_signatureDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_signatureDropSingleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropSingleAmount"" -> ""662_validBalance"";
""662_PolicyPalNetworkAirdrop"" -> ""662_validAddress"";
""662_twitterDropMultipleAmount"" -> ""662_onlyAdmin"";
}
"
0xebbdf302c940c6bfd49c6b165f457fdb324649bc.sol,HydroToken,contract HydroToken is Ownable { using SafeMath for uint256; string public name = ; uint8 public decimals = 18; string public symbol = ; uint public totalSupply; address public raindropAddress = 0x0; mapping (address => uint256) public balances; mapping (address => mapping (address => uint256)) public allowed; function HydroToken() public { totalSupply = 11111111111 * 10**18; balances[msg.sender] = totalSupply; },1,"subgraph cluster_616_HydroToken {
label=""HydroToken"";
""616_transfer"" [label=""transfer""];
""616_doTransfer"" [label=""doTransfer""];
""616_authenticate"" [label=""authenticate""];
""616_approve"" [label=""approve""];
""616_setBalances"" [label=""setBalances""];
""616_transferFrom"" [label=""transferFrom""];
""616_HydroToken"" [label=""HydroToken""];
""616_setRaindropAddress"" [label=""setRaindropAddress""];
""616_allowance"" [label=""allowance""];
""616_balanceOf"" [label=""balanceOf""];
""616_burn"" [label=""burn""];
""616_approveAndCall"" [label=""approveAndCall""];
""616_totalSupply"" [label=""totalSupply""];
""616_setRaindropAddress"" -> ""616_onlyOwner"";
""616_authenticate"" -> ""616_doTransfer"";
""616_setBalances"" -> ""616_transfer"";
""616_burn"" -> ""616_onlyOwner"";
""616_transferFrom"" -> ""616_doTransfer"";
""616_approveAndCall"" -> ""616_approve"";
""616_setBalances"" -> ""616_onlyOwner"";
""616_transfer"" -> ""616_doTransfer"";
}
"
0x01e0f57c42bf976676ea1daa1b04d69aba6bdaf3.sol,BatchTransferWallet,"contract BatchTransferWallet is Ownable { using SafeMath for uint256; event LogWithdrawal(address indexed receiver, uint amount); function batchTransfer(address _tokenAddress, address[] _investors, uint256[] _tokenAmounts) public { ERC20BasicInterface token = ERC20BasicInterface(_tokenAddress); require(_investors.length == _tokenAmounts.length && _investors.length != 0); uint decimalsForCalc = 10 ** uint256(token.decimals()); for (uint i = 0; i < _investors.length; i++) { require(_tokenAmounts[i] > 0 && _investors[i] != 0x0); _tokenAmounts[i] = _tokenAmounts[i].mul(decimalsForCalc); require(token.transfer(_investors[i], _tokenAmounts[i])); }",1,"subgraph cluster_381_BatchTransferWallet {
label=""BatchTransferWallet"";
""381_withdraw"" [label=""withdraw""];
""381_balanceOfContract"" [label=""balanceOfContract""];
""381_batchTransfer"" [label=""batchTransfer""];
""381_withdraw"" -> ""381_onlyOwner"";
}
"
0x0e752b742f744fdc2d93774da44c37b72c3e6952.sol,CraftyCrowdsale,"contract CraftyCrowdsale is Pausable { using SafeMath for uint256; mapping(address => uint256) received; MintableToken public token; uint256 public preSaleStart; uint256 public preSaleEnd; uint256 public saleStart; uint256 public saleEnd; uint256 public issuedTokens = 0; uint256 public constant hardCap = 5000000000 * 10**8; uint256 constant teamCap = 1450000000 * 10**8; uint256 constant advisorCap = 450000000 * 10**8; uint256 constant bountyCap = 100000000 * 10**8; uint256 constant fundCap = 3000000000 * 10**8; uint256 constant lockTime = 180 days; address public etherWallet; address public teamWallet; address public advisorWallet; address public fundWallet; address public bountyWallet; TokenTimelock teamTokens; uint256 public rate; enum State { BEFORE_START, SALE, REFUND, CLOSED }",1,"subgraph cluster_1475_CraftyCrowdsale {
label=""CraftyCrowdsale"";
""1475_releaseTeamTokens"" [label=""releaseTeamTokens""];
""1475_setWallets"" [label=""setWallets""];
""1475_setRate"" [label=""setRate""];
""1475_enableRefund"" [label=""enableRefund""];
""1475_receivedFrom"" [label=""receivedFrom""];
""1475_getRate"" [label=""getRate""];
""1475_generateTokens"" [label=""generateTokens""];
""1475_claimRefund"" [label=""claimRefund""];
""1475_reclaimEther"" [label=""reclaimEther""];
""1475_buyTokens"" [label=""buyTokens""];
""1475_CraftyCrowdsale"" [label=""CraftyCrowdsale""];
""1475_fallback"" [label=""fallback""];
""1475_finishCrowdsale"" [label=""finishCrowdsale""];
""1475_finishCrowdsale"" -> ""1475_inState"";
""1475_setWallets"" -> ""1475_inState"";
""1475_buyTokens"" -> ""1475_whenNotPaused"";
""1475_setRate"" -> ""1475_onlyOwner"";
""1475_claimRefund"" -> ""1475_whenNotPaused"";
""1475_buyTokens"" -> ""1475_saleIsOn"";
""1475_buyTokens"" -> ""1475_getRate"";
""1475_enableRefund"" -> ""1475_inState"";
""1475_enableRefund"" -> ""1475_onlyOwner"";
""1475_setRate"" -> ""1475_beforeSale"";
""1475_claimRefund"" -> ""1475_inState"";
""1475_reclaimEther"" -> ""1475_onlyOwner"";
""1475_finishCrowdsale"" -> ""1475_onlyOwner"";
""1475_generateTokens"" -> ""1475_onlyOwner"";
""1475_setWallets"" -> ""1475_onlyOwner"";
""1475_fallback"" -> ""1475_buyTokens"";
}
"
0x019e41a2acdffafc0303e840fbd7934234e68f45.sol,contractDeployer,"contract contractDeployer is Ownable { event ContractCreated(address newAddress); address public tokenAddr; uint public tokenFee; uint public crowdsaleFee; uint public multisendFee; ERC20 token; cDeployer cdep; tDeployer tdep; function setUp(address _token, address _cdep, address _tdep) public onlyOwner { tokenAddr = _token; token = ERC20(tokenAddr); cdep = cDeployer(_cdep); tdep = tDeployer(_tdep); }",1,"subgraph cluster_393_contractDeployer {
label=""contractDeployer"";
""393_setUp"" [label=""setUp""];
""393_changeTokenFee"" [label=""changeTokenFee""];
""393_multiSender"" [label=""multiSender""];
""393_changeMultisendFee"" [label=""changeMultisendFee""];
""393_deployToken"" [label=""deployToken""];
""393_deployCrowdsale"" [label=""deployCrowdsale""];
""393_changeCrowdsaleFee"" [label=""changeCrowdsaleFee""];
""393_setUp"" -> ""393_onlyOwner"";
""393_changeCrowdsaleFee"" -> ""393_onlyOwner"";
""393_changeMultisendFee"" -> ""393_onlyOwner"";
""393_changeTokenFee"" -> ""393_onlyOwner"";
}
"
0x0dae7caf45d9c473a8f6ae0d4934e5c3b2dbc371.sol,SafeGuardsToken,contract SafeGuardsToken is CappedToken { string constant public name = ; string constant public symbol = ; uint constant public decimals = 18; address public canBurnAddress; mapping (address => bool) public frozenList; uint256 public frozenPauseTime = now + 180 days; uint256 public burnPausedTime = now + 180 days; constructor(address _canBurnAddress) CappedToken(61 * 1e6 * 1e18) public { require(_canBurnAddress != 0x0); canBurnAddress = _canBurnAddress; },1,"subgraph cluster_1102_SafeGuardsToken {
label=""SafeGuardsToken"";
""1102_burn"" [label=""burn""];
""1102_changeFrozenTime"" [label=""changeFrozenTime""];
""1102_changeBurnPausedTime"" [label=""changeBurnPausedTime""];
""1102_constructor"" [label=""constructor""];
""1102_mintFrozen"" [label=""mintFrozen""];
""1102_transfer"" [label=""transfer""];
""1102_transferFrom"" [label=""transferFrom""];
""1102_isContract"" [label=""isContract""];
""1102_transfer"" -> ""1102_isContract"";
""1102_mintFrozen"" -> ""1102_mint"";
""1102_mintFrozen"" -> ""1102_canMint"";
""1102_changeBurnPausedTime"" -> ""1102_onlyOwner"";
""1102_changeFrozenTime"" -> ""1102_onlyOwner"";
""1102_constructor"" -> ""1102_constructor"";
""1102_transfer"" -> ""1102_transfer"";
""1102_transferFrom"" -> ""1102_isContract"";
""1102_transferFrom"" -> ""1102_transferFrom"";
""1102_mintFrozen"" -> ""1102_onlyOwner"";
}
"
0x56ffb3c578906ba9658fccb052fc1a5672275b6a.sol,OpiriaCrowdsale,"contract OpiriaCrowdsale is TimedPresaleCrowdsale, MintedCrowdsale, TokenCappedCrowdsale { using SafeMath for uint256; uint256 public presaleWeiLimit; address public tokensWallet; uint256 public totalBonus = 0; bool public hiddenCapTriggered; uint16 public additionalBonusPercent = 0; mapping(address => uint256) public bonusOf; constructor(ERC20 _token, uint16 _initialEtherUsdRate, address _wallet, address _tokensWallet, uint256 _presaleOpeningTime, uint256 _presaleClosingTime, uint256 _openingTime, uint256 _closingTime ) public TimedPresaleCrowdsale(_presaleOpeningTime, _presaleClosingTime, _openingTime, _closingTime) Crowdsale(_initialEtherUsdRate, _wallet, _token) { setEtherUsdRate(_initialEtherUsdRate); tokensWallet = _tokensWallet; require(PausableToken(token).paused()); }",1,"subgraph cluster_2370_OpiriaCrowdsale {
label=""OpiriaCrowdsale"";
""2370_claimReservedTokens"" [label=""claimReservedTokens""];
""2370_setEtherUsdRate"" [label=""setEtherUsdRate""];
""2370__getTokenAmount"" [label=""_getTokenAmount""];
""2370_constructor"" [label=""constructor""];
""2370_addBonusBatch"" [label=""addBonusBatch""];
""2370__preValidatePurchase"" [label=""_preValidatePurchase""];
""2370_triggerHiddenCap"" [label=""triggerHiddenCap""];
""2370_sendTokensTo"" [label=""sendTokensTo""];
""2370_increaseCap"" [label=""increaseCap""];
""2370_withdrawBonus"" [label=""withdrawBonus""];
""2370__getBonusAmount"" [label=""_getBonusAmount""];
""2370_unlockTokenTransfers"" [label=""unlockTokenTransfers""];
""2370_distributeBonus"" [label=""distributeBonus""];
""2370__processPurchase"" [label=""_processPurchase""];
""2370_sendTokensToBatch"" [label=""sendTokensToBatch""];
""2370__saveBonus"" [label=""_saveBonus""];
""2370__getBonusPercent"" [label=""_getBonusPercent""];
""2370_finalization"" [label=""finalization""];
""2370_setAdditionalBonusPercent"" [label=""setAdditionalBonusPercent""];
""2370__preValidatePurchase"" -> ""2370__getBonusAmount"";
""2370_claimReservedTokens"" -> ""2370_onlyOwner"";
""2370__preValidatePurchase"" -> ""2370__getTokenAmount"";
""2370_unlockTokenTransfers"" -> ""2370_onlyOwner"";
""2370_increaseCap"" -> ""2370_onlyOwner"";
""2370_triggerHiddenCap"" -> ""2370_onlyOwner"";
""2370_sendTokensToBatch"" -> ""2370_sendTokensTo"";
""2370_setEtherUsdRate"" -> ""2370_onlyOwner"";
""2370_addBonusBatch"" -> ""2370_notExceedingSaleCap"";
""2370_distributeBonus"" -> ""2370_onlyOwner"";
""2370_sendTokensTo"" -> ""2370_onlyOwner"";
""2370_finalization"" -> ""2370_finalization"";
""2370__preValidatePurchase"" -> ""2370_isPresale"";
""2370_setAdditionalBonusPercent"" -> ""2370_onlyOwner"";
""2370__saveBonus"" -> ""2370__getBonusAmount"";
""2370__preValidatePurchase"" -> ""2370_notExceedingSaleCap"";
""2370__getBonusAmount"" -> ""2370__getBonusPercent"";
""2370_addBonusBatch"" -> ""2370_onlyOwner"";
""2370_constructor"" -> ""2370_constructor"";
""2370__getBonusPercent"" -> ""2370_isPresale"";
""2370__processPurchase"" -> ""2370__deliverTokens"";
""2370__preValidatePurchase"" -> ""2370__preValidatePurchase"";
""2370_finalization"" -> ""2370__deliverTokens"";
""2370_constructor"" -> ""2370_setEtherUsdRate"";
""2370_withdrawBonus"" -> ""2370__deliverTokens"";
""2370_sendTokensTo"" -> ""2370_notExceedingSaleCap"";
""2370_sendTokensToBatch"" -> ""2370_onlyOwner"";
""2370__processPurchase"" -> ""2370__saveBonus"";
""2370_distributeBonus"" -> ""2370__deliverTokens"";
""2370_claimReservedTokens"" -> ""2370__deliverTokens"";
}
"
0x6c602f1798a453f90f249e208e2b64c7c09226f7.sol,Mentoring,"contract Mentoring is Ownable, ReentrancyGuard, CanReclaimToken { using SafeMath for uint256; event BecomeMentor(uint256 indexed mentorId); event BreakMentoring(uint256 indexed mentorId); event ChangeLevelPrice(uint256 indexed mentorId, uint256 newLevelPrice); event Income(address source, uint256 amount); event StartLecture(uint256 indexed lectureId, uint256 indexed mentorId, uint256 indexed studentId, uint256 mentorLevel, uint256 studentLevel, uint256 levelUp, uint256 levelPrice, uint256 startedAt, uint256 endsAt); struct Lecture { uint256 mentorId; uint256 studentId; uint256 mentorLevel; uint256 studentLevel; uint256 levelUp; uint256 levelPrice; uint256 startedAt; uint256 endsAt; }",1,"subgraph cluster_1365_Mentoring {
label=""Mentoring"";
""1365_changeLevelPrice"" [label=""changeLevelPrice""];
""1365_getLastLecture"" [label=""getLastLecture""];
""1365_getLastLectureIdAsStudent"" [label=""getLastLectureIdAsStudent""];
""1365_getLastLectureIdAsMentor"" [label=""getLastLectureIdAsMentor""];
""1365_startLecture"" [label=""startLecture""];
""1365_inLecture"" [label=""inLecture""];
""1365_setFee"" [label=""setFee""];
""1365_lectureExists"" [label=""lectureExists""];
""1365_getMentor"" [label=""getMentor""];
""1365_calcCost"" [label=""calcCost""];
""1365_isMentor"" [label=""isMentor""];
""1365_breakMentoring"" [label=""breakMentoring""];
""1365_inMentoring"" [label=""inMentoring""];
""1365_setLevelUpTime"" [label=""setLevelUpTime""];
""1365_becomeMentor"" [label=""becomeMentor""];
""1365__distributePayment"" [label=""_distributePayment""];
""1365_inStudying"" [label=""inStudying""];
""1365__calcLevelIncrease"" [label=""_calcLevelIncrease""];
""1365_isRaceSuitable"" [label=""isRaceSuitable""];
""1365__getPercent"" [label=""_getPercent""];
""1365_fallback"" [label=""fallback""];
""1365__flushBalance"" [label=""_flushBalance""];
""1365_getLecture"" [label=""getLecture""];
""1365_constructor"" [label=""constructor""];
""1365_startLecture"" -> ""1365_isMentor"";
""1365_setFee"" -> ""1365_onlyOwner"";
""1365_fallback"" -> ""1365__flushBalance"";
""1365_startLecture"" -> ""1365__calcLevelIncrease"";
""1365_changeLevelPrice"" -> ""1365_isMentor"";
""1365_calcCost"" -> ""1365__calcLevelIncrease"";
""1365_startLecture"" -> ""1365_onlyOwnerOf"";
""1365__distributePayment"" -> ""1365__getPercent"";
""1365_getMentor"" -> ""1365_isMentor"";
""1365_inLecture"" -> ""1365_inMentoring"";
""1365_setLevelUpTime"" -> ""1365_onlyOwner"";
""1365_startLecture"" -> ""1365__flushBalance"";
""1365_getLastLecture"" -> ""1365_lectureExists"";
""1365_breakMentoring"" -> ""1365_onlyOwnerOf"";
""1365_getLastLecture"" -> ""1365_getLastLectureIdAsStudent"";
""1365_getLecture"" -> ""1365_lectureExists"";
""1365_inMentoring"" -> ""1365_getLastLectureIdAsMentor"";
""1365_inStudying"" -> ""1365_getLastLectureIdAsStudent"";
""1365_startLecture"" -> ""1365_isRaceSuitable"";
""1365_changeLevelPrice"" -> ""1365_onlyOwnerOf"";
""1365_getLastLecture"" -> ""1365_getLastLectureIdAsMentor"";
""1365_inLecture"" -> ""1365_inStudying"";
""1365_becomeMentor"" -> ""1365_onlyOwnerOf"";
""1365_startLecture"" -> ""1365__distributePayment"";
}
"
0x031e8de47dee0fdde1969a93b64bb8f8fbcba65d.sol,lockEtherPay,"contract lockEtherPay is Ownable { using SafeMath for uint256; token token_reward; address public beneficiary; bool public isLocked = false; bool public isReleased = false; uint256 public start_time; uint256 public end_time; uint256 public fifty_two_weeks = 30412800; event TokenReleased(address beneficiary, uint256 token_amount); constructor() public{ token_reward = token(0xAa1ae5e57dc05981D83eC7FcA0b3c7ee2565B7D6); beneficiary = 0xae09643734a0A0054fB4C1B376Ea95cd2d552dee; }",1,"subgraph cluster_309_lockEtherPay {
label=""lockEtherPay"";
""309_lockOver"" [label=""lockOver""];
""309_tokenBalance"" [label=""tokenBalance""];
""309_constructor"" [label=""constructor""];
""309_lock"" [label=""lock""];
""309_release"" [label=""release""];
""309_release"" -> ""309_lockOver"";
""309_release"" -> ""309_onlyOwner"";
""309_lock"" -> ""309_onlyOwner"";
""309_lock"" -> ""309_tokenBalance"";
""309_release"" -> ""309_tokenBalance"";
}
"
0x4c13184721de2d1b47a8875775ba3ce0b2e00ee0.sol,SharkPool,"contract SharkPool is Ownable, ReentrancyGuard { string constant public pool_name = ; uint256 public pool_percentage = 5; uint256 constant public max_users = 100; uint256 public total_users = 0; uint256 public constant divisible_units = 10000000; uint256 public contract_period = 100; uint256 public mined_blocks = 1; uint256 public claimed_blocks = 1; uint256 public blockCreationRate = 0; BitcoineumInterface base_contract; struct user { uint256 start_block; uint256 end_block; uint256 proportional_contribution; }",1,"subgraph cluster_893_SharkPool {
label=""SharkPool"";
""893_current_external_block"" [label=""current_external_block""];
""893_SharkPool"" [label=""SharkPool""];
""893_find_contribution"" [label=""find_contribution""];
""893_mine"" [label=""mine""];
""893_checkMiningAttempt"" [label=""checkMiningAttempt""];
""893_checkWinning"" [label=""checkWinning""];
""893_allocate_slot"" [label=""allocate_slot""];
""893_fallback"" [label=""fallback""];
""893_available_slots"" [label=""available_slots""];
""893_get_bitcoineum_contract_address"" [label=""get_bitcoineum_contract_address""];
""893_external_to_internal_block_number"" [label=""external_to_internal_block_number""];
""893_do_redemption"" [label=""do_redemption""];
""893_redeem"" [label=""redeem""];
""893_set_pool_percentage"" [label=""set_pool_percentage""];
""893_balanceOf"" [label=""balanceOf""];
""893_distribute_reward"" [label=""distribute_reward""];
""893_calculate_minimum_contribution"" [label=""calculate_minimum_contribution""];
""893_claim"" [label=""claim""];
""893_SharkPool"" -> ""893_get_bitcoineum_contract_address"";
""893_redeem"" -> ""893_do_redemption"";
""893_set_pool_percentage"" -> ""893_nonReentrant"";
""893_redeem"" -> ""893_nonReentrant"";
""893_set_pool_percentage"" -> ""893_onlyOwner"";
""893_mine"" -> ""893_external_to_internal_block_number"";
""893_fallback"" -> ""893_do_redemption"";
""893_claim"" -> ""893_distribute_reward"";
""893_mine"" -> ""893_current_external_block"";
""893_fallback"" -> ""893_allocate_slot"";
""893_fallback"" -> ""893_calculate_minimum_contribution"";
""893_claim"" -> ""893_nonReentrant"";
""893_mine"" -> ""893_nonReentrant"";
}
"
0xebcf88fb2783bbb75b12df3f33627efa894afea4.sol,SPACEDICE,"contract SPACEDICE is Mortal, usingNRE{ uint minBet = 1000000000000000; event Roll(bool _won, uint256 _dice1, uint256 _dice2, uint256 _roll1, uint256 _roll2, uint _amount); constructor() payable public {}",1,"subgraph cluster_372_SPACEDICE {
label=""SPACEDICE"";
""372_checkContractBalance"" [label=""checkContractBalance""];
""372_collect"" [label=""collect""];
""372_constructor"" [label=""constructor""];
""372_fallback"" [label=""fallback""];
""372_bet"" [label=""bet""];
""372_collect"" -> ""372_onlyOwner"";
""372_bet"" -> ""372_ra"";
""372_bet"" -> ""372_rx"";
}
"
0x2791528f5617e187a6d73c30034ac211b2f47042.sol,CardsRaffle,"contract CardsRaffle is AccessAdmin { using SafeMath for SafeMath; function CardsRaffle() public { setAdminContract(msg.sender,true); setActionContract(msg.sender,true); }",1,"subgraph cluster_957_CardsRaffle {
label=""CardsRaffle"";
""957_setCardsAddress"" [label=""setCardsAddress""];
""957_buyRaffleTicket"" [label=""buyRaffleTicket""];
""957_getLatestRaffleInfo"" [label=""getLatestRaffleInfo""];
""957_getRafflePlayers"" [label=""getRafflePlayers""];
""957_setRareAddress"" [label=""setRareAddress""];
""957_getRareAddress"" [label=""getRareAddress""];
""957_startRareRaffle"" [label=""startRareRaffle""];
""957_assignRafflePrize"" [label=""assignRafflePrize""];
""957_drawRandomWinner"" [label=""drawRandomWinner""];
""957_awardRafflePrize"" [label=""awardRafflePrize""];
""957_getPlayersTickets"" [label=""getPlayersTickets""];
""957_CardsRaffle"" [label=""CardsRaffle""];
""957_awardRafflePrize"" -> ""957_drawRandomWinner"";
""957_CardsRaffle"" -> ""957_setAdminContract"";
""957_setRareAddress"" -> ""957_onlyOwner"";
""957_awardRafflePrize"" -> ""957_assignRafflePrize"";
""957_startRareRaffle"" -> ""957_onlyAdmin"";
""957_startRareRaffle"" -> ""957_getRareAddress"";
""957_drawRandomWinner"" -> ""957_onlyAdmin"";
""957_CardsRaffle"" -> ""957_setActionContract"";
""957_setCardsAddress"" -> ""957_onlyOwner"";
""957_awardRafflePrize"" -> ""957_getRareAddress"";
}
"
0x9271a6512b8f27a5f8daa01a62bdc533709e859a.sol,LockToken,"contract LockToken is Ownable { using SafeMath for uint256; token token_reward; address public beneficiary; bool public isLocked = false; bool public isReleased = false; uint256 public start_time; uint256 public end_time; event TokenReleased(address beneficiary, uint256 token_amount); constructor(address tokenContractAddress, address _beneficiary) public{ token_reward = token(tokenContractAddress); beneficiary = _beneficiary; }",1,"subgraph cluster_309_LockToken {
label=""LockToken"";
""309_release"" [label=""release""];
""309_lock"" [label=""lock""];
""309_constructor"" [label=""constructor""];
""309_tokenBalance"" [label=""tokenBalance""];
""309_lockOver"" [label=""lockOver""];
""309_release"" -> ""309_lockOver"";
""309_lock"" -> ""309_onlyOwner"";
""309_lock"" -> ""309_tokenBalance"";
""309_release"" -> ""309_onlyOwner"";
""309_release"" -> ""309_tokenBalance"";
}
"
0xf244176246168f24e3187f7288edbca29267739b.sol,ExternStateProxyToken,"contract ExternStateProxyToken is SafeDecimalMath, Proxyable { TokenState public state; string public name; string public symbol; uint public totalSupply; function ExternStateProxyToken(string _name, string _symbol, uint initialSupply, address initialBeneficiary, TokenState _state, address _owner) Proxyable(_owner) public { name = _name; symbol = _symbol; totalSupply = initialSupply; if (_state == TokenState(0)) { state = new TokenState(_owner, address(this)); state.setBalanceOf(initialBeneficiary, totalSupply); emit Transfer(address(0), initialBeneficiary, initialSupply); }",1,"subgraph cluster_3485_ExternStateProxyToken {
label=""ExternStateProxyToken"";
""3485_ExternStateProxyToken"" [label=""ExternStateProxyToken""];
""3485__transfer_byProxy"" [label=""_transfer_byProxy""];
""3485_balanceOf"" [label=""balanceOf""];
""3485_approve"" [label=""approve""];
""3485_setState"" [label=""setState""];
""3485__transferFrom_byProxy"" [label=""_transferFrom_byProxy""];
""3485_allowance"" [label=""allowance""];
""3485_ExternStateProxyToken"" -> ""3485_Proxyable"";
""3485__transferFrom_byProxy"" -> ""3485_safeSub"";
""3485_setState"" -> ""3485_optionalProxy_onlyOwner"";
""3485__transfer_byProxy"" -> ""3485_safeAdd"";
""3485__transfer_byProxy"" -> ""3485_safeSub"";
""3485_approve"" -> ""3485_optionalProxy"";
""3485__transferFrom_byProxy"" -> ""3485_safeAdd"";
}
"
0x470142a1834438515b757118f322703aba6e1e05.sol,PolicyPalNetworkAirdrop,contract PolicyPalNetworkAirdrop { struct BountyType { bool twitter; bool signature; },1,"subgraph cluster_662_PolicyPalNetworkAirdrop {
label=""PolicyPalNetworkAirdrop"";
""662_signatureDropMultipleAmount"" [label=""signatureDropMultipleAmount""];
""662_airDropSingleAmount"" [label=""airDropSingleAmount""];
""662_twitterDropSingleAmount"" [label=""twitterDropSingleAmount""];
""662_signatureDropSingleAmount"" [label=""signatureDropSingleAmount""];
""662_emergencyDrain"" [label=""emergencyDrain""];
""662_twitterDropMultipleAmount"" [label=""twitterDropMultipleAmount""];
""662_PolicyPalNetworkAirdrop"" [label=""PolicyPalNetworkAirdrop""];
""662_airDropMultipleAmount"" [label=""airDropMultipleAmount""];
""662_twitterDropSingleAmount"" -> ""662_onlyAdmin"";
""662_signatureDropSingleAmount"" -> ""662_validBalance"";
""662_airDropSingleAmount"" -> ""662_onlyAdmin"";
""662_emergencyDrain"" -> ""662_onlyAdmin"";
""662_signatureDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_airDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropSingleAmount"" -> ""662_validBalance"";
""662_signatureDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_signatureDropSingleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropSingleAmount"" -> ""662_validBalance"";
""662_PolicyPalNetworkAirdrop"" -> ""662_validAddress"";
""662_twitterDropMultipleAmount"" -> ""662_onlyAdmin"";
}
"
0x0e69d0a2bbb30abcb7e5cfea0e4fde19c00a8d47.sol,ContractLock,"contract ContractLock is DSStop { uint public unlockTime; mapping (address => bool) public isAdmin; event LogAddAdmin(address whoAdded, address newAdmin); event LogRemoveAdmin(address whoRemoved, address admin); constructor(uint _unlockTime) public { unlockTime = _unlockTime; isAdmin[msg.sender] = true; emit LogAddAdmin(msg.sender, msg.sender); }",1,"subgraph cluster_1015_ContractLock {
label=""ContractLock"";
""1015_constructor"" [label=""constructor""];
""1015_addAdmin"" [label=""addAdmin""];
""1015_removeAdmin"" [label=""removeAdmin""];
""1015_setOwner"" [label=""setOwner""];
""1015_setUnlockTime"" [label=""setUnlockTime""];
""1015_setOwner"" -> ""1015_auth"";
""1015_setUnlockTime"" -> ""1015_auth"";
""1015_setOwner"" -> ""1015_addAdmin"";
""1015_addAdmin"" -> ""1015_auth"";
""1015_setOwner"" -> ""1015_removeAdmin"";
""1015_removeAdmin"" -> ""1015_auth"";
}
"
0xeb86a173e0311a28cadc24f85dbad867bbf34f73.sol,Bussiness,contract Bussiness is Ownable { address public ceoAddress = address(0x6c3e879bdd20e9686cfd9bbd1bfd4b2dd6d47079); IERC721 public erc721Address = IERC721(0xdceaf1652a131f32a821468dc03a92df0edd86ea); ERC20BasicInterface public usdtToken = ERC20BasicInterface(0xdac17f958d2ee523a2206206994597c13d831ec7); uint256 public ETHFee = 2; uint256 public HBWALLETFee = 1; constructor() public {},1,"subgraph cluster_768_Bussiness {
label=""Bussiness"";
""768_getApproved"" [label=""getApproved""];
""768_resetPrice"" [label=""resetPrice""];
""768_setFee"" [label=""setFee""];
""768_setPriceFeeEth"" [label=""setPriceFeeEth""];
""768_ownerOf"" [label=""ownerOf""];
""768_constructor"" [label=""constructor""];
""768_buyWithoutCheckApproved"" [label=""buyWithoutCheckApproved""];
""768_balanceOf"" [label=""balanceOf""];
""768_buy"" [label=""buy""];
""768_buyByUsdt"" [label=""buyByUsdt""];
""768_removePrice"" [label=""removePrice""];
""768_setPrice"" [label=""setPrice""];
""768_getPrice"" [label=""getPrice""];
""768_withdraw"" [label=""withdraw""];
""768_setFee"" -> ""768_onlyOwner"";
""768_getPrice"" -> ""768_resetPrice"";
""768_buyByUsdt"" -> ""768_resetPrice"";
""768_buy"" -> ""768_getApproved"";
""768_withdraw"" -> ""768_onlyCeoAddress"";
""768_removePrice"" -> ""768_resetPrice"";
""768_buyWithoutCheckApproved"" -> ""768_resetPrice"";
""768_buy"" -> ""768_resetPrice"";
}
"
0x02f61fd266da6e8b102d4121f5ce7b992640cf98.sol,LikeCoin,"contract LikeCoin is ERC20, HasOperator { using SafeMath for uint256; string constant public name = ; string constant public symbol = ; uint8 constant public decimals = 18; uint256 public supply = 0; mapping(address => uint256) public balances; mapping(address => mapping(address => uint256)) public allowed; address public crowdsaleAddr = 0x0; address public contributorPoolAddr = 0x0; uint256 public contributorPoolMintQuota = 0; address[] public creatorsPoolAddrs; mapping(address => bool) isCreatorsPool; uint256 public creatorsPoolMintQuota = 0; mapping(address => uint256) public lockedBalances; uint public unlockTime = 0; SignatureChecker public signatureChecker = SignatureChecker(0x0); bool public signatureCheckerFreezed = false; address public signatureOwner = 0x0; bool public allowDelegate = true; mapping (address => mapping (uint256 => bool)) public usedNonce; mapping (address => bool) public transferAndCallWhitelist; event Lock(address indexed _addr, uint256 _value); event SignatureCheckerChanged(address _newSignatureChecker); function LikeCoin(uint256 _initialSupply, address _signatureOwner, address _sigCheckerAddr) public { supply = _initialSupply; balances[owner] = _initialSupply; signatureOwner = _signatureOwner; signatureChecker = SignatureChecker(_sigCheckerAddr); Transfer(0x0, owner, _initialSupply); }",1,"subgraph cluster_1596_LikeCoin {
label=""LikeCoin"";
""1596_transferAndCall"" [label=""transferAndCall""];
""1596__tryUnlockBalance"" [label=""_tryUnlockBalance""];
""1596_registerContributorPool"" [label=""registerContributorPool""];
""1596_switchDelegate"" [label=""switchDelegate""];
""1596_allowance"" [label=""allowance""];
""1596_LikeCoin"" [label=""LikeCoin""];
""1596_balanceOf"" [label=""balanceOf""];
""1596_transferMultiple"" [label=""transferMultiple""];
""1596_transferAndLock"" [label=""transferAndLock""];
""1596_totalSupply"" [label=""totalSupply""];
""1596_registerCrowdsales"" [label=""registerCrowdsales""];
""1596_transferFrom"" [label=""transferFrom""];
""1596__isContract"" [label=""_isContract""];
""1596__transferMultiple"" [label=""_transferMultiple""];
""1596_transfer"" [label=""transfer""];
""1596_setSignatureChecker"" [label=""setSignatureChecker""];
""1596_transferMultipleDelegated"" [label=""transferMultipleDelegated""];
""1596_approve"" [label=""approve""];
""1596__transferAndCall"" [label=""_transferAndCall""];
""1596_mintForCreatorsPool"" [label=""mintForCreatorsPool""];
""1596_transferAndCallDelegated"" [label=""transferAndCallDelegated""];
""1596_freezeSignatureChecker"" [label=""freezeSignatureChecker""];
""1596_removeTransferAndCallWhitelist"" [label=""removeTransferAndCallWhitelist""];
""1596_registerCreatorsPools"" [label=""registerCreatorsPools""];
""1596__transfer"" [label=""_transfer""];
""1596_transferDelegated"" [label=""transferDelegated""];
""1596_burn"" [label=""burn""];
""1596_addTransferAndCallWhitelist"" [label=""addTransferAndCallWhitelist""];
""1596_mintForContributorPool"" [label=""mintForContributorPool""];
""1596_transferMultiple"" -> ""1596__transferMultiple"";
""1596_registerCrowdsales"" -> ""1596__isContract"";
""1596_switchDelegate"" -> ""1596_ownerOrOperator"";
""1596_transferMultipleDelegated"" -> ""1596__transferMultiple"";
""1596_registerCreatorsPools"" -> ""1596_onlyOwner"";
""1596_addTransferAndCallWhitelist"" -> ""1596__isContract"";
""1596_registerContributorPool"" -> ""1596_onlyOwner"";
""1596_registerContributorPool"" -> ""1596__isContract"";
""1596_addTransferAndCallWhitelist"" -> ""1596_ownerOrOperator"";
""1596_transferDelegated"" -> ""1596__transfer"";
""1596_transferAndCallDelegated"" -> ""1596__transferAndCall"";
""1596_transferAndCallDelegated"" -> ""1596_isDelegated"";
""1596_registerCrowdsales"" -> ""1596_onlyOwner"";
""1596_transfer"" -> ""1596__transfer"";
""1596__transfer"" -> ""1596__tryUnlockBalance"";
""1596__transferAndCall"" -> ""1596__transfer"";
""1596_transferAndCall"" -> ""1596__transferAndCall"";
""1596_transferDelegated"" -> ""1596_isDelegated"";
""1596_transferMultipleDelegated"" -> ""1596_isDelegated"";
""1596_removeTransferAndCallWhitelist"" -> ""1596_ownerOrOperator"";
""1596_transferFrom"" -> ""1596__transfer"";
""1596__transferMultiple"" -> ""1596__tryUnlockBalance"";
""1596_registerCreatorsPools"" -> ""1596__isContract"";
""1596__transferAndCall"" -> ""1596__isContract"";
}
"
0x39f996a2cafca0e593d0c46b8365d3936b6cc1cf.sol,Etherauction,contract Etherauction is ContractOwner { using SafeMath for uint256; constructor() public payable { owner = msg.sender; gameId = 1; gameStartTime = block.timestamp; gameLastAuctionMoney = 10**15; gameLastAuctionTime = block.timestamp; gameSecondLeft = _getInitAuctionSeconds(); },1,"subgraph cluster_2251_Etherauction {
label=""Etherauction"";
""2251_getGameDataByIndex"" [label=""getGameDataByIndex""];
""2251_gameRoundEnd"" [label=""gameRoundEnd""];
""2251__getGameAuctionGap"" [label=""_getGameAuctionGap""];
""2251_auction"" [label=""auction""];
""2251_getCurrGameInfo"" [label=""getCurrGameInfo""];
""2251__claimReward"" [label=""_claimReward""];
""2251__getGameInfoPart2"" [label=""_getGameInfoPart2""];
""2251__getGameInfoPart1"" [label=""_getGameInfoPart1""];
""2251__getMinAuctionSeconds"" [label=""_getMinAuctionSeconds""];
""2251_adminPayout"" [label=""adminPayout""];
""2251_claimReward"" [label=""claimReward""];
""2251_getRandom"" [label=""getRandom""];
""2251__getInitAuctionSeconds"" [label=""_getInitAuctionSeconds""];
""2251__getGameStartAuctionMoney"" [label=""_getGameStartAuctionMoney""];
""2251__inMoney"" [label=""_inMoney""];
""2251__getMinAuctionStartPrice"" [label=""_getMinAuctionStartPrice""];
""2251_refund"" [label=""refund""];
""2251_addAuctionReward"" [label=""addAuctionReward""];
""2251__getMaxAuctionSeconds"" [label=""_getMaxAuctionSeconds""];
""2251_constructor"" [label=""constructor""];
""2251_getMinAuctionValue"" [label=""getMinAuctionValue""];
""2251_adminAddMoney"" [label=""adminAddMoney""];
""2251__startNewRound"" [label=""_startNewRound""];
""2251_setOracleAPIAddress"" [label=""setOracleAPIAddress""];
""2251_getCurrCanRefund"" [label=""getCurrCanRefund""];
""2251_getGameInfo"" [label=""getGameInfo""];
""2251_constructor"" -> ""2251__getInitAuctionSeconds"";
""2251_adminPayout"" -> ""2251_onlyOwner"";
""2251__claimReward"" -> ""2251__getGameInfoPart2"";
""2251_getGameInfo"" -> ""2251__getGameInfoPart1"";
""2251_claimReward"" -> ""2251__claimReward"";
""2251_auction"" -> ""2251_getRandom"";
""2251__claimReward"" -> ""2251__getGameInfoPart1"";
""2251_auction"" -> ""2251__getMaxAuctionSeconds"";
""2251_getGameInfo"" -> ""2251__getGameInfoPart2"";
""2251_gameRoundEnd"" -> ""2251__startNewRound"";
""2251__startNewRound"" -> ""2251__getMinAuctionStartPrice"";
""2251_auction"" -> ""2251__inMoney"";
""2251_getMinAuctionValue"" -> ""2251__getGameAuctionGap"";
""2251_gameRoundEnd"" -> ""2251__claimReward"";
""2251_getCurrGameInfo"" -> ""2251__getGameAuctionGap"";
""2251_setOracleAPIAddress"" -> ""2251_onlyOwner"";
""2251_auction"" -> ""2251__getGameAuctionGap"";
""2251_auction"" -> ""2251__getMinAuctionSeconds"";
""2251__startNewRound"" -> ""2251__getInitAuctionSeconds"";
}
"
0x0e54b1b8ff833b5f2b0d17453d97d340cb7576e4.sol,ERC223Token,"contract ERC223Token is IERC223, SafeMath { mapping(address => uint) balances; string public name = ; string public symbol = ; uint8 public decimals = 8; uint256 public totalSupply = 35000000 * 10**8; function ERC223Token() { balances[msg.sender] = totalSupply; }",1,"subgraph cluster_534_ERC223Token {
label=""ERC223Token"";
""534_ERC223Token"" [label=""ERC223Token""];
""534_symbol"" [label=""symbol""];
""534_totalSupply"" [label=""totalSupply""];
""534_transferToAddress"" [label=""transferToAddress""];
""534_balanceOf"" [label=""balanceOf""];
""534_transferToContract"" [label=""transferToContract""];
""534_transfer"" [label=""transfer""];
""534_name"" [label=""name""];
""534_isContract"" [label=""isContract""];
""534_decimals"" [label=""decimals""];
""534_transfer"" -> ""534_safeAdd"";
""534_transferToContract"" -> ""534_safeAdd"";
""534_transferToAddress"" -> ""534_balanceOf"";
""534_transferToContract"" -> ""534_balanceOf"";
""534_transfer"" -> ""534_safeSub"";
""534_transferToAddress"" -> ""534_safeSub"";
""534_transferToContract"" -> ""534_safeSub"";
""534_transfer"" -> ""534_transferToAddress"";
""534_transfer"" -> ""534_balanceOf"";
""534_transfer"" -> ""534_transferToContract"";
""534_transfer"" -> ""534_isContract"";
""534_transferToAddress"" -> ""534_safeAdd"";
}
"
0xb4a448387403554616eb5b50aa4c48f75243a015.sol,Mobius2Dv2,"contract Mobius2Dv2 is UsingOraclizeRandom, DSMath { string public ipfsHash; string public ipfsHashType = ; MobiusToken public constant token = MobiusToken(0x54cdC9D889c28f55F59f6b136822868c7d4726fC); bool public upgraded; bool public initialized; address public nextVersion; LastVersion public constant lastVersion = LastVersion(0xA74642Aeae3e2Fd79150c910eB5368B64f864B1e); uint public previousRounds; uint public totalRevenue; uint public totalSharesSold; uint public totalEarningsGenerated; uint public totalDividendsPaid; uint public totalJackpotsWon; uint public constant DEV_DIVISOR = 20; uint public constant RETURNS_FRACTION = 60 * 10**16; uint public constant REFERRAL_FRACTION = 3 * 10**16; uint public constant JACKPOT_SEED_FRACTION = WAD / 20; uint public constant JACKPOT_FRACTION = 15 * 10**16; uint public constant DAILY_JACKPOT_FRACTION = 6 * 10**16; uint public constant DIVIDENDS_FRACTION = 9 * 10**16; uint public startingSharePrice = 1 finney; uint public _priceIncreasePeriod = 1 hours; uint public _priceMultiplier = 101 * 10**16; uint public _secondaryPrice = 100 finney; uint public maxDailyJackpot = 5 ether; uint public constant SOFT_DEADLINE_DURATION = 1 days; uint public constant DAILY_JACKPOT_PERIOD = 1 days; uint public constant TIME_PER_SHARE = 5 minutes; uint public nextRoundTime; uint public jackpotSeed; uint public devBalance; uint public unclaimedReturns; uint public constant MULTIPLIER = RAY; mapping (address => uint) public lastDailyEntry; struct Investor { uint lastCumulativeReturnsPoints; uint shares; }",1,"subgraph cluster_5179_Mobius2Dv2 {
label=""Mobius2Dv2"";
""5179_startNewRound"" [label=""startNewRound""];
""5179_roundInfo"" [label=""roundInfo""];
""5179_getSeed"" [label=""getSeed""];
""5179_finalizeAndRestart"" [label=""finalizeAndRestart""];
""5179__drawDailyJackpot"" [label=""_drawDailyJackpot""];
""5179__disburseReturns"" [label=""_disburseReturns""];
""5179_setNextRoundTimestamp"" [label=""setNextRoundTimestamp""];
""5179__outstandingReturns"" [label=""_outstandingReturns""];
""5179_reinvestReturns"" [label=""reinvestReturns""];
""5179_init"" [label=""init""];
""5179__finalizeRound"" [label=""_finalizeRound""];
""5179_upgrade"" [label=""upgrade""];
""5179_finalizeLastRound"" [label=""finalizeLastRound""];
""5179_totalsInfo"" [label=""totalsInfo""];
""5179_setMaxDailyJackpot"" [label=""setMaxDailyJackpot""];
""5179_withdrawDevShare"" [label=""withdrawDevShare""];
""5179__issueShares"" [label=""_issueShares""];
""5179__startNewDailyRound"" [label=""_startNewDailyRound""];
""5179_setIPFSHash"" [label=""setIPFSHash""];
""5179_setNextRoundDelay"" [label=""setNextRoundDelay""];
""5179__dailyJackpot"" [label=""_dailyJackpot""];
""5179__onRandom"" [label=""_onRandom""];
""5179__triggerOraclize"" [label=""_triggerOraclize""];
""5179_updateMyReturns"" [label=""updateMyReturns""];
""5179__updateReturns"" [label=""_updateReturns""];
""5179_investorInfo"" [label=""investorInfo""];
""5179_estimateReturns"" [label=""estimateReturns""];
""5179_hasReturns"" [label=""hasReturns""];
""5179__purchase"" [label=""_purchase""];
""5179_setRoundParams"" [label=""setRoundParams""];
""5179_constructor"" [label=""constructor""];
""5179__onRandomFailed"" [label=""_onRandomFailed""];
""5179_buyShares"" [label=""buyShares""];
""5179_setSecondaryPrice"" [label=""setSecondaryPrice""];
""5179_initOraclize"" [label=""initOraclize""];
""5179__splitRevenue"" [label=""_splitRevenue""];
""5179_fallback"" [label=""fallback""];
""5179_withdrawReturns"" [label=""withdrawReturns""];
""5179_initOraclize"" -> ""5179_auth"";
""5179__purchase"" -> ""5179__issueShares"";
""5179_initOraclize"" -> ""5179_oraclize_setNetwork"";
""5179__disburseReturns"" -> ""5179_wdiv"";
""5179_estimateReturns"" -> ""5179_hasReturns"";
""5179__triggerOraclize"" -> ""5179__requestRandom"";
""5179__purchase"" -> ""5179_min"";
""5179__purchase"" -> ""5179_mul"";
""5179__purchase"" -> ""5179_add"";
""5179_withdrawDevShare"" -> ""5179_auth"";
""5179_totalsInfo"" -> ""5179_wmul"";
""5179__issueShares"" -> ""5179_add"";
""5179_reinvestReturns"" -> ""5179__updateReturns"";
""5179_reinvestReturns"" -> ""5179_reinvestReturns"";
""5179_withdrawReturns"" -> ""5179_hasReturns"";
""5179__purchase"" -> ""5179__dailyJackpot"";
""5179_startNewRound"" -> ""5179__purchase"";
""5179__dailyJackpot"" -> ""5179__requestRandom"";
""5179_finalizeLastRound"" -> ""5179__finalizeRound"";
""5179__purchase"" -> ""5179__splitRevenue"";
""5179__issueShares"" -> ""5179_wdiv"";
""5179_withdrawReturns"" -> ""5179_sub"";
""5179__finalizeRound"" -> ""5179_wmul"";
""5179__dailyJackpot"" -> ""5179_oraclize_setCustomGasPrice"";
""5179_startNewRound"" -> ""5179__startNewDailyRound"";
""5179__outstandingReturns"" -> ""5179_mul"";
""5179__splitRevenue"" -> ""5179_wmul"";
""5179_init"" -> ""5179_auth"";
""5179__drawDailyJackpot"" -> ""5179_min"";
""5179_upgrade"" -> ""5179_auth"";
""5179__splitRevenue"" -> ""5179_add"";
""5179_initOraclize"" -> ""5179_oraclize_setProof"";
""5179_setSecondaryPrice"" -> ""5179_auth"";
""5179_updateMyReturns"" -> ""5179__updateReturns"";
""5179_withdrawDevShare"" -> ""5179_sub"";
""5179__issueShares"" -> ""5179_mul"";
""5179__drawDailyJackpot"" -> ""5179__startNewDailyRound"";
""5179__triggerOraclize"" -> ""5179_auth"";
""5179__purchase"" -> ""5179__updateReturns"";
""5179_reinvestReturns"" -> ""5179_min"";
""5179__dailyJackpot"" -> ""5179_min"";
""5179__disburseReturns"" -> ""5179_mul"";
""5179_roundInfo"" -> ""5179_wmul"";
""5179__finalizeRound"" -> ""5179_add"";
""5179_setNextRoundTimestamp"" -> ""5179_auth"";
""5179__drawDailyJackpot"" -> ""5179_sub"";
""5179_finalizeAndRestart"" -> ""5179_finalizeLastRound"";
""5179__disburseReturns"" -> ""5179_add"";
""5179_withdrawReturns"" -> ""5179__updateReturns"";
""5179_investorInfo"" -> ""5179_estimateReturns"";
""5179__updateReturns"" -> ""5179_add"";
""5179_reinvestReturns"" -> ""5179__purchase"";
""5179_finalizeAndRestart"" -> ""5179_startNewRound"";
""5179_estimateReturns"" -> ""5179__outstandingReturns"";
""5179_reinvestReturns"" -> ""5179_sub"";
""5179_setMaxDailyJackpot"" -> ""5179_auth"";
""5179__drawDailyJackpot"" -> ""5179_add"";
""5179_setNextRoundDelay"" -> ""5179_auth"";
""5179__splitRevenue"" -> ""5179__disburseReturns"";
""5179__purchase"" -> ""5179_wmul"";
""5179_roundInfo"" -> ""5179_min"";
""5179__outstandingReturns"" -> ""5179_sub"";
""5179_buyShares"" -> ""5179__purchase"";
""5179_setIPFSHash"" -> ""5179_auth"";
""5179__updateReturns"" -> ""5179__outstandingReturns"";
""5179__onRandom"" -> ""5179__drawDailyJackpot"";
""5179_setRoundParams"" -> ""5179_auth"";
""5179_fallback"" -> ""5179_buyShares"";
}
"
0xec8f9a0de90487e7aa172fe5291fd19ad7163aa1.sol,BDSMAirdrop,contract BDSMAirdrop { token public sharesTokenAddress; uint256 public tokenFree = 0; address owner; uint256 public defValue = 5000000; modifier onlyOwner() { require(msg.sender == owner); _; },1,"subgraph cluster_126_BDSMAirdrop {
label=""BDSMAirdrop"";
""126_BDSMAirdrop"" [label=""BDSMAirdrop""];
""126_changeAirdropValue"" [label=""changeAirdropValue""];
""126_tokensBack"" [label=""tokensBack""];
""126_multiSend"" [label=""multiSend""];
""126_multiSend"" -> ""126_onlyOwner"";
""126_changeAirdropValue"" -> ""126_onlyOwner"";
""126_tokensBack"" -> ""126_onlyOwner"";
}
"
0x00fa44d91d7541d16dd18a48dd6a011de5e887df.sol,Sale,"contract Sale is Ownable { Calculator calculator; ERC20 token; address tokenSeller; uint256 public minimalTokens = 100000000000; event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount); function Sale(address tokenAddress, address calculatorAddress) { tokenSeller = msg.sender; token = ERC20(tokenAddress); setCalculatorAddress(calculatorAddress); }",1,"subgraph cluster_267_Sale {
label=""Sale"";
""267_setMinimalTokens"" [label=""setMinimalTokens""];
""267_buyTokens"" [label=""buyTokens""];
""267_setCalculatorAddress"" [label=""setCalculatorAddress""];
""267_fallback"" [label=""fallback""];
""267_withdraw"" [label=""withdraw""];
""267_setTokenSeller"" [label=""setTokenSeller""];
""267_Sale"" [label=""Sale""];
""267_withdraw"" -> ""267_onlyOwner"";
""267_setCalculatorAddress"" -> ""267_onlyOwner"";
""267_Sale"" -> ""267_setCalculatorAddress"";
""267_fallback"" -> ""267_buyTokens"";
""267_setMinimalTokens"" -> ""267_onlyOwner"";
""267_setTokenSeller"" -> ""267_onlyOwner"";
}
"
0xdbe13bf528ca21bb6c306539109c21a304191f72.sol,HISToken,contract HISToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 200000000 * (10**18); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; constructor () public { owner = msg.sender; },1,"subgraph cluster_756_HISToken {
label=""HISToken"";
""756_totalSupply"" [label=""totalSupply""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_constructor"" [label=""constructor""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_setOwner"" [label=""setOwner""];
""756_transfer"" [label=""transfer""];
""756_approve"" [label=""approve""];
""756_refundTokens"" [label=""refundTokens""];
""756_createTokens"" [label=""createTokens""];
""756_transferFrom"" [label=""transferFrom""];
""756_transferFrom"" -> ""756_transferFrom"";
""756_approve"" -> ""756_allowance"";
""756_createTokens"" -> ""756_safeAdd"";
""756_createTokens"" -> ""756_safeSub"";
""756_approve"" -> ""756_approve"";
""756_transfer"" -> ""756_transfer"";
}
"
0xb471c695dd5ea02035275d4b88077490c1e380ba.sol,ERC20x,"contract ERC20x is ERC20xVariables { function transfer(address _to, uint256 _value) public returns (bool success) { _transferBalance(msg.sender, _to, _value); emit Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_81_ERC20xVariables {
label=""ERC20xVariables"";
""81_balanceOf"" [label=""balanceOf""];
""81_allowance"" [label=""allowance""];
}
"
0xf1a47b728439730e9f83054d7c352575bf13f0b4.sol,RPTCrowdsale,"contract RPTCrowdsale { using SafeMath for uint256; RPTToken public token; uint256 public totalWeiRaised; uint32 public exchangeRate = 3000; uint256 public preDistriToAcquiantancesStartTime = 1510876801; uint256 public preDistriToAcquiantancesEndTime = 1511827199; uint256 public presaleStartTime = 1511827200; uint256 public presaleEndTime = 1513036799; uint256 public crowdfundStartTime = 1513036800; uint256 public crowdfundEndTime = 1515628799; bool internal isTokenDeployed = false; address public founderMultiSigAddress; address public remainingTokenHolder; address public beneficiaryAddress; enum State { Acquiantances, PreSale, CrowdFund, Closed }",1,"subgraph cluster_1069_RPTCrowdsale {
label=""RPTCrowdsale"";
""1069_getBonus"" [label=""getBonus""];
""1069_setFounderMultiSigAddress"" [label=""setFounderMultiSigAddress""];
""1069_RPTCrowdsale"" [label=""RPTCrowdsale""];
""1069_getState"" [label=""getState""];
""1069_fallback"" [label=""fallback""];
""1069_setTokenAddress"" [label=""setTokenAddress""];
""1069_fundTransfer"" [label=""fundTransfer""];
""1069_getNoOfTokens"" [label=""getNoOfTokens""];
""1069_getCurrentBonusRate"" [label=""getCurrentBonusRate""];
""1069_buyTokens"" [label=""buyTokens""];
""1069_endCrowdfund"" [label=""endCrowdfund""];
""1069_buyTokens"" -> ""1069_nonZeroEth"";
""1069_getCurrentBonusRate"" -> ""1069_getState"";
""1069_buyTokens"" -> ""1069_tokenIsDeployed"";
""1069_setFounderMultiSigAddress"" -> ""1069_nonZeroAddress"";
""1069_getNoOfTokens"" -> ""1069_getCurrentBonusRate"";
""1069_buyTokens"" -> ""1069_inBetween"";
""1069_getBonus"" -> ""1069_getCurrentBonusRate"";
""1069_setTokenAddress"" -> ""1069_nonZeroAddress"";
""1069_buyTokens"" -> ""1069_fundTransfer"";
""1069_buyTokens"" -> ""1069_nonZeroAddress"";
""1069_fallback"" -> ""1069_buyTokens"";
""1069_setFounderMultiSigAddress"" -> ""1069_onlyFounders"";
""1069_setTokenAddress"" -> ""1069_onlyFounders"";
""1069_buyTokens"" -> ""1069_onlyPublic"";
""1069_buyTokens"" -> ""1069_getNoOfTokens"";
""1069_endCrowdfund"" -> ""1069_onlyFounders"";
}
"
0xcdf35c3fe4ccfacb3b1bbedfe71ca3a5ff6f2db1.sol,AdvisorsTokensHolder,"contract AdvisorsTokensHolder is Ownable { using SafeMath for uint256; GenericCrowdsale crowdsale; MyDFSToken token; event ClaimedTokens(address token, uint256 amount); event TokensWithdrawn(address holder, uint256 amount); function AdvisorsTokensHolder(address _crowdsale, address _token, address _owner) public { crowdsale = GenericCrowdsale(_crowdsale); token = MyDFSToken(_token); owner = _owner; }",1,"subgraph cluster_1416_AdvisorsTokensHolder {
label=""AdvisorsTokensHolder"";
""1416_tokenFallback"" [label=""tokenFallback""];
""1416_getTime"" [label=""getTime""];
""1416_AdvisorsTokensHolder"" [label=""AdvisorsTokensHolder""];
""1416_collectTokens"" [label=""collectTokens""];
""1416_claimTokens"" [label=""claimTokens""];
""1416_claimTokens"" -> ""1416_onlyOwner"";
""1416_collectTokens"" -> ""1416_onlyOwner"";
""1416_collectTokens"" -> ""1416_getTime"";
}
"
0xedf19b437d1a67e18b15dd4a859dd52f9cfa012f.sol,ERC777TokenScheduledTimelock,"contract ERC777TokenScheduledTimelock is ERC820Implementer, ERC777TokensRecipient, Ownable { using SafeMath for uint256; ERC777Token public token; uint256 public totalVested; struct Timelock { uint256 till; uint256 amount; }",1,"subgraph cluster_1014_ERC777TokenScheduledTimelock {
label=""ERC777TokenScheduledTimelock"";
""1014_scheduleTimelock"" [label=""scheduleTimelock""];
""1014_release"" [label=""release""];
""1014_constructor"" [label=""constructor""];
""1014_getScheduledTimelockCount"" [label=""getScheduledTimelockCount""];
""1014_getNow"" [label=""getNow""];
""1014_tokensReceived"" [label=""tokensReceived""];
""1014_releaseBatch"" [label=""releaseBatch""];
""1014_release"" -> ""1014_getNow"";
""1014_constructor"" -> ""1014_interfaceAddr"";
""1014_scheduleTimelock"" -> ""1014_getNow"";
""1014_releaseBatch"" -> ""1014_release"";
""1014_constructor"" -> ""1014_setInterfaceImplementation"";
""1014_scheduleTimelock"" -> ""1014_onlyOwner"";
}
"
0xf27a6b9f1434de2a406ee0a9f94b4d5e89fb2681.sol,TOP,"contract TOP { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string memory tokenName, string memory tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_384_TOP {
label=""TOP"";
""384_transferFrom"" [label=""transferFrom""];
""384_burn"" [label=""burn""];
""384_constructor"" [label=""constructor""];
""384_approveAndCall"" [label=""approveAndCall""];
""384_approve"" [label=""approve""];
""384_transfer"" [label=""transfer""];
""384__transfer"" [label=""_transfer""];
""384_burnFrom"" [label=""burnFrom""];
""384_transferFrom"" -> ""384__transfer"";
""384_approveAndCall"" -> ""384_approve"";
""384_transfer"" -> ""384__transfer"";
}
"
0x1ee72092724d17c4667563bac428babfe11f6440.sol,IMAGEWORLD,"contract IMAGEWORLD { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function IMAGEWORLD( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_361_IMAGEWORLD {
label=""IMAGEWORLD"";
""361_transferFrom"" [label=""transferFrom""];
""361_burn"" [label=""burn""];
""361__transfer"" [label=""_transfer""];
""361_approve"" [label=""approve""];
""361_transfer"" [label=""transfer""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_IMAGEWORLD"" [label=""IMAGEWORLD""];
""361_burnFrom"" [label=""burnFrom""];
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
}
"
0xb60cfc056a3f201ce4f421655d5fcb535b8d7ca5.sol,SimpleBanners,contract SimpleBanners { struct BannerOwnerStruct { address owner; uint balance; uint bidAmountPerDay; bytes32 dataCID; uint timestampTaken; },0,"subgraph cluster_516_SimpleBanners {
label=""SimpleBanners"";
""516_updateBannerContent"" [label=""updateBannerContent""];
""516_rejectBanner"" [label=""rejectBanner""];
""516_constructor"" [label=""constructor""];
""516_getActiveBanners"" [label=""getActiveBanners""];
""516_updateOwner"" [label=""updateOwner""];
""516_takeBanner"" [label=""takeBanner""];
""516_getBannerDetails"" [label=""getBannerDetails""];
""516_getRemainingBalance"" [label=""getRemainingBalance""];
""516_emergencyWithdraw"" [label=""emergencyWithdraw""];
""516_calculateTotalCost"" [label=""calculateTotalCost""];
""516_addFunds"" [label=""addFunds""];
""516_getActiveBanners"" -> ""516_calculateTotalCost"";
""516_takeBanner"" -> ""516_calculateTotalCost"";
""516_addFunds"" -> ""516_calculateTotalCost"";
""516_rejectBanner"" -> ""516_calculateTotalCost"";
""516_getRemainingBalance"" -> ""516_calculateTotalCost"";
}
"
0xde871faadf05a39aa3a871525696ff4c87ecd550.sol,UniversalManager,contract UniversalManager is Ownable { using SafeMath for uint256; uint256 public constant ADDRESS_LIMIT = 300; uint256 public constant TRANSFERS_PER_TRANSACTION = 150; uint256 public airdrop; UniversalCoin public token; uint256 private currentPool = 0; uint256 private index = 0; uint256 private airdropIndex = 0; address[] private participants; address[] private airdropParticipants; function UniversalManager(address uniFoundation) public { token = new UniversalCoin(uniFoundation); airdrop = token.airdropReserve().div(3); },0,"subgraph cluster_924_UniversalManager {
label=""UniversalManager"";
""924_UniversalManager"" [label=""UniversalManager""];
""924_addAirdropParticipants"" [label=""addAirdropParticipants""];
""924_transferAidrop"" [label=""transferAidrop""];
""924_transfer"" [label=""transfer""];
""924_setCurrentWeekPool"" [label=""setCurrentWeekPool""];
""924_addParticipants"" [label=""addParticipants""];
""924_transferAidrop"" -> ""924_onlyOwner"";
""924_transfer"" -> ""924_onlyOwner"";
""924_addAirdropParticipants"" -> ""924_onlyOwner"";
""924_addParticipants"" -> ""924_onlyOwner"";
""924_setCurrentWeekPool"" -> ""924_onlyOwner"";
}
"
0xdb209c97e0de799bbf14e3377307780ddc26be4e.sol,DarkPay,"contract DarkPay is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 37 * 1 days; uint public round2 = now + 365 * 1 days; uint public round1 = now + 364 * 1 days; uint256 public totalSupply = 1000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 1000; uint256 public tokensPerEth = 16000000e8; uint public target0drop = 50000; uint public progress0drop = 0; address multisig = 0x024bf21EDAd749461Bf2E0830bC1F7b282bcea7C; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_1261_DarkPay {
label=""DarkPay"";
""1261_transfer"" [label=""transfer""];
""1261_fallback"" [label=""fallback""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_add"" [label=""add""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_burn"" [label=""burn""];
""1261_constructor"" [label=""constructor""];
""1261_distr"" [label=""distr""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_allowance"" [label=""allowance""];
""1261_getTokens"" [label=""getTokens""];
""1261_withdraw"" [label=""withdraw""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_approve"" [label=""approve""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_Distribute"" [label=""Distribute""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_distr"" -> ""1261_canDistr"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
}
"
0xf238f55ede5120915b36715b0fffe20ff57f8134.sol,BytesToTypes,"contract BytesToTypes { function bytesToAddress(uint _offst, bytes memory _input) internal pure returns (address _output) { assembly { _output := mload(add(_input, _offst)) }",0,"subgraph cluster_1010_BytesToTypes {
label=""BytesToTypes"";
""1010_bytesToInt72"" [label=""bytesToInt72""];
""1010_bytesToInt112"" [label=""bytesToInt112""];
""1010_bytesToInt192"" [label=""bytesToInt192""];
""1010_bytesToUint56"" [label=""bytesToUint56""];
""1010_bytesToInt96"" [label=""bytesToInt96""];
""1010_bytesToInt152"" [label=""bytesToInt152""];
""1010_bytesToUint232"" [label=""bytesToUint232""];
""1010_bytesToBytes32"" [label=""bytesToBytes32""];
""1010_bytesToInt48"" [label=""bytesToInt48""];
""1010_bytesToUint40"" [label=""bytesToUint40""];
""1010_bytesToInt56"" [label=""bytesToInt56""];
""1010_bytesToInt32"" [label=""bytesToInt32""];
""1010_bytesToUint120"" [label=""bytesToUint120""];
""1010_bytesToInt208"" [label=""bytesToInt208""];
""1010_bytesToUint144"" [label=""bytesToUint144""];
""1010_bytesToInt64"" [label=""bytesToInt64""];
""1010_getStringSize"" [label=""getStringSize""];
""1010_bytesToInt104"" [label=""bytesToInt104""];
""1010_bytesToUint208"" [label=""bytesToUint208""];
""1010_bytesToInt8"" [label=""bytesToInt8""];
""1010_bytesToUint112"" [label=""bytesToUint112""];
""1010_bytesToInt224"" [label=""bytesToInt224""];
""1010_bytesToUint240"" [label=""bytesToUint240""];
""1010_bytesToUint64"" [label=""bytesToUint64""];
""1010_bytesToUint24"" [label=""bytesToUint24""];
""1010_bytesToInt128"" [label=""bytesToInt128""];
""1010_bytesToUint128"" [label=""bytesToUint128""];
""1010_bytesToInt24"" [label=""bytesToInt24""];
""1010_bytesToUint136"" [label=""bytesToUint136""];
""1010_bytesToUint192"" [label=""bytesToUint192""];
""1010_bytesToUint88"" [label=""bytesToUint88""];
""1010_bytesToUint216"" [label=""bytesToUint216""];
""1010_bytesToInt168"" [label=""bytesToInt168""];
""1010_bytesToInt200"" [label=""bytesToInt200""];
""1010_bytesToUint224"" [label=""bytesToUint224""];
""1010_bytesToInt248"" [label=""bytesToInt248""];
""1010_bytesToString"" [label=""bytesToString""];
""1010_bytesToInt176"" [label=""bytesToInt176""];
""1010_bytesToInt216"" [label=""bytesToInt216""];
""1010_bytesToUint160"" [label=""bytesToUint160""];
""1010_bytesToInt40"" [label=""bytesToInt40""];
""1010_bytesToUint176"" [label=""bytesToUint176""];
""1010_bytesToInt184"" [label=""bytesToInt184""];
""1010_bytesToInt144"" [label=""bytesToInt144""];
""1010_bytesToInt88"" [label=""bytesToInt88""];
""1010_bytesToUint72"" [label=""bytesToUint72""];
""1010_bytesToBool"" [label=""bytesToBool""];
""1010_bytesToInt120"" [label=""bytesToInt120""];
""1010_bytesToInt160"" [label=""bytesToInt160""];
""1010_bytesToUint16"" [label=""bytesToUint16""];
""1010_bytesToUint152"" [label=""bytesToUint152""];
""1010_bytesToInt80"" [label=""bytesToInt80""];
""1010_bytesToUint184"" [label=""bytesToUint184""];
""1010_bytesToUint48"" [label=""bytesToUint48""];
""1010_bytesToUint96"" [label=""bytesToUint96""];
""1010_bytesToAddress"" [label=""bytesToAddress""];
""1010_bytesToInt240"" [label=""bytesToInt240""];
""1010_bytesToUint104"" [label=""bytesToUint104""];
""1010_bytesToUint80"" [label=""bytesToUint80""];
""1010_bytesToUint168"" [label=""bytesToUint168""];
""1010_bytesToUint200"" [label=""bytesToUint200""];
""1010_bytesToInt232"" [label=""bytesToInt232""];
""1010_bytesToUint248"" [label=""bytesToUint248""];
""1010_bytesToInt16"" [label=""bytesToInt16""];
""1010_bytesToUint32"" [label=""bytesToUint32""];
""1010_bytesToUint256"" [label=""bytesToUint256""];
""1010_bytesToInt136"" [label=""bytesToInt136""];
""1010_bytesToUint8"" [label=""bytesToUint8""];
""1010_bytesToInt256"" [label=""bytesToInt256""];
""1010_slice"" [label=""slice""];
}
"
0x5544138f866b9a76c7c020719a094c530bac72fe.sol,LuckGameToken,"contract LuckGameToken is SafeMath { address public owner; string public name; string public symbol; uint public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); bool lock = false; constructor( uint256 initialSupply, string tokenName, string tokenSymbol, uint decimalUnits ) public { owner = msg.sender; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; }",0,"subgraph cluster_618_LuckGameToken {
label=""LuckGameToken"";
""618_approve"" [label=""approve""];
""618_setLock"" [label=""setLock""];
""618_burnFrom"" [label=""burnFrom""];
""618_constructor"" [label=""constructor""];
""618_freezeAccount"" [label=""freezeAccount""];
""618_transferFrom"" [label=""transferFrom""];
""618_transferBatch"" [label=""transferBatch""];
""618_transfer"" [label=""transfer""];
""618__transfer"" [label=""_transfer""];
""618_transferOwnership"" [label=""transferOwnership""];
""618_mintToken"" [label=""mintToken""];
""618_burn"" [label=""burn""];
""618_setLock"" -> ""618_onlyOwner"";
""618_burnFrom"" -> ""618_onlyOwner"";
""618_transfer"" -> ""618__transfer"";
""618__transfer"" -> ""618_isLock"";
""618_freezeAccount"" -> ""618_onlyOwner"";
""618_transferFrom"" -> ""618__transfer"";
""618_burn"" -> ""618_onlyOwner"";
""618_transferBatch"" -> ""618__transfer"";
""618_mintToken"" -> ""618_onlyOwner"";
""618_transferOwnership"" -> ""618_onlyOwner"";
}
"
0x20807701c41f451a7661cb5ea00f3a12b66b818f.sol,Roi20,"contract Roi20 { using SafeMath for uint256; mapping(address => uint256) investments; mapping(address => uint256) joined; mapping(address => uint256) withdrawals; mapping(address => uint256) referrer; string public name = ; string public symbol = ; uint8 constant public decimals = 18; uint256 public step = 20; uint256 public minimum = 10 finney; uint256 public stakingRequirement = 2 ether; address public ownerWallet; address public owner; event Invest(address investor, uint256 amount); event Withdraw(address investor, uint256 amount); event Bounty(address hunter, uint256 amount); event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); constructor() public { owner = msg.sender; ownerWallet = msg.sender; }",0,"subgraph cluster_455_Roi20 {
label=""Roi20"";
""455_invest"" [label=""invest""];
""455_withdraw"" [label=""withdraw""];
""455_bounty"" [label=""bounty""];
""455_checkReferral"" [label=""checkReferral""];
""455_constructor"" [label=""constructor""];
""455_checkBalance"" [label=""checkBalance""];
""455_fallback"" [label=""fallback""];
""455_checkInvestments"" [label=""checkInvestments""];
""455_checkWithdrawals"" [label=""checkWithdrawals""];
""455_transferOwnership"" [label=""transferOwnership""];
""455_getBalance"" [label=""getBalance""];
""455_bounty"" -> ""455_checkReferral"";
""455_checkBalance"" -> ""455_getBalance"";
""455_invest"" -> ""455_withdraw"";
""455_withdraw"" -> ""455_getBalance"";
""455_fallback"" -> ""455_invest"";
""455_transferOwnership"" -> ""455_onlyOwner"";
}
"
0x1774e30a3daab7bbace3ce4c64ddc6a4f29a975a.sol,XHHM,"contract XHHM is ERC20Interface, Pausable { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function XHHM() public { symbol = ; name = ; decimals = 18; _totalSupply = 900000000 * 10**uint(decimals); balances[owner] = _totalSupply; emit Transfer(address(0), owner, _totalSupply); }",0,"subgraph cluster_725_XHHM {
label=""XHHM"";
""725_totalSupply"" [label=""totalSupply""];
""725_fallback"" [label=""fallback""];
""725_transfer"" [label=""transfer""];
""725_decreaseApproval"" [label=""decreaseApproval""];
""725_allowance"" [label=""allowance""];
""725_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""725_balanceOf"" [label=""balanceOf""];
""725_transferFrom"" [label=""transferFrom""];
""725_XHHM"" [label=""XHHM""];
""725_approve"" [label=""approve""];
""725_increaseApproval"" [label=""increaseApproval""];
""725_approveAndCall"" [label=""approveAndCall""];
""725_transferAnyERC20Token"" -> ""725_onlyOwner"";
""725_transfer"" -> ""725_whenNotPaused"";
""725_approve"" -> ""725_whenNotPaused"";
""725_decreaseApproval"" -> ""725_whenNotPaused"";
""725_increaseApproval"" -> ""725_whenNotPaused"";
""725_approveAndCall"" -> ""725_whenNotPaused"";
""725_transferFrom"" -> ""725_whenNotPaused"";
}
"
0xefa2e92ee2f5f8da00120a8ddec92bad2a5d9b96.sol,OnePieceGold,"contract OnePieceGold { string public symbol = ; string public name = ; uint8 public constant decimals = 18; uint256 _totalSupply = 0; address owner = 0; bool setupDone = false; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) allowed; function OnePieceGold(address adr) { owner = adr; }",0,"subgraph cluster_295_OnePieceGold {
label=""OnePieceGold"";
""295_allowance"" [label=""allowance""];
""295_OnePieceGold"" [label=""OnePieceGold""];
""295_SetupToken"" [label=""SetupToken""];
""295_transfer"" [label=""transfer""];
""295_approve"" [label=""approve""];
""295_totalSupply"" [label=""totalSupply""];
""295_transferFrom"" [label=""transferFrom""];
""295_balanceOf"" [label=""balanceOf""];
}
"
0x5b7093fe2491dfb058c94bcd62a1cd4d822f884c.sol,BasicToken,"contract BasicToken is ERC20Basic, Pausable { using SafeMath for uint256; mapping(address => uint256) balances; address[] allParticipants; mapping (address => bool) isParticipated; function transfer(address _to, uint256 _value) public returns (bool) { require(_to != address(0)); require(_value <= balances[msg.sender]); balances[msg.sender] = balances[msg.sender].sub(_value); balances[_to] = balances[_to].add(_value); if(!isParticipated[_to]){ allParticipants.push(_to); isParticipated[_to] = true; }",0,"subgraph cluster_397_BasicToken {
label=""BasicToken"";
""397_balanceOf"" [label=""balanceOf""];
""397_transfer"" [label=""transfer""];
""397_getCountPartipants"" [label=""getCountPartipants""];
""397_getParticipantIndexAddress"" [label=""getParticipantIndexAddress""];
}
"
0xf37c4a962e70d813a4d9825942141cd9bc5169fd.sol,ClaimableCrowdsale,"contract ClaimableCrowdsale is Pausable { using SafeMath for uint256; address beneficiaryAddress; address public bankAddress; HoQuToken public token; uint256 public maxTokensAmount; uint256 public issuedTokensAmount = 0; uint256 public minBuyableAmount; uint256 public tokenRate; uint256 endDate; bool public isFinished = false; mapping(address => uint256) public tokens; mapping(address => bool) public approved; mapping(uint32 => address) internal tokenReceivers; uint32 internal receiversCount; event TokenBought(address indexed _buyer, uint256 _tokens, uint256 _amount); event TokenAdded(address indexed _receiver, uint256 _tokens, uint256 _equivalentAmount); event TokenToppedUp(address indexed _receiver, uint256 _tokens, uint256 _equivalentAmount); event TokenSubtracted(address indexed _receiver, uint256 _tokens, uint256 _equivalentAmount); event TokenSent(address indexed _receiver, uint256 _tokens); modifier inProgress() { require (!isFinished); require (issuedTokensAmount < maxTokensAmount); require (now <= endDate); _; }",0,"subgraph cluster_1169_ClaimableCrowdsale {
label=""ClaimableCrowdsale"";
""1169_finish"" [label=""finish""];
""1169_topUp"" [label=""topUp""];
""1169_sub"" [label=""sub""];
""1169_getReceiversCount"" [label=""getReceiversCount""];
""1169_buy"" [label=""buy""];
""1169_claimOne"" [label=""claimOne""];
""1169_fallback"" [label=""fallback""];
""1169_setTokenRate"" [label=""setTokenRate""];
""1169_ClaimableCrowdsale"" [label=""ClaimableCrowdsale""];
""1169_storeTokens"" [label=""storeTokens""];
""1169_claimFor"" [label=""claimFor""];
""1169_approve"" [label=""approve""];
""1169_claim"" [label=""claim""];
""1169_claimAll"" [label=""claimAll""];
""1169_add"" [label=""add""];
""1169_getReceiver"" [label=""getReceiver""];
""1169_add"" -> ""1169_onlyOwner"";
""1169_claim"" -> ""1169_whenNotPaused"";
""1169_setTokenRate"" -> ""1169_onlyOwner"";
""1169_buy"" -> ""1169_inProgress"";
""1169_claimOne"" -> ""1169_whenNotPaused"";
""1169_claimAll"" -> ""1169_whenNotPaused"";
""1169_claimOne"" -> ""1169_claimFor"";
""1169_getReceiver"" -> ""1169_onlyOwner"";
""1169_fallback"" -> ""1169_buy"";
""1169_claimAll"" -> ""1169_claimFor"";
""1169_claimFor"" -> ""1169_whenNotPaused"";
""1169_getReceiversCount"" -> ""1169_onlyOwner"";
""1169_buy"" -> ""1169_storeTokens"";
""1169_storeTokens"" -> ""1169_whenNotPaused"";
""1169_add"" -> ""1169_whenNotPaused"";
""1169_claimOne"" -> ""1169_onlyOwner"";
""1169_approve"" -> ""1169_onlyOwner"";
""1169_finish"" -> ""1169_onlyOwner"";
""1169_sub"" -> ""1169_onlyOwner"";
""1169_add"" -> ""1169_inProgress"";
""1169_topUp"" -> ""1169_storeTokens"";
""1169_claimAll"" -> ""1169_onlyOwner"";
""1169_buy"" -> ""1169_whenNotPaused"";
""1169_claim"" -> ""1169_claimFor"";
""1169_topUp"" -> ""1169_whenNotPaused"";
""1169_approve"" -> ""1169_whenNotPaused"";
""1169_topUp"" -> ""1169_onlyOwner"";
""1169_add"" -> ""1169_storeTokens"";
""1169_sub"" -> ""1169_whenNotPaused"";
}
"
0x0ce95ef378059f38c5fa21e6d81a5895c0d9911b.sol,Game,contract Game { using GlobalTypes for GlobalTypes.Global; using MarketTypes for MarketTypes.MarketListing; using MissionParametersTypes for MissionParametersTypes.MissionParameters; using GameCommon for GameCommon.LaunchRocketStackFrame; address public m_Owner; AbstractDatabase public m_Database; AbstractGameHidden public m_GameHidden; bool public m_Paused; uint256 constant GlobalCategory = 0; uint256 constant RocketCategory = 1; uint256 constant OwnershipCategory = 2; uint256 constant InventoryCategory = 3; uint256 constant MarketCategory = 4; uint256 constant ProfitFundsCategory = 5; uint256 constant CompetitionFundsCategory = 6; uint256 constant MissionParametersCategory = 7; uint256 constant CompetitionScoresCategory = 8; uint256 constant WithdrawalFundsCategory = 9; uint256 constant ReferralCategory = 10; uint256 constant RocketStockCategory = 11; uint256 constant RocketStockInitializedCategory = 12; address constant NullAddress = 0; uint256 constant MaxCompetitionScores = 10; mapping(uint32 => RocketTypes.StockRocket) m_InitialRockets; modifier OnlyOwner() { require(msg.sender == m_Owner); _; },0,"subgraph cluster_4077_GameCommon {
label=""GameCommon"";
""4077_DeserializeRaw1"" [label=""DeserializeRaw1""];
""4077_DeserializeRaw2"" [label=""DeserializeRaw2""];
""4077_SerializeRaw3"" [label=""SerializeRaw3""];
""4077_DeserializeLaunchRocketStackFrame"" [label=""DeserializeLaunchRocketStackFrame""];
""4077_SerializeRaw1"" [label=""SerializeRaw1""];
""4077_SerializeRaw0"" [label=""SerializeRaw0""];
""4077_SerializeLaunchRocketStackFrame"" [label=""SerializeLaunchRocketStackFrame""];
""4077_DeserializeRaw0"" [label=""DeserializeRaw0""];
""4077_SerializeRaw2"" [label=""SerializeRaw2""];
""4077_DeserializeRaw3"" [label=""DeserializeRaw3""];
""4077_DeserializeLaunchRocketStackFrame"" -> ""4077_DeserializeRaw0"";
""4077_SerializeLaunchRocketStackFrame"" -> ""4077_SerializeRaw0"";
""4077_SerializeLaunchRocketStackFrame"" -> ""4077_SerializeRaw3"";
""4077_DeserializeLaunchRocketStackFrame"" -> ""4077_DeserializeRaw1"";
""4077_DeserializeLaunchRocketStackFrame"" -> ""4077_DeserializeRaw3"";
""4077_DeserializeLaunchRocketStackFrame"" -> ""4077_DeserializeRaw2"";
""4077_SerializeLaunchRocketStackFrame"" -> ""4077_SerializeRaw2"";
""4077_SerializeLaunchRocketStackFrame"" -> ""4077_SerializeRaw1"";
}
"
0xe1f2a706155f13b50b5ff79c8ed2bd5e5c4ed817.sol,VexaExchangeToken,"contract VexaExchangeToken is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 10000000000e8; uint256 public totalDistributed = 0; uint256 public tokensPerEth = 20000000e8; uint256 public constant minContribution = 1 ether / 100; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_930_VexaExchangeToken {
label=""VexaExchangeToken"";
""930_approve"" [label=""approve""];
""930_updateTokensPerEth"" [label=""updateTokensPerEth""];
""930_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""930_burn"" [label=""burn""];
""930_transferFrom"" [label=""transferFrom""];
""930_distr"" [label=""distr""];
""930_allowance"" [label=""allowance""];
""930_fallback"" [label=""fallback""];
""930_transfer"" [label=""transfer""];
""930_withdraw"" [label=""withdraw""];
""930_finishDistribution"" [label=""finishDistribution""];
""930_getTokens"" [label=""getTokens""];
""930_doAirdrop"" [label=""doAirdrop""];
""930_withdrawAltcoinTokens"" [label=""withdrawAltcoinTokens""];
""930_transferOwnership"" [label=""transferOwnership""];
""930_balanceOf"" [label=""balanceOf""];
""930_getTokenBalance"" [label=""getTokenBalance""];
""930_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""930_adminClaimAirdrop"" -> ""930_doAirdrop"";
""930_distr"" -> ""930_canDistr"";
""930_adminClaimAirdropMultiple"" -> ""930_onlyOwner"";
""930_updateTokensPerEth"" -> ""930_onlyOwner"";
""930_transfer"" -> ""930_onlyPayloadSize"";
""930_burn"" -> ""930_onlyOwner"";
""930_getTokens"" -> ""930_distr"";
""930_adminClaimAirdrop"" -> ""930_onlyOwner"";
""930_transferOwnership"" -> ""930_onlyOwner"";
""930_getTokens"" -> ""930_canDistr"";
""930_finishDistribution"" -> ""930_onlyOwner"";
""930_transferFrom"" -> ""930_onlyPayloadSize"";
""930_withdraw"" -> ""930_onlyOwner"";
""930_withdrawAltcoinTokens"" -> ""930_onlyOwner"";
""930_finishDistribution"" -> ""930_canDistr"";
""930_adminClaimAirdropMultiple"" -> ""930_doAirdrop"";
""930_fallback"" -> ""930_getTokens"";
}
"
0x519c03604242bc100655acb62a9d44261275257f.sol,TriggmineCrowdsale,"contract TriggmineCrowdsale is Ownable { using SafeMath for uint256; uint256 public constant SALES_START = 1529938800; uint256 public constant SALES_END = 1538319600; address public constant ASSET_MANAGER_WALLET = 0x7E83f1F82Ab7dDE49F620D2546BfFB0539058414; address public constant ESCROW_WALLET = 0x2e9F22E2D559d9a5ce234AB722bc6e818FA5D079; address public constant TOKEN_ADDRESS = 0x98F319D4dc58315796Ec8F06274fe2d4a5A69721; uint256 public constant TOKEN_CENTS = 1000000000000000000; uint256 public constant TOKEN_PRICE = 0.0001 ether; uint256 public constant USD_HARD_CAP = 15000000; uint256 public constant MIN_INVESTMENT = 25000; uint public constant BONUS_50_100 = 10; uint public constant BONUS_100_250 = 15; uint public constant BONUS_250_500 = 20; uint public constant BONUS_500 = 25; mapping(address => uint256) public investments; uint256 public investedUSD; uint256 public investedETH; uint256 public investedBTC; uint256 public tokensPurchased; uint256 public rate_ETHUSD; uint256 public rate_BTCUSD; address public whitelistSupplier; mapping(address => bool) public whitelist; event ContributedETH(address indexed receiver, uint contribution, uint contributionUSD, uint reward); event ContributedBTC(address indexed receiver, uint contribution, uint contributionUSD, uint reward); event WhitelistUpdated(address indexed participant, bool isWhitelisted); constructor() public { whitelistSupplier = msg.sender; owner = ASSET_MANAGER_WALLET; }",0,"subgraph cluster_1513_TriggmineCrowdsale {
label=""TriggmineCrowdsale"";
""1513_getTokenOwner"" [label=""getTokenOwner""];
""1513_setRate_ETHUSD"" [label=""setRate_ETHUSD""];
""1513_setRate_BTCUSD"" [label=""setRate_BTCUSD""];
""1513_getBonusPercents"" [label=""getBonusPercents""];
""1513_contribute"" [label=""contribute""];
""1513_removeFromWhitelist"" [label=""removeFromWhitelist""];
""1513_fallback"" [label=""fallback""];
""1513_restoreTokenOwnership"" [label=""restoreTokenOwnership""];
""1513_getTotalTokens"" [label=""getTotalTokens""];
""1513_contributeETH"" [label=""contributeETH""];
""1513_constructor"" [label=""constructor""];
""1513_addToWhitelist"" [label=""addToWhitelist""];
""1513_contributeBTC"" [label=""contributeBTC""];
""1513_addToWhitelist"" -> ""1513_onlyWhitelistSupplier"";
""1513_removeFromWhitelist"" -> ""1513_onlyWhitelistSupplier"";
""1513_setRate_BTCUSD"" -> ""1513_onlyWhitelistSupplier"";
""1513_restoreTokenOwnership"" -> ""1513_onlyOwner"";
""1513_setRate_ETHUSD"" -> ""1513_onlyWhitelistSupplier"";
""1513_contributeBTC"" -> ""1513_getTotalTokens"";
""1513_contributeETH"" -> ""1513_getBonusPercents"";
""1513_contributeETH"" -> ""1513_getTotalTokens"";
""1513_contributeBTC"" -> ""1513_getBonusPercents"";
""1513_contribute"" -> ""1513_contributeETH"";
""1513_contributeBTC"" -> ""1513_onlyWhitelistSupplier"";
""1513_fallback"" -> ""1513_contribute"";
}
"
0xf528d0e1e11edee40ca3724bd9fd923bb0235cc3.sol,TGCToken,"contract TGCToken is StandardToken { string public constant NAME = ; string public constant SYMBOL = ; uint public constant DECIMALS = 18; uint8[10] public bonusPercentages = [ 20, 10, 0 ]; uint public constant NUM_OF_PHASE = 3; uint16 public constant BLOCKS_PER_PHASE = 29000; address public target; uint public firstblock = 0; bool public unsoldTokenIssued = false; uint256 public constant GOAL = 3000 ether; uint256 public constant HARD_CAP = 4500 ether; uint256 public constant BASE_RATE = 10000; uint public totalEthReceived = 0; uint public issueIndex = 0; event SaleStarted(); event SaleEnded(); event InvalidCaller(address caller); event InvalidState(bytes msg); event Issue(uint issueIndex, address addr, uint ethAmount, uint tokenAmount); event SaleSucceeded(); event SaleFailed(); modifier onlyOwner { if (target == msg.sender) { _; }",0,"subgraph cluster_878_TGCToken {
label=""TGCToken"";
""878_hardCapReached"" [label=""hardCapReached""];
""878_issueToken"" [label=""issueToken""];
""878_computeTokenAmount"" [label=""computeTokenAmount""];
""878_start"" [label=""start""];
""878_price"" [label=""price""];
""878_TGCToken"" [label=""TGCToken""];
""878_saleEnded"" [label=""saleEnded""];
""878_close"" [label=""close""];
""878_saleStarted"" [label=""saleStarted""];
""878_fallback"" [label=""fallback""];
""878_saleDue"" [label=""saleDue""];
""878_saleEnded"" -> ""878_saleDue"";
""878_start"" -> ""878_onlyOwner"";
""878_issueToken"" -> ""878_inProgress"";
""878_price"" -> ""878_computeTokenAmount"";
""878_saleEnded"" -> ""878_hardCapReached"";
""878_issueToken"" -> ""878_computeTokenAmount"";
""878_start"" -> ""878_beforeStart"";
""878_close"" -> ""878_afterEnd"";
""878_fallback"" -> ""878_issueToken"";
""878_close"" -> ""878_onlyOwner"";
}
"
0x6b7290527ab68d72158cecaef27b0db6238b6fc5.sol,ConunToken,"contract ConunToken is EIP20Interface { uint256 constant private MAX_UINT256 = 2**256 - 1; mapping (address => uint256) public balances; mapping (address => mapping (address => uint256)) public allowed; string public name; uint8 public decimals; string public symbol; function ConunToken( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol ) public { balances[msg.sender] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",0,"subgraph cluster_290_ConunToken {
label=""ConunToken"";
""290_balanceOf"" [label=""balanceOf""];
""290_ConunToken"" [label=""ConunToken""];
""290_transfer"" [label=""transfer""];
""290_transferFrom"" [label=""transferFrom""];
""290_allowance"" [label=""allowance""];
""290_approve"" [label=""approve""];
}
"
0x514bc174df04a4b04ae2be81ee8c788c3796b06b.sol,DecoBank,contract DecoBank { using SafeMath for uint256; Deco public token; address private crowdsaleWallet; address private decoReserveWallet; uint256 public weiRaised; uint256 public constant totalSupplyUnits = 6*10**26; uint256 private constant MINIMUM_WEI = 10**16; uint256 private constant BASE = 10**18; uint256 public originalRate = 3000; uint256 public crowdsaleDistributedUnits = 0; uint256 public issuerDistributedUnits = 0; uint256 public presaleStartTime; uint256 public presaleEndTime; uint256 private presaleDiscount = 50; uint256 private presalePercentage = 5; uint256 public issuerReservedMaximumPercentage = 5; uint256 public saleStartTime; uint256 public saleEndTime; uint256 private saleDiscount = 25; uint256 public rewardDistributionStart; uint256 public rewardDistributedUnits = 0; mapping(address => Contributor) private contributors; struct Contributor { uint256 contributedWei; uint256 decoUnits; uint256 rewardDistributedDecoUnits; },0,"subgraph cluster_1967_DecoBank {
label=""DecoBank"";
""1967_currentSaleStage"" [label=""currentSaleStage""];
""1967_requestReward"" [label=""requestReward""];
""1967_distibutedDecoUnits"" [label=""distibutedDecoUnits""];
""1967_fallback"" [label=""fallback""];
""1967_shouldEndPresale"" [label=""shouldEndPresale""];
""1967_contributedWei"" [label=""contributedWei""];
""1967_currentRewardReleasePercentageRatePerYear"" [label=""currentRewardReleasePercentageRatePerYear""];
""1967_payableReward"" [label=""payableReward""];
""1967_currentRate"" [label=""currentRate""];
""1967_unitsLimitForCurrentSaleStage"" [label=""unitsLimitForCurrentSaleStage""];
""1967_buyTokens"" [label=""buyTokens""];
""1967_DecoBank"" [label=""DecoBank""];
""1967_circulatingSupply"" [label=""circulatingSupply""];
""1967_sendNotDistributedUnits"" [label=""sendNotDistributedUnits""];
""1967_rewardDistributionEnded"" [label=""rewardDistributionEnded""];
""1967_currentMaximumSalePercentage"" [label=""currentMaximumSalePercentage""];
""1967_totalUnitsLeft"" [label=""totalUnitsLeft""];
""1967_rewardDistribution"" [label=""rewardDistribution""];
""1967_presaleActive"" [label=""presaleActive""];
""1967_maximumIssuerReservedUnits"" [label=""maximumIssuerReservedUnits""];
""1967_rewardDays"" [label=""rewardDays""];
""1967_contributorTotalReward"" [label=""contributorTotalReward""];
""1967_isValidPurchase"" [label=""isValidPurchase""];
""1967_saleStage"" [label=""saleStage""];
""1967_maximumSaleLimitUnits"" [label=""maximumSaleLimitUnits""];
""1967_saleActive"" [label=""saleActive""];
""1967_rewardDaysLeft"" [label=""rewardDaysLeft""];
""1967_rewardDistributionStarted"" [label=""rewardDistributionStarted""];
""1967_unitsForIssuerReserve"" [label=""unitsForIssuerReserve""];
""1967_presaleLimitUnits"" [label=""presaleLimitUnits""];
""1967_sendReward"" [label=""sendReward""];
""1967_rewardPayableDays"" [label=""rewardPayableDays""];
""1967_saleLimitReachedForCurrentStage"" [label=""saleLimitReachedForCurrentStage""];
""1967_contributorDistributedReward"" [label=""contributorDistributedReward""];
""1967_rewardDistributionEnd"" [label=""rewardDistributionEnd""];
""1967_changeRemainingDecoRewardOwner"" [label=""changeRemainingDecoRewardOwner""];
""1967_currentDiscountPercentage"" [label=""currentDiscountPercentage""];
""1967_rewardUnitsRatePerYear"" [label=""rewardUnitsRatePerYear""];
""1967_incrementContributorsCount"" [label=""incrementContributorsCount""];
""1967_currentRewardReleasePercentageRatePerYear"" -> ""1967_rewardUnitsRatePerYear"";
""1967_unitsLimitForCurrentSaleStage"" -> ""1967_currentMaximumSalePercentage"";
""1967_payableReward"" -> ""1967_afterSale"";
""1967_payableReward"" -> ""1967_totalUnitsLeft"";
""1967_rewardDistribution"" -> ""1967_sendReward"";
""1967_presaleActive"" -> ""1967_shouldEndPresale"";
""1967_currentMaximumSalePercentage"" -> ""1967_saleStage"";
""1967_currentSaleStage"" -> ""1967_saleStage"";
""1967_saleLimitReachedForCurrentStage"" -> ""1967_unitsLimitForCurrentSaleStage"";
""1967_buyTokens"" -> ""1967_unitsForIssuerReserve"";
""1967_payableReward"" -> ""1967_rewardDays"";
""1967_fallback"" -> ""1967_validPurchase"";
""1967_requestReward"" -> ""1967_sendNotDistributedUnits"";
""1967_currentRewardReleasePercentageRatePerYear"" -> ""1967_circulatingSupply"";
""1967_buyTokens"" -> ""1967_currentRate"";
""1967_unitsForIssuerReserve"" -> ""1967_maximumIssuerReservedUnits"";
""1967_sendNotDistributedUnits"" -> ""1967_sendReward"";
""1967_payableReward"" -> ""1967_contributorTotalReward"";
""1967_changeRemainingDecoRewardOwner"" -> ""1967_afterSale"";
""1967_fallback"" -> ""1967_buyTokens"";
""1967_rewardDaysLeft"" -> ""1967_rewardDays"";
""1967_rewardPayableDays"" -> ""1967_rewardDays"";
""1967_buyTokens"" -> ""1967_incrementContributorsCount"";
""1967_currentDiscountPercentage"" -> ""1967_presaleActive"";
""1967_payableReward"" -> ""1967_rewardPayableDays"";
""1967_rewardDistributionEnded"" -> ""1967_rewardDistributionEnd"";
""1967_isValidPurchase"" -> ""1967_saleActive"";
""1967_requestReward"" -> ""1967_afterSale"";
""1967_rewardPayableDays"" -> ""1967_rewardDaysLeft"";
""1967_rewardDistribution"" -> ""1967_payableReward"";
""1967_rewardDistributionEnd"" -> ""1967_rewardDays"";
""1967_isValidPurchase"" -> ""1967_presaleActive"";
""1967_currentRewardReleasePercentageRatePerYear"" -> ""1967_afterSale"";
""1967_currentRate"" -> ""1967_currentDiscountPercentage"";
""1967_requestReward"" -> ""1967_rewardDistribution"";
""1967_saleActive"" -> ""1967_saleLimitReachedForCurrentStage"";
""1967_rewardDays"" -> ""1967_rewardUnitsRatePerYear"";
""1967_requestReward"" -> ""1967_rewardDistributionEnded"";
""1967_currentDiscountPercentage"" -> ""1967_saleStage"";
""1967_rewardDaysLeft"" -> ""1967_rewardDistributionEnd"";
""1967_shouldEndPresale"" -> ""1967_presaleLimitUnits"";
""1967_payableReward"" -> ""1967_rewardDaysLeft"";
}
"
0x51bb7917efcad03ec8b1d37251a06cd56b0c4a72.sol,DSRCoin,"contract DSRCoin is SafeMath{ string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; address public owner; mapping (address => uint256) public balanceOf; mapping (address => uint256) public freezeOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event Freeze(address indexed from, uint256 value); event Unfreeze(address indexed from, uint256 value); function DSRCoin( uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol ) { balanceOf[msg.sender] = initialSupply; totalSupply = initialSupply; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; owner = msg.sender; }",0,"subgraph cluster_642_DSRCoin {
label=""DSRCoin"";
""642_freeze"" [label=""freeze""];
""642_approve"" [label=""approve""];
""642_DSRCoin"" [label=""DSRCoin""];
""642_fallback"" [label=""fallback""];
""642_transfer"" [label=""transfer""];
""642_withdrawEther"" [label=""withdrawEther""];
""642_burn"" [label=""burn""];
""642_unfreeze"" [label=""unfreeze""];
""642_transferFrom"" [label=""transferFrom""];
""642_transferFrom"" -> ""642_safeSub"";
""642_transfer"" -> ""642_safeSub"";
""642_burn"" -> ""642_safeSub"";
""642_freeze"" -> ""642_safeAdd"";
""642_transfer"" -> ""642_safeAdd"";
""642_unfreeze"" -> ""642_safeAdd"";
""642_unfreeze"" -> ""642_safeSub"";
""642_transferFrom"" -> ""642_safeAdd"";
""642_freeze"" -> ""642_safeSub"";
}
"
0x711e3e5ec8fe04361f8db67ed42b51522ee3d0a7.sol,DLC_TOKEN,"contract DLC_TOKEN is IERC20 { using SafeMath for uint256; address private deployer; string public name = ; string public symbol = ; uint8 public constant decimals = 8; uint256 public constant decimalFactor = 10 ** uint256(decimals); uint256 public constant totalSupply = 100000000 * decimalFactor; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) internal allowed; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); constructor() public { balances[msg.sender] = totalSupply; deployer = msg.sender; emit Transfer(address(0), msg.sender, totalSupply); }",0,"subgraph cluster_556_DLC_TOKEN {
label=""DLC_TOKEN"";
""556_constructor"" [label=""constructor""];
""556_increaseApproval"" [label=""increaseApproval""];
""556_approve"" [label=""approve""];
""556_transferFrom"" [label=""transferFrom""];
""556_decreaseApproval"" [label=""decreaseApproval""];
""556_balanceOf"" [label=""balanceOf""];
""556_allowance"" [label=""allowance""];
""556_transfer"" [label=""transfer""];
}
"
0xcd95fbb2d73bab7f04893253b13e66f28841ab24.sol,GamblicaCoin,"contract GamblicaCoin is ERC20, owned { string public constant symbol = ; string public constant name = ; uint8 public constant decimals = 18; uint256 _totalSupply = 0; event Burned(address backer, uint _value); mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) allowed; address public crowdsale; function changeCrowdsale(address newCrowdsale) public onlyOwner { crowdsale = newCrowdsale; }",0,"subgraph cluster_502_GamblicaCoin {
label=""GamblicaCoin"";
""502_allowance"" [label=""allowance""];
""502_transfer"" [label=""transfer""];
""502_send"" [label=""send""];
""502_totalSupply"" [label=""totalSupply""];
""502_changeCrowdsale"" [label=""changeCrowdsale""];
""502_burn"" [label=""burn""];
""502_safeSub"" [label=""safeSub""];
""502_balanceOf"" [label=""balanceOf""];
""502_approve"" [label=""approve""];
""502_safeAdd"" [label=""safeAdd""];
""502_transferFrom"" [label=""transferFrom""];
""502_burn"" -> ""502_safeSub"";
""502_burn"" -> ""502_onlyOwnerOrCrowdsale"";
""502_send"" -> ""502_safeAdd"";
""502_changeCrowdsale"" -> ""502_onlyOwner"";
""502_send"" -> ""502_onlyOwnerOrCrowdsale"";
}
"
0x0e1bebe6b75595d3c7fb99550757e310bc2edf2a.sol,LLV_v30_12,contract LLV_v30_12 { address owner ; function LLV_v30_12 () public { owner = msg.sender; },0,"subgraph cluster_566_LLV_v30_12 {
label=""LLV_v30_12"";
""566_Eligibility_Group_1"" [label=""Eligibility_Group_1""];
""566_retrait_3"" [label=""retrait_3""];
""566_retrait_4"" [label=""retrait_4""];
""566_setDepositary_function_control"" [label=""setDepositary_function_control""];
""566_LLV_v30_12"" [label=""LLV_v30_12""];
""566_getID"" [label=""getID""];
""566_getID_control"" [label=""getID_control""];
""566_getDepositary_function"" [label=""getDepositary_function""];
""566_retrait_1"" [label=""retrait_1""];
""566_Eligibility_Group_2"" [label=""Eligibility_Group_2""];
""566_setDepositary_function"" [label=""setDepositary_function""];
""566_getDepositary_function_control"" [label=""getDepositary_function_control""];
""566_Eligibility_Group_4"" [label=""Eligibility_Group_4""];
""566_Eligibility_Group_5"" [label=""Eligibility_Group_5""];
""566_setID_control"" [label=""setID_control""];
""566_retrait_2"" [label=""retrait_2""];
""566_setID"" [label=""setID""];
""566_retrait_5"" [label=""retrait_5""];
""566_setCmd_control"" [label=""setCmd_control""];
""566_getCmd_control"" [label=""getCmd_control""];
""566_getCmd"" [label=""getCmd""];
""566_Eligibility_Group_3"" [label=""Eligibility_Group_3""];
""566_setCmd"" [label=""setCmd""];
""566_Eligibility_Group_4"" -> ""566_onlyOwner"";
""566_Eligibility_Group_2"" -> ""566_onlyOwner"";
""566_setDepositary_function"" -> ""566_onlyOwner"";
""566_setID"" -> ""566_onlyOwner"";
""566_setCmd"" -> ""566_onlyOwner"";
""566_Eligibility_Group_3"" -> ""566_onlyOwner"";
""566_setDepositary_function_control"" -> ""566_onlyOwner"";
""566_Eligibility_Group_5"" -> ""566_onlyOwner"";
""566_setID_control"" -> ""566_onlyOwner"";
""566_setCmd_control"" -> ""566_onlyOwner"";
""566_Eligibility_Group_1"" -> ""566_onlyOwner"";
}
"
0x1dd9dd6a7be0da126abc3987bd904fc33d36e300.sol,ETHDenverStaking,"contract ETHDenverStaking is Ownable, Pausable { using ECRecovery for bytes32; event UserStake(address userUportAddress, address userMetamaskAddress, uint amountStaked); event UserRecoupStake(address userUportAddress, address userMetamaskAddress, uint amountStaked); event debugBytes32(bytes32 _msg); event debugBytes(bytes _msg); event debugString(string _msg); event debugAddress(address _address); address public grantSigner; uint public finishDate; mapping (address => address) public userStakedAddress; mapping (address => uint256) public stakedAmount; constructor(address _grantSigner, uint _finishDate) public { grantSigner = _grantSigner; finishDate = _finishDate; }",0,"subgraph cluster_505_ETHDenverStaking {
label=""ETHDenverStaking"";
""505_recoupStake"" [label=""recoupStake""];
""505_setGrantSigner"" [label=""setGrantSigner""];
""505_stake"" [label=""stake""];
""505_constructor"" [label=""constructor""];
""505_sweepStakes"" [label=""sweepStakes""];
""505_stake"" -> ""505_whenNotPaused"";
""505_recoupStake"" -> ""505_whenNotPaused"";
""505_sweepStakes"" -> ""505_onlyOwner"";
""505_setGrantSigner"" -> ""505_onlyOwner"";
}
"
0x03b0be689f36f383568d0a2486834cc6ceddda50.sol,EtherPyramid_PowH_Revived,"contract EtherPyramid_PowH_Revived { uint256 constant PRECISION = 0x10000000000000000; int constant CRRN = 1; int constant CRRD = 2; int constant LOGC = -0x296ABF784A358468C; string constant public name = ; string constant public symbol = ; uint8 constant public decimals = 18; uint256 public totalSupply; mapping(address => uint256) public balanceOfOld; mapping(address => mapping(address => uint256)) public allowance; mapping(address => int256) payouts; int256 totalPayouts; uint256 earningsPerShare; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); function ethpyramid() public { }",0,"subgraph cluster_987_EtherPyramid_PowH_Revived {
label=""EtherPyramid_PowH_Revived"";
""987_transfer"" [label=""transfer""];
""987_ethpyramid"" [label=""ethpyramid""];
""987_fund"" [label=""fund""];
""987_getTokensForEther"" [label=""getTokensForEther""];
""987_buy"" [label=""buy""];
""987_withdrawOld"" [label=""withdrawOld""];
""987_getEtherForTokens"" [label=""getEtherForTokens""];
""987_fallback"" [label=""fallback""];
""987_transferFrom"" [label=""transferFrom""];
""987_fixedExp"" [label=""fixedExp""];
""987_reserve"" [label=""reserve""];
""987_buyPrice"" [label=""buyPrice""];
""987_sellMyTokensDaddy"" [label=""sellMyTokensDaddy""];
""987_withdraw"" [label=""withdraw""];
""987_fixedLog"" [label=""fixedLog""];
""987_transferTokens"" [label=""transferTokens""];
""987_balance"" [label=""balance""];
""987_sell"" [label=""sell""];
""987_getMeOutOfHere"" [label=""getMeOutOfHere""];
""987_approve"" [label=""approve""];
""987_balanceOf"" [label=""balanceOf""];
""987_dividends"" [label=""dividends""];
""987_sellPrice"" [label=""sellPrice""];
""987_getTokensForEther"" -> ""987_fixedExp"";
""987_getEtherForTokens"" -> ""987_reserve"";
""987_getTokensForEther"" -> ""987_fixedLog"";
""987_getEtherForTokens"" -> ""987_fixedLog"";
""987_getTokensForEther"" -> ""987_reserve"";
""987_buyPrice"" -> ""987_getTokensForEther"";
""987_getMeOutOfHere"" -> ""987_sellMyTokensDaddy"";
""987_withdraw"" -> ""987_dividends"";
""987_buy"" -> ""987_getTokensForEther"";
""987_reserve"" -> ""987_balance"";
""987_transferTokens"" -> ""987_sell"";
""987_fallback"" -> ""987_withdrawOld"";
""987_transfer"" -> ""987_transferTokens"";
""987_transferFrom"" -> ""987_transferTokens"";
""987_sellMyTokensDaddy"" -> ""987_transferTokens"";
""987_getMeOutOfHere"" -> ""987_withdraw"";
""987_fund"" -> ""987_buy"";
""987_sell"" -> ""987_getEtherForTokens"";
""987_sellMyTokensDaddy"" -> ""987_balanceOf"";
""987_fallback"" -> ""987_buy"";
""987_withdrawOld"" -> ""987_dividends"";
""987_buy"" -> ""987_reserve"";
""987_sellPrice"" -> ""987_getEtherForTokens"";
""987_getEtherForTokens"" -> ""987_fixedExp"";
}
"
0xec2e5c8d51fdd54fef83db8300399a3c2e167922.sol,Crowdsale,"contract Crowdsale is Manageable { using SafeMath for uint256; CrowdsaleToken public token; uint256 public startTime; uint256 public endTime ; uint256 public rate; uint256 public constant decimals = 18; uint256 public tokenSaleWeiCap; uint256 public tokenSaleWeiGoal; uint256 public tokenSaleWeiMax; uint256 public tokenSaleWeiMin; address public pool; address public wallet; bool public isFinalized = false; enum State { Created, Active, Closed }",0,"subgraph cluster_2049_CrowdsaleManager {
label=""CrowdsaleManager"";
""2049_CrowdsaleManager"" [label=""CrowdsaleManager""];
""2049_mintToken"" [label=""mintToken""];
""2049_deallocate"" [label=""deallocate""];
""2049_changeTokenManager"" [label=""changeTokenManager""];
""2049_createToken"" [label=""createToken""];
""2049_releaseTokenTransfer"" [label=""releaseTokenTransfer""];
""2049_promotionAllocate"" [label=""promotionAllocate""];
""2049_finalizeSale1"" [label=""finalizeSale1""];
""2049_initSale1"" [label=""initSale1""];
""2049_finalizeSale2"" [label=""finalizeSale2""];
""2049_createSale3"" [label=""createSale3""];
""2049_initSale3"" [label=""initSale3""];
""2049_closeSale2"" [label=""closeSale2""];
""2049_withdrawSale3"" [label=""withdrawSale3""];
""2049_closeSale1"" [label=""closeSale1""];
""2049_changeSaleManager"" [label=""changeSaleManager""];
""2049_withdrawSale2"" [label=""withdrawSale2""];
""2049_createSale1"" [label=""createSale1""];
""2049_initSale2"" [label=""initSale2""];
""2049_closeSale3"" [label=""closeSale3""];
""2049_createSale2"" [label=""createSale2""];
""2049_withdrawSale1"" [label=""withdrawSale1""];
""2049_finalizeSale3"" [label=""finalizeSale3""];
""2049_initSale2"" -> ""2049_onlyOwnerOrManager"";
""2049_changeTokenManager"" -> ""2049_onlyOwner"";
""2049_finalizeSale2"" -> ""2049_onlyOwnerOrManager"";
""2049_deallocate"" -> ""2049_onlyOwner"";
""2049_closeSale1"" -> ""2049_onlyOwnerOrManager"";
""2049_releaseTokenTransfer"" -> ""2049_onlyOwner"";
""2049_closeSale3"" -> ""2049_onlyOwnerOrManager"";
""2049_createToken"" -> ""2049_onlyOwnerOrManager"";
""2049_promotionAllocate"" -> ""2049_onlyOwner"";
""2049_withdrawSale3"" -> ""2049_onlyOwnerOrManager"";
""2049_createSale3"" -> ""2049_onlyOwnerOrManager"";
""2049_changeSaleManager"" -> ""2049_onlyOwner"";
""2049_createSale2"" -> ""2049_onlyOwnerOrManager"";
""2049_withdrawSale1"" -> ""2049_onlyOwnerOrManager"";
""2049_closeSale2"" -> ""2049_onlyOwnerOrManager"";
""2049_createSale1"" -> ""2049_onlyOwnerOrManager"";
""2049_withdrawSale2"" -> ""2049_onlyOwnerOrManager"";
""2049_mintToken"" -> ""2049_onlyOwnerOrManager"";
""2049_initSale3"" -> ""2049_onlyOwnerOrManager"";
""2049_finalizeSale3"" -> ""2049_onlyOwnerOrManager"";
""2049_finalizeSale1"" -> ""2049_onlyOwnerOrManager"";
""2049_initSale1"" -> ""2049_onlyOwnerOrManager"";
}
"
0x2c82c73d5b34aa015989462b2948cd616a37641f.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },0,"subgraph cluster_1249_MiniMeToken {
label=""MiniMeToken"";
""1249_balanceOfAt"" [label=""balanceOfAt""];
""1249_enableTransfers"" [label=""enableTransfers""];
""1249_generateTokens"" [label=""generateTokens""];
""1249_doTransfer"" [label=""doTransfer""];
""1249_destroyTokens"" [label=""destroyTokens""];
""1249_min"" [label=""min""];
""1249_balanceOf"" [label=""balanceOf""];
""1249_createCloneToken"" [label=""createCloneToken""];
""1249_fallback"" [label=""fallback""];
""1249_updateValueAtNow"" [label=""updateValueAtNow""];
""1249_transferFrom"" [label=""transferFrom""];
""1249_totalSupply"" [label=""totalSupply""];
""1249_transfer"" [label=""transfer""];
""1249_allowance"" [label=""allowance""];
""1249_approveAndCall"" [label=""approveAndCall""];
""1249_claimTokens"" [label=""claimTokens""];
""1249_isContract"" [label=""isContract""];
""1249_approve"" [label=""approve""];
""1249_totalSupplyAt"" [label=""totalSupplyAt""];
""1249_MiniMeToken"" [label=""MiniMeToken""];
""1249_getValueAt"" [label=""getValueAt""];
""1249_fallback"" -> ""1249_isContract"";
""1249_doTransfer"" -> ""1249_updateValueAtNow"";
""1249_destroyTokens"" -> ""1249_onlyController"";
""1249_totalSupplyAt"" -> ""1249_getValueAt"";
""1249_balanceOf"" -> ""1249_balanceOfAt"";
""1249_generateTokens"" -> ""1249_balanceOf"";
""1249_transfer"" -> ""1249_doTransfer"";
""1249_transferFrom"" -> ""1249_doTransfer"";
""1249_approve"" -> ""1249_isContract"";
""1249_approveAndCall"" -> ""1249_approve"";
""1249_balanceOfAt"" -> ""1249_getValueAt"";
""1249_destroyTokens"" -> ""1249_balanceOf"";
""1249_doTransfer"" -> ""1249_balanceOfAt"";
""1249_balanceOfAt"" -> ""1249_min"";
""1249_destroyTokens"" -> ""1249_totalSupply"";
""1249_doTransfer"" -> ""1249_isContract"";
""1249_claimTokens"" -> ""1249_onlyController"";
""1249_generateTokens"" -> ""1249_updateValueAtNow"";
""1249_destroyTokens"" -> ""1249_updateValueAtNow"";
""1249_generateTokens"" -> ""1249_totalSupply"";
""1249_totalSupplyAt"" -> ""1249_min"";
""1249_enableTransfers"" -> ""1249_onlyController"";
""1249_totalSupply"" -> ""1249_totalSupplyAt"";
""1249_generateTokens"" -> ""1249_onlyController"";
}
"
0x31bd42a29642e388bcaf57bd020955ef2783725d.sol,PIGT,"contract PIGT is SafeMath { string public constant standard = ; uint8 public constant decimals = 18; string public constant name = ; string public constant symbol = ; uint256 public totalSupply = 0.1 * 10**8 * 10**uint256(decimals); mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function PIGT() public { Transfer(0x00, msg.sender, totalSupply); balanceOf[msg.sender] = totalSupply; }",0,"subgraph cluster_304_PIGT {
label=""PIGT"";
""304_fallback"" [label=""fallback""];
""304_approve"" [label=""approve""];
""304_PIGT"" [label=""PIGT""];
""304_transferFrom"" [label=""transferFrom""];
""304_transfer"" [label=""transfer""];
""304_transfer"" -> ""304_safeAdd"";
""304_transferFrom"" -> ""304_safeSub"";
""304_transferFrom"" -> ""304_safeAdd"";
""304_transfer"" -> ""304_safeSub"";
}
"
0x20da2ff263e28e8db8ef44f590ff4576bac770e2.sol,MilFold,"contract MilFold is MilFoldInterface,Milevents { using SafeMath for *; uint256 constant private rndMax_ = 90000; uint256 constant private claimMax_ = 43200; address constant private fundAddr_ = 0xB0c7Dc00E8A74c9dEc8688EFb98CcB2e24584E3B; uint256 constant private MIN_ETH_BUYIN = 0.002 ether; uint256 constant private COMMON_REWARD_AMOUNT = 0.01 ether; uint256 constant private CLAIM_WINNER_REWARD_AMOUNT = 1 ether; uint256 constant private MAX_WIN_AMOUNT = 5000 ether; uint256 private rID_; uint256 private lID_; uint256 private lBlockNumber_; bool private activated_; MillionaireInterface constant private millionaire_ = MillionaireInterface(0x98BDbc858822415C626c13267594fbC205182A1F); MilAuthInterface constant private milAuth_ = MilAuthInterface(0xf856f6a413f7756FfaF423aa2101b37E2B3aFFD9); mapping (address => uint256) private playerTickets_; mapping (uint256 => Mildatasets.Round) private round_; mapping (uint256 => mapping(address => uint256[])) private playerTicketNumbers_; mapping (address => uint256) private playerWinTotal_; modifier isActivated() { require(activated_ == true, ); _; }",0,"subgraph cluster_102_MilFoldInterface {
label=""MilFoldInterface"";
""102_activate"" [label=""activate""];
""102_addPot"" [label=""addPot""];
}
"
0x01d5d0108589f3c52fcce6e65503bb6515e66698.sol,DcorpProxy,"contract DcorpProxy is TokenObserver, TransferableOwnership, TokenRetriever { enum Stages { Deploying, Deployed, Executed }",0,"subgraph cluster_1415_DcorpProxy {
label=""DcorpProxy"";
""1415_DcorpProxy"" [label=""DcorpProxy""];
""1415_deploy"" [label=""deploy""];
""1415_getVoteCount"" [label=""getVoteCount""];
""1415_balanceOf"" [label=""balanceOf""];
""1415_vote"" [label=""vote""];
""1415_isExecuted"" [label=""isExecuted""];
""1415_getProposalCount"" [label=""getProposalCount""];
""1415_withdrawDRPU"" [label=""withdrawDRPU""];
""1415_withdrawDRPS"" [label=""withdrawDRPS""];
""1415_isDeployed"" [label=""isDeployed""];
""1415_execute"" [label=""execute""];
""1415_getVotingDuration"" [label=""getVotingDuration""];
""1415__adjustWeight"" [label=""_adjustWeight""];
""1415_isProposed"" [label=""isProposed""];
""1415_getTotalSupply"" [label=""getTotalSupply""];
""1415_getVote"" [label=""getVote""];
""1415_retrieveTokens"" [label=""retrieveTokens""];
""1415_fallback"" [label=""fallback""];
""1415_isSupported"" [label=""isSupported""];
""1415_hasVoted"" [label=""hasVoted""];
""1415_onTokensReceived"" [label=""onTokensReceived""];
""1415_getVotingResult"" [label=""getVotingResult""];
""1415_isDeploying"" [label=""isDeploying""];
""1415_hasBalance"" [label=""hasBalance""];
""1415_propose"" [label=""propose""];
""1415_vote"" -> ""1415_hasVoted"";
""1415_propose"" -> ""1415_only_owner"";
""1415_onTokensReceived"" -> ""1415__adjustWeight"";
""1415_retrieveTokens"" -> ""1415_not_accepted_token"";
""1415_execute"" -> ""1415_only_at_stage"";
""1415_onTokensReceived"" -> ""1415_only_accepted_token"";
""1415_retrieveTokens"" -> ""1415_only_owner"";
""1415_execute"" -> ""1415_only_when_supported"";
""1415_vote"" -> ""1415_only_at_stage"";
""1415_isSupported"" -> ""1415_getVotingResult"";
""1415_onTokensReceived"" -> ""1415_only_at_stage"";
""1415_propose"" -> ""1415_isProposed"";
""1415_withdrawDRPU"" -> ""1415__adjustWeight"";
""1415_hasVoted"" -> ""1415_getVoteCount"";
""1415_withdrawDRPS"" -> ""1415__adjustWeight"";
""1415_vote"" -> ""1415_only_token_holder"";
""1415_propose"" -> ""1415_only_at_stage"";
""1415__adjustWeight"" -> ""1415_hasVoted"";
""1415_execute"" -> ""1415_only_owner"";
""1415_deploy"" -> ""1415_only_owner"";
""1415_execute"" -> ""1415_only_after_voting_period"";
""1415_execute"" -> ""1415_only_proposed"";
""1415_retrieveTokens"" -> ""1415_retrieveTokens"";
""1415_vote"" -> ""1415_only_during_voting_period"";
""1415_isSupported"" -> ""1415_getTotalSupply"";
""1415_fallback"" -> ""1415_only_at_stage"";
""1415_deploy"" -> ""1415_only_at_stage"";
""1415_vote"" -> ""1415_only_proposed"";
""1415_onTokensReceived"" -> ""1415_hasBalance"";
}
"
0x037941d4ed93af8628fb4e9451752db8b2446f76.sol,Snowflake,contract Snowflake is Ownable { using SafeMath for uint; using addressSet for addressSet._addressSet; mapping (string => uint) internal deposits; uint signatureTimeout; mapping (bytes32 => bool) signatureLog; mapping (string => Identity) internal directory; mapping (address => string) internal addressDirectory; mapping (bytes32 => string) internal initiatedAddressClaims; address public clientRaindropAddress; address public hydroTokenAddress; addressSet._addressSet resolverWhitelist; constructor() public { setSignatureTimeout(7200); },0,"subgraph cluster_341_SnowflakeResolver {
label=""SnowflakeResolver"";
""341_onSignUp"" [label=""onSignUp""];
""341_callOnSignUp"" [label=""callOnSignUp""];
""341_callOnRemoval"" [label=""callOnRemoval""];
""341_onRemoval"" [label=""onRemoval""];
}
"
0x6ceb458fac48cf87b420f23b0d890534655683e0.sol,FrostByte,"contract FrostByte is FBT { event tokenBought(uint256 totalTokensBought, uint256 Price); event etherSent(uint256 total); string public name; uint8 public decimals; string public symbol; string public version = ; function FrostByte() { name = ; decimals = 4; symbol = ; pieceprice = 1 ether / 256; datestart = now; }",0,"subgraph cluster_630_FrostByte {
label=""FrostByte"";
""630_approveAndCall"" [label=""approveAndCall""];
""630_feeBank"" [label=""feeBank""];
""630_getPrice"" [label=""getPrice""];
""630_getAddressLevel"" [label=""getAddressLevel""];
""630_sendEther"" [label=""sendEther""];
""630_fallback"" [label=""fallback""];
""630_FrostByte"" [label=""FrostByte""];
""630_sendEther"" -> ""630_refundFees"";
""630_fallback"" -> ""630_getPrice"";
""630_fallback"" -> ""630_getAddressLevel"";
""630_fallback"" -> ""630_refundFees"";
}
"
0x8a18d7e7bcb1dc4db0f71aee2421a3d9af53f93f.sol,BFX,"contract BFX is ERC20Interface, Owned { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function BFX() public { symbol = ; name = ; decimals = 18; _totalSupply = 10000000000 * 10**uint(decimals); balances[owner] = _totalSupply; Transfer(address(0), owner, _totalSupply); }",0,"subgraph cluster_550_BFX {
label=""BFX"";
""550_totalSupply"" [label=""totalSupply""];
""550_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""550_balanceOf"" [label=""balanceOf""];
""550_BFX"" [label=""BFX""];
""550_approve"" [label=""approve""];
""550_transferFrom"" [label=""transferFrom""];
""550_approveAndCall"" [label=""approveAndCall""];
""550_transfer"" [label=""transfer""];
""550_allowance"" [label=""allowance""];
""550_fallback"" [label=""fallback""];
""550_transferAnyERC20Token"" -> ""550_onlyOwner"";
}
"
0xdd850d1d845a444a13e9516317a0a57075d9cf8e.sol,FOMOWINNER,"contract FOMOWINNER is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); constructor ( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",0,"subgraph cluster_642_FOMOWINNER {
label=""FOMOWINNER"";
""642_mintToken"" [label=""mintToken""];
""642_setPrices"" [label=""setPrices""];
""642_freezeAccount"" [label=""freezeAccount""];
""642__transfer"" [label=""_transfer""];
""642_buy"" [label=""buy""];
""642_constructor"" [label=""constructor""];
""642_sell"" [label=""sell""];
""642_setPrices"" -> ""642_onlyOwner"";
""642_constructor"" -> ""642_constructor"";
""642_mintToken"" -> ""642_onlyOwner"";
""642_freezeAccount"" -> ""642_onlyOwner"";
""642_sell"" -> ""642__transfer"";
""642_buy"" -> ""642__transfer"";
}
"
0xc0a1f89bbcaddab4b736e786b6b16c67bc92ed35.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },0,"subgraph cluster_1152_MiniMeToken {
label=""MiniMeToken"";
""1152_destroyTokens"" [label=""destroyTokens""];
""1152_totalSupplyAt"" [label=""totalSupplyAt""];
""1152_MiniMeToken"" [label=""MiniMeToken""];
""1152_claimTokens"" [label=""claimTokens""];
""1152_controller"" [label=""controller""];
""1152_createCloneToken"" [label=""createCloneToken""];
""1152_generateTokens"" [label=""generateTokens""];
""1152_allowance"" [label=""allowance""];
""1152_balanceOf"" [label=""balanceOf""];
""1152_min"" [label=""min""];
""1152_balanceOfAt"" [label=""balanceOfAt""];
""1152_fallback"" [label=""fallback""];
""1152_updateValueAtNow"" [label=""updateValueAtNow""];
""1152_transferFrom"" [label=""transferFrom""];
""1152_totalSupply"" [label=""totalSupply""];
""1152_getValueAt"" [label=""getValueAt""];
""1152_doTransfer"" [label=""doTransfer""];
""1152_transfer"" [label=""transfer""];
""1152_isContract"" [label=""isContract""];
""1152_enableTransfers"" [label=""enableTransfers""];
""1152_approveAndCall"" [label=""approveAndCall""];
""1152_approve"" [label=""approve""];
""1152_transferFrom"" -> ""1152_doTransfer"";
""1152_doTransfer"" -> ""1152_isContract"";
""1152_destroyTokens"" -> ""1152_updateValueAtNow"";
""1152_generateTokens"" -> ""1152_onlyController"";
""1152_totalSupply"" -> ""1152_totalSupplyAt"";
""1152_balanceOfAt"" -> ""1152_min"";
""1152_doTransfer"" -> ""1152_balanceOfAt"";
""1152_totalSupplyAt"" -> ""1152_min"";
""1152_generateTokens"" -> ""1152_balanceOf"";
""1152_enableTransfers"" -> ""1152_onlyController"";
""1152_generateTokens"" -> ""1152_updateValueAtNow"";
""1152_destroyTokens"" -> ""1152_balanceOf"";
""1152_destroyTokens"" -> ""1152_getValueAt"";
""1152_fallback"" -> ""1152_isContract"";
""1152_destroyTokens"" -> ""1152_onlyController"";
""1152_balanceOfAt"" -> ""1152_getValueAt"";
""1152_totalSupplyAt"" -> ""1152_getValueAt"";
""1152_doTransfer"" -> ""1152_updateValueAtNow"";
""1152_transfer"" -> ""1152_doTransfer"";
""1152_claimTokens"" -> ""1152_onlyController"";
""1152_approve"" -> ""1152_isContract"";
""1152_balanceOf"" -> ""1152_balanceOfAt"";
""1152_approveAndCall"" -> ""1152_approve"";
""1152_generateTokens"" -> ""1152_getValueAt"";
}
"
0x708a64eba17df26cd7085c494b725160ba1a6b7d.sol,MultiSigWallet,"contract MultiSigWallet { uint constant public MAX_OWNER_COUNT = 50; event Confirmation(address indexed sender, uint indexed transactionId); event Revocation(address indexed sender, uint indexed transactionId); event Submission(uint indexed transactionId); event Execution(uint indexed transactionId); event ExecutionFailure(uint indexed transactionId); event Deposit(address indexed sender, uint value); event OwnerAddition(address indexed owner); event OwnerRemoval(address indexed owner); event RequirementChange(uint required); mapping(uint => Transaction) public transactions; mapping(uint => mapping(address => bool)) public confirmations; mapping(address => bool) public isOwner; address[] public owners; uint public required; uint public transactionCount; struct Transaction { address destination; uint value; bytes data; bool executed; }",0,"subgraph cluster_1740_MultiSigWallet {
label=""MultiSigWallet"";
""1740_revokeConfirmation"" [label=""revokeConfirmation""];
""1740_constructor"" [label=""constructor""];
""1740_removeOwner"" [label=""removeOwner""];
""1740_getTransactionIds"" [label=""getTransactionIds""];
""1740_getConfirmationCount"" [label=""getConfirmationCount""];
""1740_replaceOwner"" [label=""replaceOwner""];
""1740_fallback"" [label=""fallback""];
""1740_isConfirmed"" [label=""isConfirmed""];
""1740_addTransaction"" [label=""addTransaction""];
""1740_submitTransaction"" [label=""submitTransaction""];
""1740_getConfirmations"" [label=""getConfirmations""];
""1740_executeTransaction"" [label=""executeTransaction""];
""1740_addOwner"" [label=""addOwner""];
""1740_getTransactionCount"" [label=""getTransactionCount""];
""1740_getOwners"" [label=""getOwners""];
""1740_changeRequirement"" [label=""changeRequirement""];
""1740_confirmTransaction"" [label=""confirmTransaction""];
""1740_submitTransaction"" -> ""1740_addTransaction"";
""1740_replaceOwner"" -> ""1740_onlyWallet"";
""1740_executeTransaction"" -> ""1740_isConfirmed"";
""1740_addOwner"" -> ""1740_notNull"";
""1740_addOwner"" -> ""1740_onlyWallet"";
""1740_revokeConfirmation"" -> ""1740_confirmed"";
""1740_confirmTransaction"" -> ""1740_ownerExists"";
""1740_executeTransaction"" -> ""1740_notExecuted"";
""1740_constructor"" -> ""1740_validRequirement"";
""1740_changeRequirement"" -> ""1740_validRequirement"";
""1740_confirmTransaction"" -> ""1740_executeTransaction"";
""1740_removeOwner"" -> ""1740_ownerExists"";
""1740_replaceOwner"" -> ""1740_ownerDoesNotExist"";
""1740_addOwner"" -> ""1740_ownerDoesNotExist"";
""1740_replaceOwner"" -> ""1740_ownerExists"";
""1740_confirmTransaction"" -> ""1740_notConfirmed"";
""1740_confirmTransaction"" -> ""1740_transactionExists"";
""1740_changeRequirement"" -> ""1740_onlyWallet"";
""1740_submitTransaction"" -> ""1740_confirmTransaction"";
""1740_removeOwner"" -> ""1740_changeRequirement"";
""1740_addOwner"" -> ""1740_validRequirement"";
""1740_revokeConfirmation"" -> ""1740_ownerExists"";
""1740_removeOwner"" -> ""1740_onlyWallet"";
""1740_executeTransaction"" -> ""1740_ownerExists"";
""1740_addTransaction"" -> ""1740_notNull"";
""1740_revokeConfirmation"" -> ""1740_notExecuted"";
""1740_executeTransaction"" -> ""1740_confirmed"";
}
"
0xe310fe78974df2c7df6262208582bf7e04cdc18e.sol,Solitaire3D,contract Solitaire3D is modularLong { using SafeMath for *; using S3DKeysCalcLong for uint256; string constant public name = ; string constant public symbol = ; uint256 private rndExtra_ = 30 seconds; uint256 private rndGap_ = 30 seconds; uint256 constant private rndInit_ = 24 hours; uint256 constant private rndInc_ = 60 seconds; uint256 constant private rndMax_ = 24 hours; address constant private developer = 0xA7759a5CAcE1a3b54E872879Cf3942C5D4ff5897; address constant private operator = 0xc3F465FD001f78DCEeF6f47FD18E3B04F95f2337; uint256 public rID_; mapping (address => uint256) public pIDxAddr_; mapping (uint256 => S3Ddatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => S3Ddatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => S3Ddatasets.Round) public round_; uint256 public pID_; S3Ddatasets.TeamFee public fee_; constructor() public { fee_ = S3Ddatasets.TeamFee(50); plyr_[1].addr = 0xA7759a5CAcE1a3b54E872879Cf3942C5D4ff5897; pIDxAddr_[0xA7759a5CAcE1a3b54E872879Cf3942C5D4ff5897] = 1; pID_ = 1; },0,"subgraph cluster_2105_Solitaire3D {
label=""Solitaire3D"";
""2105_distributeExternal"" [label=""distributeExternal""];
""2105_activate"" [label=""activate""];
""2105_withdrawEarnings"" [label=""withdrawEarnings""];
""2105_endTx"" [label=""endTx""];
""2105_constructor"" [label=""constructor""];
""2105_getBuyPrice"" [label=""getBuyPrice""];
""2105_fallback"" [label=""fallback""];
""2105_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""2105_determinePID"" [label=""determinePID""];
""2105_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""2105_managePlayer"" [label=""managePlayer""];
""2105_iWantXKeys"" [label=""iWantXKeys""];
""2105_withdraw"" [label=""withdraw""];
""2105_updateGenVault"" [label=""updateGenVault""];
""2105_updateTimer"" [label=""updateTimer""];
""2105_distributeInternal"" [label=""distributeInternal""];
""2105_updateMasks"" [label=""updateMasks""];
""2105_buyCore"" [label=""buyCore""];
""2105_endRound"" [label=""endRound""];
""2105_core"" [label=""core""];
""2105_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""2105_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""2105_getTimeLeft"" [label=""getTimeLeft""];
""2105_getPlayerVaults"" [label=""getPlayerVaults""];
""2105_calcKeysReceived"" [label=""calcKeysReceived""];
""2105_withdraw"" -> ""2105_isHuman"";
""2105_getPlayerVaults"" -> ""2105_calcUnMaskedEarnings"";
""2105_managePlayer"" -> ""2105_updateGenVault"";
""2105_getPlayerVaults"" -> ""2105_getPlayerVaultsHelper"";
""2105_core"" -> ""2105_managePlayer"";
""2105_core"" -> ""2105_distributeInternal"";
""2105_getPlayerInfoByAddress"" -> ""2105_calcUnMaskedEarnings"";
""2105_fallback"" -> ""2105_determinePID"";
""2105_fallback"" -> ""2105_withdraw"";
""2105_fallback"" -> ""2105_isActivated"";
""2105_core"" -> ""2105_updateTimer"";
""2105_buyCore"" -> ""2105_endRound"";
""2105_core"" -> ""2105_endTx"";
""2105_buyCore"" -> ""2105_core"";
""2105_fallback"" -> ""2105_isWithinLimits"";
""2105_updateGenVault"" -> ""2105_calcUnMaskedEarnings"";
""2105_core"" -> ""2105_distributeExternal"";
""2105_withdraw"" -> ""2105_endRound"";
""2105_withdrawEarnings"" -> ""2105_updateGenVault"";
""2105_fallback"" -> ""2105_buyCore"";
""2105_fallback"" -> ""2105_isHuman"";
""2105_withdraw"" -> ""2105_isActivated"";
""2105_distributeInternal"" -> ""2105_updateMasks"";
""2105_withdraw"" -> ""2105_withdrawEarnings"";
}
"
0xf3c8ed6c721774c022c530e813a369dfe78a6e85.sol,CryptoSprites,contract CryptoSprites is ERC721 { address public owner; address KittyCoreAddress = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d; address SaleClockAuctionAddress = 0xb1690C08E213a35Ed9bAb7B318DE14420FB57d8C; address charityAddress = 0xb30cb3b3E03A508Db2A0a3e07BA1297b47bb0fb1; uint public etherForOwner; uint public etherForCharity; uint public ownerCut = 15; uint public charityCut = 15; uint public featurePrice = 10**16; uint public priceMultiplier = 1; uint public priceDivider = 10; modifier onlyOwner { require(msg.sender == owner); _; },0,"subgraph cluster_1695_CryptoSprites {
label=""CryptoSprites"";
""1695_symbol"" [label=""symbol""];
""1695_featureSprite"" [label=""featureSprite""];
""1695_takeOwnership"" [label=""takeOwnership""];
""1695_withdraw"" [label=""withdraw""];
""1695_disapprove"" [label=""disapprove""];
""1695_supportsInterface"" [label=""supportsInterface""];
""1695_allowance"" [label=""allowance""];
""1695_transferFrom"" [label=""transferFrom""];
""1695_listSpriteForSale"" [label=""listSpriteForSale""];
""1695_buySprite"" [label=""buySprite""];
""1695_name"" [label=""name""];
""1695_changeOwner"" [label=""changeOwner""];
""1695_totalSupply"" [label=""totalSupply""];
""1695_approve"" [label=""approve""];
""1695_adjustFeaturePrice"" [label=""adjustFeaturePrice""];
""1695_transfer"" [label=""transfer""];
""1695_featuredSpritesLength"" [label=""featuredSpritesLength""];
""1695_lookupKitty"" [label=""lookupKitty""];
""1695_lookupKittyDetails2"" [label=""lookupKittyDetails2""];
""1695_lookupAllSprites"" [label=""lookupAllSprites""];
""1695_lookupFeaturedSprites"" [label=""lookupFeaturedSprites""];
""1695_lookupSprite"" [label=""lookupSprite""];
""1695_removeSpriteFromSale"" [label=""removeSpriteFromSale""];
""1695_adjustDefaultSpritePrice"" [label=""adjustDefaultSpritePrice""];
""1695_balanceOf"" [label=""balanceOf""];
""1695_lookupKittyDetails1"" [label=""lookupKittyDetails1""];
""1695_adjustCut"" [label=""adjustCut""];
""1695_fallback"" [label=""fallback""];
""1695_ownerOf"" [label=""ownerOf""];
""1695_calculatePrice"" [label=""calculatePrice""];
""1695_CryptoSprites"" [label=""CryptoSprites""];
""1695_usersSpriteOwningHistory"" [label=""usersSpriteOwningHistory""];
""1695_adjustCut"" -> ""1695_onlyOwner"";
""1695_changeOwner"" -> ""1695_onlyOwner"";
""1695_adjustFeaturePrice"" -> ""1695_onlyOwner"";
""1695_adjustDefaultSpritePrice"" -> ""1695_onlyOwner"";
""1695_withdraw"" -> ""1695_onlyOwner"";
}
"
0x30d5f039375a1c6977b32225ad8c9a409d5dd31f.sol,DSValue,"contract DSValue is DSThing { bool has; bytes32 val; function peek() constant returns (bytes32, bool) { return (val,has); }",0,"subgraph cluster_840_DSValue {
label=""DSValue"";
""840_poke"" [label=""poke""];
""840_read"" [label=""read""];
""840_peek"" [label=""peek""];
""840_void"" [label=""void""];
""840_read"" -> ""840_assert"";
""840_poke"" -> ""840_auth"";
""840_poke"" -> ""840_note"";
""840_read"" -> ""840_peek"";
""840_void"" -> ""840_auth"";
""840_void"" -> ""840_note"";
}
"
0x378965e2a5d31f6f5fd029c1fc456caacb6d04b2.sol,ApplicationQualityCoin,"contract ApplicationQualityCoin { string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 100000000000 * 10 ** uint256(decimals); mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function ApplicationQualityCoin() public { balanceOf[msg.sender] = totalSupply; }",0,"subgraph cluster_216_ApplicationQualityCoin {
label=""ApplicationQualityCoin"";
""216__transfer"" [label=""_transfer""];
""216_ApplicationQualityCoin"" [label=""ApplicationQualityCoin""];
""216_approve"" [label=""approve""];
""216_transfer"" [label=""transfer""];
""216_transferFrom"" [label=""transferFrom""];
""216_transfer"" -> ""216__transfer"";
""216_transferFrom"" -> ""216__transfer"";
}
"
0x4b3b99e956588b54f5841f2fb7c63721e6c7c392.sol,CHOAM,contract CHOAM is Ownable { using SafeMath for uint256; uint256 public constant PLANET_PRICE = 100000000000000000; uint256 public constant FEE_RANGE = 29000000000000000; uint256 public constant FEE_MIN = 5000000000000000; uint256 public constant FEE_SILO = 10000000000000000; uint256 public constant TIMER_STEP = 120; uint256 public constant PAGE_SIZE = 25; address public master; bool public inited = false; uint256 public koef = 1; bool private create_flag = false; uint256 public silo; address public silo_addr = address(0); uint256 public silo_timer = now; struct Player { uint256 balance; uint256 position; uint8 state; uint256 discount; uint256[] planets; },0,"subgraph cluster_1740_CHOAM {
label=""CHOAM"";
""1740_sell_spice_melange"" [label=""sell_spice_melange""];
""1740_get_planet_info"" [label=""get_planet_info""];
""1740_buy_spice_melange"" [label=""buy_spice_melange""];
""1740_fallback"" [label=""fallback""];
""1740_buy_planet"" [label=""buy_planet""];
""1740_get_info"" [label=""get_info""];
""1740_get_len"" [label=""get_len""];
""1740_insert"" [label=""insert""];
""1740_init"" [label=""init""];
""1740_set_koef"" [label=""set_koef""];
""1740_get_planet_price"" [label=""get_planet_price""];
""1740_move"" [label=""move""];
""1740_get_player_state"" [label=""get_player_state""];
""1740_create_planet"" [label=""create_planet""];
""1740_step"" [label=""step""];
""1740_set_master"" [label=""set_master""];
""1740_get_owner_planets"" [label=""get_owner_planets""];
""1740_constructor"" [label=""constructor""];
""1740_set_koef"" -> ""1740_onlyOwner"";
""1740_init"" -> ""1740_onlyOwner"";
""1740_init"" -> ""1740_create_planet"";
""1740_fallback"" -> ""1740_buy_spice_melange"";
""1740_buy_planet"" -> ""1740_create_planet"";
""1740_create_planet"" -> ""1740_insert"";
""1740_set_master"" -> ""1740_onlyOwner"";
}
"
0xda80ac02ab9c269b879363cac98ef53fde90cb23.sol,PBC,"contract PBC is ERC20,Ownable{ using SafeMath for uint256; string public constant name=; string public symbol=; string public constant version = ; uint256 public constant decimals = 18; uint256 public totalSupply; uint256 public constant MAX_SUPPLY=uint256(1000000000)*uint256(10)**decimals; mapping(address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; event GetETH(address indexed _from, uint256 _value); function PBC(){ totalSupply=MAX_SUPPLY; balances[msg.sender] = MAX_SUPPLY; Transfer(0x0, msg.sender, MAX_SUPPLY); }",0,"subgraph cluster_559_PBC {
label=""PBC"";
""559_balanceOf"" [label=""balanceOf""];
""559_transfer"" [label=""transfer""];
""559_etherProceeds"" [label=""etherProceeds""];
""559_allowance"" [label=""allowance""];
""559_PBC"" [label=""PBC""];
""559_transferFrom"" [label=""transferFrom""];
""559_fallback"" [label=""fallback""];
""559_approve"" [label=""approve""];
""559_etherProceeds"" -> ""559_onlyOwner"";
}
"
0xec8e410316bd8d45cf660fdfd1fbd9eeafe9ed6c.sol,MonsterCore,"contract MonsterCore is MonsterMinting { address public newContractAddress; function MonsterCore() public { paused = false; ceoAddress = msg.sender; cooAddress = msg.sender; cfoAddress = msg.sender; _createMonster(0, 0, 0, uint256(-1), address(0)); }",0,"subgraph cluster_7966_MonsterCore {
label=""MonsterCore"";
""7966_fallback"" [label=""fallback""];
""7966_unpause"" [label=""unpause""];
""7966_getMonster"" [label=""getMonster""];
""7966_MonsterCore"" [label=""MonsterCore""];
""7966_withdrawBalance"" [label=""withdrawBalance""];
""7966_setNewAddress"" [label=""setNewAddress""];
""7966_unpause"" -> ""7966_onlyCEO"";
""7966_setNewAddress"" -> ""7966_onlyCEO"";
""7966_withdrawBalance"" -> ""7966_onlyCFO"";
""7966_unpause"" -> ""7966_whenPaused"";
""7966_unpause"" -> ""7966_unpause"";
""7966_setNewAddress"" -> ""7966_whenPaused"";
""7966_MonsterCore"" -> ""7966__createMonster"";
}
"
0x5122a789a1b9779f840bebaaf73d36ff735c5874.sol,ParcoExchange,"contract ParcoExchange is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 10000000000e8; uint256 public totalDistributed = 0; uint256 public tokensPerEth = 10000000e8; uint256 public constant minContribution = 1 ether / 100; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_930_ParcoExchange {
label=""ParcoExchange"";
""930_finishDistribution"" [label=""finishDistribution""];
""930_getTokens"" [label=""getTokens""];
""930_burn"" [label=""burn""];
""930_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""930_transfer"" [label=""transfer""];
""930_distr"" [label=""distr""];
""930_getTokenBalance"" [label=""getTokenBalance""];
""930_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""930_balanceOf"" [label=""balanceOf""];
""930_withdrawAltcoinTokens"" [label=""withdrawAltcoinTokens""];
""930_transferOwnership"" [label=""transferOwnership""];
""930_updateTokensPerEth"" [label=""updateTokensPerEth""];
""930_transferFrom"" [label=""transferFrom""];
""930_doAirdrop"" [label=""doAirdrop""];
""930_allowance"" [label=""allowance""];
""930_fallback"" [label=""fallback""];
""930_withdraw"" [label=""withdraw""];
""930_approve"" [label=""approve""];
""930_adminClaimAirdrop"" -> ""930_onlyOwner"";
""930_transfer"" -> ""930_onlyPayloadSize"";
""930_getTokens"" -> ""930_distr"";
""930_burn"" -> ""930_onlyOwner"";
""930_adminClaimAirdropMultiple"" -> ""930_doAirdrop"";
""930_transferFrom"" -> ""930_onlyPayloadSize"";
""930_withdrawAltcoinTokens"" -> ""930_onlyOwner"";
""930_adminClaimAirdrop"" -> ""930_doAirdrop"";
""930_distr"" -> ""930_canDistr"";
""930_fallback"" -> ""930_getTokens"";
""930_getTokens"" -> ""930_canDistr"";
""930_transferOwnership"" -> ""930_onlyOwner"";
""930_withdraw"" -> ""930_onlyOwner"";
""930_adminClaimAirdropMultiple"" -> ""930_onlyOwner"";
""930_updateTokensPerEth"" -> ""930_onlyOwner"";
""930_finishDistribution"" -> ""930_onlyOwner"";
""930_finishDistribution"" -> ""930_canDistr"";
}
"
0x55dd6348b0f97ba5417cc3c3d9d98c36e14b7d44.sol,Tablow,"contract Tablow is ERC223Token { string public symbol = ; string public name = ; uint8 public constant decimals = 18; uint256 _totalSupply = 0; uint256 _MaxDistribPublicSupply = 0; uint256 _OwnerDistribSupply = 0; uint256 _CurrentDistribPublicSupply = 0; uint256 _FreeTokens = 0; uint256 _Multiplier1 = 2; uint256 _Multiplier2 = 3; uint256 _LimitMultiplier1 = 4e15; uint256 _LimitMultiplier2 = 8e15; uint256 _HighDonateLimit = 5e16; uint256 _BonusTokensPerETHdonated = 0; address _DistribFundsReceiverAddress = 0; address _remainingTokensReceiverAddress = 0; address owner = 0; bool setupDone = false; bool IsDistribRunning = false; bool DistribStarted = false; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed _owner, uint256 _value); mapping(address => uint256) balances; mapping(address => mapping(address => uint256)) allowed; mapping(address => bool) public Claimed; modifier onlyOwner() { require(msg.sender == owner); _; }",0,"subgraph cluster_1358_Tablow {
label=""Tablow"";
""1358_allowance"" [label=""allowance""];
""1358_fallback"" [label=""fallback""];
""1358_SetupDone"" [label=""SetupDone""];
""1358_totalSupply"" [label=""totalSupply""];
""1358_approve"" [label=""approve""];
""1358_DistribFundsReceiverAddress"" [label=""DistribFundsReceiverAddress""];
""1358_distributeAmounts"" [label=""distributeAmounts""];
""1358_SetBonus"" [label=""SetBonus""];
""1358_BurnTokens"" [label=""BurnTokens""];
""1358_transferFrom"" [label=""transferFrom""];
""1358_Tablow"" [label=""Tablow""];
""1358_IsDistribStarted"" [label=""IsDistribStarted""];
""1358_MaxDistribPublicSupply_"" [label=""MaxDistribPublicSupply_""];
""1358_CurrentDistribPublicSupply_"" [label=""CurrentDistribPublicSupply_""];
""1358_Owner"" [label=""Owner""];
""1358_SetupMultipliers"" [label=""SetupMultipliers""];
""1358_StopDistrib"" [label=""StopDistrib""];
""1358_SetFreeTokens"" [label=""SetFreeTokens""];
""1358_StartDistrib"" [label=""StartDistrib""];
""1358_balanceOf"" [label=""balanceOf""];
""1358_RemainingTokensReceiverAddress"" [label=""RemainingTokensReceiverAddress""];
""1358_OwnerDistribSupply_"" [label=""OwnerDistribSupply_""];
""1358_SetupToken"" [label=""SetupToken""];
""1358_distribution"" [label=""distribution""];
""1358_IsDistribRunningFalg_"" [label=""IsDistribRunningFalg_""];
""1358_SetupMultipliers"" -> ""1358_onlyOwner"";
""1358_distribution"" -> ""1358_onlyOwner"";
""1358_SetBonus"" -> ""1358_onlyOwner"";
""1358_distributeAmounts"" -> ""1358_onlyOwner"";
""1358_SetFreeTokens"" -> ""1358_onlyOwner"";
}
"
0x6efca3bae1d10fca39a184175e03db5065d2fa60.sol,ShitCloneFarmer,contract ShitCloneFarmer { uint256 public TIME_TO_MAKE_1_SHITCLONE = 86400; uint256 public STARTING_SHITCLONE = 100; uint256 PSN = 10000; uint256 PSNH = 5000; bool public initialized = true; address public ShitCloneslordAddress; uint256 public ShitCloneslordReq = 500000; mapping (address => uint256) public ballShitClone; mapping (address => uint256) public claimedTime; mapping (address => uint256) public lastEvent; mapping (address => address) public referrals; uint256 public marketTime; function ShitCloneFarmer() public { ShitCloneslordAddress = msg.sender; },0,"subgraph cluster_610_ShitCloneFarmer {
label=""ShitCloneFarmer"";
""610_getFreeShitClone"" [label=""getFreeShitClone""];
""610_ShitCloneFarmer"" [label=""ShitCloneFarmer""];
""610_calculateTrade"" [label=""calculateTrade""];
""610_getMyShitClone"" [label=""getMyShitClone""];
""610_calculateCellBuySimple"" [label=""calculateCellBuySimple""];
""610_makeShitClone"" [label=""makeShitClone""];
""610_getMyTime"" [label=""getMyTime""];
""610_sellShitClones"" [label=""sellShitClones""];
""610_buyShitClones"" [label=""buyShitClones""];
""610_seedMarket"" [label=""seedMarket""];
""610_calculateCellBuy"" [label=""calculateCellBuy""];
""610_devFee"" [label=""devFee""];
""610_becomeShitClonelord"" [label=""becomeShitClonelord""];
""610_getShitClonelordReq"" [label=""getShitClonelordReq""];
""610_min"" [label=""min""];
""610_calculateCellSell"" [label=""calculateCellSell""];
""610_getBalance"" [label=""getBalance""];
""610_getTimeSinceLastEvent"" [label=""getTimeSinceLastEvent""];
""610_sellShitClones"" -> ""610_calculateCellSell"";
""610_calculateCellSell"" -> ""610_calculateTrade"";
""610_makeShitClone"" -> ""610_getMyTime"";
""610_buyShitClones"" -> ""610_devFee"";
""610_buyShitClones"" -> ""610_calculateCellBuy"";
""610_sellShitClones"" -> ""610_getMyTime"";
""610_calculateCellBuy"" -> ""610_calculateTrade"";
""610_sellShitClones"" -> ""610_devFee"";
""610_getTimeSinceLastEvent"" -> ""610_min"";
""610_calculateCellBuySimple"" -> ""610_calculateCellBuy"";
""610_getMyTime"" -> ""610_getTimeSinceLastEvent"";
}
"
0x6ff4b0b74174ad873ffbe8916487eb044c0ccc89.sol,HuToken,"contract HuToken is StandardToken, SafeMath { string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 18; string public version = ; address public ethFundDeposit; address public newContractAddr; bool public isFunding; uint256 public fundingStartBlock; uint256 public fundingStopBlock; uint256 public currentSupply; uint256 public tokenRaised = 0; uint256 public tokenMigrated = 0; uint256 public tokenExchangeRate = 625; event AllocateToken(address indexed _to, uint256 _value); event IssueToken(address indexed _to, uint256 _value); event IncreaseSupply(uint256 _value); event DecreaseSupply(uint256 _value); event Migrate(address indexed _to, uint256 _value); function formatDecimals(uint256 _value) internal returns (uint256 ) { return _value * 10 ** decimals; }",0,"subgraph cluster_849_HuToken {
label=""HuToken"";
""849_setMigrateContract"" [label=""setMigrateContract""];
""849_startFunding"" [label=""startFunding""];
""849_increaseSupply"" [label=""increaseSupply""];
""849_allocateToken"" [label=""allocateToken""];
""849_stopFunding"" [label=""stopFunding""];
""849_formatDecimals"" [label=""formatDecimals""];
""849_fallback"" [label=""fallback""];
""849_HuToken"" [label=""HuToken""];
""849_migrate"" [label=""migrate""];
""849_transferETH"" [label=""transferETH""];
""849_decreaseSupply"" [label=""decreaseSupply""];
""849_setTokenExchangeRate"" [label=""setTokenExchangeRate""];
""849_changeOwner"" [label=""changeOwner""];
""849_decreaseSupply"" -> ""849_isOwner"";
""849_setMigrateContract"" -> ""849_isOwner"";
""849_decreaseSupply"" -> ""849_safeSubtract"";
""849_allocateToken"" -> ""849_safeMult"";
""849_allocateToken"" -> ""849_formatDecimals"";
""849_stopFunding"" -> ""849_isOwner"";
""849_transferETH"" -> ""849_isOwner"";
""849_startFunding"" -> ""849_isOwner"";
""849_increaseSupply"" -> ""849_formatDecimals"";
""849_allocateToken"" -> ""849_isOwner"";
""849_increaseSupply"" -> ""849_safeAdd"";
""849_setTokenExchangeRate"" -> ""849_isOwner"";
""849_increaseSupply"" -> ""849_isOwner"";
""849_decreaseSupply"" -> ""849_formatDecimals"";
""849_HuToken"" -> ""849_formatDecimals"";
""849_changeOwner"" -> ""849_isOwner"";
""849_migrate"" -> ""849_safeAdd"";
""849_fallback"" -> ""849_safeAdd"";
""849_allocateToken"" -> ""849_safeAdd"";
""849_fallback"" -> ""849_safeMult"";
}
"
0xf0862d3ec27dce65803c9e2979f9d4d8bdd2f45f.sol,KMAToken,"contract KMAToken is StandardToken, SafeMath { string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 18; string public version = ; address public ethFundDeposit; address public newContractAddr; bool public isFunding; uint256 public fundingStartBlock; uint256 public fundingStopBlock; uint256 public currentSupply; uint256 public tokenRaised = 0; uint256 public tokenMigrated = 0; uint256 public tokenExchangeRate = 625; event AllocateToken(address indexed _to, uint256 _value); event IssueToken(address indexed _to, uint256 _value); event IncreaseSupply(uint256 _value); event DecreaseSupply(uint256 _value); event Migrate(address indexed _to, uint256 _value); function formatDecimals(uint256 _value) internal returns (uint256 ) { return _value * 10 ** decimals; }",0,"subgraph cluster_817_KMAToken {
label=""KMAToken"";
""817_fallback"" [label=""fallback""];
""817_stopFunding"" [label=""stopFunding""];
""817_decreaseSupply"" [label=""decreaseSupply""];
""817_startFunding"" [label=""startFunding""];
""817_allocateToken"" [label=""allocateToken""];
""817_setMigrateContract"" [label=""setMigrateContract""];
""817_formatDecimals"" [label=""formatDecimals""];
""817_changeOwner"" [label=""changeOwner""];
""817_migrate"" [label=""migrate""];
""817_transferETH"" [label=""transferETH""];
""817_KMAToken"" [label=""KMAToken""];
""817_setTokenExchangeRate"" [label=""setTokenExchangeRate""];
""817_allocateToken"" -> ""817_safeAdd"";
""817_setTokenExchangeRate"" -> ""817_isOwner"";
""817_allocateToken"" -> ""817_formatDecimals"";
""817_allocateToken"" -> ""817_isOwner"";
""817_decreaseSupply"" -> ""817_isOwner"";
""817_fallback"" -> ""817_safeMult"";
""817_stopFunding"" -> ""817_isOwner"";
""817_decreaseSupply"" -> ""817_formatDecimals"";
""817_allocateToken"" -> ""817_safeMult"";
""817_KMAToken"" -> ""817_formatDecimals"";
""817_startFunding"" -> ""817_isOwner"";
""817_setMigrateContract"" -> ""817_isOwner"";
""817_transferETH"" -> ""817_isOwner"";
""817_decreaseSupply"" -> ""817_safeSubtract"";
""817_migrate"" -> ""817_safeAdd"";
""817_changeOwner"" -> ""817_isOwner"";
""817_fallback"" -> ""817_safeAdd"";
}
"
0x36234385514de7eb14b2fb5125774e874a88f9ce.sol,titanToken,"contract titanToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; uint public startDate; uint public bonusEnds; uint public endDate; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function titanToken() public { symbol = ; name = ; decimals = 18; bonusEnds = now + 4 weeks; endDate = now + 8 weeks; }",0,"subgraph cluster_609_titanToken {
label=""titanToken"";
""609_fallback"" [label=""fallback""];
""609_titanToken"" [label=""titanToken""];
""609_approveAndCall"" [label=""approveAndCall""];
""609_transferFrom"" [label=""transferFrom""];
""609_allowance"" [label=""allowance""];
""609_approve"" [label=""approve""];
""609_balanceOf"" [label=""balanceOf""];
""609_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""609_transfer"" [label=""transfer""];
""609_totalSupply"" [label=""totalSupply""];
""609_transfer"" -> ""609_safeAdd"";
""609_transfer"" -> ""609_safeSub"";
""609_transferAnyERC20Token"" -> ""609_onlyOwner"";
""609_transferFrom"" -> ""609_safeAdd"";
""609_transferFrom"" -> ""609_safeSub"";
""609_fallback"" -> ""609_safeAdd"";
}
"
0xf48d72e5a2419c0c6f5822854b7bb7bf135d1623.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",0,"subgraph cluster_335_RefundVault {
label=""RefundVault"";
""335_enableRefunds"" [label=""enableRefunds""];
""335_deposit"" [label=""deposit""];
""335_refund"" [label=""refund""];
""335_walletWithdraw"" [label=""walletWithdraw""];
""335_close"" [label=""close""];
""335_RefundVault"" [label=""RefundVault""];
""335_walletWithdraw"" -> ""335_onlyOwner"";
""335_deposit"" -> ""335_onlyOwner"";
""335_enableRefunds"" -> ""335_onlyOwner"";
""335_close"" -> ""335_onlyOwner"";
}
"
0x293ed09bfc80b93cdf5a64306aaedcfad3c64955.sol,Halo3DShrimpFarmer,contract Halo3DShrimpFarmer is AcceptsHalo3D { uint256 public EGGS_TO_HATCH_1SHRIMP=86400; uint256 public STARTING_SHRIMP=300; uint256 PSN=10000; uint256 PSNH=5000; bool public initialized=false; address public ceoAddress; mapping (address => uint256) public hatcheryShrimp; mapping (address => uint256) public claimedEggs; mapping (address => uint256) public lastHatch; mapping (address => address) public referrals; uint256 public marketEggs; function Halo3DShrimpFarmer(address _baseContract) AcceptsHalo3D(_baseContract) public{ ceoAddress=msg.sender; },0,"subgraph cluster_662_Halo3DShrimpFarmer {
label=""Halo3DShrimpFarmer"";
""662_devFee"" [label=""devFee""];
""662_getMyShrimp"" [label=""getMyShrimp""];
""662_hatchEggs"" [label=""hatchEggs""];
""662_calculateEggSell"" [label=""calculateEggSell""];
""662_tokenFallback"" [label=""tokenFallback""];
""662_Halo3DShrimpFarmer"" [label=""Halo3DShrimpFarmer""];
""662_fallback"" [label=""fallback""];
""662_sellEggs"" [label=""sellEggs""];
""662_min"" [label=""min""];
""662_calculateTrade"" [label=""calculateTrade""];
""662_reinvest"" [label=""reinvest""];
""662_calculateEggBuy"" [label=""calculateEggBuy""];
""662_getBalance"" [label=""getBalance""];
""662_getContractDividends"" [label=""getContractDividends""];
""662__isContract"" [label=""_isContract""];
""662_calculateEggBuySimple"" [label=""calculateEggBuySimple""];
""662_seedMarket"" [label=""seedMarket""];
""662_getMyEggs"" [label=""getMyEggs""];
""662_getEggsSinceLastHatch"" [label=""getEggsSinceLastHatch""];
""662_getEggsSinceLastHatch"" -> ""662_min"";
""662_sellEggs"" -> ""662_getMyEggs"";
""662_tokenFallback"" -> ""662_devFee"";
""662_getMyEggs"" -> ""662_getEggsSinceLastHatch"";
""662_calculateEggBuySimple"" -> ""662_calculateEggBuy"";
""662_tokenFallback"" -> ""662_onlyTokenContract"";
""662_sellEggs"" -> ""662_calculateEggSell"";
""662_calculateEggBuy"" -> ""662_calculateTrade"";
""662_tokenFallback"" -> ""662_reinvest"";
""662_tokenFallback"" -> ""662__isContract"";
""662_Halo3DShrimpFarmer"" -> ""662_AcceptsHalo3D"";
""662_sellEggs"" -> ""662_devFee"";
""662_sellEggs"" -> ""662_reinvest"";
""662_hatchEggs"" -> ""662_getMyEggs"";
""662_calculateEggSell"" -> ""662_calculateTrade"";
""662_tokenFallback"" -> ""662_calculateEggBuy"";
}
"
0xedc1a631d4c3d0f554da14a4bce630f6cbc30a68.sol,NitroPlatformToken,"contract NitroPlatformToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 8; _totalSupply = 1100000000000000000; balances[0xA7D54F408719660Dcdbfa95CcA578227489ba215] = _totalSupply; emit Transfer(address(0), 0xA7D54F408719660Dcdbfa95CcA578227489ba215, _totalSupply); }",0,"subgraph cluster_543_NitroPlatformToken {
label=""NitroPlatformToken"";
""543_transferFrom"" [label=""transferFrom""];
""543_totalSupply"" [label=""totalSupply""];
""543_approve"" [label=""approve""];
""543_allowance"" [label=""allowance""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_balanceOf"" [label=""balanceOf""];
""543_constructor"" [label=""constructor""];
""543_transfer"" [label=""transfer""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_fallback"" [label=""fallback""];
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0x511724936c6f550be63e940ebdd4800f095ea12c.sol,cryptowars,contract cryptowars { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_3213_cryptowars {
label=""cryptowars"";
""3213_setSymbol"" [label=""setSymbol""];
""3213_setContractActive"" [label=""setContractActive""];
""3213_ethereumToTokens_"" [label=""ethereumToTokens_""];
""3213_myCardDividends"" [label=""myCardDividends""];
""3213_setInv1"" [label=""setInv1""];
""3213_buyCard"" [label=""buyCard""];
""3213_transfer"" [label=""transfer""];
""3213_setAllowReferral"" [label=""setAllowReferral""];
""3213_dividendsOf"" [label=""dividendsOf""];
""3213_distributeYield"" [label=""distributeYield""];
""3213_sqrt"" [label=""sqrt""];
""3213_buy"" [label=""buy""];
""3213_setHalfLifeTime"" [label=""setHalfLifeTime""];
""3213_extCheckHalfLife"" [label=""extCheckHalfLife""];
""3213_setName"" [label=""setName""];
""3213_sellPrice"" [label=""sellPrice""];
""3213_setMaxCards"" [label=""setMaxCards""];
""3213_getTotalDivsProduced"" [label=""getTotalDivsProduced""];
""3213_getCardPrice"" [label=""getCardPrice""];
""3213_tokensToEthereum_"" [label=""tokensToEthereum_""];
""3213_buyPrice"" [label=""buyPrice""];
""3213_setAdministrator"" [label=""setAdministrator""];
""3213_setFeeRates"" [label=""setFeeRates""];
""3213_reinvest"" [label=""reinvest""];
""3213_addAmbassador"" [label=""addAmbassador""];
""3213_totalEthereumBalance"" [label=""totalEthereumBalance""];
""3213_cryptowars"" [label=""cryptowars""];
""3213_setStakingRequirement"" [label=""setStakingRequirement""];
""3213_setHalfLifeRate"" [label=""setHalfLifeRate""];
""3213_setAllowHalfLife"" [label=""setAllowHalfLife""];
""3213_fallback"" [label=""fallback""];
""3213_disableInitialStage"" [label=""disableInitialStage""];
""3213_gettotalCardDivs"" [label=""gettotalCardDivs""];
""3213_getNextAvailableCard"" [label=""getNextAvailableCard""];
""3213_setCardActive"" [label=""setCardActive""];
""3213_checkHalfLife"" [label=""checkHalfLife""];
""3213_withdraw"" [label=""withdraw""];
""3213_balanceOf"" [label=""balanceOf""];
""3213_distributeInsurance"" [label=""distributeInsurance""];
""3213_totalSupply"" [label=""totalSupply""];
""3213_myDividends"" [label=""myDividends""];
""3213_sell"" [label=""sell""];
""3213_setInv3"" [label=""setInv3""];
""3213_getTotalCardValue"" [label=""getTotalCardValue""];
""3213_getCardOwner"" [label=""getCardOwner""];
""3213_addNewCard"" [label=""addNewCard""];
""3213_exit"" [label=""exit""];
""3213_getCardInsurance"" [label=""getCardInsurance""];
""3213_calculateTokensReceived"" [label=""calculateTokensReceived""];
""3213_setInv2"" [label=""setInv2""];
""3213_purchaseTokens"" [label=""purchaseTokens""];
""3213_myTokens"" [label=""myTokens""];
""3213_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""3213_distributeYield"" -> ""3213_checkHalfLife"";
""3213_transfer"" -> ""3213_onlyBagholders"";
""3213_setFeeRates"" -> ""3213_onlyAdministrator"";
""3213_buyCard"" -> ""3213_onlyCardActive"";
""3213_calculateTokensReceived"" -> ""3213_ethereumToTokens_"";
""3213_ethereumToTokens_"" -> ""3213_sqrt"";
""3213_setHalfLifeTime"" -> ""3213_onlyAdministrator"";
""3213_addNewCard"" -> ""3213_onlyAdministrator"";
""3213_calculateEthereumReceived"" -> ""3213_tokensToEthereum_"";
""3213_purchaseTokens"" -> ""3213_distributeInsurance"";
""3213_checkHalfLife"" -> ""3213_getTotalCardValue"";
""3213_setSymbol"" -> ""3213_onlyAdministrator"";
""3213_purchaseTokens"" -> ""3213_checkHalfLife"";
""3213_extCheckHalfLife"" -> ""3213_checkHalfLife"";
""3213_setHalfLifeRate"" -> ""3213_onlyAdministrator"";
""3213_sell"" -> ""3213_checkHalfLife"";
""3213_transfer"" -> ""3213_tokensToEthereum_"";
""3213_disableInitialStage"" -> ""3213_onlyAdministrator"";
""3213_setMaxCards"" -> ""3213_onlyAdministrator"";
""3213_reinvest"" -> ""3213_purchaseTokens"";
""3213_exit"" -> ""3213_withdraw"";
""3213_purchaseTokens"" -> ""3213_onlyActive"";
""3213_setAllowHalfLife"" -> ""3213_onlyAdministrator"";
""3213_buyPrice"" -> ""3213_tokensToEthereum_"";
""3213_myDividends"" -> ""3213_dividendsOf"";
""3213_setInv1"" -> ""3213_onlyAdministrator"";
""3213_withdraw"" -> ""3213_myDividends"";
""3213_buyCard"" -> ""3213_checkHalfLife"";
""3213_sellPrice"" -> ""3213_tokensToEthereum_"";
""3213_cryptowars"" -> ""3213_getTotalCardValue"";
""3213_purchaseTokens"" -> ""3213_antiEarlyWhale"";
""3213_setAdministrator"" -> ""3213_onlyAdministrator"";
""3213_fallback"" -> ""3213_purchaseTokens"";
""3213_distributeYield"" -> ""3213_getTotalCardValue"";
""3213_setAllowReferral"" -> ""3213_onlyAdministrator"";
""3213_sell"" -> ""3213_onlyBagholders"";
""3213_exit"" -> ""3213_sell"";
""3213_setContractActive"" -> ""3213_onlyAdministrator"";
""3213_buyCard"" -> ""3213_getTotalCardValue"";
""3213_transfer"" -> ""3213_myDividends"";
""3213_setCardActive"" -> ""3213_onlyAdministrator"";
""3213_buyCard"" -> ""3213_distributeInsurance"";
""3213_setInv3"" -> ""3213_onlyAdministrator"";
""3213_addNewCard"" -> ""3213_getTotalCardValue"";
""3213_setStakingRequirement"" -> ""3213_onlyAdministrator"";
""3213_addAmbassador"" -> ""3213_onlyAdministrator"";
""3213_myTokens"" -> ""3213_balanceOf"";
""3213_setName"" -> ""3213_onlyAdministrator"";
""3213_setInv2"" -> ""3213_onlyAdministrator"";
""3213_reinvest"" -> ""3213_onlyStronghands"";
""3213_buyCard"" -> ""3213_distributeYield"";
""3213_purchaseTokens"" -> ""3213_ethereumToTokens_"";
""3213_buy"" -> ""3213_purchaseTokens"";
""3213_withdraw"" -> ""3213_onlyStronghands"";
""3213_sell"" -> ""3213_tokensToEthereum_"";
""3213_reinvest"" -> ""3213_myDividends"";
""3213_transfer"" -> ""3213_withdraw"";
}
"
0xf3e70642c28f3f707408c56624c2f30ea9f9fce3.sol,BasicToken,"contract BasicToken is ERC20Basic, Ownable { using SafeMath for uint256; mapping (address => bool) public staff; mapping (address => uint256) balances; uint256 totalSupply_; mapping (address => uint256) public uniqueTokens; mapping (address => uint256) public preSaleTokens; mapping (address => uint256) public crowdSaleTokens; mapping (address => uint256) public freezeTokens; mapping (address => uint256) public freezeTimeBlock; uint256 public launchTime = 999999999999999999999999999999; uint256 public totalFreezeTokens = 0; bool public listing = false; bool public freezing = true; address public agentAddress; function totalSupply() public view returns (uint256) { return totalSupply_; }",0,"subgraph cluster_625_BasicToken {
label=""BasicToken"";
""625_checkVestingWithFrozen"" [label=""checkVestingWithFrozen""];
""625_totalSupply"" [label=""totalSupply""];
""625_transfer"" [label=""transfer""];
""625_checkVesting"" [label=""checkVesting""];
""625_balanceOf"" [label=""balanceOf""];
""625_transfer"" -> ""625_afterListing"";
""625_checkVestingWithFrozen"" -> ""625_checkVesting"";
""625_transfer"" -> ""625_checkVestingWithFrozen"";
""625_balanceOf"" -> ""625_checkVestingWithFrozen"";
}
"
0x55cb02fa505aafa776fd73464c535600bd90ec77.sol,ZX_GAME,contract ZX_GAME { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 2 ether) { msg.sender.transfer(this.balance); },0,"subgraph cluster_148_ZX_GAME {
label=""ZX_GAME"";
""148_Try"" [label=""Try""];
""148_Start"" [label=""Start""];
""148_Stop"" [label=""Stop""];
""148_fallback"" [label=""fallback""];
""148_constructor"" [label=""constructor""];
""148_New"" [label=""New""];
""148_New"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
}
"
0xca7b9121bd8fb33dce0706ba99b063242a6cf8ac.sol,Rubik,"contract Rubik { event Submission(address submitter, uint8[] moves); event NewLeader(address submitter, uint8[] moves); enum Color {Red, Blue, Yellow, Green, White, Orange}",0,"subgraph cluster_2442_Rubik {
label=""Rubik"";
""2442_trySolution"" [label=""trySolution""];
""2442_getCurrentWinner"" [label=""getCurrentWinner""];
""2442_shuffleRight"" [label=""shuffleRight""];
""2442_claim"" [label=""claim""];
""2442_getCurrentWinnerMoveCount"" [label=""getCurrentWinnerMoveCount""];
""2442_Rubik"" [label=""Rubik""];
""2442_getBalance"" [label=""getBalance""];
""2442_shuffleFront"" [label=""shuffleFront""];
""2442_shuffleUp"" [label=""shuffleUp""];
""2442_isSolved"" [label=""isSolved""];
""2442_addBalance"" [label=""addBalance""];
""2442_shuffleDown"" [label=""shuffleDown""];
""2442_getOwner"" [label=""getOwner""];
""2442_submitSolution"" [label=""submitSolution""];
""2442_getInitialState"" [label=""getInitialState""];
""2442_getContestEndTime"" [label=""getContestEndTime""];
""2442_verifySide"" [label=""verifySide""];
""2442_shuffleLeft"" [label=""shuffleLeft""];
""2442_shuffleFace"" [label=""shuffleFace""];
""2442_trySolution"" -> ""2442_shuffleRight"";
""2442_shuffleLeft"" -> ""2442_shuffleFace"";
""2442_shuffleFront"" -> ""2442_shuffleFace"";
""2442_submitSolution"" -> ""2442_isSolved"";
""2442_shuffleUp"" -> ""2442_shuffleFace"";
""2442_submitSolution"" -> ""2442_trySolution"";
""2442_trySolution"" -> ""2442_shuffleDown"";
""2442_isSolved"" -> ""2442_verifySide"";
""2442_trySolution"" -> ""2442_shuffleLeft"";
""2442_shuffleDown"" -> ""2442_shuffleFace"";
""2442_trySolution"" -> ""2442_shuffleUp"";
""2442_shuffleRight"" -> ""2442_shuffleFace"";
""2442_trySolution"" -> ""2442_shuffleFront"";
}
"
0x6a33c2c807124eae26f6188877c15675d3889ca3.sol,TUNEZ,contract TUNEZ is StandardToken { string public name; uint8 public decimals; string public symbol; string public version = ; uint256 public unitsOneEthCanBuy; uint256 public totalEthInWei; address public fundsWallet; function TUNEZ() { balances[msg.sender] = 2400000000000000000000000000; totalSupply = 2400000000000000000000000000; name = ; decimals = 18; symbol = ; unitsOneEthCanBuy = 1000000; fundsWallet = msg.sender; },0,"subgraph cluster_492_TUNEZ {
label=""TUNEZ"";
""492_batchTransfer"" [label=""batchTransfer""];
""492_approveAndCall"" [label=""approveAndCall""];
""492_batchTransferSingleValue"" [label=""batchTransferSingleValue""];
""492_TUNEZ"" [label=""TUNEZ""];
""492_fallback"" [label=""fallback""];
""492_batchTransfer"" -> ""492_transfer"";
""492_batchTransferSingleValue"" -> ""492_transfer"";
}
"
0x55dd6348b0f97ba5417cc3c3d9d98c36e14b7d44.sol,Tablow,"contract Tablow is ERC223Token { string public symbol = ; string public name = ; uint8 public constant decimals = 18; uint256 _totalSupply = 0; uint256 _MaxDistribPublicSupply = 0; uint256 _OwnerDistribSupply = 0; uint256 _CurrentDistribPublicSupply = 0; uint256 _FreeTokens = 0; uint256 _Multiplier1 = 2; uint256 _Multiplier2 = 3; uint256 _LimitMultiplier1 = 4e15; uint256 _LimitMultiplier2 = 8e15; uint256 _HighDonateLimit = 5e16; uint256 _BonusTokensPerETHdonated = 0; address _DistribFundsReceiverAddress = 0; address _remainingTokensReceiverAddress = 0; address owner = 0; bool setupDone = false; bool IsDistribRunning = false; bool DistribStarted = false; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed _owner, uint256 _value); mapping(address => uint256) balances; mapping(address => mapping(address => uint256)) allowed; mapping(address => bool) public Claimed; modifier onlyOwner() { require(msg.sender == owner); _; }",0,"subgraph cluster_1358_Tablow {
label=""Tablow"";
""1358_allowance"" [label=""allowance""];
""1358_fallback"" [label=""fallback""];
""1358_SetupDone"" [label=""SetupDone""];
""1358_totalSupply"" [label=""totalSupply""];
""1358_approve"" [label=""approve""];
""1358_DistribFundsReceiverAddress"" [label=""DistribFundsReceiverAddress""];
""1358_distributeAmounts"" [label=""distributeAmounts""];
""1358_SetBonus"" [label=""SetBonus""];
""1358_BurnTokens"" [label=""BurnTokens""];
""1358_transferFrom"" [label=""transferFrom""];
""1358_Tablow"" [label=""Tablow""];
""1358_IsDistribStarted"" [label=""IsDistribStarted""];
""1358_MaxDistribPublicSupply_"" [label=""MaxDistribPublicSupply_""];
""1358_CurrentDistribPublicSupply_"" [label=""CurrentDistribPublicSupply_""];
""1358_Owner"" [label=""Owner""];
""1358_SetupMultipliers"" [label=""SetupMultipliers""];
""1358_StopDistrib"" [label=""StopDistrib""];
""1358_SetFreeTokens"" [label=""SetFreeTokens""];
""1358_StartDistrib"" [label=""StartDistrib""];
""1358_balanceOf"" [label=""balanceOf""];
""1358_RemainingTokensReceiverAddress"" [label=""RemainingTokensReceiverAddress""];
""1358_OwnerDistribSupply_"" [label=""OwnerDistribSupply_""];
""1358_SetupToken"" [label=""SetupToken""];
""1358_distribution"" [label=""distribution""];
""1358_IsDistribRunningFalg_"" [label=""IsDistribRunningFalg_""];
""1358_SetupMultipliers"" -> ""1358_onlyOwner"";
""1358_distribution"" -> ""1358_onlyOwner"";
""1358_SetBonus"" -> ""1358_onlyOwner"";
""1358_distributeAmounts"" -> ""1358_onlyOwner"";
""1358_SetFreeTokens"" -> ""1358_onlyOwner"";
}
"
0xed231a75b03c2cd388ee26d4f74abf88cb683e8c.sol,SafeDecimalMath,"contract SafeDecimalMath { uint8 public constant decimals = 18; uint public constant UNIT = 10 ** uint(decimals); function addIsSafe(uint x, uint y) pure internal returns (bool) { return x + y >= y; }",0,"subgraph cluster_301_SafeDecimalMath {
label=""SafeDecimalMath"";
""301_subIsSafe"" [label=""subIsSafe""];
""301_max"" [label=""max""];
""301_min"" [label=""min""];
""301_mulIsSafe"" [label=""mulIsSafe""];
""301_intToDec"" [label=""intToDec""];
""301_safeMul_dec"" [label=""safeMul_dec""];
""301_safeAdd"" [label=""safeAdd""];
""301_safeMul"" [label=""safeMul""];
""301_addIsSafe"" [label=""addIsSafe""];
""301_safeDiv_dec"" [label=""safeDiv_dec""];
""301_safeDiv"" [label=""safeDiv""];
""301_safeSub"" [label=""safeSub""];
""301_divIsSafe"" [label=""divIsSafe""];
""301_safeDiv_dec"" -> ""301_safeDiv"";
""301_safeMul_dec"" -> ""301_safeMul"";
""301_intToDec"" -> ""301_safeMul"";
""301_safeDiv_dec"" -> ""301_safeMul"";
}
"
0x0346a0c18fd1beaafe564616c02743bb8ef042c5.sol,EasyCircle,contract EasyCircle { using SafeMath for uint256; string public constant symbol = ; string public constant name = ; uint8 public constant decimals = 18; uint256 _totalSupply = 777777777 * 10 ** uint256(decimals); address public owner; mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) allowed; constructor() EasyCircle() public { owner = msg.sender; balances[owner] = _totalSupply; },0,"subgraph cluster_298_EasyCircle {
label=""EasyCircle"";
""298_getMyBalance"" [label=""getMyBalance""];
""298_totalSupply"" [label=""totalSupply""];
""298_transferFrom"" [label=""transferFrom""];
""298_allowance"" [label=""allowance""];
""298_approve"" [label=""approve""];
""298_constructor"" [label=""constructor""];
""298_transfer"" [label=""transfer""];
""298_balanceOf"" [label=""balanceOf""];
""298_constructor"" -> ""298_constructor"";
}
"
0x6c6d6e2971a85d3d3a1353ee15a08fb7c819ed8b.sol,Experiment,contract Experiment { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1694_Experiment {
label=""Experiment"";
""1694_sqrt"" [label=""sqrt""];
""1694_reinvest"" [label=""reinvest""];
""1694_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1694_setStakingRequirement"" [label=""setStakingRequirement""];
""1694_purchaseInternal"" [label=""purchaseInternal""];
""1694_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1694_exit"" [label=""exit""];
""1694_sellPrice"" [label=""sellPrice""];
""1694_fallback"" [label=""fallback""];
""1694_setSymbol"" [label=""setSymbol""];
""1694_buyPrice"" [label=""buyPrice""];
""1694_isContract"" [label=""isContract""];
""1694_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1694_etherToSendFund"" [label=""etherToSendFund""];
""1694_myDividends"" [label=""myDividends""];
""1694_Experiment"" [label=""Experiment""];
""1694_sell"" [label=""sell""];
""1694_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1694_buy"" [label=""buy""];
""1694_balanceOf"" [label=""balanceOf""];
""1694_withdraw"" [label=""withdraw""];
""1694_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1694_myTokens"" [label=""myTokens""];
""1694_transfer"" [label=""transfer""];
""1694_setCanAcceptTokens"" [label=""setCanAcceptTokens""];
""1694_setAdministrator"" [label=""setAdministrator""];
""1694_transferAndCall"" [label=""transferAndCall""];
""1694_purchaseTokens"" [label=""purchaseTokens""];
""1694_totalSupply"" [label=""totalSupply""];
""1694_dividendsOf"" [label=""dividendsOf""];
""1694_setName"" [label=""setName""];
""1694_payFund"" [label=""payFund""];
""1694_myTokens"" -> ""1694_balanceOf"";
""1694_sell"" -> ""1694_tokensToEthereum_"";
""1694_calculateEthereumReceived"" -> ""1694_tokensToEthereum_"";
""1694_myDividends"" -> ""1694_dividendsOf"";
""1694_buy"" -> ""1694_purchaseInternal"";
""1694_setName"" -> ""1694_onlyAdministrator"";
""1694_buyPrice"" -> ""1694_tokensToEthereum_"";
""1694_purchaseInternal"" -> ""1694_purchaseTokens"";
""1694_purchaseInternal"" -> ""1694_notContract"";
""1694_transfer"" -> ""1694_onlyBagholders"";
""1694_ethereumToTokens_"" -> ""1694_sqrt"";
""1694_calculateTokensReceived"" -> ""1694_ethereumToTokens_"";
""1694_reinvest"" -> ""1694_onlyStronghands"";
""1694_setSymbol"" -> ""1694_onlyAdministrator"";
""1694_transferAndCall"" -> ""1694_isContract"";
""1694_reinvest"" -> ""1694_myDividends"";
""1694_sellPrice"" -> ""1694_tokensToEthereum_"";
""1694_withdraw"" -> ""1694_myDividends"";
""1694_setStakingRequirement"" -> ""1694_onlyAdministrator"";
""1694_setCanAcceptTokens"" -> ""1694_onlyAdministrator"";
""1694_transfer"" -> ""1694_withdraw"";
""1694_exit"" -> ""1694_sell"";
""1694_sell"" -> ""1694_onlyBagholders"";
""1694_transfer"" -> ""1694_myDividends"";
""1694_purchaseTokens"" -> ""1694_antiEarlyWhale"";
""1694_transferAndCall"" -> ""1694_transfer"";
""1694_setAdministrator"" -> ""1694_onlyAdministrator"";
""1694_exit"" -> ""1694_withdraw"";
""1694_withdraw"" -> ""1694_onlyStronghands"";
""1694_purchaseTokens"" -> ""1694_ethereumToTokens_"";
""1694_fallback"" -> ""1694_purchaseInternal"";
""1694_reinvest"" -> ""1694_purchaseTokens"";
}
"
0x6f6b380e49cf90d418639a5032675fdc05c11470.sol,TB,"contract TB is SafeMath { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TB ( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_378_TB {
label=""TB"";
""378_transferFrom"" [label=""transferFrom""];
""378_TB"" [label=""TB""];
""378_transfer"" [label=""transfer""];
""378_approve"" [label=""approve""];
""378_burn"" [label=""burn""];
""378_transfer"" -> ""378_safeSub"";
""378_burn"" -> ""378_safeSub"";
""378_transfer"" -> ""378_safeAdd"";
""378_transferFrom"" -> ""378_safeAdd"";
""378_transferFrom"" -> ""378_safeSub"";
}
"
0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol,MultiSigTokenWallet,contract MultiSigTokenWallet { address[] public owners; address[] public tokens; mapping (uint => Transaction) public transactions; mapping (uint => mapping (address => bool)) public confirmations; uint public transactionCount; mapping (address => uint) public tokenBalances; mapping (address => bool) public isOwner; mapping (address => address[]) public userList; uint public required; uint public nonce; struct Transaction { address destination; uint value; bytes data; bool executed; },0,"subgraph cluster_1537_MultiSigTokenWallet {
label=""MultiSigTokenWallet"";
""1537_submitTransaction"" [label=""submitTransaction""];
""1537_setMyTokenList"" [label=""setMyTokenList""];
""1537_withdrawToken"" [label=""withdrawToken""];
""1537_getTransactionCount"" [label=""getTransactionCount""];
""1537_executeTransaction"" [label=""executeTransaction""];
""1537_setTokenList"" [label=""setTokenList""];
""1537_addTransaction"" [label=""addTransaction""];
""1537_depositToken"" [label=""depositToken""];
""1537_addOwner"" [label=""addOwner""];
""1537_removeOwner"" [label=""removeOwner""];
""1537_releaseWallet"" [label=""releaseWallet""];
""1537_changeRequirement"" [label=""changeRequirement""];
""1537_receiveApproval"" [label=""receiveApproval""];
""1537_getConfirmations"" [label=""getConfirmations""];
""1537__deposited"" [label=""_deposited""];
""1537_fallback"" [label=""fallback""];
""1537_watch"" [label=""watch""];
""1537_revokeConfirmation"" [label=""revokeConfirmation""];
""1537_getTokenList"" [label=""getTokenList""];
""1537_withdrawAllTokens"" [label=""withdrawAllTokens""];
""1537_tokenFallback"" [label=""tokenFallback""];
""1537_getTransactionIds"" [label=""getTransactionIds""];
""1537_withdrawEverything"" [label=""withdrawEverything""];
""1537_constructor"" [label=""constructor""];
""1537_isConfirmed"" [label=""isConfirmed""];
""1537_getConfirmationCount"" [label=""getConfirmationCount""];
""1537_getOwners"" [label=""getOwners""];
""1537_confirmTransaction"" [label=""confirmTransaction""];
""1537_replaceOwner"" [label=""replaceOwner""];
""1537_deposit"" [label=""deposit""];
""1537_watch"" -> ""1537__deposited"";
""1537_addOwner"" -> ""1537_validRequirement"";
""1537_releaseWallet"" -> ""1537_notNull"";
""1537_releaseWallet"" -> ""1537_onlyWallet"";
""1537_withdrawEverything"" -> ""1537_withdrawAllTokens"";
""1537_addOwner"" -> ""1537_ownerDoesNotExist"";
""1537_revokeConfirmation"" -> ""1537_notExecuted"";
""1537_deposit"" -> ""1537__deposited"";
""1537_setTokenList"" -> ""1537_onlyWallet"";
""1537_withdrawToken"" -> ""1537_notNull"";
""1537_replaceOwner"" -> ""1537_ownerExists"";
""1537_submitTransaction"" -> ""1537_confirmTransaction"";
""1537_changeRequirement"" -> ""1537_onlyWallet"";
""1537_tokenFallback"" -> ""1537__deposited"";
""1537_constructor"" -> ""1537_validRequirement"";
""1537_revokeConfirmation"" -> ""1537_ownerExists"";
""1537_receiveApproval"" -> ""1537_deposit"";
""1537_depositToken"" -> ""1537_deposit"";
""1537_addOwner"" -> ""1537_notNull"";
""1537_confirmTransaction"" -> ""1537_executeTransaction"";
""1537_removeOwner"" -> ""1537_changeRequirement"";
""1537_withdrawAllTokens"" -> ""1537_notNull"";
""1537_removeOwner"" -> ""1537_onlyWallet"";
""1537_addTransaction"" -> ""1537_notNull"";
""1537_changeRequirement"" -> ""1537_validRequirement"";
""1537_releaseWallet"" -> ""1537_addOwner"";
""1537_submitTransaction"" -> ""1537_addTransaction"";
""1537_revokeConfirmation"" -> ""1537_confirmed"";
""1537_withdrawToken"" -> ""1537_onlyWallet"";
""1537_releaseWallet"" -> ""1537_removeOwner"";
""1537_removeOwner"" -> ""1537_ownerExists"";
""1537_executeTransaction"" -> ""1537_isConfirmed"";
""1537_releaseWallet"" -> ""1537_ownerDoesNotExist"";
""1537_executeTransaction"" -> ""1537_notExecuted"";
""1537_addOwner"" -> ""1537_onlyWallet"";
""1537_replaceOwner"" -> ""1537_ownerDoesNotExist"";
""1537_withdrawEverything"" -> ""1537_notNull"";
""1537_confirmTransaction"" -> ""1537_ownerExists"";
""1537_confirmTransaction"" -> ""1537_notConfirmed"";
""1537_replaceOwner"" -> ""1537_onlyWallet"";
""1537_watch"" -> ""1537_ownerExists"";
""1537_confirmTransaction"" -> ""1537_transactionExists"";
""1537_withdrawEverything"" -> ""1537_onlyWallet"";
""1537_withdrawAllTokens"" -> ""1537_onlyWallet"";
}
"
0x77b3106417d4cf3138882cc21d4710c71183b707.sol,Brave3d,contract Brave3d { struct Stage { uint8 cnt; uint256 blocknumber; bool isFinish; uint8 deadIndex; mapping(uint8 => address) playerMap; },0,"subgraph cluster_1176_Brave3d {
label=""Brave3d"";
""1176_fallback"" [label=""fallback""];
""1176_getName"" [label=""getName""];
""1176_buyFromValue"" [label=""buyFromValue""];
""1176_getReferee"" [label=""getReferee""];
""1176_myReferee"" [label=""myReferee""];
""1176_resetStage"" [label=""resetStage""];
""1176_overStage"" [label=""overStage""];
""1176_currentStageData"" [label=""currentStageData""];
""1176_myEarnings"" [label=""myEarnings""];
""1176_setName"" [label=""setName""];
""1176_getEarnings"" [label=""getEarnings""];
""1176_getStageData"" [label=""getStageData""];
""1176_getRefereeAddress"" [label=""getRefereeAddress""];
""1176_constructor"" [label=""constructor""];
""1176_buy"" [label=""buy""];
""1176_withdraw"" [label=""withdraw""];
""1176_buyByName"" [label=""buyByName""];
""1176_forceOverStage"" [label=""forceOverStage""];
""1176_buyByAddress"" [label=""buyByAddress""];
""1176_buyByAddress"" -> ""1176_buy"";
""1176_withdraw"" -> ""1176_overStage"";
""1176_setName"" -> ""1176_isExistsOfAddressNameMap"";
""1176_withdraw"" -> ""1176_hasEarnings"";
""1176_myEarnings"" -> ""1176_hasEarnings"";
""1176_buyByName"" -> ""1176_resetStage"";
""1176_buyByName"" -> ""1176_buy"";
""1176_buyFromValue"" -> ""1176_buy"";
""1176_forceOverStage"" -> ""1176_overStage"";
""1176_buyFromValue"" -> ""1176_resetStage"";
""1176_setName"" -> ""1176_overStage"";
""1176_buyByAddress"" -> ""1176_resetStage"";
""1176_setName"" -> ""1176_isExistsOfNameAddressMap"";
""1176_buyByName"" -> ""1176_overStage"";
""1176_buyByAddress"" -> ""1176_overStage"";
""1176_buyFromValue"" -> ""1176_overStage"";
}
"
0x003ad9c18bc279f40632e7e5de2fd213931215d0.sol,PlanetCryptoToken,"contract PlanetCryptoToken is ERC721Full_custom{ using Percent for Percent.percent; event referralPaid(address indexed search_to, address to, uint256 amnt, uint256 timestamp); event issueCoinTokens(address indexed searched_to, address to, uint256 amnt, uint256 timestamp); event landPurchased(uint256 indexed search_token_id, address indexed search_buyer, uint256 token_id, address buyer, bytes32 name, int256 center_lat, int256 center_lng, uint256 size, uint256 bought_at, uint256 empire_score, uint256 timestamp); event taxDistributed(uint256 amnt, uint256 total_players, uint256 timestamp); event cardBought( uint256 indexed search_token_id, address indexed search_from, address indexed search_to, uint256 token_id, address from, address to, bytes32 name, uint256 orig_value, uint256 new_value, uint256 empireScore, uint256 newEmpireScore, uint256 now); address owner; address devBankAddress; address tokenBankAddress; modifier onlyOwner() { require(msg.sender == owner); _; }",0,"subgraph cluster_4413_PlanetCryptoToken {
label=""PlanetCryptoToken"";
""4413_p_update_mEmpireScoreMultiplier"" [label=""p_update_mEmpireScoreMultiplier""];
""4413_p_update_planetCryptoCoinAddress"" [label=""p_update_planetCryptoCoinAddress""];
""4413_buyCard"" [label=""buyCard""];
""4413_p_update_planetCryptoUtilsAddress"" [label=""p_update_planetCryptoUtilsAddress""];
""4413_process_swap"" [label=""process_swap""];
""4413_buyLandWithTokens"" [label=""buyLandWithTokens""];
""4413_queryMap"" [label=""queryMap""];
""4413_p_update_action"" [label=""p_update_action""];
""4413_p_update_mResalePlotDevPercent"" [label=""p_update_mResalePlotDevPercent""];
""4413_debug_transfer"" [label=""debug_transfer""];
""4413_setupPlotOwnership"" [label=""setupPlotOwnership""];
""4413_our_transferFrom"" [label=""our_transferFrom""];
""4413_processPurchase"" [label=""processPurchase""];
""4413_p_update_mResaleMultipler"" [label=""p_update_mResaleMultipler""];
""4413_p_update_tokensRewardsAllocated"" [label=""p_update_tokensRewardsAllocated""];
""4413_m"" [label=""m""];
""4413_getAllPlayerObjectLen"" [label=""getAllPlayerObjectLen""];
""4413_roundLatLng"" [label=""roundLatLng""];
""4413_queryPlotExists"" [label=""queryPlotExists""];
""4413_p_update_currentPlotEmpireScore"" [label=""p_update_currentPlotEmpireScore""];
""4413_p_update_mNewPlotTaxPercent"" [label=""p_update_mNewPlotTaxPercent""];
""4413_p_update_mResalePlotOwnerPercent"" [label=""p_update_mResalePlotOwnerPercent""];
""4413_transferFrom"" [label=""transferFrom""];
""4413_calcPlayerDivs"" [label=""calcPlayerDivs""];
""4413_withdrawTaxEarning"" [label=""withdrawTaxEarning""];
""4413_p_update_mNewPlotDevPercent"" [label=""p_update_mNewPlotDevPercent""];
""4413_p_update_mResalePlotTaxPercent"" [label=""p_update_mResalePlotTaxPercent""];
""4413_stringToBytes32"" [label=""stringToBytes32""];
""4413_burnToken"" [label=""burnToken""];
""4413_constructor"" [label=""constructor""];
""4413_taxEarningsAvailable"" [label=""taxEarningsAvailable""];
""4413_safeTransferFrom"" [label=""safeTransferFrom""];
""4413_p_withdrawDevHoldings"" [label=""p_withdrawDevHoldings""];
""4413_p_update_mRefPercent"" [label=""p_update_mRefPercent""];
""4413_buyLand"" [label=""buyLand""];
""4413_getToken"" [label=""getToken""];
""4413_p_update_tokensRewardsAvailable"" [label=""p_update_tokensRewardsAvailable""];
""4413_setupZoomLvl"" [label=""setupZoomLvl""];
""4413_p_update_priceUpdateAmount"" [label=""p_update_priceUpdateAmount""];
""4413_incPlayerOwed"" [label=""incPlayerOwed""];
""4413_buyLand"" -> ""4413_updateUsersLastAccess"";
""4413_constructor"" -> ""4413_constructor"";
""4413_buyLand"" -> ""4413_calcPlayerDivs"";
""4413_p_update_action"" -> ""4413_onlyOwner"";
""4413_calcPlayerDivs"" -> ""4413_incPlayerOwed"";
""4413_p_update_mRefPercent"" -> ""4413_onlyOwner"";
""4413_burnToken"" -> ""4413_ownerOf"";
""4413_buyLandWithTokens"" -> ""4413_validateTokenPurchase"";
""4413_buyCard"" -> ""4413_updateUsersLastAccess"";
""4413_safeTransferFrom"" -> ""4413__checkOnERC721Received"";
""4413_calcPlayerDivs"" -> ""4413_totalSupply"";
""4413_p_update_mNewPlotTaxPercent"" -> ""4413_onlyOwner"";
""4413_p_update_mEmpireScoreMultiplier"" -> ""4413_onlyOwner"";
""4413_safeTransferFrom"" -> ""4413_transferFrom"";
""4413_processPurchase"" -> ""4413_setupPlotOwnership"";
""4413_buyCard"" -> ""4413_calcPlayerDivs"";
""4413_processPurchase"" -> ""4413__mint"";
""4413_transferFrom"" -> ""4413_process_swap"";
""4413_getToken"" -> ""4413_ownerOf"";
""4413_p_update_mResalePlotOwnerPercent"" -> ""4413_onlyOwner"";
""4413_transferFrom"" -> ""4413__isApprovedOrOwner"";
""4413_our_transferFrom"" -> ""4413_process_swap"";
""4413_buyLandWithTokens"" -> ""4413_processPurchase"";
""4413_setupPlotOwnership"" -> ""4413_setupZoomLvl"";
""4413_buyLand"" -> ""4413_validateLand"";
""4413_p_update_planetCryptoCoinAddress"" -> ""4413_onlyOwner"";
""4413_burnToken"" -> ""4413__burn"";
""4413_p_update_mResaleMultipler"" -> ""4413_onlyOwner"";
""4413_buyCard"" -> ""4413_our_transferFrom"";
""4413_buyLand"" -> ""4413_validatePurchase"";
""4413_setupZoomLvl"" -> ""4413_roundLatLng"";
""4413_processPurchase"" -> ""4413_totalSupply"";
""4413_buyCard"" -> ""4413_validateResale"";
""4413_p_update_currentPlotEmpireScore"" -> ""4413_onlyOwner"";
""4413_buyLandWithTokens"" -> ""4413_validateLand"";
""4413_buyLandWithTokens"" -> ""4413_updateUsersLastAccess"";
""4413_our_transferFrom"" -> ""4413_internal_transferFrom"";
""4413_burnToken"" -> ""4413_onlyOwner"";
""4413_p_update_priceUpdateAmount"" -> ""4413_onlyOwner"";
""4413_p_update_mResalePlotDevPercent"" -> ""4413_onlyOwner"";
""4413_p_update_planetCryptoUtilsAddress"" -> ""4413_onlyOwner"";
""4413_p_update_tokensRewardsAvailable"" -> ""4413_onlyOwner"";
""4413_p_update_mResalePlotTaxPercent"" -> ""4413_onlyOwner"";
""4413_transferFrom"" -> ""4413_transferFrom"";
""4413_p_update_tokensRewardsAllocated"" -> ""4413_onlyOwner"";
""4413_p_update_mNewPlotDevPercent"" -> ""4413_onlyOwner"";
""4413_buyCard"" -> ""4413_ownerOf"";
""4413_safeTransferFrom"" -> ""4413_safeTransferFrom"";
""4413_debug_transfer"" -> ""4413_internal_transferFrom"";
""4413_buyLand"" -> ""4413_processPurchase"";
}
"
0x38ceafcff00dc2f88656a4ff3235e2124819eef6.sol,CryptojoyTokenSeller,"contract CryptojoyTokenSeller is Ownable { using SafeMath for uint; uint8 public constant decimals = 18; uint public miningSupply; uint constant MAGNITUDE = 10**6; uint constant LOG1DOT5 = 405465; uint constant THREE_SECOND= 15 * MAGNITUDE / 10; uint public a; uint public b; uint public c; uint public blockInterval; uint public startBlockNumber; address public platform; uint public lowerBoundaryETH; uint public upperBoundaryETH; uint public supplyPerInterval; uint public miningInterval; uint public tokenMint = 0; EIP20Interface public token; modifier isWithinLimits(uint _eth) { require(_eth >= lowerBoundaryETH, ); require(_eth <= upperBoundaryETH, ); _; }",0,"subgraph cluster_836_CryptojoyTokenSeller {
label=""CryptojoyTokenSeller"";
""836_log"" [label=""log""];
""836_getCurrentStage"" [label=""getCurrentStage""];
""836_withdraw"" [label=""withdraw""];
""836_changeRate"" [label=""changeRate""];
""836_tokenRemain"" [label=""tokenRemain""];
""836_fallback"" [label=""fallback""];
""836_changeWithdraw"" [label=""changeWithdraw""];
""836_calculatePrice"" [label=""calculatePrice""];
""836_buy"" [label=""buy""];
""836_constructor"" [label=""constructor""];
""836_buy"" -> ""836_isWithinLimits"";
""836_buy"" -> ""836_calculatePrice"";
""836_withdraw"" -> ""836_onlyOwner"";
""836_calculatePrice"" -> ""836_log"";
""836_changeRate"" -> ""836_onlyOwner"";
""836_tokenRemain"" -> ""836_getCurrentStage"";
""836_changeWithdraw"" -> ""836_onlyOwner"";
""836_buy"" -> ""836_getCurrentStage"";
""836_fallback"" -> ""836_buy"";
}
"
0x24626fd95ad815bab2136d6f91ca10562161cda3.sol,DaoStakeStorage,"contract DaoStakeStorage is ResolverClient, DaoConstants, AddressIteratorStorage { using DoublyLinkedList for DoublyLinkedList.Address; mapping (address => uint256) public lockedDGDStake; mapping (address => uint256) public actualLockedDGD; uint256 public totalLockedDGDStake; uint256 public totalModeratorLockedDGDStake; DoublyLinkedList.Address allParticipants; DoublyLinkedList.Address allModerators; mapping (address => bool) public redeemedBadge; mapping (address => bool) public carbonVoteBonusClaimed; constructor(address _resolver) public { require(init(CONTRACT_STORAGE_DAO_STAKE, _resolver)); }",0,"subgraph cluster_7433_DaoStakeStorage {
label=""DaoStakeStorage"";
""7433_totalModeratorLockedDGDStake"" [label=""totalModeratorLockedDGDStake""];
""7433_updateTotalLockedDGDStake"" [label=""updateTotalLockedDGDStake""];
""7433_constructor"" [label=""constructor""];
""7433_isInModeratorsList"" [label=""isInModeratorsList""];
""7433_updateUserDGDStake"" [label=""updateUserDGDStake""];
""7433_readNextModerator"" [label=""readNextModerator""];
""7433_lockedDGDStake"" [label=""lockedDGDStake""];
""7433_removeFromModeratorList"" [label=""removeFromModeratorList""];
""7433_readPreviousModerator"" [label=""readPreviousModerator""];
""7433_addToModeratorList"" [label=""addToModeratorList""];
""7433_redeemBadge"" [label=""redeemBadge""];
""7433_updateTotalModeratorLockedDGDs"" [label=""updateTotalModeratorLockedDGDs""];
""7433_readPreviousParticipant"" [label=""readPreviousParticipant""];
""7433_readLastModerator"" [label=""readLastModerator""];
""7433_setCarbonVoteBonusClaimed"" [label=""setCarbonVoteBonusClaimed""];
""7433_readTotalModerators"" [label=""readTotalModerators""];
""7433_addToParticipantList"" [label=""addToParticipantList""];
""7433_readUserDGDStake"" [label=""readUserDGDStake""];
""7433_isInParticipantList"" [label=""isInParticipantList""];
""7433_readFirstParticipant"" [label=""readFirstParticipant""];
""7433_readTotalParticipant"" [label=""readTotalParticipant""];
""7433_totalLockedDGDStake"" [label=""totalLockedDGDStake""];
""7433_readLastParticipant"" [label=""readLastParticipant""];
""7433_readFirstModerator"" [label=""readFirstModerator""];
""7433_removeFromParticipantList"" [label=""removeFromParticipantList""];
""7433_readNextParticipant"" [label=""readNextParticipant""];
""7433_readFirstModerator"" -> ""7433_read_first_from_addresses"";
""7433_readTotalParticipant"" -> ""7433_read_total_addresses"";
""7433_setCarbonVoteBonusClaimed"" -> ""7433_sender_is"";
""7433_readNextModerator"" -> ""7433_read_next_from_addresses"";
""7433_readLastModerator"" -> ""7433_read_last_from_addresses"";
""7433_readTotalModerators"" -> ""7433_read_total_addresses"";
""7433_removeFromParticipantList"" -> ""7433_sender_is"";
""7433_updateTotalModeratorLockedDGDs"" -> ""7433_sender_is_from"";
""7433_updateUserDGDStake"" -> ""7433_sender_is"";
""7433_readNextParticipant"" -> ""7433_read_next_from_addresses"";
""7433_readLastParticipant"" -> ""7433_read_last_from_addresses"";
""7433_addToModeratorList"" -> ""7433_sender_is"";
""7433_addToParticipantList"" -> ""7433_sender_is"";
""7433_readPreviousModerator"" -> ""7433_read_previous_from_addresses"";
""7433_updateTotalLockedDGDStake"" -> ""7433_sender_is_from"";
""7433_readPreviousParticipant"" -> ""7433_read_previous_from_addresses"";
""7433_readFirstParticipant"" -> ""7433_read_first_from_addresses"";
""7433_removeFromModeratorList"" -> ""7433_sender_is"";
""7433_constructor"" -> ""7433_init"";
""7433_redeemBadge"" -> ""7433_sender_is"";
}
"
0xe3818504c1b32bf1557b16c238b2e01fd3149c17.sol,TeamAllocation,contract TeamAllocation is Ownable { using SafeMath for uint; uint public unlockedAt; PillarToken plr; mapping (address => uint) allocations; uint tokensCreated = 0; uint constant public lockedTeamAllocationTokens = 16000000e18; address public teamStorageVault = 0x3f5D90D5Cc0652AAa40519114D007Bf119Afe1Cf; function TeamAllocation() { plr = PillarToken(msg.sender); uint nineMonths = 9 * 30 days; unlockedAt = now.add(nineMonths); allocations[teamStorageVault] = lockedTeamAllocationTokens; },0,"subgraph cluster_304_TeamAllocation {
label=""TeamAllocation"";
""304_unlock"" [label=""unlock""];
""304_TeamAllocation"" [label=""TeamAllocation""];
""304_getTotalAllocation"" [label=""getTotalAllocation""];
}
"
0xcfd9c7074ca3c9b6190ebb26cb2115346851fcbd.sol,MineBlocks,"contract MineBlocks is Ownable { uint256 public totalSupply; using SafeMath for uint256; mapping(address => uint256) balances; mapping(address => uint256) holded; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); function transfer(address _to, uint256 _value) public returns (bool) { require(_to != address(0)); require(_value <= balances[msg.sender]); if(block.number>blockEndICO || msg.sender==owner){ balances[msg.sender] = balances[msg.sender].sub(_value); holded[_to]=block.number; balances[_to] = balances[_to].add(_value); Transfer(msg.sender, _to, _value); return true; }",0,"subgraph cluster_912_MineBlocks {
label=""MineBlocks"";
""912_buy"" [label=""buy""];
""912_transfer"" [label=""transfer""];
""912_balanceOf"" [label=""balanceOf""];
""912_withdrawReward"" [label=""withdrawReward""];
""912_allowance"" [label=""allowance""];
""912_withdraw"" [label=""withdraw""];
""912_approve"" [label=""approve""];
""912_increaseApproval"" [label=""increaseApproval""];
""912_approveAndCall"" [label=""approveAndCall""];
""912_MineBlocks"" [label=""MineBlocks""];
""912_fallback"" [label=""fallback""];
""912_transferFrom"" [label=""transferFrom""];
""912_decreaseApproval"" [label=""decreaseApproval""];
""912_transferBuy"" [label=""transferBuy""];
""912_deposit"" [label=""deposit""];
""912_buy"" -> ""912_status"";
""912_approveAndCall"" -> ""912_approve"";
""912_withdrawReward"" -> ""912_status"";
""912_buy"" -> ""912_transferBuy"";
""912_withdraw"" -> ""912_onlyOwner"";
""912_fallback"" -> ""912_buy"";
""912_deposit"" -> ""912_status"";
""912_approveAndCall"" -> ""912_onlyOwner"";
}
"
0x40a835f8573c4b75e962e435591ea2200b74a714.sol,MyEtherTeller,contract MyEtherTeller { address public owner; struct EscrowStruct { address buyer; address seller; address escrow_agent; uint escrow_fee; uint amount; bool escrow_intervention; bool release_approval; bool refund_approval; bytes32 notes; },0,"subgraph cluster_1399_MyEtherTeller {
label=""MyEtherTeller"";
""1399_escrowDecision"" [label=""escrowDecision""];
""1399_SellerHistory"" [label=""SellerHistory""];
""1399_buyerFundRelease"" [label=""buyerFundRelease""];
""1399_newEscrow"" [label=""newEscrow""];
""1399_CheckBalance"" [label=""CheckBalance""];
""1399_checkStatus"" [label=""checkStatus""];
""1399_MyEtherTeller"" [label=""MyEtherTeller""];
""1399_EscrowEscalation"" [label=""EscrowEscalation""];
""1399_escrowHistory"" [label=""escrowHistory""];
""1399_getEscrowFee"" [label=""getEscrowFee""];
""1399_fallback"" [label=""fallback""];
""1399_sellerRefund"" [label=""sellerRefund""];
""1399_getNumTransactions"" [label=""getNumTransactions""];
""1399_buyerHistory"" [label=""buyerHistory""];
""1399_getSpecificTransaction"" [label=""getSpecificTransaction""];
""1399_WithdrawFunds"" [label=""WithdrawFunds""];
""1399_setEscrowFee"" [label=""setEscrowFee""];
""1399_SellerHistory"" -> ""1399_checkStatus"";
""1399_newEscrow"" -> ""1399_getEscrowFee"";
""1399_buyerHistory"" -> ""1399_checkStatus"";
""1399_getSpecificTransaction"" -> ""1399_checkStatus"";
""1399_escrowHistory"" -> ""1399_checkStatus"";
}
"
0x748e0216c9c0ccf215dcd1e848d461e6ce86a5f0.sol,EGC,contract EGC is StandardToken{ string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; string public constant version = ; address public owner; modifier onlyOwner{ if(msg.sender != owner) throw; _; },0,"subgraph cluster_529_EGC {
label=""EGC"";
""529_kill"" [label=""kill""];
""529_EGC"" [label=""EGC""];
""529_changeOwner"" [label=""changeOwner""];
""529_fallback"" [label=""fallback""];
""529_changeOwner"" -> ""529_onlyOwner"";
""529_kill"" -> ""529_onlyOwner"";
}
"
0x4d2cc8b68c4757c5e2eaac3b6ee0405d0c2ffafe.sol,EasyCoin,contract EasyCoin is StandardToken { uint public constant INITIAL_SUPPLY = 2000000000; string public name = ; string public symbol = ; uint8 public decimals = 18; address private owner; bool public released; constructor() public { totalSupply_ = INITIAL_SUPPLY * (10 ** uint(decimals)); balances[msg.sender] = totalSupply_; owner = msg.sender; released = false; },0,"subgraph cluster_663_EasyCoin {
label=""EasyCoin"";
""663_transfer"" [label=""transfer""];
""663_isRelease"" [label=""isRelease""];
""663_transferFrom"" [label=""transferFrom""];
""663_constructor"" [label=""constructor""];
""663_release"" [label=""release""];
""663_approve"" [label=""approve""];
""663_allowance"" [label=""allowance""];
""663_transferFrom"" -> ""663_transferFrom"";
""663_transfer"" -> ""663_transfer"";
""663_allowance"" -> ""663_onlyReleased"";
""663_transfer"" -> ""663_onlyReleased"";
""663_transferFrom"" -> ""663_onlyReleased"";
""663_approve"" -> ""663_approve"";
""663_approve"" -> ""663_onlyReleased"";
""663_allowance"" -> ""663_allowance"";
}
"
0xf0150cec4fe8477d039c4b4e679c040480763170.sol,PLCRVoting,"contract PLCRVoting { event _VoteCommitted(uint indexed pollID, uint numTokens, address indexed voter); event _VoteRevealed(uint indexed pollID, uint numTokens, uint votesFor, uint votesAgainst, uint indexed choice, address indexed voter); event _PollCreated(uint voteQuorum, uint commitEndDate, uint revealEndDate, uint indexed pollID, address indexed creator); event _VotingRightsGranted(uint numTokens, address indexed voter); event _VotingRightsWithdrawn(uint numTokens, address indexed voter); event _TokensRescued(uint indexed pollID, address indexed voter); using AttributeStore for AttributeStore.Data; using DLL for DLL.Data; using SafeMath for uint; struct Poll { uint commitEndDate; uint revealEndDate; uint voteQuorum; uint votesFor; uint votesAgainst; mapping(address => bool) didCommit; mapping(address => bool) didReveal; }",0,"subgraph cluster_1914_PLCRVoting {
label=""PLCRVoting"";
""1914_pollExists"" [label=""pollExists""];
""1914_didReveal"" [label=""didReveal""];
""1914_validPosition"" [label=""validPosition""];
""1914_getNumTokens"" [label=""getNumTokens""];
""1914_rescueTokens"" [label=""rescueTokens""];
""1914_getNumPassingTokens"" [label=""getNumPassingTokens""];
""1914_revealVote"" [label=""revealVote""];
""1914_commitPeriodActive"" [label=""commitPeriodActive""];
""1914_revealVotes"" [label=""revealVotes""];
""1914_getCommitHash"" [label=""getCommitHash""];
""1914_getTotalNumberOfTokensForWinningOption"" [label=""getTotalNumberOfTokensForWinningOption""];
""1914_pollEnded"" [label=""pollEnded""];
""1914_isPassed"" [label=""isPassed""];
""1914_revealPeriodActive"" [label=""revealPeriodActive""];
""1914_rescueTokensInMultiplePolls"" [label=""rescueTokensInMultiplePolls""];
""1914_withdrawVotingRights"" [label=""withdrawVotingRights""];
""1914_pollMap"" [label=""pollMap""];
""1914_constructor"" [label=""constructor""];
""1914_isExpired"" [label=""isExpired""];
""1914_getInsertPointForNumTokens"" [label=""getInsertPointForNumTokens""];
""1914_didCommit"" [label=""didCommit""];
""1914_startPoll"" [label=""startPoll""];
""1914_commitVote"" [label=""commitVote""];
""1914_requestVotingRights"" [label=""requestVotingRights""];
""1914_attrUUID"" [label=""attrUUID""];
""1914_getLockedTokens"" [label=""getLockedTokens""];
""1914_getLastNode"" [label=""getLastNode""];
""1914_commitVotes"" [label=""commitVotes""];
""1914_commitVote"" -> ""1914_requestVotingRights"";
""1914_getNumPassingTokens"" -> ""1914_getCommitHash"";
""1914_getLockedTokens"" -> ""1914_getNumTokens"";
""1914_commitVote"" -> ""1914_validPosition"";
""1914_revealVote"" -> ""1914_getNumTokens"";
""1914_commitVote"" -> ""1914_commitPeriodActive"";
""1914_getNumPassingTokens"" -> ""1914_pollEnded"";
""1914_revealPeriodActive"" -> ""1914_pollExists"";
""1914_getInsertPointForNumTokens"" -> ""1914_getLastNode"";
""1914_getTotalNumberOfTokensForWinningOption"" -> ""1914_isPassed"";
""1914_getNumPassingTokens"" -> ""1914_isPassed"";
""1914_revealVotes"" -> ""1914_revealVote"";
""1914_revealPeriodActive"" -> ""1914_isExpired"";
""1914_rescueTokens"" -> ""1914_isExpired"";
""1914_getNumPassingTokens"" -> ""1914_getNumTokens"";
""1914_commitPeriodActive"" -> ""1914_isExpired"";
""1914_getInsertPointForNumTokens"" -> ""1914_getNumTokens"";
""1914_revealPeriodActive"" -> ""1914_commitPeriodActive"";
""1914_getCommitHash"" -> ""1914_attrUUID"";
""1914_revealVote"" -> ""1914_getCommitHash"";
""1914_revealVote"" -> ""1914_revealPeriodActive"";
""1914_pollEnded"" -> ""1914_isExpired"";
""1914_getNumTokens"" -> ""1914_attrUUID"";
""1914_getLockedTokens"" -> ""1914_getLastNode"";
""1914_commitVotes"" -> ""1914_commitVote"";
""1914_pollEnded"" -> ""1914_pollExists"";
""1914_commitPeriodActive"" -> ""1914_pollExists"";
""1914_didCommit"" -> ""1914_pollExists"";
""1914_rescueTokensInMultiplePolls"" -> ""1914_rescueTokens"";
""1914_getTotalNumberOfTokensForWinningOption"" -> ""1914_pollEnded"";
""1914_commitVote"" -> ""1914_attrUUID"";
""1914_isPassed"" -> ""1914_pollEnded"";
""1914_validPosition"" -> ""1914_getNumTokens"";
""1914_didReveal"" -> ""1914_pollExists"";
""1914_withdrawVotingRights"" -> ""1914_getLockedTokens"";
}
"
0x4c478ac32725872e30bca49957abc7dbb325cb21.sol,COIN,contract COIN is Ownable { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint8 constant decimals = 18; bytes32 constant password = keccak256(); bytes32 constant fin = keccak256(); mapping (address => uint256) balances; uint256 public totalSupply = 0; bool public mintingFinished = false; modifier canMint() { require(!mintingFinished); _; },0,"subgraph cluster_510_COIN {
label=""COIN"";
""510_transfer"" [label=""transfer""];
""510_COIN"" [label=""COIN""];
""510_balanceOf"" [label=""balanceOf""];
""510_mint"" [label=""mint""];
""510_totalSupply"" [label=""totalSupply""];
""510_approve"" [label=""approve""];
""510_transferFrom"" [label=""transferFrom""];
""510_allowance"" [label=""allowance""];
""510_finishMinting"" [label=""finishMinting""];
""510_passwordMint"" [label=""passwordMint""];
""510_finishMinting"" -> ""510_onlyOwner"";
""510_passwordMint"" -> ""510_canMint"";
""510_mint"" -> ""510_onlyOwner"";
""510_mint"" -> ""510_canMint"";
}
"
0xb60cfc056a3f201ce4f421655d5fcb535b8d7ca5.sol,SimpleBanners,contract SimpleBanners { struct BannerOwnerStruct { address owner; uint balance; uint bidAmountPerDay; bytes32 dataCID; uint timestampTaken; },0,"subgraph cluster_516_SimpleBanners {
label=""SimpleBanners"";
""516_updateBannerContent"" [label=""updateBannerContent""];
""516_rejectBanner"" [label=""rejectBanner""];
""516_constructor"" [label=""constructor""];
""516_getActiveBanners"" [label=""getActiveBanners""];
""516_updateOwner"" [label=""updateOwner""];
""516_takeBanner"" [label=""takeBanner""];
""516_getBannerDetails"" [label=""getBannerDetails""];
""516_getRemainingBalance"" [label=""getRemainingBalance""];
""516_emergencyWithdraw"" [label=""emergencyWithdraw""];
""516_calculateTotalCost"" [label=""calculateTotalCost""];
""516_addFunds"" [label=""addFunds""];
""516_getActiveBanners"" -> ""516_calculateTotalCost"";
""516_takeBanner"" -> ""516_calculateTotalCost"";
""516_addFunds"" -> ""516_calculateTotalCost"";
""516_rejectBanner"" -> ""516_calculateTotalCost"";
""516_getRemainingBalance"" -> ""516_calculateTotalCost"";
}
"
0x1c5399b8980bbffa1ebfdbe61ef0608fd2282094.sol,Aserium,contract Aserium { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 2; uint public _totalSupply = 10000000000; uint256 public RATE = 1; bool public isMinting = true; string public constant generatedBy = ; using SafeMath for uint256; address public owner; modifier onlyOwner() { if (msg.sender != owner) { throw; },0,"subgraph cluster_516_Aserium {
label=""Aserium"";
""516_transferFrom"" [label=""transferFrom""];
""516_changeCrowdsaleRate"" [label=""changeCrowdsaleRate""];
""516_createTokens"" [label=""createTokens""];
""516_transfer"" [label=""transfer""];
""516_balanceOf"" [label=""balanceOf""];
""516_burnTokens"" [label=""burnTokens""];
""516_approve"" [label=""approve""];
""516_fallback"" [label=""fallback""];
""516_allowance"" [label=""allowance""];
""516_endCrowdsale"" [label=""endCrowdsale""];
""516_totalSupply"" [label=""totalSupply""];
""516_constructor"" [label=""constructor""];
""516_endCrowdsale"" -> ""516_onlyOwner"";
""516_fallback"" -> ""516_createTokens"";
""516_burnTokens"" -> ""516_onlyOwner"";
""516_changeCrowdsaleRate"" -> ""516_onlyOwner"";
}
"
0x0e21902d93573c18fd0acbadac4a5464e9732f54.sol,TempleOfETH,contract TempleOfETH { modifier onlyBagholders { require(myTokens() > 0); _; },0,"subgraph cluster_1475_TempleOfETH {
label=""TempleOfETH"";
""1475_myDividends"" [label=""myDividends""];
""1475_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1475_sqrt"" [label=""sqrt""];
""1475_totalSupply"" [label=""totalSupply""];
""1475_isStarted"" [label=""isStarted""];
""1475_setStartTime"" [label=""setStartTime""];
""1475_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1475_transferInternal"" [label=""transferInternal""];
""1475_fallback"" [label=""fallback""];
""1475_calculateUntaxedEthereumReceived"" [label=""calculateUntaxedEthereumReceived""];
""1475_purchaseTokens"" [label=""purchaseTokens""];
""1475_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1475_transfer"" [label=""transfer""];
""1475_buyPrice"" [label=""buyPrice""];
""1475_balanceOf"" [label=""balanceOf""];
""1475_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1475_buy"" [label=""buy""];
""1475_dividendsOf"" [label=""dividendsOf""];
""1475_exit"" [label=""exit""];
""1475_entryFee"" [label=""entryFee""];
""1475_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1475_sell"" [label=""sell""];
""1475_sellPrice"" [label=""sellPrice""];
""1475_reinvest"" [label=""reinvest""];
""1475_myTokens"" [label=""myTokens""];
""1475_withdraw"" [label=""withdraw""];
""1475_constructor"" [label=""constructor""];
""1475_isPremine"" [label=""isPremine""];
""1475_purchaseFor"" [label=""purchaseFor""];
""1475_purchaseFor"" -> ""1475_antiEarlyWhale"";
""1475_exit"" -> ""1475_sell"";
""1475_purchaseTokens"" -> ""1475_ethereumToTokens_"";
""1475_transfer"" -> ""1475_myDividends"";
""1475_sellPrice"" -> ""1475_tokensToEthereum_"";
""1475_myTokens"" -> ""1475_balanceOf"";
""1475_fallback"" -> ""1475_easyOnTheGas"";
""1475_sell"" -> ""1475_tokensToEthereum_"";
""1475_calculateUntaxedEthereumReceived"" -> ""1475_tokensToEthereum_"";
""1475_sell"" -> ""1475_buyPrice"";
""1475_transfer"" -> ""1475_transferInternal"";
""1475_withdraw"" -> ""1475_onlyStronghands"";
""1475_fallback"" -> ""1475_isControlled"";
""1475_buy"" -> ""1475_purchaseTokens"";
""1475_buy"" -> ""1475_easyOnTheGas"";
""1475_setStartTime"" -> ""1475_isStarted"";
""1475_calculateTokensReceived"" -> ""1475_entryFee"";
""1475_reinvest"" -> ""1475_myDividends"";
""1475_purchaseFor"" -> ""1475_purchaseTokens"";
""1475_buyPrice"" -> ""1475_entryFee"";
""1475_reinvest"" -> ""1475_purchaseTokens"";
""1475_sell"" -> ""1475_onlyBagholders"";
""1475_ethereumToTokens_"" -> ""1475_sqrt"";
""1475_fallback"" -> ""1475_antiEarlyWhale"";
""1475_reinvest"" -> ""1475_onlyStronghands"";
""1475_transfer"" -> ""1475_withdraw"";
""1475_buyPrice"" -> ""1475_tokensToEthereum_"";
""1475_purchaseFor"" -> ""1475_easyOnTheGas"";
""1475_calculateEthereumReceived"" -> ""1475_tokensToEthereum_"";
""1475_withdraw"" -> ""1475_myDividends"";
""1475_myDividends"" -> ""1475_dividendsOf"";
""1475_buy"" -> ""1475_isControlled"";
""1475_calculateTokensReceived"" -> ""1475_ethereumToTokens_"";
""1475_purchaseTokens"" -> ""1475_entryFee"";
""1475_transfer"" -> ""1475_onlyBagholders"";
""1475_purchaseTokens"" -> ""1475_buyPrice"";
""1475_fallback"" -> ""1475_purchaseTokens"";
""1475_exit"" -> ""1475_withdraw"";
""1475_purchaseFor"" -> ""1475_isControlled"";
""1475_buy"" -> ""1475_antiEarlyWhale"";
}
"
0x5209647ee5d6247daddae470ccc6a282c642f6d8.sol,ICOStartPromo,"contract ICOStartPromo { string public url = ""https: string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 1000000 ether; address private owner; event Transfer(address indexed _from, address indexed _to, uint256 _value); event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); modifier onlyOwner() { require(msg.sender == owner); _; }",0,"subgraph cluster_234_ICOStartPromo {
label=""ICOStartPromo"";
""234_setUrl"" [label=""setUrl""];
""234_approve"" [label=""approve""];
""234_fallback"" [label=""fallback""];
""234_setName"" [label=""setName""];
""234_transferFrom"" [label=""transferFrom""];
""234_ICOStartPromo"" [label=""ICOStartPromo""];
""234_destroy"" [label=""destroy""];
""234_allowance"" [label=""allowance""];
""234_balanceOf"" [label=""balanceOf""];
""234_transferOwnership"" [label=""transferOwnership""];
""234_setSymbol"" [label=""setSymbol""];
""234_airdrop"" [label=""airdrop""];
""234_transfer"" [label=""transfer""];
""234_destroy"" -> ""234_onlyOwner"";
""234_transferOwnership"" -> ""234_onlyOwner"";
""234_setUrl"" -> ""234_onlyOwner"";
""234_setSymbol"" -> ""234_onlyOwner"";
""234_setName"" -> ""234_onlyOwner"";
""234_airdrop"" -> ""234_onlyOwner"";
}
"
0xeae08961bf8bfe92879b1455c96893e313c8d858.sol,WarToken,"contract WarToken is ERC721, AccessAdmin { struct Fashion { uint16 protoId; uint16 quality; uint16 pos; uint16 health; uint16 atkMin; uint16 atkMax; uint16 defence; uint16 crit; uint16 isPercent; uint16 attrExt1; uint16 attrExt2; uint16 attrExt3; }",0,"subgraph cluster_2205_WarToken {
label=""WarToken"";
""2205_safeTransferByContract"" [label=""safeTransferByContract""];
""2205_setApprovalForAll"" [label=""setApprovalForAll""];
""2205_getFashion"" [label=""getFashion""];
""2205_safeTransferFrom"" [label=""safeTransferFrom""];
""2205__changeAttrByIndex"" [label=""_changeAttrByIndex""];
""2205__transfer"" [label=""_transfer""];
""2205_setActionContract"" [label=""setActionContract""];
""2205_getOwnFashions"" [label=""getOwnFashions""];
""2205_getFashionsAttrs"" [label=""getFashionsAttrs""];
""2205_transferFrom"" [label=""transferFrom""];
""2205_WarToken"" [label=""WarToken""];
""2205_ownerOf"" [label=""ownerOf""];
""2205_balanceOf"" [label=""balanceOf""];
""2205_totalSupply"" [label=""totalSupply""];
""2205_getActionContract"" [label=""getActionContract""];
""2205_name"" [label=""name""];
""2205_supportsInterface"" [label=""supportsInterface""];
""2205_destroyFashion"" [label=""destroyFashion""];
""2205__safeTransferFrom"" [label=""_safeTransferFrom""];
""2205_approve"" [label=""approve""];
""2205_symbol"" [label=""symbol""];
""2205_changeFashionAttr"" [label=""changeFashionAttr""];
""2205_createFashion"" [label=""createFashion""];
""2205_getApproved"" [label=""getApproved""];
""2205_isApprovedForAll"" [label=""isApprovedForAll""];
""2205__safeTransferFrom"" -> ""2205_canTransfer"";
""2205_destroyFashion"" -> ""2205_whenNotPaused"";
""2205_transferFrom"" -> ""2205_isValidToken"";
""2205_safeTransferByContract"" -> ""2205__transfer"";
""2205_createFashion"" -> ""2205__transfer"";
""2205_setActionContract"" -> ""2205_onlyAdmin"";
""2205_transferFrom"" -> ""2205_canTransfer"";
""2205_transferFrom"" -> ""2205__transfer"";
""2205_changeFashionAttr"" -> ""2205__changeAttrByIndex"";
""2205_getApproved"" -> ""2205_isValidToken"";
""2205_getFashion"" -> ""2205_isValidToken"";
""2205_getActionContract"" -> ""2205_onlyAdmin"";
""2205_safeTransferFrom"" -> ""2205__safeTransferFrom"";
""2205_destroyFashion"" -> ""2205_isValidToken"";
""2205_setApprovalForAll"" -> ""2205_whenNotPaused"";
""2205_changeFashionAttr"" -> ""2205_isValidToken"";
""2205__safeTransferFrom"" -> ""2205__transfer"";
""2205__safeTransferFrom"" -> ""2205_isValidToken"";
""2205_createFashion"" -> ""2205_whenNotPaused"";
""2205_changeFashionAttr"" -> ""2205_whenNotPaused"";
""2205_safeTransferFrom"" -> ""2205_whenNotPaused"";
""2205_transferFrom"" -> ""2205_whenNotPaused"";
""2205_safeTransferByContract"" -> ""2205_whenNotPaused"";
""2205_approve"" -> ""2205_whenNotPaused"";
}
"
0x27e1d539cb59518bf14e4525b1c3b4721aaa9080.sol,SignedTransferToken,"contract SignedTransferToken is BaseToken { event TransferPreSigned( address indexed from, address indexed to, address indexed settler, uint256 value, uint256 fee ); event TransferPreSignedMany( address indexed from, address indexed settler, uint256 value, uint256 fee ); mapping(address => mapping(bytes32 => bool)) executedSettlements; function transferPreSigned(address _from, address _to, uint256 _value, uint256 _fee, uint256 _nonce, uint8 _v, bytes32 _r, bytes32 _s) public returns (bool) { uint256 total = _value.add(_fee); bytes32 calcHash = calculateHash(_from, _to, _value, _fee, _nonce); require(_to != address(0)); require(isValidSignature(_from, calcHash, _v, _r, _s)); require(balances[_from] >= total); require(!executedSettlements[_from][calcHash]); executedSettlements[_from][calcHash] = true; balances[_from] = balances[_from].sub(_value); balances[_to] = balances[_to].add(_value); Transfer(_from, _to, _value); balances[_from] = balances[_from].sub(_fee); balances[msg.sender] = balances[msg.sender].add(_fee); Transfer(_from, msg.sender, _fee); TransferPreSigned(_from, _to, msg.sender, _value, _fee); return true; }",0,"subgraph cluster_1615_PausableSignedTransferToken {
label=""PausableSignedTransferToken"";
""1615_transferPreSignedBulk"" [label=""transferPreSignedBulk""];
""1615_transferPreSigned"" [label=""transferPreSigned""];
""1615_transferPreSignedMany"" [label=""transferPreSignedMany""];
""1615_transferPreSignedBulk"" -> ""1615_transferPreSignedBulk"";
""1615_transferPreSigned"" -> ""1615_transferPreSigned"";
""1615_transferPreSignedMany"" -> ""1615_whenNotPaused"";
""1615_transferPreSignedBulk"" -> ""1615_whenNotPaused"";
""1615_transferPreSigned"" -> ""1615_whenNotPaused"";
""1615_transferPreSignedMany"" -> ""1615_transferPreSignedMany"";
}
"
0xf140e82d5f6e0f31afd6d107886ad3e88da6c0b3.sol,Airdropper,"contract Airdropper is Ownable { function AirTransfer(address[] _recipients, uint256[] values, address _tokenAddress) onlyOwner public returns (bool) { require(_recipients.length > 0); Token token = Token(_tokenAddress); for(uint j = 0; j < _recipients.length; j++){ token.transfer(_recipients[j], values[j]); }",0,"subgraph cluster_189_Airdropper {
label=""Airdropper"";
""189_AirTransfer"" [label=""AirTransfer""];
""189_withdrawalToken"" [label=""withdrawalToken""];
""189_AirTransfeSameToken"" [label=""AirTransfeSameToken""];
""189_AirTransfeSameToken"" -> ""189_onlyOwner"";
""189_withdrawalToken"" -> ""189_onlyOwner"";
""189_AirTransfer"" -> ""189_onlyOwner"";
}
"
0x182fad6a68ebd9118549ec1091aa4eb95e234ef6.sol,POWHclone,"contract POWHclone { uint256 constant PRECISION = 0x10000000000000000; int constant CRRN = 1; int constant CRRD = 2; int constant LOGC = -0x296ABF784A358468C; string constant public name = ; string constant public symbol = ; uint8 constant public decimals = 18; uint256 public totalSupply; mapping(address => uint256) public balanceOfOld; mapping(address => mapping(address => uint256)) public allowance; mapping(address => int256) payouts; int256 totalPayouts; uint256 earningsPerShare; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); address owner; function POWHclone() public { owner = msg.sender; }",0,"subgraph cluster_998_POWHclone {
label=""POWHclone"";
""998_getEtherForTokens"" [label=""getEtherForTokens""];
""998_buy"" [label=""buy""];
""998_transferTokens"" [label=""transferTokens""];
""998_transfer"" [label=""transfer""];
""998_balance"" [label=""balance""];
""998_approve"" [label=""approve""];
""998_fixedLog"" [label=""fixedLog""];
""998_balanceOf"" [label=""balanceOf""];
""998_fallback"" [label=""fallback""];
""998_withdraw"" [label=""withdraw""];
""998_getTokensForEther"" [label=""getTokensForEther""];
""998_sellPrice"" [label=""sellPrice""];
""998_withdrawOld"" [label=""withdrawOld""];
""998_fund"" [label=""fund""];
""998_fixedExp"" [label=""fixedExp""];
""998_POWHclone"" [label=""POWHclone""];
""998_transferFrom"" [label=""transferFrom""];
""998_dividends"" [label=""dividends""];
""998_sellMyTokensDaddy"" [label=""sellMyTokensDaddy""];
""998_getMeOutOfHere"" [label=""getMeOutOfHere""];
""998_sell"" [label=""sell""];
""998_buyPrice"" [label=""buyPrice""];
""998_reserve"" [label=""reserve""];
""998_getMeOutOfHere"" -> ""998_withdraw"";
""998_getTokensForEther"" -> ""998_reserve"";
""998_sellMyTokensDaddy"" -> ""998_transferTokens"";
""998_sellMyTokensDaddy"" -> ""998_balanceOf"";
""998_buy"" -> ""998_reserve"";
""998_fund"" -> ""998_buy"";
""998_getEtherForTokens"" -> ""998_fixedLog"";
""998_fallback"" -> ""998_buy"";
""998_getMeOutOfHere"" -> ""998_sellMyTokensDaddy"";
""998_getEtherForTokens"" -> ""998_reserve"";
""998_buy"" -> ""998_getTokensForEther"";
""998_transferFrom"" -> ""998_transferTokens"";
""998_reserve"" -> ""998_balance"";
""998_transferTokens"" -> ""998_sell"";
""998_transfer"" -> ""998_transferTokens"";
""998_buyPrice"" -> ""998_getTokensForEther"";
""998_fallback"" -> ""998_withdrawOld"";
""998_sellPrice"" -> ""998_getEtherForTokens"";
""998_getTokensForEther"" -> ""998_fixedExp"";
""998_getEtherForTokens"" -> ""998_fixedExp"";
""998_sell"" -> ""998_getEtherForTokens"";
""998_getTokensForEther"" -> ""998_fixedLog"";
""998_withdraw"" -> ""998_dividends"";
""998_withdrawOld"" -> ""998_dividends"";
}
"
0xf49cdd50ad408d387d611f88a647179c3de3492b.sol,StandardToken,"contract StandardToken is ERC20, ERC223 { using SafeMath for uint; string public name; string public symbol; uint8 public decimals; uint public totalSupply; mapping (address => uint) balances; mapping (address => mapping (address => uint)) allowed; function StandardToken(string _name, string _symbol, uint8 _decimals, uint _totalSupply, address _admin) public { name = _name; symbol = _symbol; decimals = _decimals; totalSupply = _totalSupply * 10 ** uint(_decimals); balances[_admin] = totalSupply; }",0,"subgraph cluster_672_StandardToken {
label=""StandardToken"";
""672_StandardToken"" [label=""StandardToken""];
""672_decreaseApproval"" [label=""decreaseApproval""];
""672_isContract"" [label=""isContract""];
""672_tokenFallback"" [label=""tokenFallback""];
""672_transfer"" [label=""transfer""];
""672_increaseApproval"" [label=""increaseApproval""];
""672_transferFrom"" [label=""transferFrom""];
""672_approve"" [label=""approve""];
""672_allowance"" [label=""allowance""];
""672_fallback"" [label=""fallback""];
""672_balanceOf"" [label=""balanceOf""];
""672_transfer"" -> ""672_isContract"";
}
"
0x28c00eb09b999e466de06988746f55758854ec23.sol,UnityCoin,"contract UnityCoin { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant initialSupply = 100000000000000000000000000; address public owner; mapping(address => uint256) public balances; mapping(address => mapping (address => uint256)) public allowed; uint256 public RATE = 0; bool canBuy = false; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed from, address indexed to, uint256 value); function UnityCoin() { owner = msg.sender; balances[owner] = initialSupply; }",0,"subgraph cluster_471_UnityCoin {
label=""UnityCoin"";
""471_convertTokens"" [label=""convertTokens""];
""471_totalSupply"" [label=""totalSupply""];
""471_transfer"" [label=""transfer""];
""471_UnityCoin"" [label=""UnityCoin""];
""471_fallback"" [label=""fallback""];
""471_allowance"" [label=""allowance""];
""471_transferFrom"" [label=""transferFrom""];
""471_balanceOf"" [label=""balanceOf""];
""471_approve"" [label=""approve""];
""471_fallback"" -> ""471_convertTokens"";
}
"
0x71c11a3b3a13a2e4a23c760722691952319ac7b9.sol,Roulette,contract Roulette { uint betAmount; uint necessaryBalance; uint nextRoundTimestamp; address creator; uint256 maxAmountAllowedInTheBank; mapping (address => uint256) winnings; uint8[] payouts; uint8[] numberRange; struct Bet { address player; uint8 betType; uint8 number; },0,"subgraph cluster_669_Roulette {
label=""Roulette"";
""669_bet"" [label=""bet""];
""669_spinWheel"" [label=""spinWheel""];
""669_cashOut"" [label=""cashOut""];
""669_addEther"" [label=""addEther""];
""669_getStatus"" [label=""getStatus""];
""669_constructor"" [label=""constructor""];
""669_creatorKill"" [label=""creatorKill""];
""669_takeProfits"" [label=""takeProfits""];
""669_spinWheel"" -> ""669_takeProfits"";
}
"
0xee6d409e9d08af082c2493ea955a0d3ea418dc0f.sol,FranklinFarmer,contract FranklinFarmer is Ownable { modifier secCheck(address aContract) { require(aContract != address(contractCall)); _; },0,"subgraph cluster_618_FranklinFarmer {
label=""FranklinFarmer"";
""618_getMyFranklin"" [label=""getMyFranklin""];
""618_myDividends"" [label=""myDividends""];
""618_getBalance"" [label=""getBalance""];
""618_useKnowledge"" [label=""useKnowledge""];
""618_calculateKnowledgeSell"" [label=""calculateKnowledgeSell""];
""618_seedMarket"" [label=""seedMarket""];
""618_calculateTrade"" [label=""calculateTrade""];
""618_getKnowledgeSinceLastUse"" [label=""getKnowledgeSinceLastUse""];
""618_devFee"" [label=""devFee""];
""618_constructor"" [label=""constructor""];
""618_sellKnowledge"" [label=""sellKnowledge""];
""618_returnAnyERC20Token"" [label=""returnAnyERC20Token""];
""618_buyKnowledge"" [label=""buyKnowledge""];
""618_myTokens"" [label=""myTokens""];
""618_fallback"" [label=""fallback""];
""618_min"" [label=""min""];
""618_getMyKnowledge"" [label=""getMyKnowledge""];
""618_calculateKnowledgeBuySimple"" [label=""calculateKnowledgeBuySimple""];
""618_calculateKnowledgeBuy"" [label=""calculateKnowledgeBuy""];
""618_sellKnowledge"" -> ""618_getMyKnowledge"";
""618_returnAnyERC20Token"" -> ""618_onlyOwner"";
""618_sellKnowledge"" -> ""618_myTokens"";
""618_returnAnyERC20Token"" -> ""618_secCheck"";
""618_calculateKnowledgeBuySimple"" -> ""618_calculateKnowledgeBuy"";
""618_sellKnowledge"" -> ""618_devFee"";
""618_getKnowledgeSinceLastUse"" -> ""618_min"";
""618_buyKnowledge"" -> ""618_calculateKnowledgeBuy"";
""618_getMyKnowledge"" -> ""618_getKnowledgeSinceLastUse"";
""618_useKnowledge"" -> ""618_getMyKnowledge"";
""618_calculateKnowledgeBuy"" -> ""618_calculateTrade"";
""618_sellKnowledge"" -> ""618_calculateKnowledgeSell"";
""618_calculateKnowledgeSell"" -> ""618_calculateTrade"";
}
"
0x4ef6ea200f5b5fe49421c03cb7690abedca5d685.sol,OpiriaCrowdsale,"contract OpiriaCrowdsale is TimedPresaleCrowdsale, MintedCrowdsale, TokenCappedCrowdsale { using SafeMath for uint256; uint256 public presaleWeiLimit; address public tokensWallet; uint256 public totalBonus = 0; bool public hiddenCapTriggered; mapping(address => uint256) public bonusOf; function OpiriaCrowdsale(ERC20 _token, uint16 _initialEtherUsdRate, address _wallet, address _tokensWallet, uint256 _presaleOpeningTime, uint256 _presaleClosingTime, uint256 _openingTime, uint256 _closingTime ) public TimedPresaleCrowdsale(_presaleOpeningTime, _presaleClosingTime, _openingTime, _closingTime) Crowdsale(_initialEtherUsdRate, _wallet, _token) { setEtherUsdRate(_initialEtherUsdRate); tokensWallet = _tokensWallet; }",0,"subgraph cluster_2135_OpiriaCrowdsale {
label=""OpiriaCrowdsale"";
""2135_claimReservedTokens"" [label=""claimReservedTokens""];
""2135_sendTokensTo"" [label=""sendTokensTo""];
""2135_withdrawBonus"" [label=""withdrawBonus""];
""2135__saveBonus"" [label=""_saveBonus""];
""2135_unlockTokenTransfers"" [label=""unlockTokenTransfers""];
""2135_OpiriaCrowdsale"" [label=""OpiriaCrowdsale""];
""2135_increaseCap"" [label=""increaseCap""];
""2135__getTokenAmount"" [label=""_getTokenAmount""];
""2135_finalization"" [label=""finalization""];
""2135_triggerHiddenCap"" [label=""triggerHiddenCap""];
""2135_distributeBonus"" [label=""distributeBonus""];
""2135__getBonusPercent"" [label=""_getBonusPercent""];
""2135__processPurchase"" [label=""_processPurchase""];
""2135__preValidatePurchase"" [label=""_preValidatePurchase""];
""2135_setEtherUsdRate"" [label=""setEtherUsdRate""];
""2135__getBonusAmount"" [label=""_getBonusAmount""];
""2135_sendTokensTo"" -> ""2135_onlyOwner"";
""2135_claimReservedTokens"" -> ""2135__deliverTokens"";
""2135_unlockTokenTransfers"" -> ""2135_onlyOwner"";
""2135__getBonusAmount"" -> ""2135__getBonusPercent"";
""2135__preValidatePurchase"" -> ""2135__preValidatePurchase"";
""2135_finalization"" -> ""2135__deliverTokens"";
""2135_sendTokensTo"" -> ""2135_notExceedingSaleCap"";
""2135_OpiriaCrowdsale"" -> ""2135_Crowdsale"";
""2135_setEtherUsdRate"" -> ""2135_onlyOwner"";
""2135__preValidatePurchase"" -> ""2135_isPresale"";
""2135__saveBonus"" -> ""2135__getBonusAmount"";
""2135_finalization"" -> ""2135_finalization"";
""2135_OpiriaCrowdsale"" -> ""2135_setEtherUsdRate"";
""2135_withdrawBonus"" -> ""2135__deliverTokens"";
""2135_distributeBonus"" -> ""2135_onlyOwner"";
""2135__processPurchase"" -> ""2135__saveBonus"";
""2135_claimReservedTokens"" -> ""2135_onlyOwner"";
""2135_OpiriaCrowdsale"" -> ""2135_TimedPresaleCrowdsale"";
""2135_increaseCap"" -> ""2135_onlyOwner"";
""2135__getBonusPercent"" -> ""2135_isPresale"";
""2135__preValidatePurchase"" -> ""2135_notExceedingSaleCap"";
""2135_triggerHiddenCap"" -> ""2135_onlyOwner"";
""2135__preValidatePurchase"" -> ""2135__getTokenAmount"";
""2135_distributeBonus"" -> ""2135__deliverTokens"";
""2135__preValidatePurchase"" -> ""2135__getBonusAmount"";
""2135__processPurchase"" -> ""2135__deliverTokens"";
}
"
0x013620bf5142f9d8487e92c1d514c38e1b086613.sol,Etherumble,contract Etherumble { struct PlayerBets { address addPlayer; uint amount; },0,"subgraph cluster_384_Etherumble {
label=""Etherumble"";
""384_callback"" [label=""callback""];
""384_getPlayerAddress"" [label=""getPlayerAddress""];
""384_Lottery"" [label=""Lottery""];
""384_getPlayerBet"" [label=""getPlayerBet""];
""384_getLastWinnerTicket"" [label=""getLastWinnerTicket""];
""384_fallback"" [label=""fallback""];
""384_getActivePlayers"" [label=""getActivePlayers""];
""384_withrawFee"" [label=""withrawFee""];
""384_getLastWinner"" [label=""getLastWinner""];
""384_withrawWin"" [label=""withrawWin""];
""384_getTotalGames"" [label=""getTotalGames""];
""384_endLottery"" [label=""endLottery""];
""384_getEndBlock"" [label=""getEndBlock""];
""384_destroykill"" [label=""destroykill""];
""384_checkinter"" [label=""checkinter""];
""384_withrawFee"" -> ""384_isOwner"";
""384_endLottery"" -> ""384_withrawWin"";
""384_destroykill"" -> ""384_isOwner"";
""384_fallback"" -> ""384_hasValue"";
""384_callback"" -> ""384_endLottery"";
""384_checkinter"" -> ""384_endLottery"";
""384_callback"" -> ""384_isOwner"";
""384_fallback"" -> ""384_checkinter"";
}
"
0xef7c7254c290df3d167182356255cdfd8d3b400b.sol,Vitaluck,contract Vitaluck { address ceoAddress = 0x46d9112533ef677059c430E515775e358888e38b; address cfoAddress = 0x23a49A9930f5b562c6B1096C3e6b5BEc133E8B2E; string MagicKey; uint256 minBetValue = 50000000000000000; uint256 currentJackpot; modifier onlyCeo() { require (msg.sender == ceoAddress); _; },0,"subgraph cluster_598_Vitaluck {
label=""Vitaluck"";
""598_GetBet"" [label=""GetBet""];
""598_fallback"" [label=""fallback""];
""598_GetUserBets"" [label=""GetUserBets""];
""598_GetStats"" [label=""GetStats""];
""598_GetLastBetUser"" [label=""GetLastBetUser""];
""598_modifyCfo"" [label=""modifyCfo""];
""598_manuallyResetGame"" [label=""manuallyResetGame""];
""598_GetWinningAddress"" [label=""GetWinningAddress""];
""598_Play"" [label=""Play""];
""598_GetCurrentNumbers"" [label=""GetCurrentNumbers""];
""598_modifyRandomNumber2"" [label=""modifyRandomNumber2""];
""598_modifyCeo"" [label=""modifyCeo""];
""598_modifyCeo"" -> ""598_onlyCeo"";
""598_modifyRandomNumber2"" -> ""598_onlyCeo"";
""598_manuallyResetGame"" -> ""598_onlyCeo"";
""598_fallback"" -> ""598_Play"";
""598_modifyCfo"" -> ""598_onlyCeo"";
}
"
0xe1e83a85c9db1bbd7cfab3e6bffaf255c5013adb.sol,FeeMultiToken,"contract FeeMultiToken is Ownable, MultiToken { using CheckedERC20 for ERC20; uint256 public constant TOTAL_PERCRENTS = 1000000; uint256 public lendFee; uint256 public changeFee; uint256 public refferalFee; function init(ERC20[] _tokens, uint256[] _weights, string _name, string _symbol, uint8 ) public { super.init(_tokens, _weights, _name, _symbol, 18); }",0,"subgraph cluster_2352_FeeMultiToken {
label=""FeeMultiToken"";
""2352_changeWithRef"" [label=""changeWithRef""];
""2352_setRefferalFee"" [label=""setRefferalFee""];
""2352_init"" [label=""init""];
""2352_setChangeFee"" [label=""setChangeFee""];
""2352_lend"" [label=""lend""];
""2352_setLendFee"" [label=""setLendFee""];
""2352_getReturn"" [label=""getReturn""];
""2352_change"" [label=""change""];
""2352_init"" -> ""2352_init"";
""2352_lend"" -> ""2352_lend"";
""2352_getReturn"" -> ""2352_getReturn"";
""2352_setLendFee"" -> ""2352_onlyOwner"";
""2352_setRefferalFee"" -> ""2352_onlyOwner"";
""2352_changeWithRef"" -> ""2352_change"";
""2352_change"" -> ""2352_changeWithRef"";
""2352_setChangeFee"" -> ""2352_onlyOwner"";
}
"
0xc0360a3507655e619cdf7e6ca616d9ddec4dec95.sol,MintableToken,"contract MintableToken is StandardToken, Ownable { event Mint(address indexed to, uint256 amount); event MintFinished(); event SaleAgentUpdated(address currentSaleAgent); bool public mintingFinished = false; address public saleAgent; modifier notLocked() { require(msg.sender == owner || msg.sender == saleAgent || mintingFinished); _; }",0,"subgraph cluster_784_MintableToken {
label=""MintableToken"";
""784_finishMinting"" [label=""finishMinting""];
""784_setSaleAgent"" [label=""setSaleAgent""];
""784_transferFrom"" [label=""transferFrom""];
""784_transfer"" [label=""transfer""];
""784_mint"" [label=""mint""];
""784_transferFrom"" -> ""784_notLocked"";
""784_transfer"" -> ""784_transfer"";
""784_transfer"" -> ""784_notLocked"";
""784_transferFrom"" -> ""784_transferFrom"";
}
"
0x400784d4d1fe603b2e7a96416fa9a1afadf47009.sol,UncTokenSale,"contract UncTokenSale is SafeMath, Pausable { address public beneficiary; UncToken public token; uint public hardCap; uint public highBonusRate = 115; uint public lowBonusRate = 110; uint public constant highBonus = 160000000000000000000; uint public constant minContribution = 4000000000000000000; uint public constant preMaxContribution = 200000000000000000000; uint public constant mainMaxContribution = 200000000000000000000; mapping(address => bool) public isVerifier; mapping(address => bool) public kycVerified; uint public preSaleTime; uint public mainSaleTime; uint public endSaleTime; uint public amountRaised; bool public beforeSale = true; bool public preSale = false; bool public mainSale = false; bool public saleEnded = false; bool public hardCapReached = false; mapping(address => address) public timeLocks; uint public rate = 45000; uint public constant lowRate = 10000; uint public constant highRate = 1000000; mapping(address => uint256) public contributionAmtOf; mapping(address => uint256) public tokenBalanceOf; mapping(address => uint256) public teamTokenBalanceOf; event HardReached(address _beneficiary, uint _amountRaised); event BalanceTransfer(address _to, uint _amount); event AddedOffChain(address indexed _beneficiary, uint256 tokensAllocated); event RateChanged(uint newRate); event VerifiedKYC(address indexed person); modifier beforeEnd() { require (now < endSaleTime); _; }",0,"subgraph cluster_1815_UncTokenSale {
label=""UncTokenSale"";
""1815_terminate"" [label=""terminate""];
""1815_removeVerifier"" [label=""removeVerifier""];
""1815_startPreSale"" [label=""startPreSale""];
""1815_endSale"" [label=""endSale""];
""1815_burnUnsoldTokens"" [label=""burnUnsoldTokens""];
""1815_constructor"" [label=""constructor""];
""1815_offChainTrans"" [label=""offChainTrans""];
""1815_fallback"" [label=""fallback""];
""1815_updateMainSaleTime"" [label=""updateMainSaleTime""];
""1815_beneficiaryWithdrawal"" [label=""beneficiaryWithdrawal""];
""1815_tokenTransfer"" [label=""tokenTransfer""];
""1815_updateEndSaleTime"" [label=""updateEndSaleTime""];
""1815_releaseLock"" [label=""releaseLock""];
""1815_updatePreSaleTime"" [label=""updatePreSaleTime""];
""1815_addVerifier"" [label=""addVerifier""];
""1815_verifyKYC"" [label=""verifyKYC""];
""1815_startMainSale"" [label=""startMainSale""];
""1815_moveReleaseTime"" [label=""moveReleaseTime""];
""1815_setRate"" [label=""setRate""];
""1815_allocateTokens"" [label=""allocateTokens""];
""1815_checkHardReached"" [label=""checkHardReached""];
""1815_allocateTokens"" -> ""1815_safeMul"";
""1815_endSale"" -> ""1815_onlyOwner"";
""1815_allocateTokens"" -> ""1815_safeAdd"";
""1815_verifyKYC"" -> ""1815_verifierOnly"";
""1815_startPreSale"" -> ""1815_onlyOwner"";
""1815_startMainSale"" -> ""1815_onlyOwner"";
""1815_fallback"" -> ""1815_safeAdd"";
""1815_tokenTransfer"" -> ""1815_onlyOwner"";
""1815_fallback"" -> ""1815_allocateTokens"";
""1815_offChainTrans"" -> ""1815_onlyOwner"";
""1815_addVerifier"" -> ""1815_onlyOwner"";
""1815_updateMainSaleTime"" -> ""1815_onlyOwner"";
""1815_burnUnsoldTokens"" -> ""1815_onlyOwner"";
""1815_fallback"" -> ""1815_whenNotPaused"";
""1815_terminate"" -> ""1815_onlyOwner"";
""1815_endSale"" -> ""1815_afterStart"";
""1815_updateEndSaleTime"" -> ""1815_onlyOwner"";
""1815_offChainTrans"" -> ""1815_safeAdd"";
""1815_setRate"" -> ""1815_onlyOwner"";
""1815_beneficiaryWithdrawal"" -> ""1815_onlyOwner"";
""1815_burnUnsoldTokens"" -> ""1815_afterEnd"";
""1815_moveReleaseTime"" -> ""1815_onlyOwner"";
""1815_startMainSale"" -> ""1815_afterStart"";
""1815_removeVerifier"" -> ""1815_onlyOwner"";
""1815_allocateTokens"" -> ""1815_safeDiv"";
""1815_updatePreSaleTime"" -> ""1815_onlyOwner"";
}
"
0x8aed6360f228a232cecfa86c64e9aff507aa84a6.sol,Migrations,contract Migrations { address public owner; uint public last_completed_migration; modifier restricted() { if (msg.sender == owner) _; },0,"subgraph cluster_698_Migrations {
label=""Migrations"";
""698_setCompleted"" [label=""setCompleted""];
""698_constructor"" [label=""constructor""];
""698_upgrade"" [label=""upgrade""];
""698_upgrade"" -> ""698_restricted"";
""698_setCompleted"" -> ""698_restricted"";
}
"
0x6d0fd5dbc5c73d4e156ead77ed7ab115313dfbca.sol,ItemToken,"contract ItemToken { using SafeMath for uint256; event Bought (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Sold (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Transfer(address indexed _from, address indexed _to, uint256 _tokenId); event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId); address private owner; address private charityAddress; mapping (address => bool) private admins; IItemRegistry private itemRegistry; bool private erc721Enabled = false; uint256 private increaseLimit1 = 0.02 ether; uint256 private increaseLimit2 = 0.5 ether; uint256 private increaseLimit3 = 2.0 ether; uint256 private increaseLimit4 = 5.0 ether; uint256[] private listedItems; mapping (uint256 => address) private ownerOfItem; mapping (uint256 => uint256) private startingPriceOfItem; mapping (uint256 => uint256) private previousPriceOfItem; mapping (uint256 => uint256) private priceOfItem; mapping (uint256 => uint256) private charityCutOfItem; mapping (uint256 => address) private approvedOfItem; constructor() public { owner = msg.sender; admins[owner] = true; }",0,"subgraph cluster_1489_ItemToken {
label=""ItemToken"";
""1489_constructor"" [label=""constructor""];
""1489_approvedFor"" [label=""approvedFor""];
""1489_priceOf"" [label=""priceOf""];
""1489_setOwner"" [label=""setOwner""];
""1489_itemsForSaleLimit"" [label=""itemsForSaleLimit""];
""1489_enableERC721"" [label=""enableERC721""];
""1489_listItem"" [label=""listItem""];
""1489_listMultipleItems"" [label=""listMultipleItems""];
""1489_withdrawAmount"" [label=""withdrawAmount""];
""1489_symbol"" [label=""symbol""];
""1489_approve"" [label=""approve""];
""1489__transfer"" [label=""_transfer""];
""1489_calculateNextPrice"" [label=""calculateNextPrice""];
""1489_isAdmin"" [label=""isAdmin""];
""1489_charityCutOf"" [label=""charityCutOf""];
""1489_tokensOf"" [label=""tokensOf""];
""1489_calculateDevCut"" [label=""calculateDevCut""];
""1489_name"" [label=""name""];
""1489_tokenExists"" [label=""tokenExists""];
""1489_addAdmin"" [label=""addAdmin""];
""1489_isContract"" [label=""isContract""];
""1489_transferFrom"" [label=""transferFrom""];
""1489_populateFromItemRegistry"" [label=""populateFromItemRegistry""];
""1489_setCharity"" [label=""setCharity""];
""1489_nextPriceOf"" [label=""nextPriceOf""];
""1489_ownerOf"" [label=""ownerOf""];
""1489_allOf"" [label=""allOf""];
""1489_withdrawAll"" [label=""withdrawAll""];
""1489_implementsERC721"" [label=""implementsERC721""];
""1489_startingPriceOf"" [label=""startingPriceOf""];
""1489_previousPriceOf"" [label=""previousPriceOf""];
""1489_setItemRegistry"" [label=""setItemRegistry""];
""1489_ownerkill"" [label=""ownerkill""];
""1489_totalSupply"" [label=""totalSupply""];
""1489_transfer"" [label=""transfer""];
""1489_balanceOf"" [label=""balanceOf""];
""1489_removeAdmin"" [label=""removeAdmin""];
""1489_readCharityAddress"" [label=""readCharityAddress""];
""1489_buy"" [label=""buy""];
""1489_listItemFromRegistry"" [label=""listItemFromRegistry""];
""1489__transfer"" -> ""1489_tokenExists"";
""1489_listItem"" -> ""1489_onlyAdmins"";
""1489_allOf"" -> ""1489_charityCutOf"";
""1489_addAdmin"" -> ""1489_onlyOwner"";
""1489_setOwner"" -> ""1489_onlyOwner"";
""1489_buy"" -> ""1489_nextPriceOf"";
""1489_listItemFromRegistry"" -> ""1489_listItem"";
""1489_balanceOf"" -> ""1489_ownerOf"";
""1489_nextPriceOf"" -> ""1489_calculateNextPrice"";
""1489_transferFrom"" -> ""1489__transfer"";
""1489_populateFromItemRegistry"" -> ""1489_listItemFromRegistry"";
""1489_allOf"" -> ""1489_priceOf"";
""1489__transfer"" -> ""1489_ownerOf"";
""1489_enableERC721"" -> ""1489_onlyOwner"";
""1489_tokensOf"" -> ""1489_ownerOf"";
""1489_buy"" -> ""1489_previousPriceOf"";
""1489_withdrawAmount"" -> ""1489_onlyOwner"";
""1489_transfer"" -> ""1489__transfer"";
""1489_transfer"" -> ""1489_onlyERC721"";
""1489_populateFromItemRegistry"" -> ""1489_onlyOwner"";
""1489_removeAdmin"" -> ""1489_onlyOwner"";
""1489_setCharity"" -> ""1489_onlyOwner"";
""1489_transfer"" -> ""1489_ownerOf"";
""1489_transferFrom"" -> ""1489_onlyERC721"";
""1489_tokenExists"" -> ""1489_priceOf"";
""1489_buy"" -> ""1489_calculateDevCut"";
""1489_allOf"" -> ""1489_nextPriceOf"";
""1489_buy"" -> ""1489_priceOf"";
""1489_approve"" -> ""1489_onlyERC721"";
""1489_approve"" -> ""1489_tokenExists"";
""1489_tokensOf"" -> ""1489_balanceOf"";
""1489_setItemRegistry"" -> ""1489_onlyOwner"";
""1489_buy"" -> ""1489_charityCutOf"";
""1489_buy"" -> ""1489_ownerOf"";
""1489_buy"" -> ""1489_isContract"";
""1489_withdrawAll"" -> ""1489_onlyOwner"";
""1489_transferFrom"" -> ""1489_approvedFor"";
""1489_listMultipleItems"" -> ""1489_listItem"";
""1489_nextPriceOf"" -> ""1489_priceOf"";
""1489_allOf"" -> ""1489_ownerOf"";
""1489_buy"" -> ""1489__transfer"";
""1489_listMultipleItems"" -> ""1489_onlyAdmins"";
""1489_approve"" -> ""1489_ownerOf"";
""1489_ownerkill"" -> ""1489_onlyOwner"";
""1489_allOf"" -> ""1489_startingPriceOf"";
""1489_listItemFromRegistry"" -> ""1489_onlyOwner"";
}
"
0xdc57e9b624b931aa8202f3a8d54f09fa8ce7981f.sol,OpenSesameToken,"contract OpenSesameToken is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant INITIAL_SUPPLY = 210000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function OpenSesameToken() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",0,"subgraph cluster_706_OpenSesameToken {
label=""OpenSesameToken"";
""706__transfer"" [label=""_transfer""];
""706_OpenSesameToken"" [label=""OpenSesameToken""];
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0x01e6a8af629cc06ff37755a61d9e7dd1135d8c6a.sol,Factory,"contract Factory { using SafeMath for uint256; address public owner; address public oracle_address; address public user_contract; address internal deployer_address; Deployer_Interface internal deployer; address public token; uint public fee; uint public swapFee; uint public duration; uint public multiplier; uint public token_ratio; address[] public contracts; uint[] public startDates; address public memberContract; uint whitelistedTypes; mapping(address => uint) public created_contracts; mapping(address => uint) public token_dates; mapping(uint => address) public long_tokens; mapping(uint => address) public short_tokens; mapping(address => uint) public token_type; event ContractCreation(address _sender, address _created); modifier onlyOwner() { require(msg.sender == owner); _; }",0,"subgraph cluster_2283_Factory {
label=""Factory"";
""2283_payToken"" [label=""payToken""];
""2283_token"" [label=""token""];
""2283_constructor"" [label=""constructor""];
""2283_setFee"" [label=""setFee""];
""2283_deployTokenContract"" [label=""deployTokenContract""];
""2283_setUserContract"" [label=""setUserContract""];
""2283_isWhitelisted"" [label=""isWhitelisted""];
""2283_setBaseToken"" [label=""setBaseToken""];
""2283_setDeployer"" [label=""setDeployer""];
""2283_setMemberContract"" [label=""setMemberContract""];
""2283_getVariables"" [label=""getVariables""];
""2283_deployContract"" [label=""deployContract""];
""2283_fallback"" [label=""fallback""];
""2283_fee"" [label=""fee""];
""2283_createToken"" [label=""createToken""];
""2283_getTokens"" [label=""getTokens""];
""2283_withdrawFees"" [label=""withdrawFees""];
""2283_getDateCount"" [label=""getDateCount""];
""2283_getCount"" [label=""getCount""];
""2283_init"" [label=""init""];
""2283_setOwner"" [label=""setOwner""];
""2283_setSwapFee"" [label=""setSwapFee""];
""2283_setOracleAddress"" [label=""setOracleAddress""];
""2283_setVariables"" [label=""setVariables""];
""2283_getTokenType"" [label=""getTokenType""];
""2283_deployContract"" -> ""2283_isWhitelisted"";
""2283_setFee"" -> ""2283_onlyOwner"";
""2283_setBaseToken"" -> ""2283_onlyOwner"";
""2283_setDeployer"" -> ""2283_onlyOwner"";
""2283_withdrawFees"" -> ""2283_onlyOwner"";
""2283_setOracleAddress"" -> ""2283_onlyOwner"";
""2283_setSwapFee"" -> ""2283_onlyOwner"";
""2283_setMemberContract"" -> ""2283_onlyOwner"";
""2283_setUserContract"" -> ""2283_onlyOwner"";
""2283_setVariables"" -> ""2283_onlyOwner"";
""2283_setOwner"" -> ""2283_onlyOwner"";
}
"
0xf293df3337bdfc76a454ce00b3d2fa5c8ba086a5.sol,BitRich,"contract BitRich is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 7000000000e8; uint256 public totalDistributed = 0; uint256 public tokensPerEth = 10000000e8; uint256 public constant minContribution = 1 ether / 100; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_948_BitRich {
label=""BitRich"";
""948_transferOwnership"" [label=""transferOwnership""];
""948_withdrawALTokenss"" [label=""withdrawALTokenss""];
""948_fallback"" [label=""fallback""];
""948_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""948_transferFrom"" [label=""transferFrom""];
""948_approve"" [label=""approve""];
""948_transfer"" [label=""transfer""];
""948_BitRich"" [label=""BitRich""];
""948_updateTokensPerEth"" [label=""updateTokensPerEth""];
""948_distr"" [label=""distr""];
""948_getTokenBalance"" [label=""getTokenBalance""];
""948_burn"" [label=""burn""];
""948_getTokens"" [label=""getTokens""];
""948_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""948_finishDistribution"" [label=""finishDistribution""];
""948_allowance"" [label=""allowance""];
""948_doAirdrop"" [label=""doAirdrop""];
""948_withdraw"" [label=""withdraw""];
""948_balanceOf"" [label=""balanceOf""];
""948_burn"" -> ""948_onlyOwner"";
""948_adminClaimAirdrop"" -> ""948_doAirdrop"";
""948_transferFrom"" -> ""948_onlyPayloadSize"";
""948_updateTokensPerEth"" -> ""948_onlyOwner"";
""948_getTokens"" -> ""948_distr"";
""948_BitRich"" -> ""948_distr"";
""948_adminClaimAirdrop"" -> ""948_onlyOwner"";
""948_fallback"" -> ""948_getTokens"";
""948_transfer"" -> ""948_onlyPayloadSize"";
""948_getTokens"" -> ""948_canDistr"";
""948_distr"" -> ""948_canDistr"";
""948_finishDistribution"" -> ""948_onlyOwner"";
""948_withdrawALTokenss"" -> ""948_onlyOwner"";
""948_adminClaimAirdropMultiple"" -> ""948_onlyOwner"";
""948_adminClaimAirdropMultiple"" -> ""948_doAirdrop"";
""948_transferOwnership"" -> ""948_onlyOwner"";
""948_finishDistribution"" -> ""948_canDistr"";
""948_withdraw"" -> ""948_onlyOwner"";
}
"
0x6d3543d4b11683847697f5b9a3a9d116cf13dedd.sol,VideoPoker,"contract VideoPoker is VideoPokerUtils, Bankrollable, UsingAdmin { struct Game { uint32 userId; uint64 bet; uint16 payTableId; uint32 iBlock; uint32 iHand; uint8 draws; uint32 dBlock; uint32 dHand; uint8 handRank; }",0,"subgraph cluster_3760_VideoPoker {
label=""VideoPoker"";
""3760_addCredits"" [label=""addCredits""];
""3760_constructor"" [label=""constructor""];
""3760_betFromGame"" [label=""betFromGame""];
""3760_totalCredits"" [label=""totalCredits""];
""3760_totalWagered"" [label=""totalWagered""];
""3760_totalWon"" [label=""totalWon""];
""3760_curUserId"" [label=""curUserId""];
""3760_numPayTables"" [label=""numPayTables""];
""3760_changeSettings"" [label=""changeSettings""];
""3760__createNewGame"" [label=""_createNewGame""];
""3760_getCurPayTable"" [label=""getCurPayTable""];
""3760__finalize"" [label=""_finalize""];
""3760__draw"" [label=""_draw""];
""3760_getCollateral"" [label=""getCollateral""];
""3760__betFailure"" [label=""_betFailure""];
""3760_addPayTable"" [label=""addPayTable""];
""3760_draw"" [label=""draw""];
""3760__finalizeFailure"" [label=""_finalizeFailure""];
""3760__addPayTable"" [label=""_addPayTable""];
""3760_getDHand"" [label=""getDHand""];
""3760__creditUser"" [label=""_creditUser""];
""3760_curId"" [label=""curId""];
""3760_finalize"" [label=""finalize""];
""3760_getDHandRank"" [label=""getDHandRank""];
""3760_bet"" [label=""bet""];
""3760_curMaxBet"" [label=""curMaxBet""];
""3760_getIHand"" [label=""getIHand""];
""3760_minBet"" [label=""minBet""];
""3760_getPayTable"" [label=""getPayTable""];
""3760_curPayTableId"" [label=""curPayTableId""];
""3760_cashOut"" [label=""cashOut""];
""3760__drawFailure"" [label=""_drawFailure""];
""3760_effectiveMaxBet"" [label=""effectiveMaxBet""];
""3760_getWhitelistOwner"" [label=""getWhitelistOwner""];
""3760_betWithCredits"" [label=""betWithCredits""];
""3760_maxBet"" [label=""maxBet""];
""3760__uncreditUser"" [label=""_uncreditUser""];
""3760_constructor"" -> ""3760__addPayTable"";
""3760_getCurPayTable"" -> ""3760_getPayTable"";
""3760_addPayTable"" -> ""3760_fromAdmin"";
""3760_cashOut"" -> ""3760__uncreditUser"";
""3760_betFromGame"" -> ""3760_betWithCredits"";
""3760_constructor"" -> ""3760_constructor"";
""3760_bet"" -> ""3760__createNewGame"";
""3760_getIHand"" -> ""3760_getHand"";
""3760__finalize"" -> ""3760_getHand"";
""3760_getDHandRank"" -> ""3760_getDHand"";
""3760_addCredits"" -> ""3760__creditUser"";
""3760_betFromGame"" -> ""3760__betFailure"";
""3760_betWithCredits"" -> ""3760_curMaxBet"";
""3760__finalize"" -> ""3760_drawToHand"";
""3760_getDHand"" -> ""3760_drawToHand"";
""3760_getDHandRank"" -> ""3760_getHandRank"";
""3760_finalize"" -> ""3760__finalize"";
""3760_bet"" -> ""3760_curMaxBet"";
""3760_finalize"" -> ""3760__finalizeFailure"";
""3760__draw"" -> ""3760__drawFailure"";
""3760_betWithCredits"" -> ""3760__createNewGame"";
""3760__finalize"" -> ""3760__finalizeFailure"";
""3760_bet"" -> ""3760__betFailure"";
""3760_effectiveMaxBet"" -> ""3760_curMaxBet"";
""3760_draw"" -> ""3760__drawFailure"";
""3760__finalize"" -> ""3760_getHandRank"";
""3760_changeSettings"" -> ""3760_fromAdmin"";
""3760_betFromGame"" -> ""3760_finalize"";
""3760_getWhitelistOwner"" -> ""3760_getAdmin"";
""3760__finalize"" -> ""3760__creditUser"";
""3760__draw"" -> ""3760_getHand"";
""3760_draw"" -> ""3760__draw"";
""3760_addPayTable"" -> ""3760__addPayTable"";
""3760_curMaxBet"" -> ""3760_bankrollAvailable"";
""3760_betWithCredits"" -> ""3760__betFailure"";
}
"
0x1b528346f0631dc465813a757eaf38035b44b9e4.sol,KCBToken,"contract KCBToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function KCBToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 1000000000e18; balances[0x743fd6d924ae32ccddb377f11d43129cdd0d0d00] = _totalSupply; Transfer(address(0), 0x743fd6d924ae32ccddb377f11d43129cdd0d0d00, _totalSupply); }",0,"subgraph cluster_543_KCBToken {
label=""KCBToken"";
""543_balanceOf"" [label=""balanceOf""];
""543_transfer"" [label=""transfer""];
""543_transferFrom"" [label=""transferFrom""];
""543_totalSupply"" [label=""totalSupply""];
""543_KCBToken"" [label=""KCBToken""];
""543_allowance"" [label=""allowance""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_fallback"" [label=""fallback""];
""543_approve"" [label=""approve""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0xcfed26885acf068f42bdf90a38d5694006f8f611.sol,HodlBetToken,"contract HodlBetToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 8; _totalSupply = 1000000000000000000000; balances[0xcdE3F95B177a4c2b77916433bC8D2dedA35c0922] = _totalSupply; emit Transfer(address(0), 0xcdE3F95B177a4c2b77916433bC8D2dedA35c0922, _totalSupply); }",0,"subgraph cluster_543_HodlBetToken {
label=""HodlBetToken"";
""543_fallback"" [label=""fallback""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_constructor"" [label=""constructor""];
""543_transferFrom"" [label=""transferFrom""];
""543_transfer"" [label=""transfer""];
""543_approve"" [label=""approve""];
""543_totalSupply"" [label=""totalSupply""];
""543_allowance"" [label=""allowance""];
""543_balanceOf"" [label=""balanceOf""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0x32fcdefa047d8edeea0c21a50179b18181074c60.sol,CryptoSanguoToken,"contract CryptoSanguoToken { using SafeMath for uint256; event Bought (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Sold (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Transfer(address indexed _from, address indexed _to, uint256 _tokenId); event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId); address private owner; mapping (address => bool) private admins; IItemRegistry private itemRegistry; bool private erc721Enabled = false; uint256 private increaseLimit1 = 0.02 ether; uint256 private increaseLimit2 = 0.5 ether; uint256 private increaseLimit3 = 2.0 ether; uint256 private increaseLimit4 = 5.0 ether; uint256 private min_value = 0.01 ether; uint256[] private listedItems; mapping (uint256 => address) private ownerOfItem; mapping (uint256 => uint256) private startingPriceOfItem; mapping (uint256 => uint256) private priceOfItem; mapping (uint256 => address) private approvedOfItem; function CryptoSanguoToken () public { owner = msg.sender; admins[owner] = true; issueCard(1, 7, 5); }",0,"subgraph cluster_1362_CryptoSanguoToken {
label=""CryptoSanguoToken"";
""1362_enableERC721"" [label=""enableERC721""];
""1362_totalSupply"" [label=""totalSupply""];
""1362_name"" [label=""name""];
""1362_transfer"" [label=""transfer""];
""1362_transferFrom"" [label=""transferFrom""];
""1362_CryptoSanguoToken"" [label=""CryptoSanguoToken""];
""1362_listItem"" [label=""listItem""];
""1362_tokensOf"" [label=""tokensOf""];
""1362_issueCard"" [label=""issueCard""];
""1362_setOwner"" [label=""setOwner""];
""1362_ownerOf"" [label=""ownerOf""];
""1362_balanceOf"" [label=""balanceOf""];
""1362_removeAdmin"" [label=""removeAdmin""];
""1362_approve"" [label=""approve""];
""1362_buy"" [label=""buy""];
""1362_startingPriceOf"" [label=""startingPriceOf""];
""1362_implementsERC721"" [label=""implementsERC721""];
""1362_changePrice"" [label=""changePrice""];
""1362_nextPriceOf"" [label=""nextPriceOf""];
""1362_setItemRegistry"" [label=""setItemRegistry""];
""1362_symbol"" [label=""symbol""];
""1362__transfer"" [label=""_transfer""];
""1362_populateFromItemRegistry"" [label=""populateFromItemRegistry""];
""1362_isAdmin"" [label=""isAdmin""];
""1362_tokenExists"" [label=""tokenExists""];
""1362_withdrawAmount"" [label=""withdrawAmount""];
""1362_approvedFor"" [label=""approvedFor""];
""1362_listMultipleItems"" [label=""listMultipleItems""];
""1362_priceOf"" [label=""priceOf""];
""1362_allOf"" [label=""allOf""];
""1362_calculateNextPrice"" [label=""calculateNextPrice""];
""1362_addAdmin"" [label=""addAdmin""];
""1362_isContract"" [label=""isContract""];
""1362_itemsForSaleLimit"" [label=""itemsForSaleLimit""];
""1362_listItemFromRegistry"" [label=""listItemFromRegistry""];
""1362_withdrawAll"" [label=""withdrawAll""];
""1362_calculateDevCut"" [label=""calculateDevCut""];
""1362__transfer"" -> ""1362_ownerOf"";
""1362_transferFrom"" -> ""1362_approvedFor"";
""1362_withdrawAll"" -> ""1362_onlyOwner"";
""1362_tokensOf"" -> ""1362_balanceOf"";
""1362_CryptoSanguoToken"" -> ""1362_issueCard"";
""1362_listMultipleItems"" -> ""1362_listItem"";
""1362_approve"" -> ""1362_ownerOf"";
""1362_listItemFromRegistry"" -> ""1362_onlyOwner"";
""1362_changePrice"" -> ""1362_onlyAdmins"";
""1362_buy"" -> ""1362_calculateDevCut"";
""1362_allOf"" -> ""1362_nextPriceOf"";
""1362_buy"" -> ""1362__transfer"";
""1362_buy"" -> ""1362_ownerOf"";
""1362_transferFrom"" -> ""1362__transfer"";
""1362_allOf"" -> ""1362_ownerOf"";
""1362_tokenExists"" -> ""1362_priceOf"";
""1362_withdrawAmount"" -> ""1362_onlyOwner"";
""1362_transfer"" -> ""1362__transfer"";
""1362_allOf"" -> ""1362_startingPriceOf"";
""1362_approve"" -> ""1362_tokenExists"";
""1362__transfer"" -> ""1362_tokenExists"";
""1362_buy"" -> ""1362_priceOf"";
""1362_allOf"" -> ""1362_priceOf"";
""1362_listMultipleItems"" -> ""1362_onlyAdmins"";
""1362_addAdmin"" -> ""1362_onlyOwner"";
""1362_listItem"" -> ""1362_onlyAdmins"";
""1362_nextPriceOf"" -> ""1362_calculateNextPrice"";
""1362_nextPriceOf"" -> ""1362_priceOf"";
""1362_removeAdmin"" -> ""1362_onlyOwner"";
""1362_enableERC721"" -> ""1362_onlyOwner"";
""1362_populateFromItemRegistry"" -> ""1362_onlyOwner"";
""1362_buy"" -> ""1362_nextPriceOf"";
""1362_setOwner"" -> ""1362_onlyOwner"";
""1362_populateFromItemRegistry"" -> ""1362_listItemFromRegistry"";
""1362_setItemRegistry"" -> ""1362_onlyOwner"";
""1362_listItemFromRegistry"" -> ""1362_listItem"";
""1362_transferFrom"" -> ""1362_onlyERC721"";
""1362_transfer"" -> ""1362_ownerOf"";
""1362_transfer"" -> ""1362_onlyERC721"";
""1362_tokensOf"" -> ""1362_ownerOf"";
""1362_approve"" -> ""1362_onlyERC721"";
""1362_buy"" -> ""1362_isContract"";
""1362_balanceOf"" -> ""1362_ownerOf"";
""1362_issueCard"" -> ""1362_onlyAdmins"";
}
"
0x01805928b325078683818329526dab3f74865e10.sol,AumICO,"contract AumICO is usingOraclize, SafeMath { struct OperationInQueue { uint operationStartTime; uint depositedEther; address receiver; bool closed; }",0,"subgraph cluster_7303_AumICO {
label=""AumICO"";
""7303_updatePrice"" [label=""updatePrice""];
""7303_GetAdminAddress"" [label=""GetAdminAddress""];
""7303_ChangeEtherVault"" [label=""ChangeEtherVault""];
""7303_ChangeEtherGasProvider"" [label=""ChangeEtherGasProvider""];
""7303_GetQueueLength"" [label=""GetQueueLength""];
""7303_UpdateEtherPriceNow"" [label=""UpdateEtherPriceNow""];
""7303_AddToWhitelist"" [label=""AddToWhitelist""];
""7303_CheckQueue"" [label=""CheckQueue""];
""7303_getTokenBalance"" [label=""getTokenBalance""];
""7303_RemoveFromWhitelist"" [label=""RemoveFromWhitelist""];
""7303_changeTokenAddress"" [label=""changeTokenAddress""];
""7303_getEtherInContract"" [label=""getEtherInContract""];
""7303_ExtractEtherLeftOnContract"" [label=""ExtractEtherLeftOnContract""];
""7303_CheckSoftCap"" [label=""CheckSoftCap""];
""7303_sendTokens"" [label=""sendTokens""];
""7303_sendTokensForLEX"" [label=""sendTokensForLEX""];
""7303_tokenFallback"" [label=""tokenFallback""];
""7303_ChangeLEXTokenAddress"" [label=""ChangeLEXTokenAddress""];
""7303_AumICO"" [label=""AumICO""];
""7303_getTokenAddress"" [label=""getTokenAddress""];
""7303_IsOnWhitelist"" [label=""IsOnWhitelist""];
""7303_AdvanceQueue"" [label=""AdvanceQueue""];
""7303_ChangeTokenVaultAddress"" [label=""ChangeTokenVaultAddress""];
""7303_fallback"" [label=""fallback""];
""7303_getPrice"" [label=""getPrice""];
""7303___callback"" [label=""__callback""];
""7303_ChangeEtherGasProvider"" -> ""7303_onlyAdmin"";
""7303___callback"" -> ""7303_parseInt"";
""7303_fallback"" -> ""7303_safeSub"";
""7303_sendTokens"" -> ""7303_safeMul"";
""7303_sendTokensForLEX"" -> ""7303_safeSub"";
""7303_updatePrice"" -> ""7303_oraclize_query"";
""7303_UpdateEtherPriceNow"" -> ""7303_onlyAdmin"";
""7303_AdvanceQueue"" -> ""7303_CheckQueue"";
""7303_sendTokens"" -> ""7303_safeSub"";
""7303_ChangeLEXTokenAddress"" -> ""7303_onlyAdmin"";
""7303_tokenFallback"" -> ""7303_sendTokensForLEX"";
""7303_CheckQueue"" -> ""7303_sendTokens"";
""7303_UpdateEtherPriceNow"" -> ""7303_updatePrice"";
""7303_RemoveFromWhitelist"" -> ""7303_onlyAdmin"";
""7303_updatePrice"" -> ""7303_oraclize_getPrice"";
""7303_sendTokensForLEX"" -> ""7303_safeMul"";
""7303_ChangeTokenVaultAddress"" -> ""7303_onlyAdmin"";
""7303_ChangeEtherVault"" -> ""7303_onlyAdmin"";
""7303___callback"" -> ""7303_CheckQueue"";
""7303_fallback"" -> ""7303_sendTokens"";
""7303___callback"" -> ""7303_oraclize_cbAddress"";
""7303_GetQueueLength"" -> ""7303_safeSub"";
""7303_sendTokensForLEX"" -> ""7303_sendTokensForLEX"";
""7303_GetQueueLength"" -> ""7303_onlyAdmin"";
""7303_AdvanceQueue"" -> ""7303_onlyAdmin"";
""7303_sendTokens"" -> ""7303_safeDiv"";
""7303_fallback"" -> ""7303_safeAdd"";
""7303_ExtractEtherLeftOnContract"" -> ""7303_onlyAdmin"";
""7303_sendTokensForLEX"" -> ""7303_safeDiv"";
""7303_CheckQueue"" -> ""7303_updatePrice"";
""7303_AddToWhitelist"" -> ""7303_onlyAdmin"";
""7303_changeTokenAddress"" -> ""7303_onlyAdmin"";
""7303_fallback"" -> ""7303_updatePrice"";
""7303_CheckQueue"" -> ""7303_safeSub"";
""7303_CheckSoftCap"" -> ""7303_onlyAdmin"";
""7303_sendTokens"" -> ""7303_sendTokens"";
}
"
0x5365b7a3e4f68a84323792f2d0b44b0bbd5b6f0b.sol,BurnableToken,"contract BurnableToken is StandardToken, Ownable { event Burn(address indexed burner, uint256 amount); function burn(uint256 _amount) public { require(_amount > 0); require(_amount <= balances[msg.sender]); address burner = msg.sender; balances[burner] = balances[burner].sub(_amount); totalSupply = totalSupply.sub(_amount); Transfer(burner, address(0), _amount); Burn(burner, _amount); }",0,"subgraph cluster_646_BurnableToken {
label=""BurnableToken"";
""646_burnFrom"" [label=""burnFrom""];
""646_burn"" [label=""burn""];
""646_burnFrom"" -> ""646_onlyOwner"";
}
"
0x6f122109a8ece4af04baf2453318693633bd1246.sol,RocketToken,"contract RocketToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function RocketToken() public { symbol = ; name = ; decimals = 8; _totalSupply = 100000000000; balances[0xeAE55239EF5Bb78E41EEeDa62ab2D6c7f4da6706] = _totalSupply; emit Transfer(address(0),0xeAE55239EF5Bb78E41EEeDa62ab2D6c7f4da6706 , _totalSupply); }",0,"subgraph cluster_543_RocketToken {
label=""RocketToken"";
""543_balanceOf"" [label=""balanceOf""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" [label=""transferFrom""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_fallback"" [label=""fallback""];
""543_transfer"" [label=""transfer""];
""543_RocketToken"" [label=""RocketToken""];
""543_totalSupply"" [label=""totalSupply""];
""543_approve"" [label=""approve""];
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0x5a9633b76eedb38ab04733682f1f422b4ce219b5.sol,TokenSwap,"contract TokenSwap is Ownable, Multiownable { using BadERC20Aware for ERC20; using SafeMath for uint256; enum Status {AddParties, WaitingDeposits, SwapConfirmed, SwapCanceled}",0,"subgraph cluster_2234_TokenSwap {
label=""TokenSwap"";
""2234__haveEveryoneDeposited"" [label=""_haveEveryoneDeposited""];
""2234__startLockup"" [label=""_startLockup""];
""2234__changeStatus"" [label=""_changeStatus""];
""2234_confirmSwap"" [label=""confirmSwap""];
""2234_removeParty"" [label=""removeParty""];
""2234_withdraw"" [label=""withdraw""];
""2234_cancelSwap"" [label=""cancelSwap""];
""2234__unlockedAmount"" [label=""_unlockedAmount""];
""2234__initializeLockupStages"" [label=""_initializeLockupStages""];
""2234__addLockupStage"" [label=""_addLockupStage""];
""2234__withdrawableFee"" [label=""_withdrawableFee""];
""2234_withdrawFee"" [label=""withdrawFee""];
""2234__validateLockupStages"" [label=""_validateLockupStages""];
""2234_constructor"" [label=""constructor""];
""2234_tokenFallback"" [label=""tokenFallback""];
""2234_reclaim"" [label=""reclaim""];
""2234_confirmParties"" [label=""confirmParties""];
""2234__withdrawableAmount"" [label=""_withdrawableAmount""];
""2234_addParty"" [label=""addParty""];
""2234__getUnlockedTokensPercentage"" [label=""_getUnlockedTokensPercentage""];
""2234_addParty"" -> ""2234_canAddParty"";
""2234_withdrawFee"" -> ""2234_canWithdrawFee"";
""2234_confirmParties"" -> ""2234_transferOwnershipWithHowMany"";
""2234_cancelSwap"" -> ""2234_canCancelSwap"";
""2234_withdraw"" -> ""2234_canWithdraw"";
""2234__initializeLockupStages"" -> ""2234__addLockupStage"";
""2234_reclaim"" -> ""2234_onlyParticipant"";
""2234_cancelSwap"" -> ""2234_onlyManyOwners"";
""2234__unlockedAmount"" -> ""2234__getUnlockedTokensPercentage"";
""2234_constructor"" -> ""2234__initializeLockupStages"";
""2234_withdrawFee"" -> ""2234_onlyOwner"";
""2234_confirmParties"" -> ""2234__changeStatus"";
""2234_withdrawFee"" -> ""2234__withdrawableFee"";
""2234_constructor"" -> ""2234__validateLockupStages"";
""2234_reclaim"" -> ""2234_canReclaim"";
""2234_confirmParties"" -> ""2234_onlyOwner"";
""2234_confirmParties"" -> ""2234_canConfirmParties"";
""2234_withdraw"" -> ""2234__withdrawableAmount"";
""2234_addParty"" -> ""2234_onlyOwner"";
""2234_confirmSwap"" -> ""2234__startLockup"";
""2234_withdraw"" -> ""2234_onlyParticipant"";
""2234_cancelSwap"" -> ""2234__changeStatus"";
""2234_removeParty"" -> ""2234_canRemoveParty"";
""2234__withdrawableAmount"" -> ""2234__unlockedAmount"";
""2234_confirmSwap"" -> ""2234_onlyManyOwners"";
""2234_removeParty"" -> ""2234_onlyOwner"";
""2234_confirmSwap"" -> ""2234__changeStatus"";
""2234__withdrawableFee"" -> ""2234__unlockedAmount"";
""2234_confirmSwap"" -> ""2234_canConfirmSwap"";
}
"
0xb4933b15b21924af2c18012c4da78b182f060107.sol,DateTime,contract DateTime { struct _DateTime { uint16 year; uint8 month; uint8 day; uint8 hour; uint8 minute; uint8 second; uint8 weekday; },0,"subgraph cluster_767_DateTime {
label=""DateTime"";
""767_parseTimestamp"" [label=""parseTimestamp""];
""767_toTimestamp"" [label=""toTimestamp""];
""767_leapYearsBefore"" [label=""leapYearsBefore""];
""767_getDay"" [label=""getDay""];
""767_getHour"" [label=""getHour""];
""767_getSecond"" [label=""getSecond""];
""767_isLeapYear"" [label=""isLeapYear""];
""767_getDaysInMonth"" [label=""getDaysInMonth""];
""767_getMonth"" [label=""getMonth""];
""767_getWeekday"" [label=""getWeekday""];
""767_getMinute"" [label=""getMinute""];
""767_getYear"" [label=""getYear""];
""767_getDaysInMonth"" -> ""767_isLeapYear"";
""767_parseTimestamp"" -> ""767_getWeekday"";
""767_parseTimestamp"" -> ""767_getMinute"";
""767_getDay"" -> ""767_parseTimestamp"";
""767_parseTimestamp"" -> ""767_getDaysInMonth"";
""767_parseTimestamp"" -> ""767_getSecond"";
""767_parseTimestamp"" -> ""767_leapYearsBefore"";
""767_parseTimestamp"" -> ""767_getHour"";
""767_getYear"" -> ""767_leapYearsBefore"";
""767_toTimestamp"" -> ""767_isLeapYear"";
""767_parseTimestamp"" -> ""767_getYear"";
""767_toTimestamp"" -> ""767_toTimestamp"";
""767_getYear"" -> ""767_isLeapYear"";
""767_getMonth"" -> ""767_parseTimestamp"";
}
"
0x27ce49590684308d22fe7adcb8b80976701774d3.sol,TheEthGame,contract TheEthGame { using SafeMath for uint256; struct Player { uint256 score; uint256 lastCellBoughtOnBlockNumber; uint256 numberOfCellsOwned; uint256 numberOfCellsBought; uint256 earnings; uint256 partialHarmonicSum; uint256 partialScoreSum; address referreal; bytes32 name; },0,"subgraph cluster_2032_TheEthGameTrophy {
label=""TheEthGameTrophy"";
""2032_name"" [label=""name""];
""2032_constructor"" [label=""constructor""];
""2032_description"" [label=""description""];
""2032_rank"" [label=""rank""];
""2032_message"" [label=""message""];
""2032_owner"" [label=""owner""];
""2032_award"" [label=""award""];
""2032_winner"" [label=""winner""];
""2032_creator"" [label=""creator""];
""2032_transfer"" [label=""transfer""];
}
"
0x4c902a3ff72dcf01bac6b9d0438565e649a87404.sol,EVOLUTION,contract EVOLUTION { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1289_EVOLUTION {
label=""EVOLUTION"";
""1289_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1289_purchaseTokens"" [label=""purchaseTokens""];
""1289_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1289_myTokens"" [label=""myTokens""];
""1289_setAdministrator"" [label=""setAdministrator""];
""1289_balanceOf"" [label=""balanceOf""];
""1289_sqrt"" [label=""sqrt""];
""1289_fallback"" [label=""fallback""];
""1289_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1289_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1289_withdraw"" [label=""withdraw""];
""1289_reinvest"" [label=""reinvest""];
""1289_disableWhitelist"" [label=""disableWhitelist""];
""1289_activateWhitelist"" [label=""activateWhitelist""];
""1289_transfer"" [label=""transfer""];
""1289_setStakingRequirement"" [label=""setStakingRequirement""];
""1289_buy"" [label=""buy""];
""1289_buyPrice"" [label=""buyPrice""];
""1289_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1289_redistribution"" [label=""redistribution""];
""1289_setName"" [label=""setName""];
""1289_sell"" [label=""sell""];
""1289_dividendsOf"" [label=""dividendsOf""];
""1289_exit"" [label=""exit""];
""1289_sellPrice"" [label=""sellPrice""];
""1289_constructor"" [label=""constructor""];
""1289_setSymbol"" [label=""setSymbol""];
""1289_totalSupply"" [label=""totalSupply""];
""1289_myDividends"" [label=""myDividends""];
""1289_setName"" -> ""1289_onlyAdministrator"";
""1289_ethereumToTokens_"" -> ""1289_sqrt"";
""1289_withdraw"" -> ""1289_myDividends"";
""1289_setSymbol"" -> ""1289_onlyAdministrator"";
""1289_exit"" -> ""1289_sell"";
""1289_fallback"" -> ""1289_purchaseTokens"";
""1289_purchaseTokens"" -> ""1289_ethereumToTokens_"";
""1289_calculateTokensReceived"" -> ""1289_ethereumToTokens_"";
""1289_buy"" -> ""1289_purchaseTokens"";
""1289_setStakingRequirement"" -> ""1289_onlyAdministrator"";
""1289_reinvest"" -> ""1289_myDividends"";
""1289_calculateEthereumReceived"" -> ""1289_tokensToEthereum_"";
""1289_sell"" -> ""1289_onlyBagholders"";
""1289_sell"" -> ""1289_tokensToEthereum_"";
""1289_withdraw"" -> ""1289_onlyStronghands"";
""1289_myTokens"" -> ""1289_balanceOf"";
""1289_myDividends"" -> ""1289_dividendsOf"";
""1289_buyPrice"" -> ""1289_tokensToEthereum_"";
""1289_transfer"" -> ""1289_onlyBagholders"";
""1289_transfer"" -> ""1289_myDividends"";
""1289_setAdministrator"" -> ""1289_onlyAdministrator"";
""1289_reinvest"" -> ""1289_purchaseTokens"";
""1289_transfer"" -> ""1289_withdraw"";
""1289_reinvest"" -> ""1289_onlyStronghands"";
""1289_sellPrice"" -> ""1289_tokensToEthereum_"";
""1289_exit"" -> ""1289_withdraw"";
}
"
0x2920e0b7d86ab76aa09bcddffedef081faaf6e2c.sol,BloomToken,"contract BloomToken { string public name = ; string public symbol = ; uint8 public constant decimals = 18; address public owner; uint256 public constant tokensPerEth = 1; uint256 public constant howManyEtherInWeiToBecomeOwner = 1000 ether; uint256 public constant howManyEtherInWeiToKillContract = 500 ether; uint256 public constant howManyEtherInWeiToChangeSymbolName = 400 ether; bool public funding = true; uint256 totalTokens = 1000; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Migrate(address indexed _from, address indexed _to, uint256 _value); event Refund(address indexed _from, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function BloomToken() public { owner = msg.sender; balances[owner]=1000; }",0,"subgraph cluster_401_BloomToken {
label=""BloomToken"";
""401_changeNameSymbol"" [label=""changeNameSymbol""];
""401_mintTo"" [label=""mintTo""];
""401_changeOwner"" [label=""changeOwner""];
""401_balanceOf"" [label=""balanceOf""];
""401_totalSupply"" [label=""totalSupply""];
""401_transfer"" [label=""transfer""];
""401_BloomToken"" [label=""BloomToken""];
""401_approve"" [label=""approve""];
""401_killContract"" [label=""killContract""];
""401_fallback"" [label=""fallback""];
""401_transferFrom"" [label=""transferFrom""];
}
"
0x5314dd28de3f215647b64ccb3701e6098a80d080.sol,CaData,"contract CaData is ADM312, ERC721 { function CaData() public { COO = msg.sender; CTO = msg.sender; CFO = msg.sender; createCustomAtom(0,0,4,0,0,0,0); }",0,"subgraph cluster_907_CaData {
label=""CaData"";
""907_setAtomSons"" [label=""setAtomSons""];
""907_ownerAtomsCount"" [label=""ownerAtomsCount""];
""907_incRandNonce"" [label=""incRandNonce""];
""907_setAtomFath"" [label=""setAtomFath""];
""907_balanceOf"" [label=""balanceOf""];
""907_totalSupply"" [label=""totalSupply""];
""907_setAtomMoth"" [label=""setAtomMoth""];
""907_ownerOf"" [label=""ownerOf""];
""907__transfer"" [label=""_transfer""];
""907_setAtomGen"" [label=""setAtomGen""];
""907_bonusReceived"" [label=""bonusReceived""];
""907_withdrawBalance"" [label=""withdrawBalance""];
""907_setAtomDna"" [label=""setAtomDna""];
""907_fallback"" [label=""fallback""];
""907_setBonusReceived"" [label=""setBonusReceived""];
""907_pushAtom"" [label=""pushAtom""];
""907_CaData"" [label=""CaData""];
""907_atoms"" [label=""atoms""];
""907_takeOwnership"" [label=""takeOwnership""];
""907_setAtomCool"" [label=""setAtomCool""];
""907_setDnaExist"" [label=""setDnaExist""];
""907_setAtomLev"" [label=""setAtomLev""];
""907_setAtomIsReady"" [label=""setAtomIsReady""];
""907_approve"" [label=""approve""];
""907_setAtomIsRent"" [label=""setAtomIsRent""];
""907_setOwnerAtomsCount"" [label=""setOwnerAtomsCount""];
""907_setAtomIsBuy"" [label=""setAtomIsBuy""];
""907_transfer"" [label=""transfer""];
""907_setAtomOwner"" [label=""setAtomOwner""];
""907_CTO"" [label=""CTO""];
""907_atomOwner"" [label=""atomOwner""];
""907_createCustomAtom"" [label=""createCustomAtom""];
""907_kill"" [label=""kill""];
""907_incRandNonce"" -> ""907_onlyContract"";
""907_CaData"" -> ""907_createCustomAtom"";
""907_setAtomCool"" -> ""907_onlyContract"";
""907_setAtomIsReady"" -> ""907_onlyContractAdmin"";
""907_transfer"" -> ""907__transfer"";
""907_setBonusReceived"" -> ""907_onlyContractAdmin"";
""907_setAtomDna"" -> ""907_onlyAdmin"";
""907_setAtomFath"" -> ""907_onlyContract"";
""907_withdrawBalance"" -> ""907_onlyAdmin"";
""907_takeOwnership"" -> ""907_ownerOf"";
""907_setAtomLev"" -> ""907_onlyContract"";
""907_setAtomGen"" -> ""907_onlyAdmin"";
""907_setAtomIsRent"" -> ""907_onlyContract"";
""907_setAtomSons"" -> ""907_onlyContract"";
""907_setAtomIsBuy"" -> ""907_onlyContract"";
""907_setOwnerAtomsCount"" -> ""907_onlyContract"";
""907_takeOwnership"" -> ""907__transfer"";
""907_setAtomMoth"" -> ""907_onlyContract"";
""907_setDnaExist"" -> ""907_onlyContractAdmin"";
""907_setAtomOwner"" -> ""907_onlyContract"";
""907_pushAtom"" -> ""907_onlyContract"";
""907_createCustomAtom"" -> ""907_onlyAdmin"";
}
"
0x2dcfaac11c9eebd8c6c42103fe9e2a6ad237af27.sol,ERC20Token,"contract ERC20Token is StandardToken {string public name = ; string public symbol = ; uint public decimals = 18; uint data1 = 5; uint data2 = 5; uint data3 = 1; function set(uint x, uint y, uint z) onlyOwner { data1 = x; data2 = y; data3 = z; }",0,"subgraph cluster_1095_ERC20Token {
label=""ERC20Token"";
""1095_freeze"" [label=""freeze""];
""1095_EventEmergencyStop"" [label=""EventEmergencyStop""];
""1095_unFreeze"" [label=""unFreeze""];
""1095_price"" [label=""price""];
""1095_PriceOneDisable"" [label=""PriceOneDisable""];
""1095_buy"" [label=""buy""];
""1095_fallback"" [label=""fallback""];
""1095_PriceThreeEnable"" [label=""PriceThreeEnable""];
""1095_PriceTwoDisable"" [label=""PriceTwoDisable""];
""1095_transfer"" [label=""transfer""];
""1095_PriceOneEnable"" [label=""PriceOneEnable""];
""1095_EventEmergencyContinue"" [label=""EventEmergencyContinue""];
""1095_ERC20Token"" [label=""ERC20Token""];
""1095_transferFrom"" [label=""transferFrom""];
""1095_PriceThreeDisable"" [label=""PriceThreeDisable""];
""1095_InitialPriceEnable"" [label=""InitialPriceEnable""];
""1095_PriceTwoEnable"" [label=""PriceTwoEnable""];
""1095_InitialPriceDisable"" [label=""InitialPriceDisable""];
""1095_set"" [label=""set""];
""1095_burnRemainingTokens"" [label=""burnRemainingTokens""];
""1095_PriceTwoDisable"" -> ""1095_onlyOwner"";
""1095_transferFrom"" -> ""1095_isAvailable"";
""1095_EventEmergencyStop"" -> ""1095_onlyOwner"";
""1095_transfer"" -> ""1095_isAvailable"";
""1095_transferFrom"" -> ""1095_transferFrom"";
""1095_buy"" -> ""1095_price"";
""1095_buy"" -> ""1095_safeAdd"";
""1095_buy"" -> ""1095_safeSub"";
""1095_PriceThreeEnable"" -> ""1095_onlyOwner"";
""1095_InitialPriceEnable"" -> ""1095_onlyOwner"";
""1095_PriceOneDisable"" -> ""1095_onlyOwner"";
""1095_transfer"" -> ""1095_transfer"";
""1095_PriceOneEnable"" -> ""1095_onlyOwner"";
""1095_PriceTwoEnable"" -> ""1095_onlyOwner"";
""1095_EventEmergencyContinue"" -> ""1095_onlyOwner"";
""1095_InitialPriceDisable"" -> ""1095_onlyOwner"";
""1095_burnRemainingTokens"" -> ""1095_isAvailable"";
""1095_freeze"" -> ""1095_onlyOwner"";
""1095_set"" -> ""1095_onlyOwner"";
""1095_PriceThreeDisable"" -> ""1095_onlyOwner"";
""1095_burnRemainingTokens"" -> ""1095_onlyOwner"";
""1095_unFreeze"" -> ""1095_onlyOwner"";
""1095_ERC20Token"" -> ""1095_safeSub"";
""1095_fallback"" -> ""1095_buy"";
}
"
0x418b47c62af92e2ab2c105279c50d4e93b77c725.sol,MIC,"contract MIC { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function MIC( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_361_MIC {
label=""MIC"";
""361_burn"" [label=""burn""];
""361_transfer"" [label=""transfer""];
""361_MIC"" [label=""MIC""];
""361_transferFrom"" [label=""transferFrom""];
""361_approve"" [label=""approve""];
""361__transfer"" [label=""_transfer""];
""361_burnFrom"" [label=""burnFrom""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_transfer"" -> ""361__transfer"";
""361_transferFrom"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
}
"
0x56190ef084441dfde78fe6cb9a0c5b03b108ef48.sol,Etherauction,contract Etherauction is ContractOwner { using SafeMath for uint256; constructor() public payable { owner = msg.sender; gameId = 1; gameStartTime = block.timestamp; gameLastAuctionMoney = 10**15; gameLastAuctionTime = block.timestamp; gameSecondLeft = _getInitAuctionSeconds(); },0,"subgraph cluster_2932_Etherauction {
label=""Etherauction"";
""2932_getCurrGameInfoPart2"" [label=""getCurrGameInfoPart2""];
""2932_gameRoundEnd"" [label=""gameRoundEnd""];
""2932_constructor"" [label=""constructor""];
""2932_getGameInfo"" [label=""getGameInfo""];
""2932__auction"" [label=""_auction""];
""2932__getMinAuctionStartPrice"" [label=""_getMinAuctionStartPrice""];
""2932__getGameInfoPart3"" [label=""_getGameInfoPart3""];
""2932__inMoney"" [label=""_inMoney""];
""2932__startNewRound"" [label=""_startNewRound""];
""2932__claimReward"" [label=""_claimReward""];
""2932_adminPayout"" [label=""adminPayout""];
""2932_getMinAuctionValue"" [label=""getMinAuctionValue""];
""2932__isUserInGame"" [label=""_isUserInGame""];
""2932__getMinAuctionSeconds"" [label=""_getMinAuctionSeconds""];
""2932_claimReward"" [label=""claimReward""];
""2932_refund"" [label=""refund""];
""2932_registerInvitor"" [label=""registerInvitor""];
""2932__getGameInfoPart2"" [label=""_getGameInfoPart2""];
""2932__getGameStartAuctionMoney"" [label=""_getGameStartAuctionMoney""];
""2932__getGameInfoPart1"" [label=""_getGameInfoPart1""];
""2932__getInitAuctionSeconds"" [label=""_getInitAuctionSeconds""];
""2932_auction"" [label=""auction""];
""2932_getCurrTotalInvest"" [label=""getCurrTotalInvest""];
""2932_getGameDataByIndex"" [label=""getGameDataByIndex""];
""2932_getCurrCanRefund"" [label=""getCurrCanRefund""];
""2932_getCurrGameInfoPart1"" [label=""getCurrGameInfoPart1""];
""2932_getInvitor"" [label=""getInvitor""];
""2932_adminAddMoney"" [label=""adminAddMoney""];
""2932__getGameAuctionGap"" [label=""_getGameAuctionGap""];
""2932__getMaxAuctionSeconds"" [label=""_getMaxAuctionSeconds""];
""2932_addAuctionReward"" [label=""addAuctionReward""];
""2932__claimReward"" -> ""2932__getGameInfoPart2"";
""2932_gameRoundEnd"" -> ""2932__claimReward"";
""2932_getMinAuctionValue"" -> ""2932__getGameAuctionGap"";
""2932__auction"" -> ""2932_getInvitor"";
""2932_getGameInfo"" -> ""2932__getGameInfoPart1"";
""2932_auction"" -> ""2932__auction"";
""2932__inMoney"" -> ""2932__isUserInGame"";
""2932_addAuctionReward"" -> ""2932_getMinAuctionValue"";
""2932_getGameInfo"" -> ""2932__getGameInfoPart3"";
""2932__claimReward"" -> ""2932__getGameInfoPart3"";
""2932__auction"" -> ""2932__getGameAuctionGap"";
""2932_claimReward"" -> ""2932__claimReward"";
""2932__claimReward"" -> ""2932__getGameInfoPart1"";
""2932_getGameInfo"" -> ""2932__getGameInfoPart2"";
""2932_constructor"" -> ""2932__getInitAuctionSeconds"";
""2932__startNewRound"" -> ""2932__getInitAuctionSeconds"";
""2932_gameRoundEnd"" -> ""2932__startNewRound"";
""2932__startNewRound"" -> ""2932__getMinAuctionStartPrice"";
""2932__auction"" -> ""2932_registerInvitor"";
""2932__auction"" -> ""2932__inMoney"";
""2932_getCurrGameInfoPart1"" -> ""2932__getGameAuctionGap"";
""2932_addAuctionReward"" -> ""2932__auction"";
""2932_adminPayout"" -> ""2932_onlyOwner"";
""2932_getCurrGameInfoPart2"" -> ""2932__getGameInfoPart3"";
""2932__auction"" -> ""2932__getMaxAuctionSeconds"";
""2932_addAuctionReward"" -> ""2932__isUserInGame"";
}
"
0x55f363057098fb092ba85daf92ee6eeb4074e660.sol,VOCC_I105_20181211,"contract VOCC_I105_20181211 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 19800000000000000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",0,"subgraph cluster_189_VOCC_I105_20181211 {
label=""VOCC_I105_20181211"";
""189_approve"" [label=""approve""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_transfer"" [label=""transfer""];
""189_transferFrom"" [label=""transferFrom""];
}
"
0x39f89421c5bf8bb0d855c0216b00b45e3733b515.sol,BaseDINOToken,"contract BaseDINOToken { using SafeMath for uint256; address public owner; mapping(address => uint256) internal balances; mapping (address => mapping (address => uint256)) internal allowed; uint256 internal totalSupply_; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); event Burn(address indexed burner, uint256 value); event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); event Mint(address indexed to, uint256 amount); modifier onlyOwner() { require(msg.sender == owner,); _; }",0,"subgraph cluster_1040_BaseDINOToken {
label=""BaseDINOToken"";
""1040_approve"" [label=""approve""];
""1040_increaseApproval"" [label=""increaseApproval""];
""1040__transferOwnership"" [label=""_transferOwnership""];
""1040_decreaseApproval"" [label=""decreaseApproval""];
""1040_constructor"" [label=""constructor""];
""1040_mint"" [label=""mint""];
""1040_burn"" [label=""burn""];
""1040_totalSupply"" [label=""totalSupply""];
""1040_balanceOf"" [label=""balanceOf""];
""1040_transferOwnership"" [label=""transferOwnership""];
""1040_burnFrom"" [label=""burnFrom""];
""1040__burn"" [label=""_burn""];
""1040_allowance"" [label=""allowance""];
""1040_transfer"" [label=""transfer""];
""1040_transferFrom"" [label=""transferFrom""];
""1040_transferOwnership"" -> ""1040_onlyOwner"";
""1040_burnFrom"" -> ""1040__burn"";
""1040_burn"" -> ""1040__burn"";
""1040_mint"" -> ""1040_onlyOwner"";
""1040_transferOwnership"" -> ""1040__transferOwnership"";
}
"
0x705051bbfd9f287869a412cba8bc7d112de48e69.sol,SAKECOIN,"contract SAKECOIN is ERC223, Ownable { using SafeMath for uint256; string public name = ; string public symbol = ; uint8 public decimals = 8; uint256 public initialSupply = 30e9 * 1e8; uint256 public totalSupply; uint256 public distributeAmount = 0; bool public mintingFinished = false; mapping (address => uint) balances; mapping (address => bool) public frozenAccount; mapping (address => uint256) public unlockUnixTime; event FrozenFunds(address indexed target, bool frozen); event LockedFunds(address indexed target, uint256 locked); event Burn(address indexed burner, uint256 value); event Mint(address indexed to, uint256 amount); event MintFinished(); function SAKECOIN() public { totalSupply = initialSupply; balances[msg.sender] = totalSupply; }",0,"subgraph cluster_1515_SAKECOIN {
label=""SAKECOIN"";
""1515_decimals"" [label=""decimals""];
""1515_transferToContract"" [label=""transferToContract""];
""1515_autoDistribute"" [label=""autoDistribute""];
""1515_symbol"" [label=""symbol""];
""1515_transfer"" [label=""transfer""];
""1515_lockupAccounts"" [label=""lockupAccounts""];
""1515_isContract"" [label=""isContract""];
""1515_finishMinting"" [label=""finishMinting""];
""1515_fallback"" [label=""fallback""];
""1515_transferToAddress"" [label=""transferToAddress""];
""1515_mint"" [label=""mint""];
""1515_distributeAirdrop"" [label=""distributeAirdrop""];
""1515_totalSupply"" [label=""totalSupply""];
""1515_balanceOf"" [label=""balanceOf""];
""1515_collectTokens"" [label=""collectTokens""];
""1515_setDistributeAmount"" [label=""setDistributeAmount""];
""1515_freezeAccounts"" [label=""freezeAccounts""];
""1515_burn"" [label=""burn""];
""1515_name"" [label=""name""];
""1515_SAKECOIN"" [label=""SAKECOIN""];
""1515_finishMinting"" -> ""1515_onlyOwner"";
""1515_transferToContract"" -> ""1515_balanceOf"";
""1515_freezeAccounts"" -> ""1515_onlyOwner"";
""1515_transferToAddress"" -> ""1515_balanceOf"";
""1515_mint"" -> ""1515_canMint"";
""1515_transfer"" -> ""1515_isContract"";
""1515_mint"" -> ""1515_onlyOwner"";
""1515_transfer"" -> ""1515_transferToAddress"";
""1515_burn"" -> ""1515_balanceOf"";
""1515_burn"" -> ""1515_onlyOwner"";
""1515_collectTokens"" -> ""1515_onlyOwner"";
""1515_fallback"" -> ""1515_autoDistribute"";
""1515_transfer"" -> ""1515_balanceOf"";
""1515_setDistributeAmount"" -> ""1515_onlyOwner"";
""1515_transfer"" -> ""1515_transferToContract"";
""1515_lockupAccounts"" -> ""1515_onlyOwner"";
""1515_autoDistribute"" -> ""1515_balanceOf"";
""1515_finishMinting"" -> ""1515_canMint"";
}
"
0xef4a7cd27e310314ec9af5473c95eb647e4d42a3.sol,CrowdsaleWPTByRounds,contract CrowdsaleWPTByRounds is Ownable { using SafeMath for uint256; using SafeERC20 for ERC20; ERC20 public token; address public wallet; CommonSale public minterContract; uint256 public rate; uint256 public tokensRaised; uint256 public cap; uint256 public openingTime; uint256 public closingTime; uint public minInvestmentValue; function setMinter(address _minterAddr) public onlyOwner { minterContract = CommonSale(_minterAddr); },0,"subgraph cluster_743_CrowdsaleWPTByRounds {
label=""CrowdsaleWPTByRounds"";
""743_hasClosed"" [label=""hasClosed""];
""743__getTokenAmount"" [label=""_getTokenAmount""];
""743_fallback"" [label=""fallback""];
""743_setMinter"" [label=""setMinter""];
""743_buyTokens"" [label=""buyTokens""];
""743_closeRound"" [label=""closeRound""];
""743_hasOpened"" [label=""hasOpened""];
""743_startNewRound"" [label=""startNewRound""];
""743__forwardFunds"" [label=""_forwardFunds""];
""743_changeRate"" [label=""changeRate""];
""743_changeMinInvest"" [label=""changeMinInvest""];
""743__preValidatePurchase"" [label=""_preValidatePurchase""];
""743_constructor"" [label=""constructor""];
""743__processPurchase"" [label=""_processPurchase""];
""743__deliverTokens"" [label=""_deliverTokens""];
""743_capReached"" [label=""capReached""];
""743_setMinter"" -> ""743_onlyOwner"";
""743_closeRound"" -> ""743_onlyOwner"";
""743_startNewRound"" -> ""743_hasOpened"";
""743_changeMinInvest"" -> ""743_onlyOwner"";
""743_startNewRound"" -> ""743_onlyOwner"";
""743_buyTokens"" -> ""743__forwardFunds"";
""743_buyTokens"" -> ""743__getTokenAmount"";
""743_fallback"" -> ""743_buyTokens"";
""743__preValidatePurchase"" -> ""743__getTokenAmount"";
""743_changeRate"" -> ""743_onlyOwner"";
""743__preValidatePurchase"" -> ""743_onlyWhileOpen"";
""743_buyTokens"" -> ""743__preValidatePurchase"";
""743__processPurchase"" -> ""743__deliverTokens"";
}
"
0x65832facdc1eefbcfaf50f570228ba886f745681.sol,SmartToken,"contract SmartToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function SmartToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0xb7710726f14E238aAfb93aDc00A0A7B5755109c1] = _totalSupply; Transfer(address(0), 0xb7710726f14E238aAfb93aDc00A0A7B5755109c1, _totalSupply); }",0,"subgraph cluster_543_SmartToken {
label=""SmartToken"";
""543_totalSupply"" [label=""totalSupply""];
""543_SmartToken"" [label=""SmartToken""];
""543_balanceOf"" [label=""balanceOf""];
""543_fallback"" [label=""fallback""];
""543_transferFrom"" [label=""transferFrom""];
""543_transfer"" [label=""transfer""];
""543_allowance"" [label=""allowance""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_approve"" [label=""approve""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0xeb914da749340266ac474f930c65c2ed4df89922.sol,Ownable,"contract Ownable { address public owner; event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); function Ownable() public { owner = msg.sender; }",0,"subgraph cluster_821_Ownable {
label=""Ownable"";
""821_Ownable"" [label=""Ownable""];
""821_transferOwnership"" [label=""transferOwnership""];
""821_transferOwnership"" -> ""821_onlyOwner"";
}
"
0x5ab5dded8c5c384015c8f3a27d59bf71b952a3a4.sol,PearlBonus,contract PearlBonus { address public pearlContract = 0x1844b21593262668B7248d0f57a220CaaBA46ab9; OysterPearl pearl = OysterPearl(pearlContract); address public director; address public partner; uint8 public share; uint256 public funds; bool public saleClosed; function PearlBonus() public { director = msg.sender; partner = 0x5F5E3bc34347e1f10C7a0E932871D8DbFBEF9f87; share = 10; funds = 0; saleClosed = false; },0,"subgraph cluster_243_PearlBonus {
label=""PearlBonus"";
""243_withdrawFunds"" [label=""withdrawFunds""];
""243_openSale"" [label=""openSale""];
""243_transferDirector"" [label=""transferDirector""];
""243_closeSale"" [label=""closeSale""];
""243_fallback"" [label=""fallback""];
""243_transferPartner"" [label=""transferPartner""];
""243_PearlBonus"" [label=""PearlBonus""];
""243_rescue"" [label=""rescue""];
""243_openSale"" -> ""243_onlyDirector"";
""243_transferPartner"" -> ""243_onlyPartner"";
""243_withdrawFunds"" -> ""243_onlyDirector"";
""243_transferDirector"" -> ""243_onlyDirector"";
""243_rescue"" -> ""243_onlyDirector"";
""243_closeSale"" -> ""243_onlyDirector"";
}
"
0xd6647d2d40b1ee8ab766dec0822ec756985fc1b3.sol,Mummy3D,"contract Mummy3D { modifier pyramidConstruct(bool applyLimits) { address _customerAddress = msg.sender; if (onlyAmbassadors && _customerAddress == _MummyAccount) { require( ambassadorsEthLedger_[_MummyAccount] < 2 ether && SafeMath.add(ambassadorsEthLedger_[_MummyAccount], msg.value) <= 2 ether ); }",0,"subgraph cluster_1451_Mummy3D {
label=""Mummy3D"";
""1451_exit"" [label=""exit""];
""1451_constructor"" [label=""constructor""];
""1451_transfer"" [label=""transfer""];
""1451_balanceOf"" [label=""balanceOf""];
""1451_MummyAccountWithdraw"" [label=""MummyAccountWithdraw""];
""1451_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1451_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1451_sqrt"" [label=""sqrt""];
""1451_fallback"" [label=""fallback""];
""1451_dividendsOf"" [label=""dividendsOf""];
""1451_totalSupply"" [label=""totalSupply""];
""1451_reinvest"" [label=""reinvest""];
""1451_myTokens"" [label=""myTokens""];
""1451_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1451_limits"" [label=""limits""];
""1451_sell"" [label=""sell""];
""1451_purchaseTokens"" [label=""purchaseTokens""];
""1451_buyPrice"" [label=""buyPrice""];
""1451_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1451_checkState"" [label=""checkState""];
""1451_sellPrice"" [label=""sellPrice""];
""1451_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1451_withdraw"" [label=""withdraw""];
""1451_buy"" [label=""buy""];
""1451_myDividends"" [label=""myDividends""];
""1451_exit"" -> ""1451_withdraw"";
""1451_buy"" -> ""1451_purchaseTokens"";
""1451_transfer"" -> ""1451_withdraw"";
""1451_sell"" -> ""1451_tokensToEthereum_"";
""1451_buyPrice"" -> ""1451_tokensToEthereum_"";
""1451_exit"" -> ""1451_sell"";
""1451_fallback"" -> ""1451_purchaseTokens"";
""1451_calculateTokensReceived"" -> ""1451_ethereumToTokens_"";
""1451_MummyAccountWithdraw"" -> ""1451_dividendsOf"";
""1451_sellPrice"" -> ""1451_tokensToEthereum_"";
""1451_purchaseTokens"" -> ""1451_ethereumToTokens_"";
""1451_reinvest"" -> ""1451_purchaseTokens"";
""1451_transfer"" -> ""1451_pyramidConstruct"";
""1451_ethereumToTokens_"" -> ""1451_sqrt"";
""1451_buy"" -> ""1451_pyramidConstruct"";
""1451_reinvest"" -> ""1451_onlyStronghands"";
""1451_withdraw"" -> ""1451_pyramidConstruct"";
""1451_withdraw"" -> ""1451_myDividends"";
""1451_myTokens"" -> ""1451_balanceOf"";
""1451_myDividends"" -> ""1451_dividendsOf"";
""1451_transfer"" -> ""1451_myDividends"";
""1451_reinvest"" -> ""1451_myDividends"";
""1451_reinvest"" -> ""1451_pyramidConstruct"";
""1451_withdraw"" -> ""1451_onlyStronghands"";
""1451_MummyAccountWithdraw"" -> ""1451_onlyBagholders"";
""1451_calculateEthereumReceived"" -> ""1451_tokensToEthereum_"";
""1451_transfer"" -> ""1451_onlyBagholders"";
""1451_sell"" -> ""1451_onlyBagholders"";
""1451_sell"" -> ""1451_pyramidConstruct"";
""1451_fallback"" -> ""1451_pyramidConstruct"";
}
"
0x2fb3c22230c39496edc13c16d09f34368346ac1d.sol,ISmartCert,contract ISmartCert { mapping (bytes32 => SignedData) hashes; mapping (address => AccessStruct) accessList; mapping (bytes32 => RevokeStruct) revoked; mapping (bytes32 => Lvl2Struct[]) idMap; address owner; string constant CODE_ACCESS_DENIED = ; string constant CODE_ACCESS_POSTER_NOT_AUTHORIZED = ; string constant CODE_ACCESS_ISSUER_NOT_AUTHORIZED = ; string constant CODE_ACCESS_VERIFY_NOT_AUTHORIZED = ; string constant MSG_ISSUER_SIG_NOT_MATCHED = ; string constant MSG_DOC_REGISTERED = ; string constant MSG_REVOKED = ; string constant MSG_NOTREG = ; string constant MSG_INVALID = ; string constant MSG_NOFOUND = ; string constant MSG_INVALID_CERT_MERKLE_NOT_MATCHED = ; string constant MSG_INVALID_ACCESS_RIGHT = ; string constant MSG_BATCH_REVOKED = ; string constant MSG_MERKLE_CANNOT_EMPTY = ; string constant MSG_MERKLE_NOT_REGISTERED = ; string constant STATUS_PASS = ; string constant STATUS_FAIL = ; bytes1 constant ACCESS_ISSUER = 0x04; bytes1 constant ACCESS_POSTER = 0x02; bytes1 constant ACCESS_VERIFIER = 0x01; bytes1 constant ACCESS_ALL = 0x07; bytes1 constant ACCESS_ISSUER_POSTER = 0x05; bytes1 constant ACCESS_NONE = 0x00; struct SignedData { bytes sig; uint registerDate; bool exists; },0,"subgraph cluster_1259_ISmartCert {
label=""ISmartCert"";
""1259_userRight"" [label=""userRight""];
""1259_internalRegisterCert"" [label=""internalRegisterCert""];
""1259_verifyCert"" [label=""verifyCert""];
""1259_checkAccess"" [label=""checkAccess""];
""1259_checkVerifyAccess"" [label=""checkVerifyAccess""];
""1259_internalRegisterCertWithID"" [label=""internalRegisterCertWithID""];
""1259_internalRevokeCert"" [label=""internalRevokeCert""];
""1259_recoverAddr"" [label=""recoverAddr""];
""1259_registerCertWithID"" [label=""registerCertWithID""];
""1259_registerCert"" [label=""registerCert""];
""1259_verifyCertWithID"" [label=""verifyCertWithID""];
""1259_reissueCert"" [label=""reissueCert""];
""1259_internalVerifyCert"" [label=""internalVerifyCert""];
""1259_revokeCert"" [label=""revokeCert""];
""1259_ISmartCert"" [label=""ISmartCert""];
""1259_reissueCertWithID"" [label=""reissueCertWithID""];
""1259_internalRegisterCert"" -> ""1259_checkAccess"";
""1259_reissueCert"" -> ""1259_internalRevokeCert"";
""1259_checkVerifyAccess"" -> ""1259_checkAccess"";
""1259_registerCert"" -> ""1259_internalRegisterCert"";
""1259_internalRegisterCertWithID"" -> ""1259_internalRegisterCert"";
""1259_internalRevokeCert"" -> ""1259_checkAccess"";
""1259_verifyCertWithID"" -> ""1259_checkVerifyAccess"";
""1259_reissueCert"" -> ""1259_internalRegisterCert"";
""1259_internalRegisterCert"" -> ""1259_recoverAddr"";
""1259_verifyCertWithID"" -> ""1259_internalVerifyCert"";
""1259_registerCertWithID"" -> ""1259_internalRegisterCertWithID"";
""1259_reissueCertWithID"" -> ""1259_internalRevokeCert"";
""1259_reissueCertWithID"" -> ""1259_internalRegisterCertWithID"";
""1259_internalVerifyCert"" -> ""1259_recoverAddr"";
""1259_internalRevokeCert"" -> ""1259_recoverAddr"";
""1259_verifyCert"" -> ""1259_checkVerifyAccess"";
""1259_verifyCert"" -> ""1259_internalVerifyCert"";
""1259_revokeCert"" -> ""1259_internalRevokeCert"";
}
"
0x41b8d6336bdab8991ad1c48e3579d0693db17e79.sol,MNY,"contract MNY { string public name = ; uint8 public decimals = 18; string public symbol = ; address public _owner; address public _dev = 0xC96CfB18C39DC02FBa229B6EA698b1AD5576DF4c; address public _devFeesAddr; uint256 public _tokePerEth = 4877000000000000000000; bool public _coldStorage = true; bool public _receiveEth = true; bool _feesEnabled = false; bool _payFees = false; uint256 _fees; uint256 _lifeVal = 0; uint256 _feeLimit = 0; uint256 _devFees = 0; uint256 public _totalSupply = 1000000928 * 1 ether; uint256 public _frozenTokens = 0; event Transfer(address indexed _from, address indexed _to, uint _value); event Exchanged(address indexed _from, address indexed _to, uint _value); mapping (address => uint256) public balances; mapping (address => bool) public exchangePartners; mapping (address => uint256) public exchangeRates; function MNY() { _owner = msg.sender; preMine(); }",0,"subgraph cluster_1157_MNY {
label=""MNY"";
""1157_getBalance"" [label=""getBalance""];
""1157_transfer"" [label=""transfer""];
""1157_changePayRate"" [label=""changePayRate""];
""1157_changeDev"" [label=""changeDev""];
""1157_updateFeeAmount"" [label=""updateFeeAmount""];
""1157_exchange"" [label=""exchange""];
""1157_addExchangePartnerAddressAndRate"" [label=""addExchangePartnerAddressAndRate""];
""1157_safeWithdrawal"" [label=""safeWithdrawal""];
""1157_toggleReceiveEth"" [label=""toggleReceiveEth""];
""1157_mul"" [label=""mul""];
""1157_fallback"" [label=""fallback""];
""1157_payFeesToggle"" [label=""payFeesToggle""];
""1157_removeExchangePartnerTargetAddress"" [label=""removeExchangePartnerTargetAddress""];
""1157_sub"" [label=""sub""];
""1157_totalSupply"" [label=""totalSupply""];
""1157_defrostFrozenTokens"" [label=""defrostFrozenTokens""];
""1157_updateTokenBalance"" [label=""updateTokenBalance""];
""1157_preMine"" [label=""preMine""];
""1157_add"" [label=""add""];
""1157_changeOwner"" [label=""changeOwner""];
""1157_getLifeVal"" [label=""getLifeVal""];
""1157_canExchange"" [label=""canExchange""];
""1157_changeDevFeesAddr"" [label=""changeDevFeesAddr""];
""1157_exchangeTokensFromOtherContract"" [label=""exchangeTokensFromOtherContract""];
""1157_addExchangePartnerTargetAddress"" [label=""addExchangePartnerTargetAddress""];
""1157_balanceOf"" [label=""balanceOf""];
""1157_withdrawDevFees"" [label=""withdrawDevFees""];
""1157_div"" [label=""div""];
""1157_requestTokensFromOtherContract"" [label=""requestTokensFromOtherContract""];
""1157_MNY"" [label=""MNY""];
""1157_toggleFreezeTokensFlag"" [label=""toggleFreezeTokensFlag""];
""1157_contractExchangeRate"" [label=""contractExchangeRate""];
""1157_exchangeTokensFromOtherContract"" -> ""1157_mul"";
""1157_fallback"" -> ""1157_div"";
""1157_transfer"" -> ""1157_balanceOf"";
""1157_exchangeTokensFromOtherContract"" -> ""1157_sub"";
""1157_exchangeTokensFromOtherContract"" -> ""1157_add"";
""1157_transfer"" -> ""1157_add"";
""1157_MNY"" -> ""1157_preMine"";
""1157_defrostFrozenTokens"" -> ""1157_add"";
""1157_fallback"" -> ""1157_sub"";
""1157_fallback"" -> ""1157_add"";
""1157_fallback"" -> ""1157_mul"";
""1157_exchange"" -> ""1157_add"";
""1157_exchange"" -> ""1157_balanceOf"";
""1157_transfer"" -> ""1157_sub"";
""1157_exchange"" -> ""1157_sub"";
""1157_exchange"" -> ""1157_requestTokensFromOtherContract"";
}
"
0x523630976eb6147621b5c31c781ebe2ec2a806e0.sol,Court,"contract Court is Owned, SafeDecimalMath { Havven public havven; EtherNomin public nomin; uint public minStandingBalance = 100 * UNIT; uint public votingPeriod = 1 weeks; uint constant MIN_VOTING_PERIOD = 3 days; uint constant MAX_VOTING_PERIOD = 4 weeks; uint public confirmationPeriod = 1 weeks; uint constant MIN_CONFIRMATION_PERIOD = 1 days; uint constant MAX_CONFIRMATION_PERIOD = 2 weeks; uint public requiredParticipation = 3 * UNIT / 10; uint constant MIN_REQUIRED_PARTICIPATION = UNIT / 10; uint public requiredMajority = (2 * UNIT) / 3; uint constant MIN_REQUIRED_MAJORITY = UNIT / 2; uint nextMotionID = 1; mapping(uint => address) public motionTarget; mapping(address => uint) public targetMotionID; mapping(uint => uint) public motionStartTime; mapping(uint => uint) public votesFor; mapping(uint => uint) public votesAgainst; mapping(address => mapping(uint => uint)) voteWeight; enum Vote {Abstention, Yea, Nay}",0,"subgraph cluster_1397_Court {
label=""Court"";
""1397_approveMotion"" [label=""approveMotion""];
""1397_setRequiredParticipation"" [label=""setRequiredParticipation""];
""1397_closeMotion"" [label=""closeMotion""];
""1397_motionWaiting"" [label=""motionWaiting""];
""1397_motionConfirming"" [label=""motionConfirming""];
""1397_setupVote"" [label=""setupVote""];
""1397__closeMotion"" [label=""_closeMotion""];
""1397_voteAgainst"" [label=""voteAgainst""];
""1397_setVotingPeriod"" [label=""setVotingPeriod""];
""1397_vetoMotion"" [label=""vetoMotion""];
""1397_motionVoting"" [label=""motionVoting""];
""1397_setRequiredMajority"" [label=""setRequiredMajority""];
""1397_setConfirmationPeriod"" [label=""setConfirmationPeriod""];
""1397_targetMotionID"" [label=""targetMotionID""];
""1397_hasVoted"" [label=""hasVoted""];
""1397_setMinStandingBalance"" [label=""setMinStandingBalance""];
""1397_motionPasses"" [label=""motionPasses""];
""1397_Court"" [label=""Court""];
""1397_voteFor"" [label=""voteFor""];
""1397_cancelVote"" [label=""cancelVote""];
""1397_beginMotion"" [label=""beginMotion""];
""1397_motionPasses"" -> ""1397_safeAdd"";
""1397_closeMotion"" -> ""1397_motionPasses"";
""1397_setConfirmationPeriod"" -> ""1397_onlyOwner"";
""1397_approveMotion"" -> ""1397_motionPasses"";
""1397_cancelVote"" -> ""1397_motionConfirming"";
""1397_voteFor"" -> ""1397_setupVote"";
""1397_setVotingPeriod"" -> ""1397_onlyOwner"";
""1397_cancelVote"" -> ""1397_motionVoting"";
""1397_cancelVote"" -> ""1397_safeSub"";
""1397_voteAgainst"" -> ""1397_setupVote"";
""1397_approveMotion"" -> ""1397_motionConfirming"";
""1397_Court"" -> ""1397_Owned"";
""1397_vetoMotion"" -> ""1397__closeMotion"";
""1397_closeMotion"" -> ""1397_motionWaiting"";
""1397_setupVote"" -> ""1397_hasVoted"";
""1397_setRequiredMajority"" -> ""1397_onlyOwner"";
""1397_setRequiredParticipation"" -> ""1397_onlyOwner"";
""1397_approveMotion"" -> ""1397_onlyOwner"";
""1397_setupVote"" -> ""1397_motionVoting"";
""1397_voteAgainst"" -> ""1397_safeAdd"";
""1397_approveMotion"" -> ""1397__closeMotion"";
""1397_vetoMotion"" -> ""1397_motionWaiting"";
""1397_vetoMotion"" -> ""1397_onlyOwner"";
""1397_voteFor"" -> ""1397_safeAdd"";
""1397_motionPasses"" -> ""1397_safeDiv_dec"";
""1397_setMinStandingBalance"" -> ""1397_onlyOwner"";
""1397_closeMotion"" -> ""1397_motionConfirming"";
""1397_closeMotion"" -> ""1397__closeMotion"";
}
"
0xaa57e849341a2899110ba676a49302c069251d19.sol,BaseStorage,contract BaseStorage is Pausable { event AccessAllowed(address _address); event AccessDenied(address _address); mapping (address => bool) public allowed; address public developer; modifier canWrite() { require(allowed[msg.sender] || isOwner(msg.sender) || (msg.sender == developer)); _; },0,"subgraph cluster_223_BaseStorage {
label=""BaseStorage"";
""223_isAllowed"" [label=""isAllowed""];
""223_setDeveloper"" [label=""setDeveloper""];
""223_allow"" [label=""allow""];
""223_denied"" [label=""denied""];
""223_setDeveloper"" -> ""223_onlyOwner"";
""223_denied"" -> ""223_canWrite"";
""223_allow"" -> ""223_canWrite"";
}
"
0xec2e5c8d51fdd54fef83db8300399a3c2e167922.sol,Crowdsale,"contract Crowdsale is Manageable { using SafeMath for uint256; CrowdsaleToken public token; uint256 public startTime; uint256 public endTime ; uint256 public rate; uint256 public constant decimals = 18; uint256 public tokenSaleWeiCap; uint256 public tokenSaleWeiGoal; uint256 public tokenSaleWeiMax; uint256 public tokenSaleWeiMin; address public pool; address public wallet; bool public isFinalized = false; enum State { Created, Active, Closed }",0,"subgraph cluster_2049_CrowdsaleManager {
label=""CrowdsaleManager"";
""2049_CrowdsaleManager"" [label=""CrowdsaleManager""];
""2049_mintToken"" [label=""mintToken""];
""2049_deallocate"" [label=""deallocate""];
""2049_changeTokenManager"" [label=""changeTokenManager""];
""2049_createToken"" [label=""createToken""];
""2049_releaseTokenTransfer"" [label=""releaseTokenTransfer""];
""2049_promotionAllocate"" [label=""promotionAllocate""];
""2049_finalizeSale1"" [label=""finalizeSale1""];
""2049_initSale1"" [label=""initSale1""];
""2049_finalizeSale2"" [label=""finalizeSale2""];
""2049_createSale3"" [label=""createSale3""];
""2049_initSale3"" [label=""initSale3""];
""2049_closeSale2"" [label=""closeSale2""];
""2049_withdrawSale3"" [label=""withdrawSale3""];
""2049_closeSale1"" [label=""closeSale1""];
""2049_changeSaleManager"" [label=""changeSaleManager""];
""2049_withdrawSale2"" [label=""withdrawSale2""];
""2049_createSale1"" [label=""createSale1""];
""2049_initSale2"" [label=""initSale2""];
""2049_closeSale3"" [label=""closeSale3""];
""2049_createSale2"" [label=""createSale2""];
""2049_withdrawSale1"" [label=""withdrawSale1""];
""2049_finalizeSale3"" [label=""finalizeSale3""];
""2049_initSale2"" -> ""2049_onlyOwnerOrManager"";
""2049_changeTokenManager"" -> ""2049_onlyOwner"";
""2049_finalizeSale2"" -> ""2049_onlyOwnerOrManager"";
""2049_deallocate"" -> ""2049_onlyOwner"";
""2049_closeSale1"" -> ""2049_onlyOwnerOrManager"";
""2049_releaseTokenTransfer"" -> ""2049_onlyOwner"";
""2049_closeSale3"" -> ""2049_onlyOwnerOrManager"";
""2049_createToken"" -> ""2049_onlyOwnerOrManager"";
""2049_promotionAllocate"" -> ""2049_onlyOwner"";
""2049_withdrawSale3"" -> ""2049_onlyOwnerOrManager"";
""2049_createSale3"" -> ""2049_onlyOwnerOrManager"";
""2049_changeSaleManager"" -> ""2049_onlyOwner"";
""2049_createSale2"" -> ""2049_onlyOwnerOrManager"";
""2049_withdrawSale1"" -> ""2049_onlyOwnerOrManager"";
""2049_closeSale2"" -> ""2049_onlyOwnerOrManager"";
""2049_createSale1"" -> ""2049_onlyOwnerOrManager"";
""2049_withdrawSale2"" -> ""2049_onlyOwnerOrManager"";
""2049_mintToken"" -> ""2049_onlyOwnerOrManager"";
""2049_initSale3"" -> ""2049_onlyOwnerOrManager"";
""2049_finalizeSale3"" -> ""2049_onlyOwnerOrManager"";
""2049_finalizeSale1"" -> ""2049_onlyOwnerOrManager"";
""2049_initSale1"" -> ""2049_onlyOwnerOrManager"";
}
"
0x6cb9c5abf310b42893adff0b1f38322eea109c98.sol,DelightToken,"contract DelightToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function DelightToken() public { symbol = ; name = ; decimals = 8; _totalSupply = 1500000000000000000; balances[0xbBFe11C614d8089C621E843eDac04F43F6767469] = _totalSupply; Transfer(address(0), 0xbBFe11C614d8089C621E843eDac04F43F6767469, _totalSupply); }",0,"subgraph cluster_543_DelightToken {
label=""DelightToken"";
""543_transferFrom"" [label=""transferFrom""];
""543_approve"" [label=""approve""];
""543_fallback"" [label=""fallback""];
""543_allowance"" [label=""allowance""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_balanceOf"" [label=""balanceOf""];
""543_totalSupply"" [label=""totalSupply""];
""543_DelightToken"" [label=""DelightToken""];
""543_transfer"" [label=""transfer""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0x291a043f014d12dc852b02ff752e5b70132bc328.sol,CryptoCopyCrowdsale,"contract CryptoCopyCrowdsale { using SafeMath for uint256; address public creator; address public buyBackFund; address public bountyPool; address public advisoryPool; uint256 public minAcceptedEthAmount = 100 finney; uint256 public maxTotalSupply = 1000000 * 10**8; uint256 public tokensForInvestors = 900000 * 10**8; uint256 public tokensForBounty = 50000 * 10**8; uint256 public tokensForAdvisory = 50000 * 10**8; uint256 public totalTokenIssued; uint256 public bonusFirstTwoDaysPeriod = 2 days; uint256 public bonusFirstWeekPeriod = 9 days; uint256 public bonusSecondWeekPeriod = 16 days; uint256 public bonusThirdWeekPeriod = 23 days; uint256 public bonusFourthWeekPeriod = 30 days; uint256 public bonusFirstTwoDays = 20; uint256 public bonusFirstWeek = 15; uint256 public bonusSecondWeek = 10; uint256 public bonusThirdWeek = 5; uint256 public bonusFourthWeek = 5; uint256 public bonusSubscription = 5; uint256 public bonusOver3ETH = 10; uint256 public bonusOver10ETH = 20; uint256 public bonusOver30ETH = 30; uint256 public bonusOver100ETH = 40; mapping (address => uint256) balancesETH; mapping (address => uint256) balancesETHWithBonuses; mapping (address => uint256) balancesETHForSubscriptionBonus; mapping (address => uint256) tokenBalances; uint256 public totalInvested; uint256 public totalInvestedWithBonuses; uint256 public hardCap = 100000 ether; uint256 public softCap = 175 ether; enum Stages { Countdown, Ico, Ended }",0,"subgraph cluster_778_CryptoCopyCrowdsale {
label=""CryptoCopyCrowdsale"";
""778_balanceOf"" [label=""balanceOf""];
""778_CryptoCopyCrowdsale"" [label=""CryptoCopyCrowdsale""];
""778_setBuyBackFund"" [label=""setBuyBackFund""];
""778_setCreator"" [label=""setCreator""];
""778_withdrawBountyAndAdvisory"" [label=""withdrawBountyAndAdvisory""];
""778_fallback"" [label=""fallback""];
""778_setToken"" [label=""setToken""];
""778_setAdvisoryPool"" [label=""setAdvisoryPool""];
""778_setBountyPool"" [label=""setBountyPool""];
""778_setEnd"" [label=""setEnd""];
""778_returnOwnershipOfToken"" [label=""returnOwnershipOfToken""];
""778_updateState"" [label=""updateState""];
""778_withdraw"" [label=""withdraw""];
""778_addSubscriptionBonus"" [label=""addSubscriptionBonus""];
""778_releaseTokens"" [label=""releaseTokens""];
""778_setCreator"" -> ""778_onlyCreator"";
""778_setToken"" -> ""778_onlyCreator"";
""778_setEnd"" -> ""778_onlyCreator"";
""778_addSubscriptionBonus"" -> ""778_onlyCreator"";
""778_setBountyPool"" -> ""778_onlyCreator"";
""778_setAdvisoryPool"" -> ""778_onlyCreator"";
""778_returnOwnershipOfToken"" -> ""778_onlyCreator"";
""778_withdrawBountyAndAdvisory"" -> ""778_onlyCreator"";
""778_setBuyBackFund"" -> ""778_onlyCreator"";
""778_withdraw"" -> ""778_onlyCreator"";
""778_releaseTokens"" -> ""778_onlyCreator"";
""778_fallback"" -> ""778_atStage"";
}
"
0x574fb6d9d090042a04d0d12a4e87217f8303a5ca.sol,HelloGoldSale,"contract HelloGoldSale is Pausable, SafeMath { uint256 public decimals = 8; uint256 public startDate = 1503892800; uint256 public endDate = 1504497600; uint256 tranchePeriod = 1 weeks; HelloGoldToken token; uint256 constant MaxCoinsR1 = 80 * 10**6 * 10**8; uint256 public coinsRemaining = 80 * 10**6 * 10**8; uint256 coinsPerTier = 16 * 10**6 * 10**8; uint256 public coinsLeftInTier = 16 * 10**6 * 10**8; uint256 public minimumCap = 0; uint256 numTiers = 5; uint16 public tierNo; uint256 public preallocCoins; uint256 public purchasedCoins; uint256 public ethRaised; uint256 public personalMax = 10 ether; uint256 public contributors; address public cs; address public multiSig; address public HGT_Reserve; struct csAction { bool passedKYC; bool blocked; }",0,"subgraph cluster_3276_HelloGoldSale {
label=""HelloGoldSale"";
""3276_coinAddress"" [label=""coinAddress""];
""3276_when"" [label=""when""];
""3276_setHgtRates"" [label=""setHgtRates""];
""3276_funding"" [label=""funding""];
""3276_block"" [label=""block""];
""3276_success"" [label=""success""];
""3276_fallback"" [label=""fallback""];
""3276_HelloGoldSale"" [label=""HelloGoldSale""];
""3276_createTokens"" [label=""createTokens""];
""3276_withdraw"" [label=""withdraw""];
""3276_allocatedTokens"" [label=""allocatedTokens""];
""3276_approve"" [label=""approve""];
""3276_setPeriod"" [label=""setPeriod""];
""3276_linkCoin"" [label=""linkCoin""];
""3276_complete"" [label=""complete""];
""3276_newCs"" [label=""newCs""];
""3276_failed"" [label=""failed""];
""3276_unblock"" [label=""unblock""];
""3276_setStart"" [label=""setStart""];
""3276_createTokens"" -> ""3276_funding"";
""3276_allocatedTokens"" -> ""3276_safeSub"";
""3276_complete"" -> ""3276_success"";
""3276_allocatedTokens"" -> ""3276_safeAdd"";
""3276_createTokens"" -> ""3276_safeDiv"";
""3276_fallback"" -> ""3276_createTokens"";
""3276_linkCoin"" -> ""3276_onlyOwner"";
""3276_approve"" -> ""3276_MustBeCs"";
""3276_unblock"" -> ""3276_MustBeCs"";
""3276_createTokens"" -> ""3276_min256"";
""3276_setHgtRates"" -> ""3276_onlyOwner"";
""3276_allocatedTokens"" -> ""3276_onlyOwner"";
""3276_withdraw"" -> ""3276_failed"";
""3276_newCs"" -> ""3276_onlyOwner"";
""3276_setPeriod"" -> ""3276_funding"";
""3276_setStart"" -> ""3276_onlyOwner"";
""3276_createTokens"" -> ""3276_safeAdd"";
""3276_fallback"" -> ""3276_whenNotPaused"";
""3276_setPeriod"" -> ""3276_onlyOwner"";
""3276_block"" -> ""3276_MustBeCs"";
""3276_createTokens"" -> ""3276_safeSub"";
""3276_complete"" -> ""3276_onlyOwner"";
""3276_createTokens"" -> ""3276_safeMul"";
""3276_fallback"" -> ""3276_MustBeEnabled"";
}
"
0x1e83cdd27d0b34c727c417759585e87e2770c28c.sol,TestyTest,"contract TestyTest is ReentryProtected, ERC20Token, TestyTestAbstract, TestyTestConfig { using SafeMath for uint; uint constant TOKEN = uint(10)**decimals; function TestyTest() public { owner = OWNER; totalSupply = TOTAL_TOKENS.mul(TOKEN); balances[owner] = totalSupply; }",0,"subgraph cluster_793_TestyTest {
label=""TestyTest"";
""793_increaseSupply"" [label=""increaseSupply""];
""793_acceptOwnership"" [label=""acceptOwnership""];
""793_transferExternalToken"" [label=""transferExternalToken""];
""793_fallback"" [label=""fallback""];
""793_xfer"" [label=""xfer""];
""793_TestyTest"" [label=""TestyTest""];
""793_lowerSupply"" [label=""lowerSupply""];
""793_changeOwner"" [label=""changeOwner""];
""793_transferToMany"" [label=""transferToMany""];
""793_requireKyc"" [label=""requireKyc""];
""793_clearKyc"" [label=""clearKyc""];
""793_transferToMany"" -> ""793_xfer"";
""793_lowerSupply"" -> ""793_preventReentry"";
""793_increaseSupply"" -> ""793_onlyOwner"";
""793_requireKyc"" -> ""793_noReentry"";
""793_xfer"" -> ""793_noReentry"";
""793_requireKyc"" -> ""793_onlyOwner"";
""793_transferExternalToken"" -> ""793_preventReentry"";
""793_xfer"" -> ""793_xfer"";
""793_clearKyc"" -> ""793_onlyOwner"";
""793_transferExternalToken"" -> ""793_onlyOwner"";
""793_transferToMany"" -> ""793_noReentry"";
""793_lowerSupply"" -> ""793_onlyOwner"";
""793_clearKyc"" -> ""793_noReentry"";
""793_changeOwner"" -> ""793_onlyOwner"";
""793_increaseSupply"" -> ""793_preventReentry"";
}
"
0xf02904cbf8e5134aeaf45626e96b782ed233fe04.sol,BWCToken,contract BWCToken is Ownable{ uint256 public totalSupply; mapping(address => uint256) balances; mapping(address => mapping(address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint32 public constant decimals = 4; uint constant start = 1517418000; uint constant period = 87; uint256 public constant hardcap = 25 * 1000000 * (10 ** uint256(decimals)); bool public transferAllowed = true; bool public mintingFinished = false; modifier whenTransferAllowed() { if(msg.sender != owner){ require(transferAllowed); },0,"subgraph cluster_579_BWCToken {
label=""BWCToken"";
""579_burn"" [label=""burn""];
""579_allowance"" [label=""allowance""];
""579_transfer"" [label=""transfer""];
""579_allowTransfer"" [label=""allowTransfer""];
""579_balanceOf"" [label=""balanceOf""];
""579_finishMinting"" [label=""finishMinting""];
""579_transferFrom"" [label=""transferFrom""];
""579_approve"" [label=""approve""];
""579_mint"" [label=""mint""];
""579_burnFrom"" [label=""burnFrom""];
""579_mint"" -> ""579_saleIsOn"";
""579_transfer"" -> ""579_whenTransferAllowed"";
""579_finishMinting"" -> ""579_onlyOwner"";
""579_allowTransfer"" -> ""579_onlyOwner"";
""579_mint"" -> ""579_canMint"";
""579_mint"" -> ""579_transfer"";
""579_transferFrom"" -> ""579_whenTransferAllowed"";
""579_mint"" -> ""579_onlyOwner"";
}
"
0xaf7188dbaa4e9a25864827cc9b9a72f663017834.sol,HammBones,"contract HammBones is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function HammBones() public { symbol = ; name = ; decimals = 18; _totalSupply = 21000000000000000000000000; balances[0xcE599E08b3cAd353960143c01F6012cbf90C9DA8] = _totalSupply; Transfer(address(0), 0xcE599E08b3cAd353960143c01F6012cbf90C9DA8, _totalSupply); }",0,"subgraph cluster_543_HammBones {
label=""HammBones"";
""543_transferFrom"" [label=""transferFrom""];
""543_HammBones"" [label=""HammBones""];
""543_totalSupply"" [label=""totalSupply""];
""543_balanceOf"" [label=""balanceOf""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_approve"" [label=""approve""];
""543_allowance"" [label=""allowance""];
""543_fallback"" [label=""fallback""];
""543_transfer"" [label=""transfer""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
}
"
0x2cfc06b1ec0735bd7ef00b211764cc7e06e9456a.sol,PublicSale,"contract PublicSale is Pausable { using SafeMath for uint256; using SafeERC20 for ERC20; uint256 public maxgas; uint256 public maxcap; uint256 public exceed; uint256 public minimum; uint256 public rate; bool public ignited = false; uint256 public weiRaised = 0; address public wallet; Whitelist public List; ERC20 public Token; constructor ( uint256 _maxcap, uint256 _exceed, uint256 _minimum, uint256 _rate, uint256 _maxgas, address _wallet, address _whitelist, address _token ) public { require(_wallet != address(0)); require(_whitelist != address(0)); require(_token != address(0)); maxcap = _maxcap; exceed = _exceed; minimum = _minimum; rate = _rate; maxgas = _maxgas; wallet = _wallet; Token = ERC20(_token); List = Whitelist(_whitelist); }",0,"subgraph cluster_770_PublicSale {
label=""PublicSale"";
""770_constructor"" [label=""constructor""];
""770_setMaxGas"" [label=""setMaxGas""];
""770_finalize"" [label=""finalize""];
""770_ignite"" [label=""ignite""];
""770_fallback"" [label=""fallback""];
""770_setWallet"" [label=""setWallet""];
""770_setWhitelist"" [label=""setWhitelist""];
""770_withdrawToken"" [label=""withdrawToken""];
""770_collect"" [label=""collect""];
""770_withdrawEther"" [label=""withdrawEther""];
""770_getPurchaseAmount"" [label=""getPurchaseAmount""];
""770_extinguish"" [label=""extinguish""];
""770_withdrawEther"" -> ""770_whenNotPaused"";
""770_collect"" -> ""770_whenNotPaused"";
""770_setWallet"" -> ""770_onlyOwner"";
""770_finalize"" -> ""770_withdrawEther"";
""770_setWhitelist"" -> ""770_onlyOwner"";
""770_withdrawToken"" -> ""770_whenNotPaused"";
""770_finalize"" -> ""770_withdrawToken"";
""770_finalize"" -> ""770_onlyOwner"";
""770_extinguish"" -> ""770_onlyOwner"";
""770_withdrawEther"" -> ""770_onlyOwner"";
""770_ignite"" -> ""770_onlyOwner"";
""770_setMaxGas"" -> ""770_onlyOwner"";
""770_finalize"" -> ""770_whenNotPaused"";
""770_collect"" -> ""770_getPurchaseAmount"";
""770_withdrawToken"" -> ""770_onlyOwner"";
""770_fallback"" -> ""770_collect"";
}
"
0x72c3a4fc3b3330e36fdf575e5c8b16e5a77856f6.sol,ERC721BasicToken,"contract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic { bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd; bytes4 private constant InterfaceId_ERC721Exists = 0x4f558e79; using SafeMath for uint256; using AddressUtils for address; bytes4 private constant ERC721_RECEIVED = 0x150b7a02; mapping (uint256 => address) internal tokenOwner; mapping (uint256 => address) internal tokenApprovals; mapping (address => uint256) internal ownedTokensCount; mapping (address => mapping (address => bool)) internal operatorApprovals; modifier onlyOwnerOf(uint256 _tokenId) { require(ownerOf(_tokenId) == msg.sender); _; }",0,"subgraph cluster_918_ERC721BasicToken {
label=""ERC721BasicToken"";
""918_approve"" [label=""approve""];
""918_exists"" [label=""exists""];
""918_transferFrom"" [label=""transferFrom""];
""918_isApprovedOrOwner"" [label=""isApprovedOrOwner""];
""918_setApprovalForAll"" [label=""setApprovalForAll""];
""918_clearApproval"" [label=""clearApproval""];
""918_removeTokenFrom"" [label=""removeTokenFrom""];
""918__mint"" [label=""_mint""];
""918_balanceOf"" [label=""balanceOf""];
""918__burn"" [label=""_burn""];
""918_ownerOf"" [label=""ownerOf""];
""918_checkAndCallSafeTransfer"" [label=""checkAndCallSafeTransfer""];
""918_safeTransferFrom"" [label=""safeTransferFrom""];
""918_isApprovedForAll"" [label=""isApprovedForAll""];
""918_getApproved"" [label=""getApproved""];
""918_constructor"" [label=""constructor""];
""918_addTokenTo"" [label=""addTokenTo""];
""918_clearApproval"" -> ""918_ownerOf"";
""918_transferFrom"" -> ""918_canTransfer"";
""918_safeTransferFrom"" -> ""918_transferFrom"";
""918__mint"" -> ""918_addTokenTo"";
""918_isApprovedOrOwner"" -> ""918_ownerOf"";
""918_transferFrom"" -> ""918_clearApproval"";
""918_safeTransferFrom"" -> ""918_canTransfer"";
""918_isApprovedOrOwner"" -> ""918_isApprovedForAll"";
""918_safeTransferFrom"" -> ""918_checkAndCallSafeTransfer"";
""918_removeTokenFrom"" -> ""918_ownerOf"";
""918_transferFrom"" -> ""918_addTokenTo"";
""918_isApprovedOrOwner"" -> ""918_getApproved"";
""918_approve"" -> ""918_isApprovedForAll"";
""918__burn"" -> ""918_clearApproval"";
""918_approve"" -> ""918_ownerOf"";
""918_constructor"" -> ""918__registerInterface"";
""918__burn"" -> ""918_removeTokenFrom"";
""918_safeTransferFrom"" -> ""918_safeTransferFrom"";
""918_transferFrom"" -> ""918_removeTokenFrom"";
}
"
0xf4b54874cd8a6c863e3a904c18fda964661ec363.sol,Token,"contract Token is Pausable, ERC20 { using SafeMath for uint; event Burn(address indexed burner, uint256 value); mapping(address => uint) balances; mapping (address => mapping (address => uint)) internal allowed; mapping(address => uint) public balanceOfLocked; mapping(address => bool) public addressLocked; constructor() ERC20(, , 18) public { totalSupply = 500000000 * 10 ** uint(decimals); balances[msg.sender] = totalSupply; }",0,"subgraph cluster_801_Token {
label=""Token"";
""801_transfer"" [label=""transfer""];
""801_balanceOf"" [label=""balanceOf""];
""801_burn"" [label=""burn""];
""801_lockAddressValue"" [label=""lockAddressValue""];
""801_approve"" [label=""approve""];
""801_decreaseApproval"" [label=""decreaseApproval""];
""801_unlockAddress"" [label=""unlockAddress""];
""801_increaseApproval"" [label=""increaseApproval""];
""801_transferFrom"" [label=""transferFrom""];
""801_constructor"" [label=""constructor""];
""801_lockAddress"" [label=""lockAddress""];
""801_allowance"" [label=""allowance""];
""801_burn"" -> ""801_onlyOwner"";
""801_increaseApproval"" -> ""801_whenNotPaused"";
""801_decreaseApproval"" -> ""801_whenNotPaused"";
""801_lockAddress"" -> ""801_onlyOwner"";
""801_transfer"" -> ""801_whenNotPaused"";
""801_transfer"" -> ""801_lockCheck"";
""801_transferFrom"" -> ""801_lockCheck"";
""801_constructor"" -> ""801_constructor"";
""801_transferFrom"" -> ""801_whenNotPaused"";
""801_approve"" -> ""801_whenNotPaused"";
""801_lockAddressValue"" -> ""801_onlyOwner"";
""801_unlockAddress"" -> ""801_onlyOwner"";
}
"
0x0d7b7b690d74253ffd9795409a6c603b912ae534.sol,wallcoinToken,"contract wallcoinToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; uint public startDate; uint public bonusEnds; uint public endDate; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function wallcoinToken() public { symbol = ; name = ; decimals = 18; bonusEnds = now + 1 weeks; endDate = now + 7 weeks; }",0,"subgraph cluster_609_wallcoinToken {
label=""wallcoinToken"";
""609_totalSupply"" [label=""totalSupply""];
""609_transferFrom"" [label=""transferFrom""];
""609_transfer"" [label=""transfer""];
""609_wallcoinToken"" [label=""wallcoinToken""];
""609_allowance"" [label=""allowance""];
""609_approveAndCall"" [label=""approveAndCall""];
""609_fallback"" [label=""fallback""];
""609_balanceOf"" [label=""balanceOf""];
""609_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""609_approve"" [label=""approve""];
""609_transfer"" -> ""609_safeSub"";
""609_transfer"" -> ""609_safeAdd"";
""609_transferFrom"" -> ""609_safeAdd"";
""609_transferAnyERC20Token"" -> ""609_onlyOwner"";
""609_transferFrom"" -> ""609_safeSub"";
""609_fallback"" -> ""609_safeAdd"";
}
"
0x486cf19a550e2814aef970b14e509e93209a0151.sol,EventChainCrowdsale,"contract EventChainCrowdsale is Haltable { using SafeMath for uint256; enum State{Preparing, Prepared, Presale, Phase1, Phase2, Closed}",0,"subgraph cluster_1228_EventChainCrowdsale {
label=""EventChainCrowdsale"";
""1228_closeCrowdsale"" [label=""closeCrowdsale""];
""1228_startPhase2"" [label=""startPhase2""];
""1228_startPresale"" [label=""startPresale""];
""1228_EventChainCrowdsale"" [label=""EventChainCrowdsale""];
""1228_fallback"" [label=""fallback""];
""1228_mintFounderTokens"" [label=""mintFounderTokens""];
""1228_startPhase1"" [label=""startPhase1""];
""1228_currentStateToString"" [label=""currentStateToString""];
""1228_closeCrowdsale"" -> ""1228_inState"";
""1228_startPresale"" -> ""1228_inState"";
""1228_fallback"" -> ""1228_onlyWhenCrowdsaleIsOpen"";
""1228_fallback"" -> ""1228_requiresMinimumInvest"";
""1228_fallback"" -> ""1228_currentStateToString"";
""1228_startPhase1"" -> ""1228_onlyOwner"";
""1228_mintFounderTokens"" -> ""1228_inState"";
""1228_fallback"" -> ""1228_stopInEmergency"";
""1228_mintFounderTokens"" -> ""1228_onlyOwner"";
""1228_startPhase2"" -> ""1228_onlyOwner"";
""1228_closeCrowdsale"" -> ""1228_onlyOwner"";
""1228_startPhase2"" -> ""1228_inState"";
""1228_startPresale"" -> ""1228_onlyOwner"";
""1228_startPhase1"" -> ""1228_inState"";
}
"
0x1e6f116ca704277c97595316ac157eb6ed30290e.sol,BatchTransfer,contract BatchTransfer is Ownable { constructor () public Ownable(msg.sender) {},0,"subgraph cluster_228_BatchTransfer {
label=""BatchTransfer"";
""228_constructor"" [label=""constructor""];
""228_transfer"" [label=""transfer""];
""228_fallback"" [label=""fallback""];
""228_batchTransfer"" [label=""batchTransfer""];
""228_transferAllToOwner"" [label=""transferAllToOwner""];
""228_constructor"" -> ""228_constructor"";
""228_batchTransfer"" -> ""228_ownerOnly"";
""228_transferAllToOwner"" -> ""228_ownerOnly"";
""228_transfer"" -> ""228_ownerOnly"";
}
"
0xd879d772f7479e65070aac3472d778b66525f76c.sol,StandardToken,"contract StandardToken is ERC20, BasicToken { mapping(address => mapping(address => uint256)) internal allowed; function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3) returns (bool) { require(_to != address(0)); require(_value <= balances[_from]); require(_value <= allowed[_from][msg.sender]); require(transfersEnabled); balances[_from] = balances[_from].sub(_value); balances[_to] = balances[_to].add(_value); allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); Transfer(_from, _to, _value); return true; }",0,"subgraph cluster_548_StandardToken {
label=""StandardToken"";
""548_approve"" [label=""approve""];
""548_increaseApproval"" [label=""increaseApproval""];
""548_decreaseApproval"" [label=""decreaseApproval""];
""548_allowance"" [label=""allowance""];
""548_transferFrom"" [label=""transferFrom""];
""548_allowance"" -> ""548_onlyPayloadSize"";
""548_transferFrom"" -> ""548_onlyPayloadSize"";
}
"
0x300cff0f78f58c8b6d395ca0ebe8604137884ce5.sol,Testing4,"contract Testing4 { using SafeMath for uint256; mapping(address => uint256) investments; mapping(address => uint256) joined; mapping(address => uint256) withdrawals; mapping(address => uint256) referrer; uint256 public step = 50; uint256 public minimum = 10 finney; uint256 public stakingRequirement = 0.25 ether; address public ownerWallet; address public owner; event Invest(address investor, uint256 amount); event Withdraw(address investor, uint256 amount); event Bounty(address hunter, uint256 amount); event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); constructor() public { owner = msg.sender; ownerWallet = msg.sender; }",0,"subgraph cluster_474_Testing4 {
label=""Testing4"";
""474_checkWithdrawals"" [label=""checkWithdrawals""];
""474_getBalance"" [label=""getBalance""];
""474_constructor"" [label=""constructor""];
""474_getMinutes"" [label=""getMinutes""];
""474_checkBalance"" [label=""checkBalance""];
""474_fallback"" [label=""fallback""];
""474_buy"" [label=""buy""];
""474_bounty"" [label=""bounty""];
""474_withdraw"" [label=""withdraw""];
""474_transferOwnership"" [label=""transferOwnership""];
""474_checkInvestments"" [label=""checkInvestments""];
""474_end"" [label=""end""];
""474_checkReferral"" [label=""checkReferral""];
""474_fallback"" -> ""474_buy"";
""474_transferOwnership"" -> ""474_onlyOwner"";
""474_withdraw"" -> ""474_getBalance"";
""474_bounty"" -> ""474_checkReferral"";
""474_buy"" -> ""474_withdraw"";
""474_end"" -> ""474_onlyOwner"";
""474_checkBalance"" -> ""474_getBalance"";
}
"
0xe181d15d53fcb0353b0501bb58ef759ca1003104.sol,DRELSPARK,contract DRELSPARK { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 2; uint public _totalSupply = 30000000000000; uint256 public RATE = 1; bool public isMinting = true; string public constant generatedBy = ; using SafeMath for uint256; address public owner; modifier onlyOwner() { if (msg.sender != owner) { throw; },0,"subgraph cluster_526_DRELSPARK {
label=""DRELSPARK"";
""526_changeCrowdsaleRate"" [label=""changeCrowdsaleRate""];
""526_burnTokens"" [label=""burnTokens""];
""526_fallback"" [label=""fallback""];
""526_endCrowdsale"" [label=""endCrowdsale""];
""526_constructor"" [label=""constructor""];
""526_totalSupply"" [label=""totalSupply""];
""526_transferFrom"" [label=""transferFrom""];
""526_createTokens"" [label=""createTokens""];
""526_balanceOf"" [label=""balanceOf""];
""526_approve"" [label=""approve""];
""526_transfer"" [label=""transfer""];
""526_allowance"" [label=""allowance""];
""526_endCrowdsale"" -> ""526_onlyOwner"";
""526_changeCrowdsaleRate"" -> ""526_onlyOwner"";
""526_burnTokens"" -> ""526_onlyOwner"";
""526_fallback"" -> ""526_createTokens"";
}
"
0x3fe88d527630632292d7d5182b8f50e2fb515311.sol,SimpleToken,"contract SimpleToken is Token,owned { string public name; uint8 public decimals; string public symbol; function SimpleToken(uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol) public { totalSupply = _initialAmount * 10 ** uint256(_decimalUnits); balances[msg.sender] = totalSupply; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",0,"subgraph cluster_353_SimpleToken {
label=""SimpleToken"";
""353_transferFrom"" [label=""transferFrom""];
""353_transfer"" [label=""transfer""];
""353_SimpleToken"" [label=""SimpleToken""];
""353_allowance"" [label=""allowance""];
""353_balanceOf"" [label=""balanceOf""];
""353__transfer"" [label=""_transfer""];
""353_approve"" [label=""approve""];
""353_transfer"" -> ""353__transfer"";
""353_transferFrom"" -> ""353__transfer"";
}
"
0x48ec60c155a8487f9f06107054afe947a2345bbc.sol,Harj,contract Harj { modifier onlyBagholders { require(myTokens() > 0); _; },0,"subgraph cluster_1180_Harj {
label=""Harj"";
""1180_buy"" [label=""buy""];
""1180_sell"" [label=""sell""];
""1180_totalSupply"" [label=""totalSupply""];
""1180_myDividends"" [label=""myDividends""];
""1180_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1180_sqrt"" [label=""sqrt""];
""1180_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1180_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1180_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1180_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1180_reinvest"" [label=""reinvest""];
""1180_transfer"" [label=""transfer""];
""1180_withdraw"" [label=""withdraw""];
""1180_exit"" [label=""exit""];
""1180_balanceOf"" [label=""balanceOf""];
""1180_fallback"" [label=""fallback""];
""1180_dividendsOf"" [label=""dividendsOf""];
""1180_sellPrice"" [label=""sellPrice""];
""1180_purchaseTokens"" [label=""purchaseTokens""];
""1180_myTokens"" [label=""myTokens""];
""1180_buyPrice"" [label=""buyPrice""];
""1180_purchaseTokens"" -> ""1180_buyPrice"";
""1180_sell"" -> ""1180_tokensToEthereum_"";
""1180_myTokens"" -> ""1180_balanceOf"";
""1180_sellPrice"" -> ""1180_tokensToEthereum_"";
""1180_calculateEthereumReceived"" -> ""1180_tokensToEthereum_"";
""1180_transfer"" -> ""1180_tokensToEthereum_"";
""1180_myDividends"" -> ""1180_dividendsOf"";
""1180_transfer"" -> ""1180_onlyBagholders"";
""1180_reinvest"" -> ""1180_onlyStronghands"";
""1180_calculateTokensReceived"" -> ""1180_ethereumToTokens_"";
""1180_exit"" -> ""1180_withdraw"";
""1180_fallback"" -> ""1180_purchaseTokens"";
""1180_sell"" -> ""1180_buyPrice"";
""1180_ethereumToTokens_"" -> ""1180_sqrt"";
""1180_withdraw"" -> ""1180_onlyStronghands"";
""1180_sell"" -> ""1180_onlyBagholders"";
""1180_reinvest"" -> ""1180_myDividends"";
""1180_withdraw"" -> ""1180_myDividends"";
""1180_transfer"" -> ""1180_myDividends"";
""1180_purchaseTokens"" -> ""1180_ethereumToTokens_"";
""1180_exit"" -> ""1180_sell"";
""1180_transfer"" -> ""1180_withdraw"";
""1180_buy"" -> ""1180_purchaseTokens"";
""1180_reinvest"" -> ""1180_purchaseTokens"";
""1180_buyPrice"" -> ""1180_tokensToEthereum_"";
}
"
0x52a6ade96e2571aef35215997a8516e52f9016ab.sol,DSMath,"contract DSMath { function add(uint256 x, uint256 y) pure internal returns (uint256 z) { assert((z = x + y) >= x); }",0,"subgraph cluster_2333_DSMath {
label=""DSMath"";
""2333_wadd"" [label=""wadd""];
""2333_wmin"" [label=""wmin""];
""2333_cast"" [label=""cast""];
""2333_hmul"" [label=""hmul""];
""2333_radd"" [label=""radd""];
""2333_rmin"" [label=""rmin""];
""2333_rdiv"" [label=""rdiv""];
""2333_wsub"" [label=""wsub""];
""2333_hdiv"" [label=""hdiv""];
""2333_wmul"" [label=""wmul""];
""2333_sub"" [label=""sub""];
""2333_rmul"" [label=""rmul""];
""2333_rmax"" [label=""rmax""];
""2333_hadd"" [label=""hadd""];
""2333_rpow"" [label=""rpow""];
""2333_wmax"" [label=""wmax""];
""2333_hmax"" [label=""hmax""];
""2333_hsub"" [label=""hsub""];
""2333_div"" [label=""div""];
""2333_max"" [label=""max""];
""2333_wdiv"" [label=""wdiv""];
""2333_mul"" [label=""mul""];
""2333_min"" [label=""min""];
""2333_hmin"" [label=""hmin""];
""2333_add"" [label=""add""];
""2333_imin"" [label=""imin""];
""2333_rsub"" [label=""rsub""];
""2333_imax"" [label=""imax""];
""2333_rpow"" -> ""2333_rmul"";
""2333_rdiv"" -> ""2333_cast"";
""2333_rmul"" -> ""2333_cast"";
""2333_radd"" -> ""2333_hadd"";
""2333_wmax"" -> ""2333_hmax"";
""2333_rmin"" -> ""2333_hmin"";
""2333_wdiv"" -> ""2333_cast"";
""2333_rmax"" -> ""2333_hmax"";
""2333_rsub"" -> ""2333_hsub"";
""2333_wsub"" -> ""2333_hsub"";
""2333_wmin"" -> ""2333_hmin"";
""2333_wadd"" -> ""2333_hadd"";
""2333_wmul"" -> ""2333_cast"";
}
"
0x0d514c490640d6276b5bb5adc52d1453cf11c5a0.sol,Token,contract Token is StandardToken { string public name = ; uint8 public decimals = 18; string public symbol = ; string public version = ; address public mintableAddress; function Token(address sale_address) { balances[msg.sender] = 0; totalSupply = 0; name = name; decimals = decimals; symbol = symbol; mintableAddress = sale_address; allowTransfer = true; createTokens(); },0,"subgraph cluster_73_BasicToken {
label=""BasicToken"";
""73_transfer"" [label=""transfer""];
""73_transferFrom"" [label=""transferFrom""];
""73_allowance"" [label=""allowance""];
""73_approve"" [label=""approve""];
""73_balanceOf"" [label=""balanceOf""];
}
"
0x8c3cd81e8987e44b8d8702ed6d5791b346d0e1e5.sol,CryptoMemes,"contract CryptoMemes is ERC721 { event Transfer(address from, address to, uint256 tokenId); event Created(address owner, uint256 tokenId, string url, uint256 hash, uint256 createdAt); event UrlUpdated(address owner, uint256 tokenId, string url); modifier onlyOwnerOf(uint256 tokenId) { require(memeIndexToOwner[tokenId] == msg.sender); _; }",0,"subgraph cluster_486_CryptoMemes {
label=""CryptoMemes"";
""486_transfer"" [label=""transfer""];
""486_totalSupply"" [label=""totalSupply""];
""486__validateUrl"" [label=""_validateUrl""];
""486_updateMemeUrl"" [label=""updateMemeUrl""];
""486_getMeme"" [label=""getMeme""];
""486_ownerOf"" [label=""ownerOf""];
""486_updatePrice"" [label=""updatePrice""];
""486__createMeme"" [label=""_createMeme""];
""486__transfer"" [label=""_transfer""];
""486_CryptoMemes"" [label=""CryptoMemes""];
""486_approve"" [label=""approve""];
""486_getContractOwner"" [label=""getContractOwner""];
""486_takeOwnership"" [label=""takeOwnership""];
""486_balanceOf"" [label=""balanceOf""];
""486_transferContractOwnership"" [label=""transferContractOwnership""];
""486_createMeme"" [label=""createMeme""];
""486_withdraw"" [label=""withdraw""];
""486_getPrice"" [label=""getPrice""];
""486_updateMemeUrl"" -> ""486__validateUrl"";
""486__createMeme"" -> ""486__transfer"";
""486_createMeme"" -> ""486__createMeme"";
""486_takeOwnership"" -> ""486_ownerOf"";
""486_updatePrice"" -> ""486_onlyOwnerOfContract"";
""486_transfer"" -> ""486_onlyOwnerOf"";
""486_transfer"" -> ""486__transfer"";
""486_updateMemeUrl"" -> ""486_onlyOwnerOf"";
""486_approve"" -> ""486_onlyOwnerOf"";
""486_takeOwnership"" -> ""486__transfer"";
""486_withdraw"" -> ""486_onlyOwnerOfContract"";
""486_createMeme"" -> ""486__validateUrl"";
""486_transferContractOwnership"" -> ""486_onlyOwnerOfContract"";
}
"
0x1b60504beb425f7cfc8dd14f29924cf596ffaf0b.sol,Matrioska,"contract Matrioska is ERC20,MatrioskaToken,Ownable { using SafeMath for uint256; string public name = ; string public symbol = ; uint public decimals = 10; uint public chainStartTime; uint public chainStartBlockNumber; uint public stakeStartTime; uint public stakeMinAge = 3 days; uint public stakeMaxAge = 90 days; uint public maxMintProofOfStake = 10**16; uint public totalSupply; uint public maxTotalSupply; uint public totalInitialSupply; struct transferInStruct{ uint128 amount; uint64 time; }",0,"subgraph cluster_232_MatrioskaToken {
label=""MatrioskaToken"";
""232_annualInterest"" [label=""annualInterest""];
""232_coinAge"" [label=""coinAge""];
""232_mint"" [label=""mint""];
}
"
0x51996c0a12526138815407bc61135fed50c0d136.sol,AllForOne,"contract AllForOne { event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); mapping (address => uint) private playerRegistrationStatus; mapping (address => uint) private confirmedWinners; mapping (uint => address) private numberToAddress; uint private currentPlayersRequired; uint private currentBet; uint private playerCount; uint private jackpot; uint private revealBlock; uint private currentGame; address private contractAddress; address private owner; address private lastWinner; function AllForOne () { contractAddress = this; currentGame++; currentPlayersRequired = 25; owner = msg.sender; currentBet = 0.005 ether; lastWinner = msg.sender; }",0,"subgraph cluster_372_AllForOne {
label=""AllForOne"";
""372_winnerWithdraw"" [label=""winnerWithdraw""];
""372_changeBet"" [label=""changeBet""];
""372_transferOwnership"" [label=""transferOwnership""];
""372_canBet"" [label=""canBet""];
""372_placeBet"" [label=""placeBet""];
""372_revealWinner"" [label=""revealWinner""];
""372_AllForOne"" [label=""AllForOne""];
""372_changeBet"" -> ""372_changeBetConditions"";
""372_transferOwnership"" -> ""372_onlyOwner"";
""372_placeBet"" -> ""372_betConditions"";
""372_winnerWithdraw"" -> ""372_winnerWithdrawConditions"";
""372_revealWinner"" -> ""372_revealConditions"";
""372_changeBet"" -> ""372_onlyOwner"";
}
"
0x0267ee183beebdb7f931afe41e4e25352195b871.sol,BulleonCrowdsale,"contract BulleonCrowdsale is Claimable, CanReclaimToken { using SafeMath for uint256; event AddedToBlacklist(address wallet); event RemovedFromBlacklist(address wallet); string public version = ; address public withdrawWallet = 0xAd74Bd38911fE4C19c95D14b5733372c3978C2D9; uint256 public endDate = 1546300799; BulleonToken public rewardToken; uint256[] public tokensRate = [ 1000, 800, 600, 400, 200, 100, 75, 50, 25, 10 ]; uint256[] public tokensCap = [ 760000, 760000, 760000, 760000, 760000, 760000, 760000, 760000, 760000, 759000 ]; mapping(address=>bool) public isBlacklisted; uint256 public totalSold = 329406072304513072322000; uint256 public soldOnStage = 329406072304513072322000; uint8 public currentStage = 0; uint256 public bonus = 0; uint256 constant BONUS_COEFF = 1000; mapping(address=>uint256) public investmentsOf; function isActive() public view returns (bool) { return !(availableTokens() == 0 || now > endDate); }",0,"subgraph cluster_1879_BulleonCrowdsale {
label=""BulleonCrowdsale"";
""1879_withdrawFunds"" [label=""withdrawFunds""];
""1879_isActive"" [label=""isActive""];
""1879_forceWithdraw"" [label=""forceWithdraw""];
""1879_refundMoney"" [label=""refundMoney""];
""1879_getTokensAmount"" [label=""getTokensAmount""];
""1879_availableOnStage"" [label=""availableOnStage""];
""1879_delBlacklist"" [label=""delBlacklist""];
""1879_getBonus"" [label=""getBonus""];
""1879_addBlacklist"" [label=""addBlacklist""];
""1879_burnTokens"" [label=""burnTokens""];
""1879_setWithdraw"" [label=""setWithdraw""];
""1879_constructor"" [label=""constructor""];
""1879_stageRate"" [label=""stageRate""];
""1879_buyTokens"" [label=""buyTokens""];
""1879_stageCap"" [label=""stageCap""];
""1879_fallback"" [label=""fallback""];
""1879_toNextStage"" [label=""toNextStage""];
""1879_availableTokens"" [label=""availableTokens""];
""1879_stageBaseRate"" [label=""stageBaseRate""];
""1879_setBonus"" [label=""setBonus""];
""1879_getTokensCost"" [label=""getTokensCost""];
""1879_calcMultiStage"" [label=""calcMultiStage""];
""1879_kill"" [label=""kill""];
""1879_stageRate"" -> ""1879_stageBaseRate"";
""1879_buyTokens"" -> ""1879_availableTokens"";
""1879_buyTokens"" -> ""1879_calcMultiStage"";
""1879_availableOnStage"" -> ""1879_stageCap"";
""1879_setBonus"" -> ""1879_onlyOwner"";
""1879_calcMultiStage"" -> ""1879_availableTokens"";
""1879_delBlacklist"" -> ""1879_onlyOwner"";
""1879_availableOnStage"" -> ""1879_availableTokens"";
""1879_setWithdraw"" -> ""1879_onlyOwner"";
""1879_addBlacklist"" -> ""1879_onlyOwner"";
""1879_calcMultiStage"" -> ""1879_getTokensAmount"";
""1879_buyTokens"" -> ""1879_refundMoney"";
""1879_getTokensAmount"" -> ""1879_stageRate"";
""1879_buyTokens"" -> ""1879_stageCap"";
""1879_kill"" -> ""1879_availableTokens"";
""1879_calcMultiStage"" -> ""1879_availableOnStage"";
""1879_forceWithdraw"" -> ""1879_withdrawFunds"";
""1879_buyTokens"" -> ""1879_isActive"";
""1879_getTokensCost"" -> ""1879_stageRate"";
""1879_calcMultiStage"" -> ""1879_toNextStage"";
""1879_stageRate"" -> ""1879_getBonus"";
""1879_buyTokens"" -> ""1879_toNextStage"";
""1879_kill"" -> ""1879_onlyOwner"";
""1879_burnTokens"" -> ""1879_onlyOwner"";
""1879_forceWithdraw"" -> ""1879_onlyOwner"";
""1879_isActive"" -> ""1879_availableTokens"";
""1879_fallback"" -> ""1879_buyTokens"";
""1879_calcMultiStage"" -> ""1879_getTokensCost"";
""1879_buyTokens"" -> ""1879_withdrawFunds"";
""1879_kill"" -> ""1879_isActive"";
}
"
0x6e226310db63ac3701f657bcc62c153c1aaa3004.sol,AdminBank,contract AdminBank { using SafeMath for uint256; uint256 public fundsReceived; address public masterAdmin; address public mainContract; bool public mainContractSet = false; address public teamMemberA = 0x2597afE84661669E590016E51f8FB0059D1Ad63e; address public teamMemberB = 0x2E6C1b2B4F7307dc588c289C9150deEB1A66b73d; address public teamMemberC = 0xB3CaC7157d772A7685824309Dc1eB79497839795; address public teamMemberD = 0x87395d203B35834F79B46cd16313E6027AE4c9D4; address public teamMemberE = 0x2c3e0d5cbb08e0892f16bf06c724ccce6a757b1c; address public teamMemberF = 0xd68af19b51c41a69e121fb5fb4d77768711c4979; address public teamMemberG = 0x8c992840Bc4BA758018106e4ea9E7a1d6F0F11e5; address public teamMemberH = 0xd83FAf0D707616752c4AbA00f799566f45D4400A; address public teamMemberI = 0xca4a41Fc611e62E3cAc10aB1FE9879faF5012687; uint256 public teamMemberArate = 20; uint256 public teamMemberBrate = 20; uint256 public teamMemberCrate = 15; uint256 public teamMemberDrate = 15; uint256 public teamMemberErate = 7; uint256 public teamMemberFrate = 4; uint256 public teamMemberGrate = 4; uint256 public teamMemberHrate = 5; uint256 public teamMemberIrate = 10; mapping (address => uint256) public teamMemberTotal; mapping (address => uint256) public teamMemberUnclaimed; mapping (address => uint256) public teamMemberClaimed; mapping (address => bool) public validTeamMember; mapping (address => bool) public isProposedAddress; mapping (address => bool) public isProposing; mapping (address => uint256) public proposingAddressIndex; constructor() public { masterAdmin = msg.sender; validTeamMember[teamMemberA] = true; validTeamMember[teamMemberB] = true; validTeamMember[teamMemberC] = true; validTeamMember[teamMemberD] = true; validTeamMember[teamMemberE] = true; validTeamMember[teamMemberF] = true; validTeamMember[teamMemberG] = true; validTeamMember[teamMemberH] = true; validTeamMember[teamMemberI] = true; },0,"subgraph cluster_1556_AdminBank {
label=""AdminBank"";
""1556_balanceOf"" [label=""balanceOf""];
""1556_withdrawProxy"" [label=""withdrawProxy""];
""1556_proposeNewAddress"" [label=""proposeNewAddress""];
""1556_setContractAddress"" [label=""setContractAddress""];
""1556_removeProposal"" [label=""removeProposal""];
""1556_teamWithdraw"" [label=""teamWithdraw""];
""1556_fallback"" [label=""fallback""];
""1556_acceptProposal"" [label=""acceptProposal""];
""1556_constructor"" [label=""constructor""];
""1556_contractBalance"" [label=""contractBalance""];
""1556_removeProposal"" -> ""1556_onlyHumans"";
""1556_withdrawProxy"" -> ""1556_isTeamMember"";
""1556_withdrawProxy"" -> ""1556_onlyHumans"";
""1556_setContractAddress"" -> ""1556_onlyHumans"";
""1556_proposeNewAddress"" -> ""1556_onlyHumans"";
""1556_teamWithdraw"" -> ""1556_isMainContractSet"";
""1556_teamWithdraw"" -> ""1556_onlyHumans"";
""1556_removeProposal"" -> ""1556_isTeamMember"";
""1556_proposeNewAddress"" -> ""1556_isTeamMember"";
""1556_acceptProposal"" -> ""1556_onlyHumans"";
""1556_teamWithdraw"" -> ""1556_isTeamMember"";
""1556_withdrawProxy"" -> ""1556_isMainContractSet"";
}
"
0x6c4ca515f04722d079862a03dec1e5c011491e12.sol,ToadFarmer,contract ToadFarmer { uint256 public EGGS_TO_HATCH_1TOAD = 43200; uint256 TADPOLE = 10000; uint256 PSNHTOAD = 5000; bool public initialized = false; address public ceoAddress; mapping (address => uint256) public hatcheryToad; mapping (address => uint256) public claimedEggs; mapping (address => uint256) public lastHatch; mapping (address => address) public referrals; uint256 public marketEggs; constructor() public { ceoAddress = msg.sender; },0,"subgraph cluster_530_ToadFarmer {
label=""ToadFarmer"";
""530_buyEggs"" [label=""buyEggs""];
""530_getFreeToad"" [label=""getFreeToad""];
""530_getBalance"" [label=""getBalance""];
""530_getMyToad"" [label=""getMyToad""];
""530_seedMarket"" [label=""seedMarket""];
""530_calculateEggBuySimple"" [label=""calculateEggBuySimple""];
""530_min"" [label=""min""];
""530_calculateTrade"" [label=""calculateTrade""];
""530_sellEggs"" [label=""sellEggs""];
""530_constructor"" [label=""constructor""];
""530_devFee"" [label=""devFee""];
""530_hatchEggs"" [label=""hatchEggs""];
""530_getEggsSinceLastHatch"" [label=""getEggsSinceLastHatch""];
""530_getMyEggs"" [label=""getMyEggs""];
""530_calculateEggSell"" [label=""calculateEggSell""];
""530_calculateEggBuy"" [label=""calculateEggBuy""];
""530_getEggsSinceLastHatch"" -> ""530_min"";
""530_sellEggs"" -> ""530_devFee"";
""530_sellEggs"" -> ""530_getMyEggs"";
""530_getMyEggs"" -> ""530_getEggsSinceLastHatch"";
""530_buyEggs"" -> ""530_devFee"";
""530_buyEggs"" -> ""530_calculateEggBuy"";
""530_calculateEggSell"" -> ""530_calculateTrade"";
""530_calculateEggBuySimple"" -> ""530_calculateEggBuy"";
""530_hatchEggs"" -> ""530_getMyEggs"";
""530_sellEggs"" -> ""530_calculateEggSell"";
""530_calculateEggBuy"" -> ""530_calculateTrade"";
}
"
0xf4f5271c9d6f23cc00f93625b502f88d289a1607.sol,AkilosToken,"contract AkilosToken is ERC20Interface, Owned, WithdrawConfirmation { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint _totalSupply; bool public started = false; uint public currentRate; uint public minimalInvestment = 0.1 ether; uint public currentRoundSales; uint public roundNumber; uint public roundOneTotal; uint public roundTwoTotal; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; event Burn(address indexed from, uint value); constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 15000000 * 10**uint(decimals); roundOneTotal = 3000000 * 10**uint(decimals); roundTwoTotal = 7000000 * 10**uint(decimals); balances[owner] = _totalSupply; emit Transfer(address(0), owner, _totalSupply); }",0,"subgraph cluster_1199_AkilosToken {
label=""AkilosToken"";
""1199_approveAndCall"" [label=""approveAndCall""];
""1199_balanceOf"" [label=""balanceOf""];
""1199_fallback"" [label=""fallback""];
""1199_constructor"" [label=""constructor""];
""1199_burn"" [label=""burn""];
""1199_approve"" [label=""approve""];
""1199_allowance"" [label=""allowance""];
""1199_setCurrentRate"" [label=""setCurrentRate""];
""1199_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""1199_setStarted"" [label=""setStarted""];
""1199_setRoundNumber"" [label=""setRoundNumber""];
""1199_transfer"" [label=""transfer""];
""1199_resetCurrentRoundSales"" [label=""resetCurrentRoundSales""];
""1199_totalSupply"" [label=""totalSupply""];
""1199_transferFrom"" [label=""transferFrom""];
""1199_resetCurrentRoundSales"" -> ""1199_onlyOwner"";
""1199_setCurrentRate"" -> ""1199_onlyOwner"";
""1199_setRoundNumber"" -> ""1199_onlyOwner"";
""1199_setStarted"" -> ""1199_onlyOwner"";
}
"
0x288d045357ac63438278af0b5b84d677713e7c30.sol,MerchantWallet,"contract MerchantWallet is Pausable, SafeDestructible, Contactable, Restricted { string constant VERSION = ; address public merchantAccount; address public merchantFundAddress; bytes32 public merchantIdHash; mapping (string=>string) profileMap; mapping (string=>string) paymentSettingsMap; mapping (string=>uint32) compositeReputationMap; uint8 public constant REPUTATION_DECIMALS = 4; modifier onlyMerchant() { require(msg.sender == merchantAccount); _; }",0,"subgraph cluster_1312_MerchantWallet {
label=""MerchantWallet"";
""1312_doWithdrawal"" [label=""doWithdrawal""];
""1312_compositeReputation"" [label=""compositeReputation""];
""1312_fallback"" [label=""fallback""];
""1312_constructor"" [label=""constructor""];
""1312_withdrawToExchange"" [label=""withdrawToExchange""];
""1312_paymentSettings"" [label=""paymentSettings""];
""1312_setProfile"" [label=""setProfile""];
""1312_merchantIdHash"" [label=""merchantIdHash""];
""1312_setCompositeReputation"" [label=""setCompositeReputation""];
""1312_changeMerchantAccount"" [label=""changeMerchantAccount""];
""1312_withdrawTo"" [label=""withdrawTo""];
""1312_changeFundAddress"" [label=""changeFundAddress""];
""1312_merchantFundAddress"" [label=""merchantFundAddress""];
""1312_withdraw"" [label=""withdraw""];
""1312_setPaymentSettings"" [label=""setPaymentSettings""];
""1312_withdrawAllToExchange"" [label=""withdrawAllToExchange""];
""1312_profile"" [label=""profile""];
""1312_withdrawAllTokensToExchange"" [label=""withdrawAllTokensToExchange""];
""1312_setProfile"" -> ""1312_onlyOwner"";
""1312_withdrawTo"" -> ""1312_whenNotPaused"";
""1312_withdrawAllTokensToExchange"" -> ""1312_onlyMerchantOrMonetha"";
""1312_withdrawAllToExchange"" -> ""1312_onlyMerchantOrMonetha"";
""1312_constructor"" -> ""1312_isEOA"";
""1312_withdraw"" -> ""1312_onlyMerchant"";
""1312_setCompositeReputation"" -> ""1312_onlyMonetha"";
""1312_setPaymentSettings"" -> ""1312_onlyOwner"";
""1312_withdrawTo"" -> ""1312_doWithdrawal"";
""1312_changeFundAddress"" -> ""1312_isEOA"";
""1312_withdrawToExchange"" -> ""1312_onlyMerchantOrMonetha"";
""1312_withdrawAllToExchange"" -> ""1312_whenNotPaused"";
""1312_changeMerchantAccount"" -> ""1312_onlyMerchant"";
""1312_withdrawTo"" -> ""1312_onlyMerchant"";
""1312_withdrawToExchange"" -> ""1312_whenNotPaused"";
""1312_withdrawToExchange"" -> ""1312_doWithdrawal"";
""1312_withdrawAllToExchange"" -> ""1312_doWithdrawal"";
""1312_withdrawAllTokensToExchange"" -> ""1312_whenNotPaused"";
""1312_changeFundAddress"" -> ""1312_onlyMerchant"";
""1312_withdraw"" -> ""1312_withdrawTo"";
""1312_changeMerchantAccount"" -> ""1312_whenNotPaused"";
}
"
0x79703fcd68182a9ca2076b7b1516fc871c6d0c8b.sol,BasicToken,contract BasicToken is ERC20Basic { using SafeMath for uint256; mapping(address => uint256) balances; uint256 totalSupply_; function totalSupply() public view returns (uint256) { return totalSupply_; },0,"subgraph cluster_397_BasicToken {
label=""BasicToken"";
""397_transfer"" [label=""transfer""];
""397_balanceOf"" [label=""balanceOf""];
""397_totalSupply"" [label=""totalSupply""];
}
"
0x9ad685a3eaa6b0a1ea601f48b7797a12011fdeb0.sol,TradersToken,"contract TradersToken is DSTokenBase , DSStop { string public symbol=; string public name=; uint256 public decimals = 3; uint256 public initialSupply=500000000000000; address public burnAdmin; constructor() public DSTokenBase(initialSupply) { burnAdmin=msg.sender; }",0,"subgraph cluster_1091_TradersToken {
label=""TradersToken"";
""1091_constructor"" [label=""constructor""];
""1091_burnfromAdmin"" [label=""burnfromAdmin""];
""1091_approve"" [label=""approve""];
""1091_isAdmin"" [label=""isAdmin""];
""1091_renounceOwnership"" [label=""renounceOwnership""];
""1091_transferFrom"" [label=""transferFrom""];
""1091_transferFrom"" -> ""1091_add"";
""1091_transferFrom"" -> ""1091_stoppable"";
""1091_renounceOwnership"" -> ""1091_onlyAdmin"";
""1091_burnfromAdmin"" -> ""1091_onlyAdmin"";
""1091_transferFrom"" -> ""1091_sub"";
""1091_constructor"" -> ""1091_constructor"";
""1091_approve"" -> ""1091_stoppable"";
""1091_approve"" -> ""1091_approve"";
""1091_burnfromAdmin"" -> ""1091_sub"";
}
"
0xa21c9a3ae47103b1fd1dfa04766c4d00c19e1ff6.sol,CryptoOscarsToken,"contract CryptoOscarsToken is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.001 ether; uint256 private constant PROMO_CREATION_LIMIT = 20000; mapping (uint256 => address) public movieIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public movieIndexToApproved; mapping (uint256 => uint256) private movieIndexToPrice; address public ceoAddress; address public cooAddress; uint256 public promoCreatedCount; struct Movie { string name; }",0,"subgraph cluster_930_CryptoOscarsToken {
label=""CryptoOscarsToken"";
""930_approve"" [label=""approve""];
""930_balanceOf"" [label=""balanceOf""];
""930_transfer"" [label=""transfer""];
""930_ownerOf"" [label=""ownerOf""];
""930_payout"" [label=""payout""];
""930_takeOwnership"" [label=""takeOwnership""];
""930_totalSupply"" [label=""totalSupply""];
""930__createMovie"" [label=""_createMovie""];
""930_setCOO"" [label=""setCOO""];
""930_CryptoMoviesToken"" [label=""CryptoMoviesToken""];
""930_setCEO"" [label=""setCEO""];
""930__payout"" [label=""_payout""];
""930_tokensOfOwner"" [label=""tokensOfOwner""];
""930__addressNotNull"" [label=""_addressNotNull""];
""930_priceOf"" [label=""priceOf""];
""930_createContractMovie"" [label=""createContractMovie""];
""930__transfer"" [label=""_transfer""];
""930_name"" [label=""name""];
""930_purchase"" [label=""purchase""];
""930__approved"" [label=""_approved""];
""930_createPromoMovie"" [label=""createPromoMovie""];
""930_symbol"" [label=""symbol""];
""930__owns"" [label=""_owns""];
""930_transferFrom"" [label=""transferFrom""];
""930_getMovie"" [label=""getMovie""];
""930_implementsERC721"" [label=""implementsERC721""];
""930_transferFrom"" -> ""930__addressNotNull"";
""930_takeOwnership"" -> ""930__approved"";
""930_transferFrom"" -> ""930__approved"";
""930_createContractMovie"" -> ""930_onlyCOO"";
""930_setCEO"" -> ""930_onlyCEO"";
""930_purchase"" -> ""930__transfer"";
""930_purchase"" -> ""930__addressNotNull"";
""930_payout"" -> ""930_onlyCLevel"";
""930__createMovie"" -> ""930__transfer"";
""930_payout"" -> ""930__payout"";
""930_createContractMovie"" -> ""930__createMovie"";
""930_createPromoMovie"" -> ""930_onlyCOO"";
""930_tokensOfOwner"" -> ""930_balanceOf"";
""930_createPromoMovie"" -> ""930__createMovie"";
""930_takeOwnership"" -> ""930__addressNotNull"";
""930_setCOO"" -> ""930_onlyCEO"";
""930_transferFrom"" -> ""930__transfer"";
""930_transferFrom"" -> ""930__owns"";
""930_tokensOfOwner"" -> ""930_totalSupply"";
""930_transfer"" -> ""930__owns"";
""930_takeOwnership"" -> ""930__transfer"";
""930_approve"" -> ""930__owns"";
""930_transfer"" -> ""930__addressNotNull"";
""930_transfer"" -> ""930__transfer"";
}
"
0xc5392940c99a9e02c47feea448c2474fb768f65c.sol,XMX,"contract XMX { string public name; string public symbol; uint8 public decimals = 6; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function XMX ( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_361_XMX {
label=""XMX"";
""361__transfer"" [label=""_transfer""];
""361_XMX"" [label=""XMX""];
""361_burn"" [label=""burn""];
""361_burnFrom"" [label=""burnFrom""];
""361_transfer"" [label=""transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_approve"" [label=""approve""];
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
}
"
0xf1ada8ab9b75375c05c1af0acec6f6d975470a24.sol,TokensGate,"contract TokensGate is Crowdsale { mapping(address => bool) public icoAddresses; function TokensGate ( uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet ) public Crowdsale(_startTime, _endTime, _rate, _wallet) { }",0,"subgraph cluster_1017_TokensGate {
label=""TokensGate"";
""1017_tokenOwnership"" [label=""tokenOwnership""];
""1017_TokensGate"" [label=""TokensGate""];
""1017_addIcoAddress"" [label=""addIcoAddress""];
""1017_fallback"" [label=""fallback""];
""1017_mintTokens"" [label=""mintTokens""];
""1017_createTokenContract"" [label=""createTokenContract""];
""1017_changeOwner"" [label=""changeOwner""];
""1017_setEndTime"" [label=""setEndTime""];
""1017_buyTokens"" [label=""buyTokens""];
""1017_TokensGate"" -> ""1017_Crowdsale"";
}
"
0x7703c35cffdc5cda8d27aa3df2f9ba6964544b6e.sol,PylonToken,"contract PylonToken is owned { string public standard = ; string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 3750000000000000000000000; mapping (address => uint256) public balanceOf; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); using SafeMath for uint256; address public beneficiary = 0xAE0151Ca8C9b6A1A7B50Ce80Bf7436400E22b535; uint256 public fundingGoal = 21230434782608700000000; uint256 public amountRaised; uint256 public deadline; uint256 public price = 6608695652173910; uint256 public totalTokensToSend = 3250000000000000000000000; uint256 public maxEtherInvestment = 826086956521739000000; uint256 public maxTokens = 297619047619048000000000; uint256 public bonusCap = 750000000000000000000000; uint256 public pylonSelled = 0; uint256 public startBlockBonus; uint256 public endBlockBonus1; uint256 public endBlockBonus2; uint256 public endBlockBonus3; uint256 public qnt10k = 6578947368421050000000; bool fundingGoalReached = false; bool crowdsaleClosed = false; event GoalReached(address deposit, uint256 amountDeposited); event FundTransfer(address backer, uint256 amount, bool isContribution); event LogQuantity(uint256 _amount, string _message); uint256 public startBlock = getBlockNumber(); bool public paused = false; modifier contributionOpen() { require(getBlockNumber() >= startBlock && getBlockNumber() <= deadline); _; }",0,"subgraph cluster_1805_PylonToken {
label=""PylonToken"";
""1805_crowdsale"" [label=""crowdsale""];
""1805_resumeContribution"" [label=""resumeContribution""];
""1805_freezeAccount"" [label=""freezeAccount""];
""1805_mintToken"" [label=""mintToken""];
""1805_transfer"" [label=""transfer""];
""1805__transfer"" [label=""_transfer""];
""1805_validPurchase"" [label=""validPurchase""];
""1805_buyPreIco"" [label=""buyPreIco""];
""1805_fallback"" [label=""fallback""];
""1805_pauseContribution"" [label=""pauseContribution""];
""1805_buyIco"" [label=""buyIco""];
""1805_buyTokens"" [label=""buyTokens""];
""1805_PylonToken"" [label=""PylonToken""];
""1805_checkGoalReached"" [label=""checkGoalReached""];
""1805_getBlockNumber"" [label=""getBlockNumber""];
""1805_burn"" [label=""burn""];
""1805_burnFrom"" [label=""burnFrom""];
""1805_pauseContribution"" -> ""1805_onlyOwner"";
""1805_burn"" -> ""1805_onlyOwner"";
""1805_burnFrom"" -> ""1805_onlyOwner"";
""1805_checkGoalReached"" -> ""1805_onlyOwner"";
""1805_PylonToken"" -> ""1805_getBlockNumber"";
""1805_resumeContribution"" -> ""1805_onlyOwner"";
""1805_transfer"" -> ""1805__transfer"";
""1805_fallback"" -> ""1805_buyTokens"";
""1805_mintToken"" -> ""1805_onlyOwner"";
""1805_fallback"" -> ""1805_notPaused"";
""1805_validPurchase"" -> ""1805_getBlockNumber"";
""1805_freezeAccount"" -> ""1805_onlyOwner"";
""1805_buyTokens"" -> ""1805_getBlockNumber"";
""1805_buyTokens"" -> ""1805_notPaused"";
""1805_checkGoalReached"" -> ""1805_afterDeadline"";
""1805_buyTokens"" -> ""1805_buyIco"";
""1805_buyPreIco"" -> ""1805_getBlockNumber"";
""1805_crowdsale"" -> ""1805_onlyOwner"";
""1805_buyTokens"" -> ""1805_buyPreIco"";
""1805_buyTokens"" -> ""1805_validPurchase"";
}
"
0xf04ed156972cd144289b6712d19dead025e73a2c.sol,FUS,"contract FUS is owned { string public name = ; string public symbol = ; uint8 public decimals = 18; uint public totalSupply = 100000000000000000000000000; mapping (address => uint) public balanceOf; mapping (address => mapping (address => uint)) public allowance; event Transfer(address indexed from, address indexed to, uint value); function FUS() public { balanceOf[msg.sender] = totalSupply; }",0,"subgraph cluster_254_FUS {
label=""FUS"";
""254__transfer"" [label=""_transfer""];
""254_FUS"" [label=""FUS""];
""254_fallback"" [label=""fallback""];
""254_transfer"" [label=""transfer""];
""254_approve"" [label=""approve""];
""254_transferFrom"" [label=""transferFrom""];
""254_transferFrom"" -> ""254__transfer"";
""254_transfer"" -> ""254__transfer"";
}
"
0xd84e469c31efc9c67dbadd25c0a04006a5d30c05.sol,TFTOKEN,"contract TFTOKEN is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 4; uint256 public constant INITIAL_SUPPLY = 1500000000 * (10 ** uint256(decimals)); uint256 public constant FREE_SUPPLY = 300000000 * (10 ** uint256(decimals)); uint256 public nextFreeCount = 999 * (10 ** uint256(decimals)) ; uint256 public constant decr = 0 * (10 ** 1) ; mapping(address => bool) touched; function TFTOKEN() public { totalSupply_ = INITIAL_SUPPLY; balances[address(this)] = FREE_SUPPLY; emit Transfer(0x0, address(this), FREE_SUPPLY); balances[msg.sender] = INITIAL_SUPPLY - FREE_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY - FREE_SUPPLY); }",0,"subgraph cluster_787_TFTOKEN {
label=""TFTOKEN"";
""787_safeWithdrawal"" [label=""safeWithdrawal""];
""787_TFTOKEN"" [label=""TFTOKEN""];
""787__transfer"" [label=""_transfer""];
""787_fallback"" [label=""fallback""];
""787_safeWithdrawal"" -> ""787_onlyOwner"";
""787_fallback"" -> ""787__transfer"";
}
"
0x1789cca7430aacbdb7c89f9b5695a9c06e4764eb.sol,Custodian,contract Custodian { struct Request { bytes32 lockId; bytes4 callbackSelector; address callbackAddress; uint256 idx; uint256 timestamp; bool extended; },0,"subgraph cluster_576_Custodian {
label=""Custodian"";
""576_requestUnlock"" [label=""requestUnlock""];
""576_Custodian"" [label=""Custodian""];
""576_completeUnlock"" [label=""completeUnlock""];
""576_deleteUncompletableRequest"" [label=""deleteUncompletableRequest""];
""576_extendRequestTimeLock"" [label=""extendRequestTimeLock""];
""576_extendRequestTimeLock"" -> ""576_onlyPrimary"";
}
"
0x6c6ff5213433510c91c65787dcf604bb2dc37c19.sol,x32323,"contract x32323 is owned{ mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; mapping (address => bool) public frozenAccount; mapping (address => bool) initialized; event FrozenFunds(address target, bool frozen); event Transfer(address indexed from, address indexed to, uint256 value); function freezeAccount(address target, bool freeze) onlyOwner { frozenAccount[target] = freeze; FrozenFunds(target, freeze); }",0,"subgraph cluster_556_x32323 {
label=""x32323"";
""556_transferFrom"" [label=""transferFrom""];
""556_transfer"" [label=""transfer""];
""556__transfer"" [label=""_transfer""];
""556_setPrices"" [label=""setPrices""];
""556_approve"" [label=""approve""];
""556_buy"" [label=""buy""];
""556_freezeAccount"" [label=""freezeAccount""];
""556_initialize"" [label=""initialize""];
""556_setMinBalance"" [label=""setMinBalance""];
""556_sell"" [label=""sell""];
""556_approveAndCall"" [label=""approveAndCall""];
""556_TokenERC20"" [label=""TokenERC20""];
""556_approveAndCall"" -> ""556_approve"";
""556_transferFrom"" -> ""556__transfer"";
""556_setPrices"" -> ""556_onlyOwner"";
""556_transfer"" -> ""556__transfer"";
""556_setMinBalance"" -> ""556_onlyOwner"";
""556_transfer"" -> ""556_sell"";
""556_freezeAccount"" -> ""556_onlyOwner"";
""556__transfer"" -> ""556_initialize"";
}
"
0x719efd3550c82b1ce656e64803de576ce93e362f.sol,Helenex,"contract Helenex is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint256 public _totalSupply; mapping(address => uint256) internal balances; mapping (address => uint256) internal freezeOf; mapping(address => mapping(address => uint256)) internal allowed; function Helenex() public { symbol = ; name = ; decimals = 8; _totalSupply = 2100000000000000; balances[msg.sender] = _totalSupply; emit Transfer(address(0), msg.sender, _totalSupply); }",0,"subgraph cluster_832_Helenex {
label=""Helenex"";
""832_approve"" [label=""approve""];
""832_burn"" [label=""burn""];
""832_fallback"" [label=""fallback""];
""832_allowance"" [label=""allowance""];
""832_transferFrom"" [label=""transferFrom""];
""832_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""832_totalSupply"" [label=""totalSupply""];
""832_approveAndCall"" [label=""approveAndCall""];
""832_balanceOf"" [label=""balanceOf""];
""832_freeze"" [label=""freeze""];
""832_unfreeze"" [label=""unfreeze""];
""832_Helenex"" [label=""Helenex""];
""832_transfer"" [label=""transfer""];
""832_withdrawEther"" [label=""withdrawEther""];
""832_transferAnyERC20Token"" -> ""832_onlyOwner"";
""832_transferFrom"" -> ""832_safeSub"";
""832_transferFrom"" -> ""832_safeAdd"";
""832_unfreeze"" -> ""832_safeAdd"";
""832_freeze"" -> ""832_safeAdd"";
""832_burn"" -> ""832_safeSub"";
""832_unfreeze"" -> ""832_safeSub"";
""832_transfer"" -> ""832_safeSub"";
""832_transfer"" -> ""832_safeAdd"";
""832_freeze"" -> ""832_safeSub"";
""832_withdrawEther"" -> ""832_onlyOwner"";
}
"
0xefab2a9292a10036006e7a68535724ade16a65ca.sol,EOSpace,"contract EOSpace is ERC20 { using SafeMath for uint256; address owner = msg.sender; address EOSContract = 0x86fa049857e0209aa7d9e616f7eb3b3b78ecfdb0; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public blacklist; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 public totalSupply = 10000000000e18; uint256 public totalDistributed = 0; uint256 public totalRemaining = totalSupply.sub(totalDistributed); uint256 public value; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_1147_EOSpace {
label=""EOSpace"";
""1147_getTokens"" [label=""getTokens""];
""1147_transferOwnership"" [label=""transferOwnership""];
""1147_airdrop"" [label=""airdrop""];
""1147_transfer"" [label=""transfer""];
""1147_finishDistribution"" [label=""finishDistribution""];
""1147_distr"" [label=""distr""];
""1147_withdraw"" [label=""withdraw""];
""1147_fallback"" [label=""fallback""];
""1147_burn"" [label=""burn""];
""1147_disableWhitelist"" [label=""disableWhitelist""];
""1147_distribution"" [label=""distribution""];
""1147_EOSpace"" [label=""EOSpace""];
""1147_allowance"" [label=""allowance""];
""1147_transferFrom"" [label=""transferFrom""];
""1147_enableWhitelist"" [label=""enableWhitelist""];
""1147_balanceOf"" [label=""balanceOf""];
""1147_approve"" [label=""approve""];
""1147_getTokenBalance"" [label=""getTokenBalance""];
""1147_distributeAmounts"" [label=""distributeAmounts""];
""1147_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1147_getTokens"" -> ""1147_distr"";
""1147_distributeAmounts"" -> ""1147_onlyOwner"";
""1147_transfer"" -> ""1147_onlyPayloadSize"";
""1147_burn"" -> ""1147_onlyOwner"";
""1147_airdrop"" -> ""1147_canDistr"";
""1147_transferOwnership"" -> ""1147_onlyOwner"";
""1147_getTokens"" -> ""1147_onlyWhitelist"";
""1147_distributeAmounts"" -> ""1147_canDistr"";
""1147_distr"" -> ""1147_canDistr"";
""1147_fallback"" -> ""1147_getTokens"";
""1147_withdraw"" -> ""1147_onlyOwner"";
""1147_finishDistribution"" -> ""1147_canDistr"";
""1147_distribution"" -> ""1147_onlyOwner"";
""1147_EOSpace"" -> ""1147_distr"";
""1147_disableWhitelist"" -> ""1147_onlyOwner"";
""1147_airdrop"" -> ""1147_onlyOwner"";
""1147_distribution"" -> ""1147_distr"";
""1147_distribution"" -> ""1147_canDistr"";
""1147_airdrop"" -> ""1147_distr"";
""1147_finishDistribution"" -> ""1147_onlyOwner"";
""1147_getTokens"" -> ""1147_canDistr"";
""1147_transferFrom"" -> ""1147_onlyPayloadSize"";
""1147_withdrawForeignTokens"" -> ""1147_onlyOwner"";
""1147_distributeAmounts"" -> ""1147_distr"";
""1147_enableWhitelist"" -> ""1147_onlyOwner"";
}
"
0xf2a173ce6c3556cb39734f805b6fba2159a0fe91.sol,COOToken,"contract COOToken is Token, Owned { using SafeMath for uint256; string public constant name = ; uint8 public constant decimals = 18; string public constant symbol = ; uint256 currentTotalSupply; uint256 limitTotalSupply = 10000000000000000000000000000; mapping (address => uint256) balances; mapping(address => mapping(address => uint256)) allowed; event Aditional(address indexed _owner,uint256 _value); function COOToken(uint256 _initialAmount) { if(_initialAmount > limitTotalSupply) throw; balances[msg.sender] = _initialAmount; currentTotalSupply = _initialAmount; }",0,"subgraph cluster_584_COOToken {
label=""COOToken"";
""584_COOToken"" [label=""COOToken""];
""584_additional"" [label=""additional""];
""584_limitSupply"" [label=""limitSupply""];
""584_approve"" [label=""approve""];
""584_fallback"" [label=""fallback""];
""584_allowance"" [label=""allowance""];
""584_transfer"" [label=""transfer""];
""584_transferFrom"" [label=""transferFrom""];
""584_balanceOf"" [label=""balanceOf""];
""584_totalSupply"" [label=""totalSupply""];
""584_additional"" -> ""584_onlyOwner"";
}
"
0x720608228bda773fe22e816ee72463040f11c19e.sol,CommonCrowdsale,"contract CommonCrowdsale is Ownable, LockableChanges { using SafeMath for uint256; uint public constant PERCENT_RATE = 100; uint public price; uint public minInvestedLimit; uint public hardcap; uint public start; uint public end; uint public invested; uint public minted; address public wallet; address public bountyTokensWallet; address public devTokensWallet; address public advisorsTokensWallet; address public foundersTokensWallet; uint public bountyTokensPercent; uint public devTokensPercent; uint public advisorsTokensPercent; uint public foundersTokensPercent; address public directMintAgent; struct Bonus { uint periodInDays; uint bonus; }",0,"subgraph cluster_1356_CommonCrowdsale {
label=""CommonCrowdsale"";
""1356_mintAndSendTokens"" [label=""mintAndSendTokens""];
""1356_setAdvisorsTokensPercent"" [label=""setAdvisorsTokensPercent""];
""1356_setWallet"" [label=""setWallet""];
""1356_setEnd"" [label=""setEnd""];
""1356_calculateAndTransferTokens"" [label=""calculateAndTransferTokens""];
""1356_setBountyTokensPercent"" [label=""setBountyTokensPercent""];
""1356_mintExtendedTokens"" [label=""mintExtendedTokens""];
""1356_retrieveTokens"" [label=""retrieveTokens""];
""1356_setBountyTokensWallet"" [label=""setBountyTokensWallet""];
""1356_setDevTokensWallet"" [label=""setDevTokensWallet""];
""1356_setToken"" [label=""setToken""];
""1356_setFoundersTokensWallet"" [label=""setFoundersTokensWallet""];
""1356_setFoundersTokensPercent"" [label=""setFoundersTokensPercent""];
""1356_setMinInvestedLimit"" [label=""setMinInvestedLimit""];
""1356_setHardcap"" [label=""setHardcap""];
""1356_setPrice"" [label=""setPrice""];
""1356_setDevTokensPercent"" [label=""setDevTokensPercent""];
""1356_setDirectMintAgent"" [label=""setDirectMintAgent""];
""1356_bonusesCount"" [label=""bonusesCount""];
""1356_directMint"" [label=""directMint""];
""1356_fallback"" [label=""fallback""];
""1356_setAdvisorsTokensWallet"" [label=""setAdvisorsTokensWallet""];
""1356_getBonus"" [label=""getBonus""];
""1356_setStart"" [label=""setStart""];
""1356_addBonus"" [label=""addBonus""];
""1356_createTokens"" [label=""createTokens""];
""1356_setToken"" -> ""1356_onlyOwner"";
""1356_setDevTokensPercent"" -> ""1356_onlyOwner"";
""1356_setFoundersTokensWallet"" -> ""1356_onlyOwner"";
""1356_fallback"" -> ""1356_createTokens"";
""1356_addBonus"" -> ""1356_onlyOwner"";
""1356_setFoundersTokensPercent"" -> ""1356_onlyOwner"";
""1356_setPrice"" -> ""1356_onlyOwner"";
""1356_setAdvisorsTokensWallet"" -> ""1356_onlyOwner"";
""1356_directMint"" -> ""1356_calculateAndTransferTokens"";
""1356_setWallet"" -> ""1356_onlyOwner"";
""1356_setEnd"" -> ""1356_onlyOwner"";
""1356_mintExtendedTokens"" -> ""1356_mintAndSendTokens"";
""1356_directMint"" -> ""1356_saleIsOn"";
""1356_calculateAndTransferTokens"" -> ""1356_mintAndSendTokens"";
""1356_setMinInvestedLimit"" -> ""1356_onlyOwner"";
""1356_setBountyTokensWallet"" -> ""1356_onlyOwner"";
""1356_setAdvisorsTokensPercent"" -> ""1356_onlyOwner"";
""1356_calculateAndTransferTokens"" -> ""1356_getBonus"";
""1356_retrieveTokens"" -> ""1356_onlyOwner"";
""1356_setStart"" -> ""1356_onlyOwner"";
""1356_setBountyTokensPercent"" -> ""1356_onlyOwner"";
""1356_setDirectMintAgent"" -> ""1356_onlyOwner"";
""1356_setDevTokensWallet"" -> ""1356_onlyOwner"";
""1356_directMint"" -> ""1356_onlyDirectMintAgentOrOwner"";
""1356_setHardcap"" -> ""1356_onlyOwner"";
}
"
0x029af1f2c753c458c1e7fa04428e78cbe2eb09a7.sol,CryptoBeginnerQuest,contract CryptoBeginnerQuest { using SafeMath for uint256; address private administrator; CryptoEngineerInterface public Engineer; CryptoDepositInterface public Deposit; CryptoMiningWarInterface public MiningWar; CryptoAirdropGameInterface public AirdropGame; CryptoBossWannaCryInterface public BossWannaCry; CryptoArenaInterface public Arena; address public miningWarAddress; uint256 private miningWarDeadline; uint256 private miningWarRound; mapping(address => Player) private players; mapping(address => MinerQuest) private minerQuests; mapping(address => EngineerQuest) private engineerQuests; mapping(address => DepositQuest) private depositQuests; mapping(address => JoinAirdropQuest) private joinAirdropQuests; mapping(address => AtkBossQuest) private atkBossQuests; mapping(address => AtkPlayerQuest) private atkPlayerQuests; mapping(address => BoosterQuest) private boosterQuests; mapping(address => RedbullQuest) private redbullQuests; struct Player { uint256 miningWarRound; uint256 currentQuest; },0,"subgraph cluster_2503_CryptoBeginnerQuest {
label=""CryptoBeginnerQuest"";
""2503_confirmBoosterQuest"" [label=""confirmBoosterQuest""];
""2503_getBoosters"" [label=""getBoosters""];
""2503_setBossWannaCryInterface"" [label=""setBossWannaCryInterface""];
""2503_setAirdropGameInterface"" [label=""setAirdropGameInterface""];
""2503_addBoosterQuest"" [label=""addBoosterQuest""];
""2503_checkAtkBossQuest"" [label=""checkAtkBossQuest""];
""2503_getMiningWarRoundOfPlayer"" [label=""getMiningWarRoundOfPlayer""];
""2503_checkBoosterQuest"" [label=""checkBoosterQuest""];
""2503_confirmJoinAirdropQuest"" [label=""confirmJoinAirdropQuest""];
""2503_getEngineerLv1"" [label=""getEngineerLv1""];
""2503_confirmAtkBossQuest"" [label=""confirmAtkBossQuest""];
""2503_isContractMiniGame"" [label=""isContractMiniGame""];
""2503_getMinerLv1"" [label=""getMinerLv1""];
""2503_checkAtkPlayerQuest"" [label=""checkAtkPlayerQuest""];
""2503_constructor"" [label=""constructor""];
""2503_addLevelQuest"" [label=""addLevelQuest""];
""2503_setMiningWarInterface"" [label=""setMiningWarInterface""];
""2503_addAtkPlayerQuest"" [label=""addAtkPlayerQuest""];
""2503_getPlayerBossWannaCryData"" [label=""getPlayerBossWannaCryData""];
""2503_addRedbullQuest"" [label=""addRedbullQuest""];
""2503_getData"" [label=""getData""];
""2503_checkRedbullQuest"" [label=""checkRedbullQuest""];
""2503_confirmQuest"" [label=""confirmQuest""];
""2503_addJoinAirdropQuest"" [label=""addJoinAirdropQuest""];
""2503_startGame"" [label=""startGame""];
""2503_getMiningWarRound"" [label=""getMiningWarRound""];
""2503_checkMinerQuest"" [label=""checkMinerQuest""];
""2503_confirmGetFreeQuest"" [label=""confirmGetFreeQuest""];
""2503_getNextTimeAtkPlayer"" [label=""getNextTimeAtkPlayer""];
""2503_checkDepositQuest"" [label=""checkDepositQuest""];
""2503_addEngineerQuest"" [label=""addEngineerQuest""];
""2503_setArenaInterface"" [label=""setArenaInterface""];
""2503_checkQuest"" [label=""checkQuest""];
""2503_confirmRedbullQuest"" [label=""confirmRedbullQuest""];
""2503_isBeginnerQuestContract"" [label=""isBeginnerQuestContract""];
""2503_confirmEngineerQuest"" [label=""confirmEngineerQuest""];
""2503_addMinerQuest"" [label=""addMinerQuest""];
""2503_checkEngineerQuest"" [label=""checkEngineerQuest""];
""2503_addAtkBossQuest"" [label=""addAtkBossQuest""];
""2503_setDepositInterface"" [label=""setDepositInterface""];
""2503_getRedbulls"" [label=""getRedbulls""];
""2503_getPlayerAirdropGameData"" [label=""getPlayerAirdropGameData""];
""2503_setupMiniGame"" [label=""setupMiniGame""];
""2503_checkGetFreeQuest"" [label=""checkGetFreeQuest""];
""2503_checkJoinAirdropQuest"" [label=""checkJoinAirdropQuest""];
""2503_confirmDepositQuest"" [label=""confirmDepositQuest""];
""2503_fallback"" [label=""fallback""];
""2503_getPlayerDepositData"" [label=""getPlayerDepositData""];
""2503_confirmAtkPlayerQuest"" [label=""confirmAtkPlayerQuest""];
""2503_addQuest"" [label=""addQuest""];
""2503_setEngineerInterface"" [label=""setEngineerInterface""];
""2503_confirmMinerQuest"" [label=""confirmMinerQuest""];
""2503_addDepositQuest"" [label=""addDepositQuest""];
""2503_upgrade"" [label=""upgrade""];
""2503_getMiningWarDealine"" [label=""getMiningWarDealine""];
""2503_checkMinerQuest"" -> ""2503_getMinerLv1"";
""2503_setArenaInterface"" -> ""2503_isAdministrator"";
""2503_addQuest"" -> ""2503_addAtkPlayerQuest"";
""2503_checkQuest"" -> ""2503_checkJoinAirdropQuest"";
""2503_checkRedbullQuest"" -> ""2503_getRedbulls"";
""2503_setEngineerInterface"" -> ""2503_isAdministrator"";
""2503_addQuest"" -> ""2503_addDepositQuest"";
""2503_checkQuest"" -> ""2503_checkBoosterQuest"";
""2503_addQuest"" -> ""2503_addJoinAirdropQuest"";
""2503_checkAtkBossQuest"" -> ""2503_getPlayerBossWannaCryData"";
""2503_addAtkBossQuest"" -> ""2503_getPlayerBossWannaCryData"";
""2503_confirmQuest"" -> ""2503_addQuest"";
""2503_constructor"" -> ""2503_setBossWannaCryInterface"";
""2503_confirmQuest"" -> ""2503_confirmAtkBossQuest"";
""2503_confirmQuest"" -> ""2503_confirmRedbullQuest"";
""2503_constructor"" -> ""2503_setEngineerInterface"";
""2503_checkJoinAirdropQuest"" -> ""2503_getPlayerAirdropGameData"";
""2503_addQuest"" -> ""2503_addBoosterQuest"";
""2503_constructor"" -> ""2503_setMiningWarInterface"";
""2503_addLevelQuest"" -> ""2503_addDepositQuest"";
""2503_checkQuest"" -> ""2503_checkDepositQuest"";
""2503_confirmQuest"" -> ""2503_confirmAtkPlayerQuest"";
""2503_addQuest"" -> ""2503_addMinerQuest"";
""2503_addQuest"" -> ""2503_addAtkBossQuest"";
""2503_addLevelQuest"" -> ""2503_isAdministrator"";
""2503_upgrade"" -> ""2503_isAdministrator"";
""2503_addLevelQuest"" -> ""2503_addAtkPlayerQuest"";
""2503_constructor"" -> ""2503_setAirdropGameInterface"";
""2503_addLevelQuest"" -> ""2503_addMinerQuest"";
""2503_startGame"" -> ""2503_getMiningWarRound"";
""2503_setAirdropGameInterface"" -> ""2503_isAdministrator"";
""2503_checkQuest"" -> ""2503_checkRedbullQuest"";
""2503_setDepositInterface"" -> ""2503_isAdministrator"";
""2503_checkQuest"" -> ""2503_checkAtkPlayerQuest"";
""2503_confirmQuest"" -> ""2503_confirmMinerQuest"";
""2503_checkQuest"" -> ""2503_checkAtkBossQuest"";
""2503_checkDepositQuest"" -> ""2503_getPlayerDepositData"";
""2503_addLevelQuest"" -> ""2503_addEngineerQuest"";
""2503_checkQuest"" -> ""2503_checkMinerQuest"";
""2503_setBossWannaCryInterface"" -> ""2503_isAdministrator"";
""2503_setMiningWarInterface"" -> ""2503_isAdministrator"";
""2503_confirmQuest"" -> ""2503_checkQuest"";
""2503_addLevelQuest"" -> ""2503_addBoosterQuest"";
""2503_addAtkPlayerQuest"" -> ""2503_getNextTimeAtkPlayer"";
""2503_checkEngineerQuest"" -> ""2503_getEngineerLv1"";
""2503_confirmQuest"" -> ""2503_confirmBoosterQuest"";
""2503_addLevelQuest"" -> ""2503_addJoinAirdropQuest"";
""2503_addLevelQuest"" -> ""2503_addRedbullQuest"";
""2503_checkGetFreeQuest"" -> ""2503_getMiningWarRoundOfPlayer"";
""2503_startGame"" -> ""2503_getMiningWarDealine"";
""2503_addJoinAirdropQuest"" -> ""2503_getPlayerAirdropGameData"";
""2503_addQuest"" -> ""2503_addRedbullQuest"";
""2503_constructor"" -> ""2503_setDepositInterface"";
""2503_checkAtkPlayerQuest"" -> ""2503_getNextTimeAtkPlayer"";
""2503_constructor"" -> ""2503_setArenaInterface"";
""2503_confirmQuest"" -> ""2503_confirmGetFreeQuest"";
""2503_getData"" -> ""2503_checkQuest"";
""2503_confirmQuest"" -> ""2503_confirmEngineerQuest"";
""2503_addLevelQuest"" -> ""2503_addAtkBossQuest"";
""2503_addDepositQuest"" -> ""2503_getPlayerDepositData"";
""2503_confirmQuest"" -> ""2503_confirmJoinAirdropQuest"";
""2503_checkQuest"" -> ""2503_checkEngineerQuest"";
""2503_addQuest"" -> ""2503_addEngineerQuest"";
""2503_confirmQuest"" -> ""2503_confirmDepositQuest"";
""2503_checkBoosterQuest"" -> ""2503_getBoosters"";
""2503_checkQuest"" -> ""2503_checkGetFreeQuest"";
}
"
0xd89d6e3b1115743b3dc481f6afdb5bc2958031d6.sol,POWM,contract POWM { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1305_POWM {
label=""POWM"";
""1305_myTokens"" [label=""myTokens""];
""1305_sqrt"" [label=""sqrt""];
""1305_fallback"" [label=""fallback""];
""1305_buyPrice"" [label=""buyPrice""];
""1305_totalSupply"" [label=""totalSupply""];
""1305_sellPrice"" [label=""sellPrice""];
""1305_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1305_setAdministrator"" [label=""setAdministrator""];
""1305_exit"" [label=""exit""];
""1305_setSymbol"" [label=""setSymbol""];
""1305_setStakingRequirement"" [label=""setStakingRequirement""];
""1305_sell"" [label=""sell""];
""1305_balanceOf"" [label=""balanceOf""];
""1305_transfer"" [label=""transfer""];
""1305_buy"" [label=""buy""];
""1305_withdraw"" [label=""withdraw""];
""1305_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1305_disableInitialStage"" [label=""disableInitialStage""];
""1305_dividendsOf"" [label=""dividendsOf""];
""1305_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1305_myDividends"" [label=""myDividends""];
""1305_POWM"" [label=""POWM""];
""1305_reinvest"" [label=""reinvest""];
""1305_purchaseTokens"" [label=""purchaseTokens""];
""1305_setName"" [label=""setName""];
""1305_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1305_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1305_reinvest"" -> ""1305_purchaseTokens"";
""1305_exit"" -> ""1305_sell"";
""1305_calculateTokensReceived"" -> ""1305_ethereumToTokens_"";
""1305_sell"" -> ""1305_tokensToEthereum_"";
""1305_buy"" -> ""1305_purchaseTokens"";
""1305_transfer"" -> ""1305_tokensToEthereum_"";
""1305_reinvest"" -> ""1305_onlyStronghands"";
""1305_ethereumToTokens_"" -> ""1305_sqrt"";
""1305_buyPrice"" -> ""1305_tokensToEthereum_"";
""1305_purchaseTokens"" -> ""1305_antiEarlyWhale"";
""1305_fallback"" -> ""1305_purchaseTokens"";
""1305_disableInitialStage"" -> ""1305_onlyAdministrator"";
""1305_sell"" -> ""1305_onlyBagholders"";
""1305_sellPrice"" -> ""1305_tokensToEthereum_"";
""1305_calculateEthereumReceived"" -> ""1305_tokensToEthereum_"";
""1305_purchaseTokens"" -> ""1305_ethereumToTokens_"";
""1305_reinvest"" -> ""1305_myDividends"";
""1305_withdraw"" -> ""1305_myDividends"";
""1305_setStakingRequirement"" -> ""1305_onlyAdministrator"";
""1305_setAdministrator"" -> ""1305_onlyAdministrator"";
""1305_myDividends"" -> ""1305_dividendsOf"";
""1305_withdraw"" -> ""1305_onlyStronghands"";
""1305_transfer"" -> ""1305_onlyBagholders"";
""1305_transfer"" -> ""1305_myDividends"";
""1305_setSymbol"" -> ""1305_onlyAdministrator"";
""1305_transfer"" -> ""1305_withdraw"";
""1305_myTokens"" -> ""1305_balanceOf"";
""1305_setName"" -> ""1305_onlyAdministrator"";
""1305_exit"" -> ""1305_withdraw"";
}
"
0x2097790e62b5d9cad029e9e1732d1f42790fb648.sol,ExpERC20Token,"contract ExpERC20Token is ERC20Token, Ownable { constructor ( string _name, string _symbol, uint8 _decimals, uint256 _initSupply ) ERC20Token (_name, _symbol, _decimals, _initSupply) public {}",0,"subgraph cluster_1263_ExpERC20Token {
label=""ExpERC20Token"";
""1263_constructor"" [label=""constructor""];
""1263__lock"" [label=""_lock""];
""1263_transferFrom"" [label=""transferFrom""];
""1263_finishMinting"" [label=""finishMinting""];
""1263_isTokenLocked"" [label=""isTokenLocked""];
""1263_approve"" [label=""approve""];
""1263_mint"" [label=""mint""];
""1263_setPrices"" [label=""setPrices""];
""1263_transfer"" [label=""transfer""];
""1263_buy"" [label=""buy""];
""1263_burnFrom"" [label=""burnFrom""];
""1263_freezeAccount"" [label=""freezeAccount""];
""1263_sell"" [label=""sell""];
""1263_lock"" [label=""lock""];
""1263__burn"" [label=""_burn""];
""1263_burn"" [label=""burn""];
""1263__transfer"" [label=""_transfer""];
""1263_changeName"" [label=""changeName""];
""1263_approveAndCall"" [label=""approveAndCall""];
""1263_transferFrom"" -> ""1263_transferFrom"";
""1263_approve"" -> ""1263_whenTokenUnlocked"";
""1263_buy"" -> ""1263_whenTokenUnlocked"";
""1263_transfer"" -> ""1263_transfer"";
""1263_transferFrom"" -> ""1263_whenTokenUnlocked"";
""1263_sell"" -> ""1263__transfer"";
""1263_constructor"" -> ""1263_constructor"";
""1263_buy"" -> ""1263__transfer"";
""1263_burnFrom"" -> ""1263__burn"";
""1263_approveAndCall"" -> ""1263_whenTokenUnlocked"";
""1263_mint"" -> ""1263_canMint"";
""1263_approveAndCall"" -> ""1263_approveAndCall"";
""1263_finishMinting"" -> ""1263_onlyOwner"";
""1263_burn"" -> ""1263__burn"";
""1263_approve"" -> ""1263_approve"";
""1263_freezeAccount"" -> ""1263_onlyOwner"";
""1263_transfer"" -> ""1263_whenTokenUnlocked"";
""1263_mint"" -> ""1263_hasMintPermission"";
""1263_sell"" -> ""1263_whenTokenUnlocked"";
""1263_lock"" -> ""1263__lock"";
""1263_setPrices"" -> ""1263_onlyOwner"";
""1263_finishMinting"" -> ""1263_canMint"";
""1263_lock"" -> ""1263_onlyOwner"";
""1263_changeName"" -> ""1263_onlyOwner"";
}
"
0xf2a173ce6c3556cb39734f805b6fba2159a0fe91.sol,COOToken,"contract COOToken is Token, Owned { using SafeMath for uint256; string public constant name = ; uint8 public constant decimals = 18; string public constant symbol = ; uint256 currentTotalSupply; uint256 limitTotalSupply = 10000000000000000000000000000; mapping (address => uint256) balances; mapping(address => mapping(address => uint256)) allowed; event Aditional(address indexed _owner,uint256 _value); function COOToken(uint256 _initialAmount) { if(_initialAmount > limitTotalSupply) throw; balances[msg.sender] = _initialAmount; currentTotalSupply = _initialAmount; }",0,"subgraph cluster_584_COOToken {
label=""COOToken"";
""584_COOToken"" [label=""COOToken""];
""584_additional"" [label=""additional""];
""584_limitSupply"" [label=""limitSupply""];
""584_approve"" [label=""approve""];
""584_fallback"" [label=""fallback""];
""584_allowance"" [label=""allowance""];
""584_transfer"" [label=""transfer""];
""584_transferFrom"" [label=""transferFrom""];
""584_balanceOf"" [label=""balanceOf""];
""584_totalSupply"" [label=""totalSupply""];
""584_additional"" -> ""584_onlyOwner"";
}
"
0x3700eaf34f653553b724ff9d02bb45de9e733b37.sol,ERC20,contract ERC20 is IERC20 { using SafeMath for uint256; mapping (address => uint256) internal balances_; mapping (address => mapping (address => uint256)) private allowed_; uint256 private totalSupply_; function totalSupply() public view returns (uint256) { return totalSupply_; },0,"subgraph cluster_68_IERC20 {
label=""IERC20"";
""68_transfer"" [label=""transfer""];
""68_allowance"" [label=""allowance""];
""68_approve"" [label=""approve""];
""68_balanceOf"" [label=""balanceOf""];
""68_totalSupply"" [label=""totalSupply""];
""68_transferFrom"" [label=""transferFrom""];
}
"
0x5acbe8b82bec243f420214b35ed5b6cad2055f07.sol,MultiSigWallet,"contract MultiSigWallet { event Confirmation(address indexed sender, uint indexed transactionId); event Revocation(address indexed sender, uint indexed transactionId); event Submission(uint indexed transactionId); event Execution(uint indexed transactionId); event ExecutionFailure(uint indexed transactionId); event Deposit(address indexed sender, uint value); event OwnerAddition(address indexed owner); event OwnerRemoval(address indexed owner); event RequirementChange(uint required); uint constant public MAX_OWNER_COUNT = 50; mapping (uint => Transaction) public transactions; mapping (uint => mapping (address => bool)) public confirmations; mapping (address => bool) public isOwner; address[] public owners; uint public required; uint public transactionCount; struct Transaction { address destination; uint value; bytes data; bool executed; }",0,"subgraph cluster_1059_MultiSigWallet {
label=""MultiSigWallet"";
""1059_isConfirmed"" [label=""isConfirmed""];
""1059_getOwners"" [label=""getOwners""];
""1059_replaceOwner"" [label=""replaceOwner""];
""1059_submitTransaction"" [label=""submitTransaction""];
""1059_MultiSigWallet"" [label=""MultiSigWallet""];
""1059_confirmTransaction"" [label=""confirmTransaction""];
""1059_getTransactionCount"" [label=""getTransactionCount""];
""1059_getTransactionIds"" [label=""getTransactionIds""];
""1059_changeRequirement"" [label=""changeRequirement""];
""1059_executeTransaction"" [label=""executeTransaction""];
""1059_removeOwner"" [label=""removeOwner""];
""1059_revokeConfirmation"" [label=""revokeConfirmation""];
""1059_getConfirmationCount"" [label=""getConfirmationCount""];
""1059_addOwner"" [label=""addOwner""];
""1059_getConfirmations"" [label=""getConfirmations""];
""1059_addTransaction"" [label=""addTransaction""];
""1059_external_call"" [label=""external_call""];
""1059_fallback"" [label=""fallback""];
""1059_confirmTransaction"" -> ""1059_ownerExists"";
""1059_executeTransaction"" -> ""1059_isConfirmed"";
""1059_executeTransaction"" -> ""1059_confirmed"";
""1059_revokeConfirmation"" -> ""1059_confirmed"";
""1059_revokeConfirmation"" -> ""1059_notExecuted"";
""1059_executeTransaction"" -> ""1059_ownerExists"";
""1059_addOwner"" -> ""1059_onlyWallet"";
""1059_removeOwner"" -> ""1059_changeRequirement"";
""1059_MultiSigWallet"" -> ""1059_validRequirement"";
""1059_executeTransaction"" -> ""1059_notExecuted"";
""1059_confirmTransaction"" -> ""1059_executeTransaction"";
""1059_executeTransaction"" -> ""1059_external_call"";
""1059_submitTransaction"" -> ""1059_confirmTransaction"";
""1059_addOwner"" -> ""1059_validRequirement"";
""1059_addOwner"" -> ""1059_notNull"";
""1059_submitTransaction"" -> ""1059_addTransaction"";
""1059_addOwner"" -> ""1059_ownerDoesNotExist"";
""1059_changeRequirement"" -> ""1059_onlyWallet"";
""1059_changeRequirement"" -> ""1059_validRequirement"";
""1059_replaceOwner"" -> ""1059_ownerExists"";
""1059_revokeConfirmation"" -> ""1059_ownerExists"";
""1059_replaceOwner"" -> ""1059_ownerDoesNotExist"";
""1059_addTransaction"" -> ""1059_notNull"";
""1059_replaceOwner"" -> ""1059_onlyWallet"";
""1059_confirmTransaction"" -> ""1059_notConfirmed"";
""1059_removeOwner"" -> ""1059_onlyWallet"";
""1059_removeOwner"" -> ""1059_ownerExists"";
""1059_confirmTransaction"" -> ""1059_transactionExists"";
}
"
0x28f1135e43e61ebf303c8f1f9beef4f6a00dcb34.sol,XCPlugin,contract XCPlugin is XCPluginInterface { struct Admin { bool status; bytes32 platformName; bytes32 tokenSymbol; address account; string version; },0,"subgraph cluster_228_XCPluginInterface {
label=""XCPluginInterface"";
""228_getTokenSymbol"" [label=""getTokenSymbol""];
""228_countOfPublicKey"" [label=""countOfPublicKey""];
""228_stop"" [label=""stop""];
""228_getPlatformName"" [label=""getPlatformName""];
""228_publicKeys"" [label=""publicKeys""];
""228_existCaller"" [label=""existCaller""];
""228_addPublicKey"" [label=""addPublicKey""];
""228_verifyProposal"" [label=""verifyProposal""];
""228_deleteCaller"" [label=""deleteCaller""];
""228_existPublicKey"" [label=""existPublicKey""];
""228_getWeight"" [label=""getWeight""];
""228_deleteProposal"" [label=""deleteProposal""];
""228_deletePublicKey"" [label=""deletePublicKey""];
""228_getAdmin"" [label=""getAdmin""];
""228_getProposal"" [label=""getProposal""];
""228_getStatus"" [label=""getStatus""];
""228_getTrustPlatform"" [label=""getTrustPlatform""];
""228_getCallers"" [label=""getCallers""];
""228_addCaller"" [label=""addCaller""];
""228_voteProposal"" [label=""voteProposal""];
""228_start"" [label=""start""];
""228_setAdmin"" [label=""setAdmin""];
""228_commitProposal"" [label=""commitProposal""];
""228_setWeight"" [label=""setWeight""];
}
"
0x07ff08a437c7340744ca24f9fb2f1858ea46543e.sol,CryptoMinerToken2,contract CryptoMinerToken2 { modifier onlyBagholders { require(myTokens() > 0); _; },0,"subgraph cluster_1180_CryptoMinerToken2 {
label=""CryptoMinerToken2"";
""1180_myDividends"" [label=""myDividends""];
""1180_exit"" [label=""exit""];
""1180_sellPrice"" [label=""sellPrice""];
""1180_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1180_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1180_reinvest"" [label=""reinvest""];
""1180_withdraw"" [label=""withdraw""];
""1180_buy"" [label=""buy""];
""1180_sqrt"" [label=""sqrt""];
""1180_purchaseTokens"" [label=""purchaseTokens""];
""1180_sell"" [label=""sell""];
""1180_buyPrice"" [label=""buyPrice""];
""1180_myTokens"" [label=""myTokens""];
""1180_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1180_fallback"" [label=""fallback""];
""1180_totalSupply"" [label=""totalSupply""];
""1180_balanceOf"" [label=""balanceOf""];
""1180_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1180_dividendsOf"" [label=""dividendsOf""];
""1180_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1180_transfer"" [label=""transfer""];
""1180_transfer"" -> ""1180_tokensToEthereum_"";
""1180_reinvest"" -> ""1180_myDividends"";
""1180_transfer"" -> ""1180_myDividends"";
""1180_calculateTokensReceived"" -> ""1180_ethereumToTokens_"";
""1180_sell"" -> ""1180_tokensToEthereum_"";
""1180_buy"" -> ""1180_purchaseTokens"";
""1180_myTokens"" -> ""1180_balanceOf"";
""1180_transfer"" -> ""1180_withdraw"";
""1180_ethereumToTokens_"" -> ""1180_sqrt"";
""1180_exit"" -> ""1180_withdraw"";
""1180_purchaseTokens"" -> ""1180_ethereumToTokens_"";
""1180_purchaseTokens"" -> ""1180_buyPrice"";
""1180_sell"" -> ""1180_onlyBagholders"";
""1180_exit"" -> ""1180_sell"";
""1180_reinvest"" -> ""1180_onlyStronghands"";
""1180_sellPrice"" -> ""1180_tokensToEthereum_"";
""1180_calculateEthereumReceived"" -> ""1180_tokensToEthereum_"";
""1180_myDividends"" -> ""1180_dividendsOf"";
""1180_reinvest"" -> ""1180_purchaseTokens"";
""1180_withdraw"" -> ""1180_onlyStronghands"";
""1180_fallback"" -> ""1180_purchaseTokens"";
""1180_transfer"" -> ""1180_onlyBagholders"";
""1180_withdraw"" -> ""1180_myDividends"";
""1180_buyPrice"" -> ""1180_tokensToEthereum_"";
""1180_sell"" -> ""1180_buyPrice"";
}
"
0x4c0fbe1bb46612915e7967d2c3213cd4d87257ad.sol,ApisToken,"contract ApisToken is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; mapping (address => LockedInfo) public lockedWalletInfo; mapping (address => bool) public manoContracts; struct LockedInfo { uint timeLockUpEnd; bool sendLock; bool receiveLock; }",0,"subgraph cluster_1126_ApisToken {
label=""ApisToken"";
""1126_registerManoContract"" [label=""registerManoContract""];
""1126_walletUnlock"" [label=""walletUnlock""];
""1126_isWalletLocked_Receive"" [label=""isWalletLocked_Receive""];
""1126_isMyWalletLocked_Send"" [label=""isMyWalletLocked_Send""];
""1126_transferAndLockForever"" [label=""transferAndLockForever""];
""1126_transfer"" [label=""transfer""];
""1126_walletLockBothForever"" [label=""walletLockBothForever""];
""1126_isMyWalletLocked_Receive"" [label=""isMyWalletLocked_Receive""];
""1126_burn"" [label=""burn""];
""1126_walletLockBoth"" [label=""walletLockBoth""];
""1126_ApisToken"" [label=""ApisToken""];
""1126_transferAndLockUntil"" [label=""transferAndLockUntil""];
""1126_isWalletLocked_Send"" [label=""isWalletLocked_Send""];
""1126_walletLock"" [label=""walletLock""];
""1126_fallback"" [label=""fallback""];
""1126_walletLockBothForever"" -> ""1126_onlyOwner"";
""1126_registerManoContract"" -> ""1126_onlyOwner"";
""1126_transferAndLockForever"" -> ""1126_onlyOwner"";
""1126_walletLockBothForever"" -> ""1126_walletLock"";
""1126_walletLockBoth"" -> ""1126_walletLock"";
""1126_walletUnlock"" -> ""1126_walletLock"";
""1126_walletUnlock"" -> ""1126_onlyOwner"";
""1126_walletLock"" -> ""1126_onlyOwner"";
""1126_isMyWalletLocked_Receive"" -> ""1126_isWalletLocked_Receive"";
""1126_transfer"" -> ""1126_transfer"";
""1126_transferAndLockUntil"" -> ""1126_walletLockBoth"";
""1126_transferAndLockUntil"" -> ""1126_onlyOwner"";
""1126_transferAndLockForever"" -> ""1126_transfer"";
""1126_transferAndLockForever"" -> ""1126_walletLockBothForever"";
""1126_isMyWalletLocked_Send"" -> ""1126_isWalletLocked_Send"";
""1126_transferAndLockUntil"" -> ""1126_transfer"";
""1126_walletLockBoth"" -> ""1126_onlyOwner"";
}
"
0x365080610e03aa5c5693f6b2dd78ee792ee9a9cb.sol,ZIP,"contract ZIP is owned, token { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function ZIP( uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol ) token (initialSupply, tokenName, decimalUnits, tokenSymbol) {}",0,"subgraph cluster_600_ZIP {
label=""ZIP"";
""600__transfer"" [label=""_transfer""];
""600_ZIP"" [label=""ZIP""];
""600_buy"" [label=""buy""];
""600_freezeAccount"" [label=""freezeAccount""];
""600_sell"" [label=""sell""];
""600_setPrices"" [label=""setPrices""];
""600_mintToken"" [label=""mintToken""];
""600_ZIP"" -> ""600_token"";
""600_mintToken"" -> ""600_onlyOwner"";
""600_buy"" -> ""600__transfer"";
""600_sell"" -> ""600__transfer"";
""600_freezeAccount"" -> ""600_onlyOwner"";
""600_setPrices"" -> ""600_onlyOwner"";
}
"
0x1b9dcdcddd2d6ca699cad9505faa363e81145c6b.sol,BrinkToken,"contract BrinkToken is EIP20Interface { address owner = msg.sender; uint256 constant private MAX_UINT256 = 2**256 - 1; mapping (address => uint256) public balances; mapping (address => mapping (address => uint256)) public allowed; string public name; uint8 public decimals; string public symbol; uint price; function BrinkToken( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol ) public { balances[msg.sender] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",0,"subgraph cluster_296_BrinkToken {
label=""BrinkToken"";
""296_BrinkToken"" [label=""BrinkToken""];
""296_allowance"" [label=""allowance""];
""296_transfer"" [label=""transfer""];
""296_approve"" [label=""approve""];
""296_transferFrom"" [label=""transferFrom""];
""296_balanceOf"" [label=""balanceOf""];
}
"
0x5824d62f4f3c875c906f4e16d488bed05a87a2ea.sol,Crowdsale,contract Crowdsale is Ownable { using SafeMath for uint256; using SafeERC20 for EVOAIToken; struct State { string roundName; uint256 round; uint256 tokens; uint256 rate; },0,"subgraph cluster_1411_Crowdsale {
label=""Crowdsale"";
""1411_buyTokens"" [label=""buyTokens""];
""1411__processPurchase"" [label=""_processPurchase""];
""1411_endCrowdsale"" [label=""endCrowdsale""];
""1411_burnUnsoldTokens"" [label=""burnUnsoldTokens""];
""1411__deliverTokens"" [label=""_deliverTokens""];
""1411__forwardFunds"" [label=""_forwardFunds""];
""1411_changeRound"" [label=""changeRound""];
""1411_constructor"" [label=""constructor""];
""1411__validateUSDAmount"" [label=""_validateUSDAmount""];
""1411__getEthToUsdPrice"" [label=""_getEthToUsdPrice""];
""1411_fallback"" [label=""fallback""];
""1411__getTokenAmount"" [label=""_getTokenAmount""];
""1411__preValidatePurchase"" [label=""_preValidatePurchase""];
""1411_startCrowdsale"" [label=""startCrowdsale""];
""1411_changeFundsWallet"" [label=""changeFundsWallet""];
""1411__getEthUsdPrice"" [label=""_getEthUsdPrice""];
""1411_buyTokens"" -> ""1411__processPurchase"";
""1411_changeRound"" -> ""1411_onlyOwner"";
""1411_endCrowdsale"" -> ""1411_onlyOwner"";
""1411_burnUnsoldTokens"" -> ""1411_onlyOwner"";
""1411_changeFundsWallet"" -> ""1411_onlyOwner"";
""1411_buyTokens"" -> ""1411__forwardFunds"";
""1411_startCrowdsale"" -> ""1411_onlyOwner"";
""1411_fallback"" -> ""1411_buyTokens"";
""1411_buyTokens"" -> ""1411__preValidatePurchase"";
""1411__processPurchase"" -> ""1411__deliverTokens"";
""1411_buyTokens"" -> ""1411__getEthToUsdPrice"";
""1411_buyTokens"" -> ""1411__getTokenAmount"";
""1411_buyTokens"" -> ""1411__validateUSDAmount"";
""1411__getEthToUsdPrice"" -> ""1411__getEthUsdPrice"";
}
"
0x6eef402d5fa949aa6ed397b103799d5cdfbc9cd5.sol,Whitelist,"contract Whitelist is Pausable, Transferable { uint8 public constant version = 1; mapping (address => bool) private whitelistedMap; bool public isWhiteListDisabled; address[] private addedAdresses; address[] private removedAdresses; event Whitelisted(address indexed account, bool isWhitelisted); function whitelisted(address _address) public view returns(bool) { if (paused()) { return false; }",0,"subgraph cluster_989_Whitelist {
label=""Whitelist"";
""989_enableWhitelist"" [label=""enableWhitelist""];
""989_removedWhiteListAddressesLog"" [label=""removedWhiteListAddressesLog""];
""989_addAddress"" [label=""addAddress""];
""989_addedWhiteListAddressesLog"" [label=""addedWhiteListAddressesLog""];
""989_disableWhitelist"" [label=""disableWhitelist""];
""989_removeAddress"" [label=""removeAddress""];
""989_addWhitelistAddress"" [label=""addWhitelistAddress""];
""989_removeWhitelistAddress"" [label=""removeWhitelistAddress""];
""989_whitelisted"" [label=""whitelisted""];
""989_addAddress"" -> ""989_addWhitelistAddress"";
""989_removeAddress"" -> ""989_removeWhitelistAddress"";
""989_removeAddress"" -> ""989_onlyOwner"";
""989_whitelisted"" -> ""989_paused"";
""989_addAddress"" -> ""989_onlyOwner"";
""989_enableWhitelist"" -> ""989_onlyOwner"";
""989_disableWhitelist"" -> ""989_onlyOwner"";
}
"
0xdcf67546f2253c9c90c2b55447e1efecebcf83d6.sol,HorseyToken,"contract HorseyToken is EthorseHelpers,Pausable { event Claimed(address raceAddress, address eth_address, uint256 tokenId); event Feeding(uint256 tokenId); event ReceivedCarrot(uint256 tokenId, bytes32 newDna); event FeedingFailed(uint256 tokenId); event HorseyRenamed(uint256 tokenId, string newName); event HorseyFreed(uint256 tokenId); RoyalStablesInterface public stables; uint8 public carrotsMultiplier = 1; uint8 public rarityMultiplier = 1; uint256 public claimingFee = 0.000 ether; struct FeedingData { uint256 blockNumber; uint256 horsey; }",0,"subgraph cluster_2083_HorseyToken {
label=""HorseyToken"";
""2083_setRarityMultiplier"" [label=""setRarityMultiplier""];
""2083_constructor"" [label=""constructor""];
""2083_setCarrotsMultiplier"" [label=""setCarrotsMultiplier""];
""2083_claim"" [label=""claim""];
""2083_fallback"" [label=""fallback""];
""2083_setRenamingCosts"" [label=""setRenamingCosts""];
""2083_stopFeeding"" [label=""stopFeeding""];
""2083__generate_special_horsey"" [label=""_generate_special_horsey""];
""2083_addHorseIndex"" [label=""addHorseIndex""];
""2083__shiftRight"" [label=""_shiftRight""];
""2083_getCarrotCredits"" [label=""getCarrotCredits""];
""2083__makeSpecialId"" [label=""_makeSpecialId""];
""2083_getHorsey"" [label=""getHorsey""];
""2083_freeForCarrots"" [label=""freeForCarrots""];
""2083__increaseRarity"" [label=""_increaseRarity""];
""2083_addLegitRaceAddress"" [label=""addLegitRaceAddress""];
""2083__shiftLeft"" [label=""_shiftLeft""];
""2083__feed"" [label=""_feed""];
""2083_withdraw"" [label=""withdraw""];
""2083_renameHorsey"" [label=""renameHorsey""];
""2083_setClaimingCosts"" [label=""setClaimingCosts""];
""2083_can_claim"" [label=""can_claim""];
""2083_feed"" [label=""feed""];
""2083_getOwnedTokens"" [label=""getOwnedTokens""];
""2083_stopFeeding"" -> ""2083__feed"";
""2083_feed"" -> ""2083_whenNotPaused"";
""2083_setClaimingCosts"" -> ""2083_onlyOwner"";
""2083_addHorseIndex"" -> ""2083_onlyOwner"";
""2083_setCarrotsMultiplier"" -> ""2083_onlyOwner"";
""2083_claim"" -> ""2083_costs"";
""2083_setRarityMultiplier"" -> ""2083_onlyOwner"";
""2083_feed"" -> ""2083_carrotsMeetLevel"";
""2083_claim"" -> ""2083__generate_special_horsey"";
""2083_withdraw"" -> ""2083_onlyOwner"";
""2083_addLegitRaceAddress"" -> ""2083__addLegitRace"";
""2083_addLegitRaceAddress"" -> ""2083_onlyOwner"";
""2083_can_claim"" -> ""2083__isWinnerOf"";
""2083__generate_special_horsey"" -> ""2083__shiftRight"";
""2083_claim"" -> ""2083__isWinnerOf"";
""2083_renameHorsey"" -> ""2083_whenNotPaused"";
""2083__feed"" -> ""2083__increaseRarity"";
""2083_feed"" -> ""2083_noFeedingInProgress"";
""2083_freeForCarrots"" -> ""2083_onlyOwnerOf"";
""2083__generate_special_horsey"" -> ""2083__makeSpecialId"";
""2083_renameHorsey"" -> ""2083_costs"";
""2083_freeForCarrots"" -> ""2083_whenNotPaused"";
""2083_stopFeeding"" -> ""2083_feedingInProgress"";
""2083_constructor"" -> ""2083_constructor"";
""2083__increaseRarity"" -> ""2083__shiftLeft"";
""2083_setRenamingCosts"" -> ""2083_onlyOwner"";
""2083_addHorseIndex"" -> ""2083__addHorse"";
""2083_renameHorsey"" -> ""2083_onlyOwnerOf"";
""2083_claim"" -> ""2083_whenNotPaused"";
""2083_feed"" -> ""2083_onlyOwnerOf"";
}
"
0xdc0c33a4c10dfdca03e583107eb5520555c86f9e.sol,CryptoProfit,contract CryptoProfit { modifier onlyBagholders { require(myTokens() > 0); _; },0,"subgraph cluster_1182_CryptoProfit {
label=""CryptoProfit"";
""1182_transfer"" [label=""transfer""];
""1182_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1182_totalSupply"" [label=""totalSupply""];
""1182_sellPrice"" [label=""sellPrice""];
""1182_withdraw"" [label=""withdraw""];
""1182_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1182_fallback"" [label=""fallback""];
""1182_sqrt"" [label=""sqrt""];
""1182_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1182_buyPrice"" [label=""buyPrice""];
""1182_myTokens"" [label=""myTokens""];
""1182_balanceOf"" [label=""balanceOf""];
""1182_dividendsOf"" [label=""dividendsOf""];
""1182_sell"" [label=""sell""];
""1182_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1182_exit"" [label=""exit""];
""1182_buy"" [label=""buy""];
""1182_reinvest"" [label=""reinvest""];
""1182_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1182_myDividends"" [label=""myDividends""];
""1182_purchaseTokens"" [label=""purchaseTokens""];
""1182_sell"" -> ""1182_buyPrice"";
""1182_fallback"" -> ""1182_purchaseTokens"";
""1182_transfer"" -> ""1182_tokensToEthereum_"";
""1182_myTokens"" -> ""1182_balanceOf"";
""1182_purchaseTokens"" -> ""1182_buyPrice"";
""1182_transfer"" -> ""1182_onlyBagholders"";
""1182_sell"" -> ""1182_onlyBagholders"";
""1182_sellPrice"" -> ""1182_tokensToEthereum_"";
""1182_reinvest"" -> ""1182_onlyStronghands"";
""1182_ethereumToTokens_"" -> ""1182_sqrt"";
""1182_calculateTokensReceived"" -> ""1182_ethereumToTokens_"";
""1182_withdraw"" -> ""1182_myDividends"";
""1182_myDividends"" -> ""1182_dividendsOf"";
""1182_exit"" -> ""1182_sell"";
""1182_exit"" -> ""1182_withdraw"";
""1182_transfer"" -> ""1182_withdraw"";
""1182_purchaseTokens"" -> ""1182_ethereumToTokens_"";
""1182_buy"" -> ""1182_purchaseTokens"";
""1182_buyPrice"" -> ""1182_tokensToEthereum_"";
""1182_reinvest"" -> ""1182_purchaseTokens"";
""1182_withdraw"" -> ""1182_onlyStronghands"";
""1182_sell"" -> ""1182_tokensToEthereum_"";
""1182_reinvest"" -> ""1182_myDividends"";
""1182_transfer"" -> ""1182_myDividends"";
""1182_calculateEthereumReceived"" -> ""1182_tokensToEthereum_"";
}
"
0xc729c50c19d3b2f0049c9eec809b5cc175dbf489.sol,PDGToken,"contract PDGToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function PDGToken( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_361_PDGToken {
label=""PDGToken"";
""361__transfer"" [label=""_transfer""];
""361_transfer"" [label=""transfer""];
""361_PDGToken"" [label=""PDGToken""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_transferFrom"" [label=""transferFrom""];
""361_burnFrom"" [label=""burnFrom""];
""361_burn"" [label=""burn""];
""361_approve"" [label=""approve""];
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0x6f91e584f4c150951386b133e21aa769c8b7d060.sol,BigbomTokenSale,"contract BigbomTokenSale { address public admin; address public bigbomMultiSigWallet; BigbomToken public token; uint public raisedWei; bool public haltSale; uint public openSaleStartTime; uint public openSaleEndTime; BigbomContributorWhiteList public list; mapping(address=>uint) public participated; using SafeMath for uint; function BigbomTokenSale( address _admin, address _bigbomMultiSigWallet, BigbomContributorWhiteList _whilteListContract, uint _publicSaleStartTime, uint _publicSaleEndTime, BigbomToken _token) public { require (_publicSaleStartTime < _publicSaleEndTime); require (_admin != address(0x0)); require (_bigbomMultiSigWallet != address(0x0)); require (_whilteListContract != address(0x0)); require (_token != address(0x0)); admin = _admin; bigbomMultiSigWallet = _bigbomMultiSigWallet; list = _whilteListContract; openSaleStartTime = _publicSaleStartTime; openSaleEndTime = _publicSaleEndTime; token = _token; }",0,"subgraph cluster_2101_BigbomTokenSale {
label=""BigbomTokenSale"";
""2101_checkMaxCap"" [label=""checkMaxCap""];
""2101_debugBuy"" [label=""debugBuy""];
""2101_getBonus"" [label=""getBonus""];
""2101_saleStarted"" [label=""saleStarted""];
""2101_fallback"" [label=""fallback""];
""2101_contributorMinCap"" [label=""contributorMinCap""];
""2101_BigbomTokenSale"" [label=""BigbomTokenSale""];
""2101_finalizeSale"" [label=""finalizeSale""];
""2101_saleEnded"" [label=""saleEnded""];
""2101_setHaltSale"" [label=""setHaltSale""];
""2101_contributorMaxCap"" [label=""contributorMaxCap""];
""2101_sendETHToMultiSig"" [label=""sendETHToMultiSig""];
""2101_emergencyDrain"" [label=""emergencyDrain""];
""2101_buy"" [label=""buy""];
""2101_buy"" -> ""2101_saleStarted"";
""2101_fallback"" -> ""2101_buy"";
""2101_buy"" -> ""2101_contributorMinCap"";
""2101_emergencyDrain"" -> ""2101_saleEnded"";
""2101_finalizeSale"" -> ""2101_saleEnded"";
""2101_buy"" -> ""2101_checkMaxCap"";
""2101_debugBuy"" -> ""2101_sendETHToMultiSig"";
""2101_checkMaxCap"" -> ""2101_contributorMaxCap"";
""2101_emergencyDrain"" -> ""2101_sendETHToMultiSig"";
""2101_buy"" -> ""2101_sendETHToMultiSig"";
""2101_buy"" -> ""2101_getBonus"";
""2101_buy"" -> ""2101_saleEnded"";
}
"
0xed8a2697d1af8f8cad0f6c5b9962d868d4ed2a41.sol,HUMPresale,"contract HUMPresale is WhitelistedCrowdsale, IndividuallyCappedCrowdsale { uint256 public constant minimum = 100000000000000000; bool public isOnSale = false; mapping(address => uint256) public bonusTokens; uint256 public bonusPercent; address[] public contributors; event DistrubuteBonusTokens(address indexed sender); event Withdraw(address indexed _from, uint256 _amount); constructor ( uint256 _rate, uint256 _bonusPercent, address _wallet, HUMToken _token, uint256 _individualCapEther ) public Crowdsale(_rate, _wallet, _token) IndividuallyCappedCrowdsale(_individualCapEther.mul(10 ** 18)) { bonusPercent = _bonusPercent; }",0,"subgraph cluster_1730_HUMPresale {
label=""HUMPresale"";
""1730_closeSale"" [label=""closeSale""];
""1730_getContributors"" [label=""getContributors""];
""1730_openSale"" [label=""openSale""];
""1730__processPurchase"" [label=""_processPurchase""];
""1730_modifyTokenPrice"" [label=""modifyTokenPrice""];
""1730_withdrawToken"" [label=""withdrawToken""];
""1730__preValidatePurchase"" [label=""_preValidatePurchase""];
""1730_constructor"" [label=""constructor""];
""1730_distributeBonusTokens"" [label=""distributeBonusTokens""];
""1730_getBonusList"" [label=""getBonusList""];
""1730_distributeBonusTokensByList"" [label=""distributeBonusTokensByList""];
""1730_constructor"" -> ""1730_constructor"";
""1730_withdrawToken"" -> ""1730_onlyOwner"";
""1730_getContributors"" -> ""1730_onlyOwner"";
""1730_openSale"" -> ""1730_onlyOwner"";
""1730_getBonusList"" -> ""1730_onlyOwner"";
""1730_modifyTokenPrice"" -> ""1730_onlyOwner"";
""1730_closeSale"" -> ""1730_onlyOwner"";
""1730__preValidatePurchase"" -> ""1730__preValidatePurchase"";
""1730_distributeBonusTokens"" -> ""1730_onlyOwner"";
""1730__processPurchase"" -> ""1730__processPurchase"";
""1730_closeSale"" -> ""1730_withdrawToken"";
""1730__preValidatePurchase"" -> ""1730_isWhitelisted"";
""1730_distributeBonusTokensByList"" -> ""1730_onlyOwner"";
}
"
0xcdc687a449c43fcf87d439af9fa72ee9602e6b1f.sol,Ownable,"contract Ownable { address public owner; event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); constructor() public { owner = msg.sender; }",0,"subgraph cluster_157_Ownable {
label=""Ownable"";
""157_constructor"" [label=""constructor""];
""157__transferOwnership"" [label=""_transferOwnership""];
""157_transferOwnership"" [label=""transferOwnership""];
""157_transferOwnership"" -> ""157__transferOwnership"";
""157_transferOwnership"" -> ""157_onlyOwner"";
}
"
0xd8ba7164446ef71e89fdc0d94fa492732d371238.sol,HRAToken,"contract HRAToken is BasicToken { using SafeMath for uint256; string public name = ; string public symbol = ; uint8 public decimals = 10; uint256 public initialSupply = 30000000 * 10**10; uint256 public totalAllocatedTokens; uint256 public tokensAllocatedToCrowdFund; address public founderMultiSigAddress; address public crowdFundAddress; event ChangeFoundersWalletAddress(uint256 _blockTimeStamp, address indexed _foundersWalletAddress); modifier nonZeroAddress(address _to){ require(_to != 0x0); _; }",0,"subgraph cluster_525_HRAToken {
label=""HRAToken"";
""525_changeFounderMultiSigAddress"" [label=""changeFounderMultiSigAddress""];
""525_HRAToken"" [label=""HRAToken""];
""525_changeTotalSupply"" [label=""changeTotalSupply""];
""525_changeFounderMultiSigAddress"" -> ""525_nonZeroAddress"";
""525_changeFounderMultiSigAddress"" -> ""525_onlyFounders"";
""525_changeTotalSupply"" -> ""525_onlyCrowdfund"";
}
"
0x2c31dbd57a56d953be4396c42089c95f5bbf603d.sol,Redenom,"contract Redenom is ERC20Interface, Owned{ using SafeMath for uint; string public name; string public symbol; uint private _totalSupply; uint public decimals = 8; uint public round = 1; uint public epoch = 1; bool public frozen = false; uint[8] private dec = [0,0,0,0,0,0,0,0]; uint[9] private mul = [1,10,100,1000,10000,100000,1000000,10000000,100000000]; uint[9] private weight = [uint(0),0,0,0,0,5,10,30,55]; uint[9] private current_toadd = [uint(0),0,0,0,0,0,0,0,0]; uint public total_fund; uint public epoch_fund; uint public team_fund; uint public redenom_dao_fund; struct Account { uint balance; uint lastRound; uint lastVotedEpoch; uint bitmask; }",0,"subgraph cluster_2758_Redenom {
label=""Redenom"";
""2758_withdraw_dao_fund"" [label=""withdraw_dao_fund""];
""2758_balanceOf"" [label=""balanceOf""];
""2758_payCustom"" [label=""payCustom""];
""2758_swapProject"" [label=""swapProject""];
""2758_sqrt"" [label=""sqrt""];
""2758_pay055loyal"" [label=""pay055loyal""];
""2758_freeze_contract"" [label=""freeze_contract""];
""2758_fix_amount"" [label=""fix_amount""];
""2758_is_banned"" [label=""is_banned""];
""2758_projectActive"" [label=""projectActive""];
""2758_disableVoting"" [label=""disableVoting""];
""2758_get_rest"" [label=""get_rest""];
""2758_payout"" [label=""payout""];
""2758_renewDec"" [label=""renewDec""];
""2758_fallback"" [label=""fallback""];
""2758_StartNewEpoch"" [label=""StartNewEpoch""];
""2758_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""2758_addProject"" [label=""addProject""];
""2758_bitmask_check"" [label=""bitmask_check""];
""2758_pay055"" [label=""pay055""];
""2758_projectWeight"" [label=""projectWeight""];
""2758_bitmask_rm"" [label=""bitmask_rm""];
""2758_winningProject"" [label=""winningProject""];
""2758_updateAccount"" [label=""updateAccount""];
""2758_Redenom"" [label=""Redenom""];
""2758_vote"" [label=""vote""];
""2758_totalSupply"" [label=""totalSupply""];
""2758_current_mul"" [label=""current_mul""];
""2758_bitmask_add"" [label=""bitmask_add""];
""2758_enableVoting"" [label=""enableVoting""];
""2758_transfer"" [label=""transfer""];
""2758_withdraw_team_fund"" [label=""withdraw_team_fund""];
""2758_approve"" [label=""approve""];
""2758_transferFrom"" [label=""transferFrom""];
""2758_redenominate"" [label=""redenominate""];
""2758_ban_user"" [label=""ban_user""];
""2758_unban_user"" [label=""unban_user""];
""2758_unfreeze_contract"" [label=""unfreeze_contract""];
""2758_approveAndCall"" [label=""approveAndCall""];
""2758_allowance"" [label=""allowance""];
""2758_pay1"" [label=""pay1""];
""2758_payCustom"" -> ""2758_payout"";
""2758_updateAccount"" -> ""2758_bitmask_check"";
""2758_payout"" -> ""2758_updateAccount"";
""2758_payCustom"" -> ""2758_onlyOwner"";
""2758_transferFrom"" -> ""2758_bitmask_check"";
""2758_transfer"" -> ""2758_renewDec"";
""2758_fix_amount"" -> ""2758_current_mul"";
""2758_payout"" -> ""2758_fix_amount"";
""2758_withdraw_team_fund"" -> ""2758_onlyOwner"";
""2758_is_banned"" -> ""2758_onlyAdmin"";
""2758_swapProject"" -> ""2758_onlyAdmin"";
""2758_transfer"" -> ""2758_updateAccount"";
""2758_ban_user"" -> ""2758_onlyAdmin"";
""2758_updateAccount"" -> ""2758_renewDec"";
""2758_approveAndCall"" -> ""2758_bitmask_check"";
""2758_is_banned"" -> ""2758_bitmask_check"";
""2758_payout"" -> ""2758_current_mul"";
""2758_pay055"" -> ""2758_bitmask_add"";
""2758_bitmask_add"" -> ""2758_bitmask_check"";
""2758_pay055loyal"" -> ""2758_bitmask_check"";
""2758_pay055"" -> ""2758_onlyAdmin"";
""2758_vote"" -> ""2758_sqrt"";
""2758_pay1"" -> ""2758_onlyAdmin"";
""2758_unban_user"" -> ""2758_onlyAdmin"";
""2758_transfer"" -> ""2758_fix_amount"";
""2758_pay1"" -> ""2758_payout"";
""2758_transferAnyERC20Token"" -> ""2758_onlyOwner"";
""2758_enableVoting"" -> ""2758_onlyAdmin"";
""2758_approve"" -> ""2758_bitmask_check"";
""2758_pay055loyal"" -> ""2758_payout"";
""2758_payout"" -> ""2758_renewDec"";
""2758_pay1"" -> ""2758_bitmask_add"";
""2758_disableVoting"" -> ""2758_onlyAdmin"";
""2758_payout"" -> ""2758_bitmask_check"";
""2758_updateAccount"" -> ""2758_fix_amount"";
""2758_pay055loyal"" -> ""2758_onlyAdmin"";
""2758_addProject"" -> ""2758_onlyAdmin"";
""2758_transferFrom"" -> ""2758_updateAccount"";
""2758_vote"" -> ""2758_onlyVoter"";
""2758_bitmask_rm"" -> ""2758_bitmask_check"";
""2758_pay055"" -> ""2758_bitmask_check"";
""2758_unban_user"" -> ""2758_bitmask_rm"";
""2758_transferFrom"" -> ""2758_renewDec"";
""2758_withdraw_dao_fund"" -> ""2758_onlyOwner"";
""2758_get_rest"" -> ""2758_current_mul"";
""2758_StartNewEpoch"" -> ""2758_onlyAdmin"";
""2758_ban_user"" -> ""2758_bitmask_add"";
""2758_pay1"" -> ""2758_bitmask_check"";
""2758_transfer"" -> ""2758_bitmask_check"";
""2758_redenominate"" -> ""2758_onlyAdmin"";
""2758_updateAccount"" -> ""2758_current_mul"";
""2758_unfreeze_contract"" -> ""2758_onlyOwner"";
""2758_freeze_contract"" -> ""2758_onlyOwner"";
""2758_pay055"" -> ""2758_payout"";
}
"
0x33d19f9e3e3f083ec5c2425401cc53d96e79ac3a.sol,Test123Coin,"contract Test123Coin is ERC20, Ownable { using SafeMath for uint256; string public name; string public symbol; uint8 public decimals; uint256 internal initialSupply; uint256 internal totalSupply_; mapping(address => uint256) internal balances; mapping(address => bool) public frozen; mapping(address => mapping(address => uint256)) internal allowed; event Burn(address indexed owner, uint256 value); event Mint(uint256 value); event Freeze(address indexed holder); event Unfreeze(address indexed holder); modifier notFrozen(address _holder) { require(!frozen[_holder]); _; }",0,"subgraph cluster_986_Test123Coin {
label=""Test123Coin"";
""986_totalSupply"" [label=""totalSupply""];
""986_transfer"" [label=""transfer""];
""986_approve"" [label=""approve""];
""986_balanceOf"" [label=""balanceOf""];
""986__transfer"" [label=""_transfer""];
""986_burn_address"" [label=""burn_address""];
""986_isContract"" [label=""isContract""];
""986_fallback"" [label=""fallback""];
""986_mint"" [label=""mint""];
""986_allowance"" [label=""allowance""];
""986_freezeAccount"" [label=""freezeAccount""];
""986_constructor"" [label=""constructor""];
""986_transferFrom"" [label=""transferFrom""];
""986_burn"" [label=""burn""];
""986_sendwithgas"" [label=""sendwithgas""];
""986_unfreezeAccount"" [label=""unfreezeAccount""];
""986_mint"" -> ""986_onlyOwner"";
""986_transfer"" -> ""986_notFrozen"";
""986_unfreezeAccount"" -> ""986_onlyOwner"";
""986_sendwithgas"" -> ""986_notFrozen"";
""986_transferFrom"" -> ""986__transfer"";
""986_burn"" -> ""986_onlyOwner"";
""986_transferFrom"" -> ""986_notFrozen"";
""986_burn_address"" -> ""986_onlyOwner"";
""986_sendwithgas"" -> ""986_onlyOwner"";
""986_freezeAccount"" -> ""986_onlyOwner"";
}
"
0x6e8b54e99807e53b271dc02e02cc32f143ca108a.sol,ETHOS,contract ETHOS is ERC20 { address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; uint256 public totalSupply = 2200000000 * 10**8; function name() public constant returns (string) { return ; },0,"subgraph cluster_636_ETHOS {
label=""ETHOS"";
""636_symbol"" [label=""symbol""];
""636_transferOwnership"" [label=""transferOwnership""];
""636_ETHOS"" [label=""ETHOS""];
""636_distributeETHOS"" [label=""distributeETHOS""];
""636_balanceOf"" [label=""balanceOf""];
""636_allowance"" [label=""allowance""];
""636_transfer"" [label=""transfer""];
""636_getEthBalance"" [label=""getEthBalance""];
""636_decimals"" [label=""decimals""];
""636_transferFrom"" [label=""transferFrom""];
""636_name"" [label=""name""];
""636_approve"" [label=""approve""];
""636_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""636_finishDistribute"" [label=""finishDistribute""];
""636_distributeETHOS"" -> ""636_onlyOwner"";
""636_transferOwnership"" -> ""636_onlyOwner"";
""636_distributeETHOS"" -> ""636_canDistr"";
""636_finishDistribute"" -> ""636_onlyOwner"";
""636_transfer"" -> ""636_onlyPayloadSize"";
""636_transferFrom"" -> ""636_onlyPayloadSize"";
}
"
0xf3e693175db47264c99eca0f1c1c4a2c1aed3bd7.sol,TVToken,"contract TVToken is PausableToken, MintableToken { using AddressUtils for address; string public name = ; string public symbol = ; uint8 public decimals = 18; bytes4 constant TOKEN_RECEIVED = bytes4(keccak256()); constructor() public {}",0,"subgraph cluster_1008_TVToken {
label=""TVToken"";
""1008_safeTransfer"" [label=""safeTransfer""];
""1008_revertFunds"" [label=""revertFunds""];
""1008_constructor"" [label=""constructor""];
""1008_checkAndCallSafeTransfer"" [label=""checkAndCallSafeTransfer""];
""1008_safeTransferFrom"" [label=""safeTransferFrom""];
""1008_safeTransferFrom"" -> ""1008_checkAndCallSafeTransfer"";
""1008_safeTransfer"" -> ""1008_transfer"";
""1008_safeTransfer"" -> ""1008_checkAndCallSafeTransfer"";
""1008_safeTransferFrom"" -> ""1008_transferFrom"";
""1008_revertFunds"" -> ""1008_onlyOwner"";
}
"
0xeffdda4220a61bb62d7bff9d89615e05b3f156e8.sol,CommunityToken,"contract CommunityToken { using SafeMath for uint256; mapping(address => mapping(address => uint256)) allowed; mapping(address => uint256) balances; uint256 public totalSupply; uint256 public decimals; address public owner; bytes32 public symbol; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed spender, uint256 value); function CommunityToken() { totalSupply = 1000000; symbol = ; owner = 0xd21Ef1Fb710c17cA568380f20a3ceE46c254d315; balances[owner] = totalSupply; decimals = 0; }",0,"subgraph cluster_343_CommunityToken {
label=""CommunityToken"";
""343_transfer"" [label=""transfer""];
""343_allowance"" [label=""allowance""];
""343_fallback"" [label=""fallback""];
""343_balanceOf"" [label=""balanceOf""];
""343_transferFrom"" [label=""transferFrom""];
""343_approve"" [label=""approve""];
""343_CommunityToken"" [label=""CommunityToken""];
}
"
0x26c7bdd051318b48092390eabd1b69fce5080b25.sol,CETH,"contract CETH is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public blacklist; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 public totalSupply = 500000000e18; uint256 public totalDistributed = 350000000e18; uint256 public totalRemaining = totalSupply.sub(totalDistributed); uint256 public value = 4000e18; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_873_CETH {
label=""CETH"";
""873_approve"" [label=""approve""];
""873_CETH"" [label=""CETH""];
""873_transfer"" [label=""transfer""];
""873_getTokenBalance"" [label=""getTokenBalance""];
""873_withdraw"" [label=""withdraw""];
""873_transferOwnership"" [label=""transferOwnership""];
""873_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""873_transferFrom"" [label=""transferFrom""];
""873_allowance"" [label=""allowance""];
""873_fallback"" [label=""fallback""];
""873_balanceOf"" [label=""balanceOf""];
""873_finishDistribution"" [label=""finishDistribution""];
""873_burn"" [label=""burn""];
""873_getTokens"" [label=""getTokens""];
""873_distr"" [label=""distr""];
""873_withdrawForeignTokens"" -> ""873_onlyOwner"";
""873_getTokens"" -> ""873_canDistr"";
""873_withdraw"" -> ""873_onlyOwner"";
""873_transfer"" -> ""873_onlyPayloadSize"";
""873_burn"" -> ""873_onlyOwner"";
""873_fallback"" -> ""873_getTokens"";
""873_finishDistribution"" -> ""873_canDistr"";
""873_transferFrom"" -> ""873_onlyPayloadSize"";
""873_getTokens"" -> ""873_onlyWhitelist"";
""873_finishDistribution"" -> ""873_onlyOwner"";
""873_getTokens"" -> ""873_distr"";
""873_distr"" -> ""873_canDistr"";
""873_transferOwnership"" -> ""873_onlyOwner"";
}
"
0xa1ad52ff49fc70b7920b7d02483a58beb15d492b.sol,FoMo3Dlong,"contract FoMo3Dlong is modularLong { using SafeMath for *; using NameFilter for string; using F3DKeysCalcLong for uint256; address private owner = 0x0c204d9C438553a107B29cdE1d1e7954673b29B3; address private opAddress = 0x0c204d9C438553a107B29cdE1d1e7954673b29B3; address private comAddress = 0x24D160101C72c035287f772a8ac2b744a477F489; PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0x0f717ffff71e639636fcdd33727ee8c17c4724bf); string constant public name = ; string constant public symbol = ; uint256 private rndExtra_ = 0; uint256 constant private rndInit_ = 2 hours; uint256 constant private rndInc_ = 30 seconds; uint256 constant private rndMax_ = 2 hours; uint256 constant private comDropGap_ = 24 hours; uint256 constant private rndNTR_ = 168 hours; uint256 public airDropPot_; uint256 public airDropPot2_; uint256 public airDropTracker_ = 0; uint256 public airDropTracker2_ = 0; uint256 public rID_; uint256 public comReWards_; uint256 public comAirDrop_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => F3Ddatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => F3Ddatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => uint256) public inviteCount_; mapping (address => bool) public addrLock_; mapping (uint256 => F3Ddatasets.Round) public round_; mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping (uint256 => uint256[10]) public lastTen_; mapping (uint256 => uint256) public roundBetCount_; mapping (uint256 => mapping (uint256 =>uint256)) public comDropLastTime_; mapping (uint256 => F3Ddatasets.TeamFee) public fees_; mapping (uint256 => F3Ddatasets.PotSplit) public potSplit_; constructor() public { fees_[0] = F3Ddatasets.TeamFee(48,0); fees_[1] = F3Ddatasets.TeamFee(33,0); fees_[2] = F3Ddatasets.TeamFee(18,0); potSplit_[0] = F3Ddatasets.PotSplit(10,20); potSplit_[1] = F3Ddatasets.PotSplit(5,20); potSplit_[2] = F3Ddatasets.PotSplit(20,20); }",0,"subgraph cluster_5035_FoMo3Dlong {
label=""FoMo3Dlong"";
""5035_shareLastTen"" [label=""shareLastTen""];
""5035_constructor"" [label=""constructor""];
""5035_verifyTeam"" [label=""verifyTeam""];
""5035_receivePlayerInfo"" [label=""receivePlayerInfo""];
""5035_receivePlayerNameList"" [label=""receivePlayerNameList""];
""5035_withdrawEarnings"" [label=""withdrawEarnings""];
""5035_core"" [label=""core""];
""5035_reLoadXaddr"" [label=""reLoadXaddr""];
""5035_buyXname"" [label=""buyXname""];
""5035_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""5035_updateMasks"" [label=""updateMasks""];
""5035_fallback"" [label=""fallback""];
""5035_updateTimer"" [label=""updateTimer""];
""5035_distributeExternal"" [label=""distributeExternal""];
""5035_withdraw"" [label=""withdraw""];
""5035_distributeInternal"" [label=""distributeInternal""];
""5035_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""5035_reLoadXname"" [label=""reLoadXname""];
""5035_getPlayerVaults"" [label=""getPlayerVaults""];
""5035_reLoadCore"" [label=""reLoadCore""];
""5035_getTimeLeft"" [label=""getTimeLeft""];
""5035_updateGenVault"" [label=""updateGenVault""];
""5035_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""5035_buyXid"" [label=""buyXid""];
""5035_affsend"" [label=""affsend""];
""5035_determinePID"" [label=""determinePID""];
""5035_potSwap"" [label=""potSwap""];
""5035_air2"" [label=""air2""];
""5035_endRound"" [label=""endRound""];
""5035_registerNameXID"" [label=""registerNameXID""];
""5035_airdrop2"" [label=""airdrop2""];
""5035_registerNameXname"" [label=""registerNameXname""];
""5035_activate"" [label=""activate""];
""5035_airdrop"" [label=""airdrop""];
""5035_managePlayer"" [label=""managePlayer""];
""5035_iWantXKeys"" [label=""iWantXKeys""];
""5035_registerNameXaddr"" [label=""registerNameXaddr""];
""5035_buyCore"" [label=""buyCore""];
""5035_getBuyPrice"" [label=""getBuyPrice""];
""5035_comDrop"" [label=""comDrop""];
""5035_buyXaddr"" [label=""buyXaddr""];
""5035_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""5035_reLoadXid"" [label=""reLoadXid""];
""5035_endTx"" [label=""endTx""];
""5035_calcKeysReceived"" [label=""calcKeysReceived""];
""5035_reLoadXid"" -> ""5035_isHuman"";
""5035_withdrawEarnings"" -> ""5035_updateGenVault"";
""5035_withdraw"" -> ""5035_isHuman"";
""5035_buyXid"" -> ""5035_isActivated"";
""5035_withdraw"" -> ""5035_isActivated"";
""5035_reLoadXaddr"" -> ""5035_reLoadCore"";
""5035_reLoadCore"" -> ""5035_withdrawEarnings"";
""5035_core"" -> ""5035_air2"";
""5035_buyXaddr"" -> ""5035_isWithinLimits"";
""5035_reLoadXname"" -> ""5035_isHuman"";
""5035_buyXname"" -> ""5035_buyCore"";
""5035_fallback"" -> ""5035_isActivated"";
""5035_registerNameXname"" -> ""5035_isHuman"";
""5035_core"" -> ""5035_comDrop"";
""5035_getPlayerInfoByAddress"" -> ""5035_calcUnMaskedEarnings"";
""5035_core"" -> ""5035_updateTimer"";
""5035_reLoadXid"" -> ""5035_isActivated"";
""5035_buyCore"" -> ""5035_endRound"";
""5035_fallback"" -> ""5035_isHuman"";
""5035_reLoadXaddr"" -> ""5035_verifyTeam"";
""5035_getPlayerVaults"" -> ""5035_calcUnMaskedEarnings"";
""5035_air2"" -> ""5035_airdrop2"";
""5035_reLoadXname"" -> ""5035_reLoadCore"";
""5035_buyXname"" -> ""5035_isHuman"";
""5035_updateGenVault"" -> ""5035_calcUnMaskedEarnings"";
""5035_core"" -> ""5035_airdrop"";
""5035_buyXaddr"" -> ""5035_isActivated"";
""5035_endRound"" -> ""5035_shareLastTen"";
""5035_buyXaddr"" -> ""5035_isHuman"";
""5035_reLoadXaddr"" -> ""5035_isWithinLimits"";
""5035_managePlayer"" -> ""5035_updateGenVault"";
""5035_fallback"" -> ""5035_determinePID"";
""5035_getPlayerVaults"" -> ""5035_getPlayerVaultsHelper"";
""5035_withdraw"" -> ""5035_withdrawEarnings"";
""5035_buyXname"" -> ""5035_verifyTeam"";
""5035_core"" -> ""5035_endTx"";
""5035_reLoadXaddr"" -> ""5035_isActivated"";
""5035_fallback"" -> ""5035_buyCore"";
""5035_reLoadXname"" -> ""5035_verifyTeam"";
""5035_core"" -> ""5035_managePlayer"";
""5035_buyCore"" -> ""5035_core"";
""5035_distributeInternal"" -> ""5035_updateMasks"";
""5035_buyXname"" -> ""5035_isActivated"";
""5035_buyXname"" -> ""5035_determinePID"";
""5035_reLoadXaddr"" -> ""5035_isHuman"";
""5035_core"" -> ""5035_distributeInternal"";
""5035_buyXaddr"" -> ""5035_buyCore"";
""5035_fallback"" -> ""5035_isWithinLimits"";
""5035_buyXaddr"" -> ""5035_verifyTeam"";
""5035_buyXid"" -> ""5035_buyCore"";
""5035_buyXid"" -> ""5035_determinePID"";
""5035_reLoadXid"" -> ""5035_isWithinLimits"";
""5035_withdraw"" -> ""5035_endRound"";
""5035_buyXid"" -> ""5035_isWithinLimits"";
""5035_buyXid"" -> ""5035_verifyTeam"";
""5035_registerNameXID"" -> ""5035_isHuman"";
""5035_distributeExternal"" -> ""5035_affsend"";
""5035_buyXaddr"" -> ""5035_determinePID"";
""5035_reLoadXid"" -> ""5035_verifyTeam"";
""5035_reLoadXname"" -> ""5035_isActivated"";
""5035_reLoadCore"" -> ""5035_core"";
""5035_core"" -> ""5035_distributeExternal"";
""5035_registerNameXaddr"" -> ""5035_isHuman"";
""5035_buyXname"" -> ""5035_isWithinLimits"";
""5035_reLoadXid"" -> ""5035_reLoadCore"";
""5035_reLoadXname"" -> ""5035_isWithinLimits"";
""5035_reLoadCore"" -> ""5035_endRound"";
""5035_buyXid"" -> ""5035_isHuman"";
}
"
0x52089ba2c27523cf44826cfb92c711d3ef4df231.sol,OMIToken,"contract OMIToken is CappedToken, PausableToken { string public constant name = ; string public constant symbol = ; uint256 public decimals = 18; function OMIToken() public CappedToken(1000000000*1e18) {}",0,"subgraph cluster_920_OMIToken {
label=""OMIToken"";
""920_isOMITokenContract"" [label=""isOMITokenContract""];
""920_OMIToken"" [label=""OMIToken""];
""920_OMIToken"" -> ""920_constructor"";
}
"
0x25db2e489d21be85839992dfa0c17b500be02516.sol,KingdomEthGoldCoin,contract KingdomEthGoldCoin { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1377_KingdomEthGoldCoin {
label=""KingdomEthGoldCoin"";
""1377_totalSupply"" [label=""totalSupply""];
""1377_sqrt"" [label=""sqrt""];
""1377_buyPrice"" [label=""buyPrice""];
""1377_setAdministrator"" [label=""setAdministrator""];
""1377_exit"" [label=""exit""];
""1377_transfer"" [label=""transfer""];
""1377_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1377_withdraw"" [label=""withdraw""];
""1377_setStakingRequirement"" [label=""setStakingRequirement""];
""1377_sellPrice"" [label=""sellPrice""];
""1377_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1377_reinvest"" [label=""reinvest""];
""1377_sell"" [label=""sell""];
""1377_fallback"" [label=""fallback""];
""1377_balanceOf"" [label=""balanceOf""];
""1377_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1377_buy"" [label=""buy""];
""1377_totalUsers"" [label=""totalUsers""];
""1377_dividendsOf"" [label=""dividendsOf""];
""1377_disableInitialStage"" [label=""disableInitialStage""];
""1377_referralsOf"" [label=""referralsOf""];
""1377_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1377_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1377_KingdomETHCom"" [label=""KingdomETHCom""];
""1377_myTokens"" [label=""myTokens""];
""1377_purchaseTokens"" [label=""purchaseTokens""];
""1377_setName"" [label=""setName""];
""1377_setSymbol"" [label=""setSymbol""];
""1377_myDividends"" [label=""myDividends""];
""1377_buyPrice"" -> ""1377_tokensToEthereum_"";
""1377_myTokens"" -> ""1377_balanceOf"";
""1377_transfer"" -> ""1377_withdraw"";
""1377_fallback"" -> ""1377_purchaseTokens"";
""1377_calculateEthereumReceived"" -> ""1377_tokensToEthereum_"";
""1377_setSymbol"" -> ""1377_onlyAdministrator"";
""1377_withdraw"" -> ""1377_myDividends"";
""1377_sell"" -> ""1377_tokensToEthereum_"";
""1377_ethereumToTokens_"" -> ""1377_sqrt"";
""1377_exit"" -> ""1377_sell"";
""1377_sell"" -> ""1377_onlyBagholders"";
""1377_exit"" -> ""1377_withdraw"";
""1377_disableInitialStage"" -> ""1377_onlyAdministrator"";
""1377_purchaseTokens"" -> ""1377_antiEarlyWhale"";
""1377_calculateTokensReceived"" -> ""1377_ethereumToTokens_"";
""1377_reinvest"" -> ""1377_purchaseTokens"";
""1377_setAdministrator"" -> ""1377_onlyAdministrator"";
""1377_setName"" -> ""1377_onlyAdministrator"";
""1377_setStakingRequirement"" -> ""1377_onlyAdministrator"";
""1377_sellPrice"" -> ""1377_tokensToEthereum_"";
""1377_purchaseTokens"" -> ""1377_ethereumToTokens_"";
""1377_withdraw"" -> ""1377_onlyStronghands"";
""1377_transfer"" -> ""1377_myDividends"";
""1377_buy"" -> ""1377_purchaseTokens"";
""1377_reinvest"" -> ""1377_myDividends"";
""1377_myDividends"" -> ""1377_dividendsOf"";
""1377_transfer"" -> ""1377_onlyBagholders"";
""1377_reinvest"" -> ""1377_onlyStronghands"";
}
"
0x3a630495c7611b4da41bf133554374caa3963b75.sol,PornSceneToken,"contract PornSceneToken is ERC721 { event Birth(uint256 tokenId, string name, uint[] stars, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name, uint[] stars); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.001 ether; uint256 private constant PROMO_CREATION_LIMIT = 10000; uint256 private firstStepLimit = 0.053613 ether; uint256 private secondStepLimit = 0.564957 ether; mapping (uint256 => address) public sceneIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public sceneIndexToApproved; mapping (uint256 => uint256) private sceneIndexToPrice; address public ceoAddress; address public cooAddress; PornstarsInterface pornstarsContract; uint currentAwardWinner = 85; uint256 public promoCreatedCount; struct Scene { string name; uint[] stars; }",0,"subgraph cluster_1264_PornSceneToken {
label=""PornSceneToken"";
""1264_setCEO"" [label=""setCEO""];
""1264_tokensOfOwner"" [label=""tokensOfOwner""];
""1264_getScene"" [label=""getScene""];
""1264__payout"" [label=""_payout""];
""1264_ownerOf"" [label=""ownerOf""];
""1264_takeOwnership"" [label=""takeOwnership""];
""1264_totalSupply"" [label=""totalSupply""];
""1264_priceOf"" [label=""priceOf""];
""1264_PornSceneToken"" [label=""PornSceneToken""];
""1264_payout"" [label=""payout""];
""1264_implementsERC721"" [label=""implementsERC721""];
""1264__owns"" [label=""_owns""];
""1264_balanceOf"" [label=""balanceOf""];
""1264_symbol"" [label=""symbol""];
""1264__paySceneStarOwners"" [label=""_paySceneStarOwners""];
""1264__addressNotNull"" [label=""_addressNotNull""];
""1264_starsOf"" [label=""starsOf""];
""1264_approve"" [label=""approve""];
""1264_purchase"" [label=""purchase""];
""1264__isGoodAddress"" [label=""_isGoodAddress""];
""1264_transferFrom"" [label=""transferFrom""];
""1264__transfer"" [label=""_transfer""];
""1264__payAwardOwner"" [label=""_payAwardOwner""];
""1264__approved"" [label=""_approved""];
""1264_name"" [label=""name""];
""1264_setPornstarsContractAddress"" [label=""setPornstarsContractAddress""];
""1264_setCOO"" [label=""setCOO""];
""1264_transfer"" [label=""transfer""];
""1264__createScene"" [label=""_createScene""];
""1264_createContractScene"" [label=""createContractScene""];
""1264_createPromoScene"" [label=""createPromoScene""];
""1264_purchase"" -> ""1264__transfer"";
""1264_payout"" -> ""1264_onlyCLevel"";
""1264_payout"" -> ""1264__payout"";
""1264_setCEO"" -> ""1264_onlyCEO"";
""1264_takeOwnership"" -> ""1264__addressNotNull"";
""1264_createPromoScene"" -> ""1264__createScene"";
""1264__paySceneStarOwners"" -> ""1264__isGoodAddress"";
""1264_createContractScene"" -> ""1264_onlyCOO"";
""1264_takeOwnership"" -> ""1264__approved"";
""1264_tokensOfOwner"" -> ""1264_balanceOf"";
""1264_setCOO"" -> ""1264_onlyCEO"";
""1264_transferFrom"" -> ""1264__addressNotNull"";
""1264_approve"" -> ""1264__owns"";
""1264_purchase"" -> ""1264__paySceneStarOwners"";
""1264_setPornstarsContractAddress"" -> ""1264_onlyCOO"";
""1264_tokensOfOwner"" -> ""1264_totalSupply"";
""1264__payAwardOwner"" -> ""1264__isGoodAddress"";
""1264_transfer"" -> ""1264__owns"";
""1264_transfer"" -> ""1264__transfer"";
""1264_transferFrom"" -> ""1264__owns"";
""1264_createPromoScene"" -> ""1264_onlyCOO"";
""1264_transferFrom"" -> ""1264__approved"";
""1264_transferFrom"" -> ""1264__transfer"";
""1264_transfer"" -> ""1264__addressNotNull"";
""1264_purchase"" -> ""1264__addressNotNull"";
""1264__createScene"" -> ""1264__transfer"";
""1264_createContractScene"" -> ""1264__createScene"";
""1264_takeOwnership"" -> ""1264__transfer"";
""1264_purchase"" -> ""1264__payAwardOwner"";
}
"
0x33a615778ed8206c4462c67b2830220eea65bb92.sol,ZXCoin,"contract ZXCoin is StandardToken, Ownable { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public startDate1; uint256 public endDate1; uint256 public startDate2; uint256 public endDate2; uint256 public saleCap; address public tokenWallet; address public fundWallet; uint256 public weiRaised; event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount); event PreICOTokenPushed(address indexed buyer, uint256 amount); modifier uninitialized() { require(tokenWallet == 0x0); require(fundWallet == 0x0); _; }",0,"subgraph cluster_1035_ZXCoin {
label=""ZXCoin"";
""1035_setSaleCap"" [label=""setSaleCap""];
""1035_setPeriod"" [label=""setPeriod""];
""1035_saleActive"" [label=""saleActive""];
""1035_constructor"" [label=""constructor""];
""1035_sendForPreICO"" [label=""sendForPreICO""];
""1035_fallback"" [label=""fallback""];
""1035_finalize"" [label=""finalize""];
""1035_getCurrentTimestamp"" [label=""getCurrentTimestamp""];
""1035_getBounsByAmount"" [label=""getBounsByAmount""];
""1035_getBonusByTime"" [label=""getBonusByTime""];
""1035_buyTokens"" [label=""buyTokens""];
""1035_initialize"" [label=""initialize""];
""1035_saleActive"" -> ""1035_getCurrentTimestamp"";
""1035_setSaleCap"" -> ""1035_onlyOwner"";
""1035_fallback"" -> ""1035_buyTokens"";
""1035_sendForPreICO"" -> ""1035_onlyOwner"";
""1035_initialize"" -> ""1035_onlyOwner"";
""1035_initialize"" -> ""1035_uninitialized"";
""1035_setPeriod"" -> ""1035_onlyOwner"";
""1035_buyTokens"" -> ""1035_getCurrentTimestamp"";
""1035_buyTokens"" -> ""1035_getBonusByTime"";
""1035_buyTokens"" -> ""1035_saleActive"";
""1035_buyTokens"" -> ""1035_getBounsByAmount"";
""1035_finalize"" -> ""1035_onlyOwner"";
""1035_finalize"" -> ""1035_saleActive"";
}
"
0x733e2faada6bf25c162b1a1d17a23e223bb69b2b.sol,CWV,"contract CWV is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 public totalSupply = 10000000000e18; uint256 public totalDistributed = 3000000000e18; uint256 public constant MIN_CONTRIBUTION = 1 ether / 100; uint256 public tokensPerEth = 45000e18; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_944_CWV {
label=""CWV"";
""944_fallback"" [label=""fallback""];
""944_transfer"" [label=""transfer""];
""944_allowance"" [label=""allowance""];
""944_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""944_transferOwnership"" [label=""transferOwnership""];
""944_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""944_burn"" [label=""burn""];
""944_approve"" [label=""approve""];
""944_distr"" [label=""distr""];
""944_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""944_finishDistribution"" [label=""finishDistribution""];
""944_updateTokensPerEth"" [label=""updateTokensPerEth""];
""944_doAirdrop"" [label=""doAirdrop""];
""944_transferFrom"" [label=""transferFrom""];
""944_balanceOf"" [label=""balanceOf""];
""944_getTokenBalance"" [label=""getTokenBalance""];
""944_CWV"" [label=""CWV""];
""944_getTokens"" [label=""getTokens""];
""944_withdraw"" [label=""withdraw""];
""944_getTokens"" -> ""944_distr"";
""944_transfer"" -> ""944_onlyPayloadSize"";
""944_updateTokensPerEth"" -> ""944_onlyOwner"";
""944_finishDistribution"" -> ""944_onlyOwner"";
""944_adminClaimAirdropMultiple"" -> ""944_onlyOwner"";
""944_distr"" -> ""944_canDistr"";
""944_withdraw"" -> ""944_onlyOwner"";
""944_getTokens"" -> ""944_canDistr"";
""944_adminClaimAirdrop"" -> ""944_doAirdrop"";
""944_withdrawForeignTokens"" -> ""944_onlyOwner"";
""944_transferFrom"" -> ""944_onlyPayloadSize"";
""944_fallback"" -> ""944_getTokens"";
""944_CWV"" -> ""944_distr"";
""944_finishDistribution"" -> ""944_canDistr"";
""944_transferOwnership"" -> ""944_onlyOwner"";
""944_adminClaimAirdropMultiple"" -> ""944_doAirdrop"";
""944_adminClaimAirdrop"" -> ""944_onlyOwner"";
""944_burn"" -> ""944_onlyOwner"";
}
"
0xde31e0ef14c2348f85d95f3dffef632e1215e070.sol,iCashweb,"contract iCashweb is iCashwebToken { using iMath for uint256; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 _totalSupply; uint256 _rate; uint256 _totalMintSupply; uint256 _maxMintable; mapping (address => uint256) _balances; mapping (address => mapping (address => uint256)) _approvals; constructor (uint256 _price, uint256 _val) public { iOwner = msg.sender; _mintingStarted = true; _minted = false; _rate = _price; uint256 tokenVal = _val.mul(10 ** uint256(decimals)); _totalSupply = tokenVal.mul(2); _maxMintable = tokenVal; _balances[msg.sender] = tokenVal; emit Transfer(0x0, msg.sender, tokenVal); }",0,"subgraph cluster_939_iCashweb {
label=""iCashweb"";
""939_balanceOf"" [label=""balanceOf""];
""939_getMintingStatus"" [label=""getMintingStatus""];
""939_fallback"" [label=""fallback""];
""939_transferOwnership"" [label=""transferOwnership""];
""939_getMinted"" [label=""getMinted""];
""939_releaseMintTokens"" [label=""releaseMintTokens""];
""939_transferMintTokens"" [label=""transferMintTokens""];
""939_totalMintSupply"" [label=""totalMintSupply""];
""939_moveMintTokens"" [label=""moveMintTokens""];
""939_isOwner"" [label=""isOwner""];
""939_transferFrom"" [label=""transferFrom""];
""939_approve"" [label=""approve""];
""939_totalSupply"" [label=""totalSupply""];
""939_allowance"" [label=""allowance""];
""939_transfer"" [label=""transfer""];
""939_changeRate"" [label=""changeRate""];
""939_constructor"" [label=""constructor""];
""939_getRate"" [label=""getRate""];
""939_fallback"" -> ""939_mintingStarted"";
""939_releaseMintTokens"" -> ""939_notMinted"";
""939_transferMintTokens"" -> ""939_iOnlyOwner"";
""939_moveMintTokens"" -> ""939_iOnlyOwner"";
}
"
0x51c46c33064a9d7171dbdbfc65c3bf2d2ef688a4.sol,Exchange,contract Exchange { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1952_Exchange {
label=""Exchange"";
""1952_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1952_setAltFundAddress"" [label=""setAltFundAddress""];
""1952_totalSupply"" [label=""totalSupply""];
""1952_handleRef"" [label=""handleRef""];
""1952_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1952_purchaseTokens"" [label=""purchaseTokens""];
""1952_reinvest"" [label=""reinvest""];
""1952_sellPrice"" [label=""sellPrice""];
""1952_setBondFundAddress"" [label=""setBondFundAddress""];
""1952_setName"" [label=""setName""];
""1952_fallback"" [label=""fallback""];
""1952_setStakingRequirement"" [label=""setStakingRequirement""];
""1952_sell"" [label=""sell""];
""1952_exit"" [label=""exit""];
""1952_setSymbol"" [label=""setSymbol""];
""1952_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1952_balanceOf"" [label=""balanceOf""];
""1952_setFeeRates"" [label=""setFeeRates""];
""1952_sqrt"" [label=""sqrt""];
""1952_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1952_buy"" [label=""buy""];
""1952_etherToSendFund"" [label=""etherToSendFund""];
""1952_Exchange"" [label=""Exchange""];
""1952_withdraw"" [label=""withdraw""];
""1952_buyPrice"" [label=""buyPrice""];
""1952_purchaseInternal"" [label=""purchaseInternal""];
""1952_dividendsOf"" [label=""dividendsOf""];
""1952_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1952_payFund"" [label=""payFund""];
""1952_myDividends"" [label=""myDividends""];
""1952_transfer"" [label=""transfer""];
""1952_transferAndCall"" [label=""transferAndCall""];
""1952_setAdministrator"" [label=""setAdministrator""];
""1952_setCanAcceptTokens"" [label=""setCanAcceptTokens""];
""1952_myTokens"" [label=""myTokens""];
""1952_isContract"" [label=""isContract""];
""1952_transferAndCall"" -> ""1952_transfer"";
""1952_reinvest"" -> ""1952_purchaseTokens"";
""1952_setCanAcceptTokens"" -> ""1952_onlyAdministrator"";
""1952_transferAndCall"" -> ""1952_isContract"";
""1952_buyPrice"" -> ""1952_tokensToEthereum_"";
""1952_transfer"" -> ""1952_myDividends"";
""1952_exit"" -> ""1952_sell"";
""1952_myTokens"" -> ""1952_balanceOf"";
""1952_purchaseInternal"" -> ""1952_notContract"";
""1952_purchaseTokens"" -> ""1952_ethereumToTokens_"";
""1952_setStakingRequirement"" -> ""1952_onlyAdministrator"";
""1952_withdraw"" -> ""1952_myDividends"";
""1952_ethereumToTokens_"" -> ""1952_sqrt"";
""1952_setFeeRates"" -> ""1952_onlyAdministrator"";
""1952_reinvest"" -> ""1952_myDividends"";
""1952_transfer"" -> ""1952_onlyBagholders"";
""1952_fallback"" -> ""1952_purchaseTokens"";
""1952_purchaseTokens"" -> ""1952_handleRef"";
""1952_sell"" -> ""1952_onlyBagholders"";
""1952_purchaseInternal"" -> ""1952_purchaseTokens"";
""1952_setSymbol"" -> ""1952_onlyAdministrator"";
""1952_buy"" -> ""1952_purchaseTokens"";
""1952_setAltFundAddress"" -> ""1952_onlyAdministrator"";
""1952_payFund"" -> ""1952_onlyAdministrator"";
""1952_sell"" -> ""1952_handleRef"";
""1952_calculateEthereumReceived"" -> ""1952_tokensToEthereum_"";
""1952_exit"" -> ""1952_withdraw"";
""1952_calculateTokensReceived"" -> ""1952_ethereumToTokens_"";
""1952_myDividends"" -> ""1952_dividendsOf"";
""1952_reinvest"" -> ""1952_onlyStronghands"";
""1952_setAdministrator"" -> ""1952_onlyAdministrator"";
""1952_setName"" -> ""1952_onlyAdministrator"";
""1952_sellPrice"" -> ""1952_tokensToEthereum_"";
""1952_transfer"" -> ""1952_withdraw"";
""1952_withdraw"" -> ""1952_onlyStronghands"";
""1952_setBondFundAddress"" -> ""1952_onlyAdministrator"";
""1952_sell"" -> ""1952_tokensToEthereum_"";
}
"
0xf0ccca32cd300356629216eb301ec6649c7c6adb.sol,NIRXToken,"contract NIRXToken is MintableToken, BurnableToken, PausableToken { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; function NIRXToken() { }",0,"subgraph cluster_1584_NIRXToken {
label=""NIRXToken"";
""1584_transfer"" [label=""transfer""];
""1584_pause"" [label=""pause""];
""1584_setStopReceive"" [label=""setStopReceive""];
""1584_getStopReceive"" [label=""getStopReceive""];
""1584_burn"" [label=""burn""];
""1584_NIRXToken"" [label=""NIRXToken""];
""1584_mint"" [label=""mint""];
""1584_unpause"" [label=""unpause""];
""1584_transferAndCall"" [label=""transferAndCall""];
""1584_transferFrom"" [label=""transferFrom""];
""1584_unpause"" -> ""1584_whenPaused"";
""1584_transferFrom"" -> ""1584_whenNotPaused"";
""1584_burn"" -> ""1584_burn"";
""1584_mint"" -> ""1584_onlyOwner"";
""1584_transfer"" -> ""1584_whenNotPaused"";
""1584_pause"" -> ""1584_pause"";
""1584_mint"" -> ""1584_canMint"";
""1584_transfer"" -> ""1584_transfer"";
""1584_unpause"" -> ""1584_onlyOwner"";
""1584_pause"" -> ""1584_onlyOwner"";
""1584_transferFrom"" -> ""1584_transferFrom"";
""1584_mint"" -> ""1584_mint"";
""1584_unpause"" -> ""1584_unpause"";
""1584_pause"" -> ""1584_whenNotPaused"";
}
"
0x5581c0bc21a762e43d148b06d310f088b6cf97b3.sol,SE,"contract SE is StandardToken, BurnableToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals)); mapping(address => bool) public balanceLocked; uint public amountRaised; uint256 public buyPrice = 88; bool public crowdsaleClosed = true; bool public transferEnabled = true; constructor() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",0,"subgraph cluster_900_SE {
label=""SE"";
""900_fallback"" [label=""fallback""];
""900_transfer"" [label=""transfer""];
""900_constructor"" [label=""constructor""];
""900_unlock"" [label=""unlock""];
""900_setPrice"" [label=""setPrice""];
""900_transferFrom"" [label=""transferFrom""];
""900_closeBuy"" [label=""closeBuy""];
""900__transfer"" [label=""_transfer""];
""900_enableTransfer"" [label=""enableTransfer""];
""900_lock"" [label=""lock""];
""900_enableTransfer"" -> ""900_onlyOwner"";
""900_unlock"" -> ""900_onlyOwner"";
""900_lock"" -> ""900_onlyOwner"";
""900_transferFrom"" -> ""900_transferFrom"";
""900_transfer"" -> ""900_transfer"";
""900_setPrice"" -> ""900_onlyOwner"";
""900_closeBuy"" -> ""900_onlyOwner"";
""900_fallback"" -> ""900__transfer"";
}
"
0xe0a8a9b7c821d9bbd66b826129d4cf1b219ebb3a.sol,CryptoRides,"contract CryptoRides is ERC721 { event Created(uint256 tokenId, string name, bytes7 plateNumber, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name, bytes7 plateNumber); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.001 ether; uint256 private constant PROMO_CREATION_LIMIT = 5000; uint256 private firstStepLimit = 0.053613 ether; uint256 private secondStepLimit = 0.564957 ether; mapping (uint256 => address) public tokenIdToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public tokenIdToApproved; mapping (uint256 => uint256) private tokenIdToPrice; address public ceoAddress; address public cooAddress; uint256 public promoCreatedCount; struct Ride { string name; bytes7 plateNumber; }",0,"subgraph cluster_1008_CryptoRides {
label=""CryptoRides"";
""1008__transfer"" [label=""_transfer""];
""1008_symbol"" [label=""symbol""];
""1008__owns"" [label=""_owns""];
""1008_takeOwnership"" [label=""takeOwnership""];
""1008__createRide"" [label=""_createRide""];
""1008_balanceOf"" [label=""balanceOf""];
""1008_implementsERC721"" [label=""implementsERC721""];
""1008_approve"" [label=""approve""];
""1008__addressNotNull"" [label=""_addressNotNull""];
""1008_createContractRide"" [label=""createContractRide""];
""1008__payout"" [label=""_payout""];
""1008_setCOO"" [label=""setCOO""];
""1008_transferFrom"" [label=""transferFrom""];
""1008_totalSupply"" [label=""totalSupply""];
""1008_priceOf"" [label=""priceOf""];
""1008_setCEO"" [label=""setCEO""];
""1008_payout"" [label=""payout""];
""1008_getRide"" [label=""getRide""];
""1008_ownerOf"" [label=""ownerOf""];
""1008_purchase"" [label=""purchase""];
""1008_transfer"" [label=""transfer""];
""1008_tokensOfOwner"" [label=""tokensOfOwner""];
""1008__approved"" [label=""_approved""];
""1008_name"" [label=""name""];
""1008_createPromoRide"" [label=""createPromoRide""];
""1008_CryptoRides"" [label=""CryptoRides""];
""1008_approve"" -> ""1008__owns"";
""1008__createRide"" -> ""1008__transfer"";
""1008_transfer"" -> ""1008__owns"";
""1008_takeOwnership"" -> ""1008__transfer"";
""1008_createPromoRide"" -> ""1008_onlyCOO"";
""1008_transferFrom"" -> ""1008__owns"";
""1008_tokensOfOwner"" -> ""1008_balanceOf"";
""1008_transfer"" -> ""1008__transfer"";
""1008_createContractRide"" -> ""1008__createRide"";
""1008_payout"" -> ""1008_onlyCLevel"";
""1008_transferFrom"" -> ""1008__addressNotNull"";
""1008_transfer"" -> ""1008__addressNotNull"";
""1008_createPromoRide"" -> ""1008__createRide"";
""1008_purchase"" -> ""1008__addressNotNull"";
""1008_createContractRide"" -> ""1008_onlyCOO"";
""1008_takeOwnership"" -> ""1008__addressNotNull"";
""1008_takeOwnership"" -> ""1008__approved"";
""1008_tokensOfOwner"" -> ""1008_totalSupply"";
""1008_setCEO"" -> ""1008_onlyCEO"";
""1008_payout"" -> ""1008__payout"";
""1008_setCOO"" -> ""1008_onlyCEO"";
""1008_transferFrom"" -> ""1008__approved"";
""1008_transferFrom"" -> ""1008__transfer"";
""1008_purchase"" -> ""1008__transfer"";
}
"
0x720df200439f47fd4185f76a0a131a322d61ddd3.sol,LIIRA,contract LIIRA { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 2; uint public _totalSupply = 10000000000000; uint256 public RATE = 1; bool public isMinting = false; string public constant generatedBy = ; using SafeMath for uint256; address public owner; modifier onlyOwner() { if (msg.sender != owner) { throw; },0,"subgraph cluster_516_LIIRA {
label=""LIIRA"";
""516_approve"" [label=""approve""];
""516_burnTokens"" [label=""burnTokens""];
""516_constructor"" [label=""constructor""];
""516_transfer"" [label=""transfer""];
""516_changeCrowdsaleRate"" [label=""changeCrowdsaleRate""];
""516_fallback"" [label=""fallback""];
""516_balanceOf"" [label=""balanceOf""];
""516_endCrowdsale"" [label=""endCrowdsale""];
""516_transferFrom"" [label=""transferFrom""];
""516_totalSupply"" [label=""totalSupply""];
""516_createTokens"" [label=""createTokens""];
""516_allowance"" [label=""allowance""];
""516_fallback"" -> ""516_createTokens"";
""516_endCrowdsale"" -> ""516_onlyOwner"";
""516_changeCrowdsaleRate"" -> ""516_onlyOwner"";
""516_burnTokens"" -> ""516_onlyOwner"";
}
"
0x2896fc8a63e3453d7edf60bbef85dc336fbf982b.sol,DXBCToken,contract DXBCToken is StandardToken { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 6; uint256 public constant total= 200000000 * (10 ** uint256(decimals)); function DXBCToken(address wallet) { balances[wallet] = total; totalSupply = total; },0,"subgraph cluster_499_DXBCToken {
label=""DXBCToken"";
""499_DXBCToken"" [label=""DXBCToken""];
}
"
0xed81af91c38ac12b0464bf1ca4b887469f7adaec.sol,DataManager,contract DataManager is Pausable { address public dataCentreAddr; function DataManager(address _dataCentreAddr) { dataCentreAddr = _dataCentreAddr; },0,"subgraph cluster_1205_DataManager {
label=""DataManager"";
""1205_balanceOf"" [label=""balanceOf""];
""1205_DataManager"" [label=""DataManager""];
""1205_totalSupply"" [label=""totalSupply""];
""1205__setBalanceOf"" [label=""_setBalanceOf""];
""1205_allowance"" [label=""allowance""];
""1205__setTotalSupply"" [label=""_setTotalSupply""];
""1205__setAllowance"" [label=""_setAllowance""];
""1205__setAllowance"" -> ""1205_balanceOf"";
}
"
0x183891e9cfaee0c9e2dbcdfefe1505626c696951.sol,BaseCrowdsale,"contract BaseCrowdsale { using SafeMath for uint256; using SafeERC20 for CosquareToken; CosquareToken public token; uint256 public tokensSold; event TokensPurchaseLog(string purchaseType, address indexed beneficiary, uint256 value, uint256 tokens, uint256 bonuses); constructor(CosquareToken _token) public { require(_token != address(0), ); token = _token; }",0,"subgraph cluster_1232_BaseCrowdsale {
label=""BaseCrowdsale"";
""1232__deliverTokens"" [label=""_deliverTokens""];
""1232__processPurchase"" [label=""_processPurchase""];
""1232_fallback"" [label=""fallback""];
""1232__buyTokens"" [label=""_buyTokens""];
""1232_constructor"" [label=""constructor""];
""1232__getTokensAmount"" [label=""_getTokensAmount""];
""1232__preValidatePurchase"" [label=""_preValidatePurchase""];
""1232_buyTokens"" [label=""buyTokens""];
""1232__postPurchaseUpdate"" [label=""_postPurchaseUpdate""];
""1232__processPurchase"" -> ""1232__deliverTokens"";
""1232_buyTokens"" -> ""1232__buyTokens"";
""1232__buyTokens"" -> ""1232__processPurchase"";
""1232_fallback"" -> ""1232__buyTokens"";
""1232__buyTokens"" -> ""1232__postPurchaseUpdate"";
""1232__buyTokens"" -> ""1232__getTokensAmount"";
""1232__buyTokens"" -> ""1232__preValidatePurchase"";
}
"
0x3793ea257ad168ef1b4d0ed56464f9b0ab388c12.sol,CryptoEmojis,contract CryptoEmojis { using SafeMath for uint256; address dev; string constant private tokenName = ; string constant private tokenSymbol = ; struct Emoji { string codepoints; string name; uint256 price; address owner; bool exists; },0,"subgraph cluster_433_CryptoEmojis {
label=""CryptoEmojis"";
""433_usernameOf"" [label=""usernameOf""];
""433_setUsername"" [label=""setUsername""];
""433_symbol"" [label=""symbol""];
""433_totalSupply"" [label=""totalSupply""];
""433_balanceOf"" [label=""balanceOf""];
""433_nameOf"" [label=""nameOf""];
""433_codepointsOf"" [label=""codepointsOf""];
""433_withdraw"" [label=""withdraw""];
""433_edit"" [label=""edit""];
""433_setPrice"" [label=""setPrice""];
""433_buy"" [label=""buy""];
""433_name"" [label=""name""];
""433_ownerOf"" [label=""ownerOf""];
""433_priceOf"" [label=""priceOf""];
""433_create"" [label=""create""];
""433_CryptoEmojis"" [label=""CryptoEmojis""];
""433_edit"" -> ""433_onlyDev"";
""433_withdraw"" -> ""433_onlyDev"";
""433_create"" -> ""433_onlyDev"";
}
"
0x5cb92b06ca0226e0a2c5fc8ee23e9cc66b1a4e11.sol,ETToken,"contract ETToken is Owned, StandardToken { using SafeMath for uint; string public name = ; string public symbol = ; uint8 public decimals = 18; address public beneficiary; address public oracle; address public heroContract; modifier onlyOracle { require(msg.sender == oracle); _; }",0,"subgraph cluster_1126_ETToken {
label=""ETToken"";
""1126_setCanAcceptTokens"" [label=""setCanAcceptTokens""];
""1126_rewardTokensFloor"" [label=""rewardTokensFloor""];
""1126_fallback"" [label=""fallback""];
""1126_payoutDividends"" [label=""payoutDividends""];
""1126_setIsMinter"" [label=""setIsMinter""];
""1126_burn"" [label=""burn""];
""1126__acceptDividends"" [label=""_acceptDividends""];
""1126_transferWithParams"" [label=""transferWithParams""];
""1126__mintTokens"" [label=""_mintTokens""];
""1126_setOracle"" [label=""setOracle""];
""1126_acceptDividends"" [label=""acceptDividends""];
""1126_authorizeFloor"" [label=""authorizeFloor""];
""1126__postTransferHook"" [label=""_postTransferHook""];
""1126_rewardTokens"" [label=""rewardTokens""];
""1126_setHeroContract"" [label=""setHeroContract""];
""1126__invokeTokenRecipient"" [label=""_invokeTokenRecipient""];
""1126_ETToken"" [label=""ETToken""];
""1126_accountAuth"" [label=""accountAuth""];
""1126_setBeneficiary"" [label=""setBeneficiary""];
""1126_authorizeFloor"" -> ""1126_onlyOwner"";
""1126_setHeroContract"" -> ""1126_onlyOwner"";
""1126_acceptDividends"" -> ""1126__acceptDividends"";
""1126_setCanAcceptTokens"" -> ""1126_onlyOwner"";
""1126_transferWithParams"" -> ""1126__invokeTokenRecipient"";
""1126__postTransferHook"" -> ""1126__invokeTokenRecipient"";
""1126_rewardTokens"" -> ""1126__mintTokens"";
""1126_rewardTokensFloor"" -> ""1126__mintTokens"";
""1126_payoutDividends"" -> ""1126_onlyOracle"";
""1126_setOracle"" -> ""1126_onlyOwner"";
""1126_rewardTokens"" -> ""1126_onlyMinters"";
""1126_setBeneficiary"" -> ""1126_onlyOwner"";
""1126_transferWithParams"" -> ""1126_onlyPayloadSize"";
""1126_setIsMinter"" -> ""1126_onlyOwner"";
}
"
0xf3cfb35afdbffea20892488ba7f1574adda81b9d.sol,Proof,contract Proof { modifier onlyBagholders { require(myTokens() > 0); _; },0,"subgraph cluster_1265_Proof {
label=""Proof"";
""1265_withdraw"" [label=""withdraw""];
""1265_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1265_transferAndCall"" [label=""transferAndCall""];
""1265_sell"" [label=""sell""];
""1265_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1265_sellPrice"" [label=""sellPrice""];
""1265_buy"" [label=""buy""];
""1265_fallback"" [label=""fallback""];
""1265_transfer"" [label=""transfer""];
""1265_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1265_isContract"" [label=""isContract""];
""1265_reinvest"" [label=""reinvest""];
""1265_dividendsOf"" [label=""dividendsOf""];
""1265_myTokens"" [label=""myTokens""];
""1265_sqrt"" [label=""sqrt""];
""1265_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1265_purchaseTokens"" [label=""purchaseTokens""];
""1265_exit"" [label=""exit""];
""1265_buyPrice"" [label=""buyPrice""];
""1265_myDividends"" [label=""myDividends""];
""1265_balanceOf"" [label=""balanceOf""];
""1265_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1265_purchaseInternal"" [label=""purchaseInternal""];
""1265_totalSupply"" [label=""totalSupply""];
""1265_myTokens"" -> ""1265_balanceOf"";
""1265_exit"" -> ""1265_sell"";
""1265_ethereumToTokens_"" -> ""1265_sqrt"";
""1265_transfer"" -> ""1265_myDividends"";
""1265_purchaseTokens"" -> ""1265_ethereumToTokens_"";
""1265_fallback"" -> ""1265_purchaseInternal"";
""1265_calculateTokensReceived"" -> ""1265_ethereumToTokens_"";
""1265_sellPrice"" -> ""1265_tokensToEthereum_"";
""1265_withdraw"" -> ""1265_myDividends"";
""1265_reinvest"" -> ""1265_myDividends"";
""1265_purchaseTokens"" -> ""1265_buyPrice"";
""1265_buyPrice"" -> ""1265_tokensToEthereum_"";
""1265_sell"" -> ""1265_buyPrice"";
""1265_reinvest"" -> ""1265_purchaseTokens"";
""1265_sell"" -> ""1265_onlyBagholders"";
""1265_withdraw"" -> ""1265_onlyStronghands"";
""1265_purchaseInternal"" -> ""1265_notContract"";
""1265_reinvest"" -> ""1265_onlyStronghands"";
""1265_transfer"" -> ""1265_onlyBagholders"";
""1265_transferAndCall"" -> ""1265_isContract"";
""1265_buy"" -> ""1265_purchaseInternal"";
""1265_purchaseInternal"" -> ""1265_purchaseTokens"";
""1265_transfer"" -> ""1265_withdraw"";
""1265_calculateEthereumReceived"" -> ""1265_tokensToEthereum_"";
""1265_sell"" -> ""1265_tokensToEthereum_"";
""1265_transferAndCall"" -> ""1265_transfer"";
""1265_exit"" -> ""1265_withdraw"";
""1265_myDividends"" -> ""1265_dividendsOf"";
}
"
0x51db5ad35c671a87207d88fc11d593ac0c8415bd.sol,MoedaToken,"contract MoedaToken is StandardToken, Ownable, HasNoTokens { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; MigrationAgent public migrationAgent; uint256 constant AGENT_MAGIC_ID = 0x6e538c0d750418aae4131a91e5a20363; uint256 public totalMigrated; uint constant TOKEN_MULTIPLIER = 10**uint256(decimals); uint public constant MAX_TOKENS = 20000000 * TOKEN_MULTIPLIER; bool public mintingFinished; event LogMigration(address indexed spender, address grantee, uint256 amount); event LogCreation(address indexed donor, uint256 tokensReceived); event LogDestruction(address indexed sender, uint256 amount); event LogMintingFinished(); modifier afterMinting() { require(mintingFinished); _; }",0,"subgraph cluster_842_MoedaToken {
label=""MoedaToken"";
""842_burn"" [label=""burn""];
""842_issueTokens"" [label=""issueTokens""];
""842_mint"" [label=""mint""];
""842_transfer"" [label=""transfer""];
""842_transferFrom"" [label=""transferFrom""];
""842_migrate"" [label=""migrate""];
""842_MoedaToken"" [label=""MoedaToken""];
""842_unlock"" [label=""unlock""];
""842_isContract"" [label=""isContract""];
""842_setMigrationAgent"" [label=""setMigrationAgent""];
""842_mint"" -> ""842_canMint"";
""842_transfer"" -> ""842_canTransfer"";
""842_transferFrom"" -> ""842_canTransfer"";
""842_unlock"" -> ""842_canMint"";
""842_unlock"" -> ""842_onlyOwner"";
""842_MoedaToken"" -> ""842_issueTokens"";
""842_transferFrom"" -> ""842_transferFrom"";
""842_issueTokens"" -> ""842_mint"";
""842_setMigrationAgent"" -> ""842_onlyOwner"";
""842_transfer"" -> ""842_transfer"";
""842_setMigrationAgent"" -> ""842_afterMinting"";
""842_setMigrationAgent"" -> ""842_isContract"";
""842_migrate"" -> ""842_afterMinting"";
}
"
0x6560a9b6436e129cf835ab9da96201207facd4f8.sol,KratosToken,"contract KratosToken is StandardBurnableToken, PausableToken { string constant public name = ; string constant public symbol = ; uint8 constant public decimals = 18; uint256 public timelockTimestamp = 0; mapping(address => uint256) public timelock; constructor(uint256 _totalSupply) public { totalSupply_ = _totalSupply; balances[msg.sender] = _totalSupply; }",0,"subgraph cluster_1146_KratosToken {
label=""KratosToken"";
""1146_addTimelock"" [label=""addTimelock""];
""1146_decreaseApproval"" [label=""decreaseApproval""];
""1146_increaseApproval"" [label=""increaseApproval""];
""1146__addTimelock"" [label=""_addTimelock""];
""1146_enableTimelock"" [label=""enableTimelock""];
""1146_transferFrom"" [label=""transferFrom""];
""1146_disableTimelock"" [label=""disableTimelock""];
""1146_constructor"" [label=""constructor""];
""1146_approve"" [label=""approve""];
""1146_transfer"" [label=""transfer""];
""1146_removeTimelock"" [label=""removeTimelock""];
""1146_approve"" -> ""1146_approve"";
""1146_increaseApproval"" -> ""1146_whenNotTimelocked"";
""1146_enableTimelock"" -> ""1146_onlyOwner"";
""1146_disableTimelock"" -> ""1146_onlyOwner"";
""1146_addTimelock"" -> ""1146_onlyOwner"";
""1146_addTimelock"" -> ""1146__addTimelock"";
""1146_transferFrom"" -> ""1146__addTimelock"";
""1146_transfer"" -> ""1146__addTimelock"";
""1146_approve"" -> ""1146_whenNotTimelocked"";
""1146_transferFrom"" -> ""1146_whenNotTimelocked"";
""1146_increaseApproval"" -> ""1146_increaseApproval"";
""1146_transfer"" -> ""1146_whenNotTimelocked"";
""1146_removeTimelock"" -> ""1146_whenTimelocked"";
""1146_removeTimelock"" -> ""1146_onlyOwner"";
""1146_decreaseApproval"" -> ""1146_whenNotTimelocked"";
""1146__addTimelock"" -> ""1146_whenNotTimelocked"";
""1146_decreaseApproval"" -> ""1146_decreaseApproval"";
""1146_transfer"" -> ""1146_transfer"";
""1146_transferFrom"" -> ""1146_transferFrom"";
}
"
0x1b9743f556d65e757c4c650b4555baf354cb8bd3.sol,MiniMeToken,"contract MiniMeToken is Controlled, Ownable { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; }",0,"subgraph cluster_1077_MiniMeToken {
label=""MiniMeToken"";
""1077_createCloneToken"" [label=""createCloneToken""];
""1077_totalSupplyAt"" [label=""totalSupplyAt""];
""1077_updateValueAtNow"" [label=""updateValueAtNow""];
""1077_balanceOf"" [label=""balanceOf""];
""1077_fallback"" [label=""fallback""];
""1077_destroyTokens"" [label=""destroyTokens""];
""1077_min"" [label=""min""];
""1077_doTransfer"" [label=""doTransfer""];
""1077_enableTransfers"" [label=""enableTransfers""];
""1077_transfer"" [label=""transfer""];
""1077_approveAndCall"" [label=""approveAndCall""];
""1077_isContract"" [label=""isContract""];
""1077_generateTokens"" [label=""generateTokens""];
""1077_totalSupply"" [label=""totalSupply""];
""1077_transferFrom"" [label=""transferFrom""];
""1077_allowance"" [label=""allowance""];
""1077_MiniMeToken"" [label=""MiniMeToken""];
""1077_getValueAt"" [label=""getValueAt""];
""1077_approve"" [label=""approve""];
""1077_balanceOfAt"" [label=""balanceOfAt""];
""1077_enableTransfers"" -> ""1077_onlyController"";
""1077_balanceOfAt"" -> ""1077_min"";
""1077_destroyTokens"" -> ""1077_getValueAt"";
""1077_generateTokens"" -> ""1077_balanceOf"";
""1077_approve"" -> ""1077_isContract"";
""1077_approveAndCall"" -> ""1077_approve"";
""1077_doTransfer"" -> ""1077_updateValueAtNow"";
""1077_balanceOf"" -> ""1077_balanceOfAt"";
""1077_generateTokens"" -> ""1077_updateValueAtNow"";
""1077_generateTokens"" -> ""1077_getValueAt"";
""1077_balanceOfAt"" -> ""1077_getValueAt"";
""1077_destroyTokens"" -> ""1077_updateValueAtNow"";
""1077_totalSupplyAt"" -> ""1077_getValueAt"";
""1077_destroyTokens"" -> ""1077_onlyController"";
""1077_fallback"" -> ""1077_isContract"";
""1077_doTransfer"" -> ""1077_balanceOfAt"";
""1077_doTransfer"" -> ""1077_isContract"";
""1077_transfer"" -> ""1077_doTransfer"";
""1077_generateTokens"" -> ""1077_onlyController"";
""1077_totalSupplyAt"" -> ""1077_min"";
""1077_destroyTokens"" -> ""1077_balanceOf"";
""1077_totalSupply"" -> ""1077_totalSupplyAt"";
""1077_transferFrom"" -> ""1077_doTransfer"";
}
"
0xcd6cb1b25006603382b9e9a832b8686ae240373b.sol,EtheramaCore,"contract EtheramaCore is EtheramaGasPriceLimit { uint256 constant public MAGNITUDE = 2**64; uint256 constant public MIN_TOKEN_DEAL_VAL = 0.1 ether; uint256 constant public MAX_TOKEN_DEAL_VAL = 1000000 ether; uint256 constant public MIN_ETH_DEAL_VAL = 0.001 ether; uint256 constant public MAX_ETH_DEAL_VAL = 200000 ether; uint256 public _bigPromoPercent = 5 ether; uint256 public _quickPromoPercent = 5 ether; uint256 public _devRewardPercent = 15 ether; uint256 public _tokenOwnerRewardPercent = 30 ether; uint256 public _shareRewardPercent = 25 ether; uint256 public _refBonusPercent = 20 ether; uint128 public _bigPromoBlockInterval = 9999; uint128 public _quickPromoBlockInterval = 100; uint256 public _promoMinPurchaseEth = 1 ether; uint256 public _minRefEthPurchase = 0.5 ether; uint256 public _totalIncomeFeePercent = 100 ether; uint256 public _currentBigPromoBonus; uint256 public _currentQuickPromoBonus; uint256 public _devReward; uint256 public _initBlockNum; mapping(address => bool) private _controllerContracts; mapping(uint256 => address) private _controllerIndexer; uint256 private _controllerContractCount; mapping(address => mapping(address => uint256)) private _userTokenLocalBalances; mapping(address => mapping(address => uint256)) private _rewardPayouts; mapping(address => mapping(address => uint256)) private _refBalances; mapping(address => mapping(address => uint256)) private _promoQuickBonuses; mapping(address => mapping(address => uint256)) private _promoBigBonuses; mapping(address => mapping(address => uint256)) private _userEthVolumeSaldos; mapping(address => uint256) private _bonusesPerShare; mapping(address => uint256) private _buyCounts; mapping(address => uint256) private _sellCounts; mapping(address => uint256) private _totalVolumeEth; mapping(address => uint256) private _totalVolumeToken; event onWithdrawUserBonus(address indexed userAddress, uint256 ethWithdrawn); modifier onlyController() { require(_controllerContracts[msg.sender]); _; }",0,"subgraph cluster_2025_EtheramaCore {
label=""EtheramaCore"";
""2025_getBonusPerShare"" [label=""getBonusPerShare""];
""2025__promoMinPurchaseEth"" [label=""_promoMinPurchaseEth""];
""2025__currentQuickPromoBonus"" [label=""_currentQuickPromoBonus""];
""2025_getSellCount"" [label=""getSellCount""];
""2025_getCurrentUserPromoBonus"" [label=""getCurrentUserPromoBonus""];
""2025_MIN_ETH_DEAL_VAL"" [label=""MIN_ETH_DEAL_VAL""];
""2025__totalIncomeFeePercent"" [label=""_totalIncomeFeePercent""];
""2025_getTotalSellCount"" [label=""getTotalSellCount""];
""2025_addUserTokenLocalBalance"" [label=""addUserTokenLocalBalance""];
""2025__bigPromoPercent"" [label=""_bigPromoPercent""];
""2025_setPromoMinPurchaseEth"" [label=""setPromoMinPurchaseEth""];
""2025_getCurrentUserReward"" [label=""getCurrentUserReward""];
""2025_withdrawUserReward"" [label=""withdrawUserReward""];
""2025_addBigPromoBonus"" [label=""addBigPromoBonus""];
""2025_changeControllerContract"" [label=""changeControllerContract""];
""2025__quickPromoBlockInterval"" [label=""_quickPromoBlockInterval""];
""2025_getUserTotalReward"" [label=""getUserTotalReward""];
""2025__quickPromoPercent"" [label=""_quickPromoPercent""];
""2025_setTotalIncomeFeePercent"" [label=""setTotalIncomeFeePercent""];
""2025_getBuyCount"" [label=""getBuyCount""];
""2025_addQuickPromoBonus"" [label=""addQuickPromoBonus""];
""2025_addUserRewardPayouts"" [label=""addUserRewardPayouts""];
""2025_setMinRefEthPurchase"" [label=""setMinRefEthPurchase""];
""2025_getUserBigPromoBonus"" [label=""getUserBigPromoBonus""];
""2025_setRewardPercentages"" [label=""setRewardPercentages""];
""2025_MIN_TOKEN_DEAL_VAL"" [label=""MIN_TOKEN_DEAL_VAL""];
""2025_trackBuy"" [label=""trackBuy""];
""2025_addControllerContract"" [label=""addControllerContract""];
""2025_trackSell"" [label=""trackSell""];
""2025_MAX_ETH_DEAL_VAL"" [label=""MAX_ETH_DEAL_VAL""];
""2025_setQuickPromoInterval"" [label=""setQuickPromoInterval""];
""2025_getCurrentUserShareBonus"" [label=""getCurrentUserShareBonus""];
""2025__devRewardPercent"" [label=""_devRewardPercent""];
""2025_addDevReward"" [label=""addDevReward""];
""2025_getUserReward"" [label=""getUserReward""];
""2025_convertRealTo256"" [label=""convertRealTo256""];
""2025_getBigPromoRemainingBlocks"" [label=""getBigPromoRemainingBlocks""];
""2025_calcPercent"" [label=""calcPercent""];
""2025__tokenOwnerRewardPercent"" [label=""_tokenOwnerRewardPercent""];
""2025__refBonusPercent"" [label=""_refBonusPercent""];
""2025_addBonusPerShare"" [label=""addBonusPerShare""];
""2025_MAX_GAS_PRICE"" [label=""MAX_GAS_PRICE""];
""2025_getCurrentUserRefBonus"" [label=""getCurrentUserRefBonus""];
""2025_constructor"" [label=""constructor""];
""2025_addUserRefBalance"" [label=""addUserRefBalance""];
""2025__bigPromoBlockInterval"" [label=""_bigPromoBlockInterval""];
""2025_MAGNITUDE"" [label=""MAGNITUDE""];
""2025_getTotalCollectedPromoBonus"" [label=""getTotalCollectedPromoBonus""];
""2025_withdrawRemainingEthAfterAll"" [label=""withdrawRemainingEthAfterAll""];
""2025_getUserEthVolumeSaldo"" [label=""getUserEthVolumeSaldo""];
""2025_resetUserPromoBonus"" [label=""resetUserPromoBonus""];
""2025_setBigPromoInterval"" [label=""setBigPromoInterval""];
""2025_getTotalVolumeToken"" [label=""getTotalVolumeToken""];
""2025_convert256ToReal"" [label=""convert256ToReal""];
""2025_getRewardAndPrepareWithdraw"" [label=""getRewardAndPrepareWithdraw""];
""2025_getUserRefBalance"" [label=""getUserRefBalance""];
""2025_resetUserRefBalance"" [label=""resetUserRefBalance""];
""2025_getTotalVolumeEth"" [label=""getTotalVolumeEth""];
""2025__minRefEthPurchase"" [label=""_minRefEthPurchase""];
""2025_getInitBlockNum"" [label=""getInitBlockNum""];
""2025_getBlockNumSinceInit"" [label=""getBlockNumSinceInit""];
""2025_getTotalBuyCount"" [label=""getTotalBuyCount""];
""2025__shareRewardPercent"" [label=""_shareRewardPercent""];
""2025_getUserTotalEthVolumeSaldo"" [label=""getUserTotalEthVolumeSaldo""];
""2025_trackTotalVolume"" [label=""trackTotalVolume""];
""2025_getTotalBonusPerShare"" [label=""getTotalBonusPerShare""];
""2025_removeControllerContract"" [label=""removeControllerContract""];
""2025_getUserQuickPromoBonus"" [label=""getUserQuickPromoBonus""];
""2025_getUserTotalPromoBonus"" [label=""getUserTotalPromoBonus""];
""2025_subUserTokenLocalBalance"" [label=""subUserTokenLocalBalance""];
""2025_getUserTokenLocalBalance"" [label=""getUserTokenLocalBalance""];
""2025_getUserRewardPayouts"" [label=""getUserRewardPayouts""];
""2025_getQuickPromoRemainingBlocks"" [label=""getQuickPromoRemainingBlocks""];
""2025_isRefAvailable"" [label=""isRefAvailable""];
""2025_withdrawDevReward"" [label=""withdrawDevReward""];
""2025_getCurrentUserTotalReward"" [label=""getCurrentUserTotalReward""];
""2025_MAX_TOKEN_DEAL_VAL"" [label=""MAX_TOKEN_DEAL_VAL""];
""2025_payoutQuickBonus"" [label=""payoutQuickBonus""];
""2025__currentBigPromoBonus"" [label=""_currentBigPromoBonus""];
""2025_payoutBigBonus"" [label=""payoutBigBonus""];
""2025_getCurrentUserShareBonus"" -> ""2025_getUserTotalReward"";
""2025_addUserRewardPayouts"" -> ""2025_addUserRewardPayouts"";
""2025_withdrawDevReward"" -> ""2025_onlyAdministrator"";
""2025_isRefAvailable"" -> ""2025_getUserTotalEthVolumeSaldo"";
""2025_setRewardPercentages"" -> ""2025_onlyAdministrator"";
""2025_setTotalIncomeFeePercent"" -> ""2025_onlyController"";
""2025_addControllerContract"" -> ""2025_onlyAdministrator"";
""2025_getCurrentUserTotalReward"" -> ""2025_getUserTotalReward"";
""2025_resetUserRefBalance"" -> ""2025_onlyController"";
""2025_resetUserPromoBonus"" -> ""2025_resetUserPromoBonus"";
""2025_getRewardAndPrepareWithdraw"" -> ""2025_addUserRewardPayouts"";
""2025_resetUserPromoBonus"" -> ""2025_onlyController"";
""2025_addUserRewardPayouts"" -> ""2025_onlyController"";
""2025_getCurrentUserRefBonus"" -> ""2025_getUserTotalReward"";
""2025_withdrawUserReward"" -> ""2025_getRewardAndPrepareWithdraw"";
""2025_getRewardAndPrepareWithdraw"" -> ""2025_getUserTotalPromoBonus"";
""2025_setQuickPromoInterval"" -> ""2025_onlyAdministrator"";
""2025_getCurrentUserReward"" -> ""2025_getUserTotalReward"";
""2025_constructor"" -> ""2025_constructor"";
""2025_addBonusPerShare"" -> ""2025_onlyController"";
""2025_addDevReward"" -> ""2025_onlyController"";
""2025_trackSell"" -> ""2025_trackTotalVolume"";
""2025_getBigPromoRemainingBlocks"" -> ""2025_getBlockNumSinceInit"";
""2025_trackBuy"" -> ""2025_onlyController"";
""2025_withdrawRemainingEthAfterAll"" -> ""2025_onlyAdministrator"";
""2025_resetUserRefBalance"" -> ""2025_resetUserRefBalance"";
""2025_addQuickPromoBonus"" -> ""2025_onlyController"";
""2025_setMinRefEthPurchase"" -> ""2025_onlyAdministrator"";
""2025_changeControllerContract"" -> ""2025_onlyAdministrator"";
""2025_subUserTokenLocalBalance"" -> ""2025_onlyController"";
""2025_getBlockNumSinceInit"" -> ""2025_getInitBlockNum"";
""2025_setBigPromoInterval"" -> ""2025_onlyAdministrator"";
""2025_getRewardAndPrepareWithdraw"" -> ""2025_getUserRefBalance"";
""2025_payoutQuickBonus"" -> ""2025_onlyController"";
""2025_payoutBigBonus"" -> ""2025_onlyController"";
""2025_trackBuy"" -> ""2025_trackTotalVolume"";
""2025_addUserTokenLocalBalance"" -> ""2025_onlyController"";
""2025_addUserRefBalance"" -> ""2025_onlyController"";
""2025_getRewardAndPrepareWithdraw"" -> ""2025_resetUserPromoBonus"";
""2025_getUserTotalReward"" -> ""2025_getUserReward"";
""2025_getRewardAndPrepareWithdraw"" -> ""2025_getUserReward"";
""2025_trackSell"" -> ""2025_onlyController"";
""2025_getQuickPromoRemainingBlocks"" -> ""2025_getBlockNumSinceInit"";
""2025_addBigPromoBonus"" -> ""2025_onlyController"";
""2025_removeControllerContract"" -> ""2025_onlyAdministrator"";
""2025_getRewardAndPrepareWithdraw"" -> ""2025_resetUserRefBalance"";
""2025_getCurrentUserPromoBonus"" -> ""2025_getUserTotalReward"";
""2025_isRefAvailable"" -> ""2025_isRefAvailable"";
""2025_setPromoMinPurchaseEth"" -> ""2025_onlyAdministrator"";
}
"
0xeecdfead2d05f0708450db0ddd65cd513a9b1eea.sol,DiscoverToken,"contract DiscoverToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 1000000000; balances[0x096BB29EcE37BF54a2EbDaFd8f7B981bc9e6d817] = _totalSupply; emit Transfer(address(0), 0x096BB29EcE37BF54a2EbDaFd8f7B981bc9e6d817, _totalSupply); }",0,"subgraph cluster_543_DiscoverToken {
label=""DiscoverToken"";
""543_transfer"" [label=""transfer""];
""543_balanceOf"" [label=""balanceOf""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" [label=""transferFrom""];
""543_constructor"" [label=""constructor""];
""543_totalSupply"" [label=""totalSupply""];
""543_fallback"" [label=""fallback""];
""543_approve"" [label=""approve""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0x57ae3a491f4555e1eed37338d1b8b5222935f28a.sol,rICO,"contract rICO is Ownable, ReentrancyGuard { using SafeMath for uint256; RicoToken public token; address tokenContractAddress; PreSale public preSale; uint256 public startTime; uint256 public endCrowdSaleTime; uint256 public endRefundableTime; address public wallet; uint256 public rate; uint256 public minimumInvest; uint256 public softCap; uint256 public hardCap; mapping(address => uint) public balances; mapping(address => uint) public balancesInToken; uint256 public weiRaised; uint256 public restWei; uint256 public reservedWei; bool public firstStageRefund = false; bool public secondStageRefund = false; bool public finalStageRefund = false; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); function rICO( address _wallet, address _token, address _preSale) public { require(_token != address(0)); startTime = 1525081800; endCrowdSaleTime = startTime + 60 * 1 minutes; endRefundableTime = endCrowdSaleTime + 130 * 1 minutes; wallet = _wallet; token = RicoToken(_token); tokenContractAddress = _token; preSale = PreSale(_preSale); minimumInvest = 1000000000000; rate = 1000; softCap = 1500 * 0.000001 ether; hardCap = 15000 * 0.000001 ether; }",0,"subgraph cluster_2130_rICO {
label=""rICO"";
""2130_withdrawal"" [label=""withdrawal""];
""2130_refundPart"" [label=""refundPart""];
""2130_finishCrowdSale"" [label=""finishCrowdSale""];
""2130_hasEnded"" [label=""hasEnded""];
""2130_rICO"" [label=""rICO""];
""2130_changeTokenOwner"" [label=""changeTokenOwner""];
""2130_refund"" [label=""refund""];
""2130_buyTokens"" [label=""buyTokens""];
""2130_forwardFunds"" [label=""forwardFunds""];
""2130_refundAll"" [label=""refundAll""];
""2130_getBonusPercent"" [label=""getBonusPercent""];
""2130_updateReservedWei"" [label=""updateReservedWei""];
""2130_getRealValueToReturn"" [label=""getRealValueToReturn""];
""2130_getTokenAmount"" [label=""getTokenAmount""];
""2130_fallback"" [label=""fallback""];
""2130_withdrawal"" -> ""2130_forwardFunds"";
""2130_withdrawal"" -> ""2130_updateReservedWei"";
""2130_fallback"" -> ""2130_buyTokens"";
""2130_withdrawal"" -> ""2130_onlyOwner"";
""2130_finishCrowdSale"" -> ""2130_forwardFunds"";
""2130_refundPart"" -> ""2130_getRealValueToReturn"";
""2130_buyTokens"" -> ""2130_saleIsOn"";
""2130_refund"" -> ""2130_refundPart"";
""2130_buyTokens"" -> ""2130_nonReentrant"";
""2130_changeTokenOwner"" -> ""2130_onlyOwner"";
""2130_buyTokens"" -> ""2130_isUnderHardCap"";
""2130_finishCrowdSale"" -> ""2130_updateReservedWei"";
""2130_refund"" -> ""2130_refundAll"";
""2130_finishCrowdSale"" -> ""2130_onlyOwner"";
""2130_buyTokens"" -> ""2130_getTokenAmount"";
""2130_refundPart"" -> ""2130_updateReservedWei"";
""2130_buyTokens"" -> ""2130_getBonusPercent"";
}
"
0xf1afddbed214dba82cb98d46ad0a96e643f7f6f6.sol,StarbaseCrowdsale,"contract StarbaseCrowdsale is Ownable { event CrowdsaleEnded(uint256 endedAt); event StarbasePurchasedWithEth(address purchaser, uint256 amount, uint256 rawAmount, uint256 cnyEthRate, uint256 bonusTokensPercentage); event StarbasePurchasedOffChain(address purchaser, uint256 amount, uint256 rawAmount, uint256 cnyBtcRate, uint256 bonusTokensPercentage, string data); event CnyEthRateUpdated(uint256 cnyEthRate); event CnyBtcRateUpdated(uint256 cnyBtcRate); event QualifiedPartnerAddress(address qualifiedPartner); AbstractStarbaseToken public starbaseToken; StarbaseEarlyPurchaseAmendment public starbaseEpAmendment; uint256 constant public crowdsaleTokenAmount = 125000000e18; uint256 constant public earlyPurchaseTokenAmount = 50000000e18; uint256 constant public MIN_INVESTMENT = 1; uint256 constant public MAX_CAP = 67000000; string public constant PURCHASE_AMOUNT_UNIT = ; struct CrowdsalePurchase { address purchaser; uint256 amount; uint256 rawAmount; uint256 purchasedAt; string data; uint256 bonus; }",0,"subgraph cluster_2704_StarbaseCrowdsale {
label=""StarbaseCrowdsale"";
""2704_startCrowdsale"" [label=""startCrowdsale""];
""2704_recordOffchainPurchase"" [label=""recordOffchainPurchase""];
""2704_totalAmountOfCrowdsalePurchasesWithoutBonus"" [label=""totalAmountOfCrowdsalePurchasesWithoutBonus""];
""2704_getBonusTier"" [label=""getBonusTier""];
""2704_totalAmountOfCrowdsalePurchases"" [label=""totalAmountOfCrowdsalePurchases""];
""2704_totalAmountOfEarlyPurchases"" [label=""totalAmountOfEarlyPurchases""];
""2704_endCrowdsale"" [label=""endCrowdsale""];
""2704_ownerStartsCrowdsale"" [label=""ownerStartsCrowdsale""];
""2704_withdrawForCompany"" [label=""withdrawForCompany""];
""2704_withdrawPurchasedTokens"" [label=""withdrawPurchasedTokens""];
""2704_setup"" [label=""setup""];
""2704_updateCnyBtcRate"" [label=""updateCnyBtcRate""];
""2704_setQualifiedPartner"" [label=""setQualifiedPartner""];
""2704_unlistQualifiedPartner"" [label=""unlistQualifiedPartner""];
""2704_redirectToPurchase"" [label=""redirectToPurchase""];
""2704_numOfPurchases"" [label=""numOfPurchases""];
""2704_StarbaseCrowdsale"" [label=""StarbaseCrowdsale""];
""2704_updateCnyEthRate"" [label=""updateCnyEthRate""];
""2704_totalRaisedAmountInCny"" [label=""totalRaisedAmountInCny""];
""2704_purchaseWithEth"" [label=""purchaseWithEth""];
""2704_fallback"" [label=""fallback""];
""2704_recordPurchase"" [label=""recordPurchase""];
""2704_purchaseAsQualifiedPartner"" [label=""purchaseAsQualifiedPartner""];
""2704_sendQualifiedPartnerCommissionFee"" [label=""sendQualifiedPartnerCommissionFee""];
""2704_isEnded"" [label=""isEnded""];
""2704_loadEarlyPurchases"" [label=""loadEarlyPurchases""];
""2704_updateQualifiedPartnerCapAmount"" [label=""updateQualifiedPartnerCapAmount""];
""2704_endCrowdsale"" -> ""2704_totalRaisedAmountInCny"";
""2704_loadEarlyPurchases"" -> ""2704_onlyOwner"";
""2704_withdrawPurchasedTokens"" -> ""2704_whenEnded"";
""2704_recordOffchainPurchase"" -> ""2704_recordPurchase"";
""2704_purchaseWithEth"" -> ""2704_whenNotEnded"";
""2704_updateCnyBtcRate"" -> ""2704_onlyFundraiser"";
""2704_redirectToPurchase"" -> ""2704_purchaseWithEth"";
""2704_withdrawForCompany"" -> ""2704_onlyFundraiser"";
""2704_endCrowdsale"" -> ""2704_onlyOwner"";
""2704_unlistQualifiedPartner"" -> ""2704_onlyOwner"";
""2704_updateQualifiedPartnerCapAmount"" -> ""2704_onlyOwner"";
""2704_purchaseAsQualifiedPartner"" -> ""2704_recordPurchase"";
""2704_setup"" -> ""2704_onlyOwner"";
""2704_recordOffchainPurchase"" -> ""2704_onlyFundraiser"";
""2704_recordOffchainPurchase"" -> ""2704_getBonusTier"";
""2704_endCrowdsale"" -> ""2704_totalAmountOfEarlyPurchases"";
""2704_purchaseWithEth"" -> ""2704_getBonusTier"";
""2704_recordOffchainPurchase"" -> ""2704_rateIsSet"";
""2704_purchaseAsQualifiedPartner"" -> ""2704_sendQualifiedPartnerCommissionFee"";
""2704_redirectToPurchase"" -> ""2704_purchaseAsQualifiedPartner"";
""2704_setQualifiedPartner"" -> ""2704_onlyOwner"";
""2704_withdrawForCompany"" -> ""2704_hasBalance"";
""2704_purchaseWithEth"" -> ""2704_rateIsSet"";
""2704_recordPurchase"" -> ""2704_totalAmountOfCrowdsalePurchasesWithoutBonus"";
""2704_recordOffchainPurchase"" -> ""2704_whenNotEnded"";
""2704_recordOffchainPurchase"" -> ""2704_startCrowdsale"";
""2704_purchaseWithEth"" -> ""2704_recordPurchase"";
""2704_setup"" -> ""2704_totalAmountOfEarlyPurchases"";
""2704_totalRaisedAmountInCny"" -> ""2704_totalAmountOfEarlyPurchases"";
""2704_updateCnyEthRate"" -> ""2704_onlyFundraiser"";
""2704_fallback"" -> ""2704_redirectToPurchase"";
""2704_totalRaisedAmountInCny"" -> ""2704_totalAmountOfCrowdsalePurchases"";
""2704_ownerStartsCrowdsale"" -> ""2704_startCrowdsale"";
""2704_purchaseAsQualifiedPartner"" -> ""2704_rateIsSet"";
""2704_purchaseWithEth"" -> ""2704_startCrowdsale"";
""2704_ownerStartsCrowdsale"" -> ""2704_onlyOwner"";
""2704_purchaseWithEth"" -> ""2704_minInvestment"";
}
"
0x3fd50278a2257623cf718d4f2997921a5d34c81e.sol,CXCoin,"contract CXCoin is Ownable, StandardToken { string public name; string public symbol; uint public decimals; uint public totalSupply; function CXCoin() public { totalSupply = 100 * (10**6) * (10**6); balances[msg.sender] = totalSupply; name = ; symbol = ; decimals = 6; }",0,"subgraph cluster_565_CXCoin {
label=""CXCoin"";
""565_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""565_fallback"" [label=""fallback""];
""565_CXCoin"" [label=""CXCoin""];
""565_mintToken"" [label=""mintToken""];
""565_freezeAccount"" [label=""freezeAccount""];
""565_transferOwnership"" [label=""transferOwnership""];
""565_transferOwnership"" -> ""565_safeAdd"";
""565_mintToken"" -> ""565_safeAdd"";
""565_freezeAccount"" -> ""565_onlyOwner"";
""565_transferOwnership"" -> ""565_onlyOwner"";
""565_transferOwnership"" -> ""565_transferOwnership"";
""565_mintToken"" -> ""565_onlyOwner"";
""565_transferAnyERC20Token"" -> ""565_onlyOwner"";
}
"
0xcfc5199a76182368b6a5a3ae78204e29d1ed4a6d.sol,GXX,"contract GXX is ERC20Interface, OOOOOO { string public symbol; string public name; uint8 public decimals; uint256 private _totalSupply; mapping(address => uint256) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 8; _totalSupply = 2000000000000000000; balances[msg.sender] = _totalSupply; emit Transfer(address(0), msg.sender, _totalSupply); }",0,"subgraph cluster_646_GXX {
label=""GXX"";
""646_approve"" [label=""approve""];
""646_mul"" [label=""mul""];
""646_add"" [label=""add""];
""646_WithdrawEth"" [label=""WithdrawEth""];
""646_TransferERC20Token"" [label=""TransferERC20Token""];
""646_allowance"" [label=""allowance""];
""646_fallback"" [label=""fallback""];
""646_transferFrom"" [label=""transferFrom""];
""646_totalSupply"" [label=""totalSupply""];
""646_balanceOf"" [label=""balanceOf""];
""646_sub"" [label=""sub""];
""646_div"" [label=""div""];
""646_transfer"" [label=""transfer""];
""646_burn"" [label=""burn""];
""646_constructor"" [label=""constructor""];
""646_transferFrom"" -> ""646_add"";
""646_transfer"" -> ""646_sub"";
""646_transferFrom"" -> ""646_sub"";
""646_transfer"" -> ""646_add"";
""646_WithdrawEth"" -> ""646_restricted"";
""646_burn"" -> ""646_sub"";
""646_TransferERC20Token"" -> ""646_restricted"";
}
"
0x561eac93c92360949ab1f1403323e6db345cbf31.sol,BANK_SAFE,contract BANK_SAFE { mapping (address=>uint256) public balances; uint public MinSum; LogFile Log; bool intitalized; function SetMinSum(uint _val) public { if(intitalized)throw; MinSum = _val; },0,"subgraph cluster_123_BANK_SAFE {
label=""BANK_SAFE"";
""123_SetMinSum"" [label=""SetMinSum""];
""123_Collect"" [label=""Collect""];
""123_SetLogFile"" [label=""SetLogFile""];
""123_fallback"" [label=""fallback""];
""123_Deposit"" [label=""Deposit""];
""123_Initialized"" [label=""Initialized""];
""123_fallback"" -> ""123_Deposit"";
}
"
0xcf377dfd654676940e2b5a87cf2673def25aeaed.sol,GreenEthereusPromo,"contract GreenEthereusPromo { string public constant name = ; string public constant symbol = ; event Transfer(address indexed from, address indexed to, uint256 value); address owner; uint public index; constructor() public { owner = msg.sender; }",0,"subgraph cluster_149_GreenEthereusPromo {
label=""GreenEthereusPromo"";
""149_fallback"" [label=""fallback""];
""149_resetIndex"" [label=""resetIndex""];
""149_withdrawBalance"" [label=""withdrawBalance""];
""149_constructor"" [label=""constructor""];
""149_massSending"" [label=""massSending""];
""149_transferOwnership"" [label=""transferOwnership""];
""149_transferOwnership"" -> ""149_onlyOwner"";
""149_resetIndex"" -> ""149_onlyOwner"";
""149_withdrawBalance"" -> ""149_onlyOwner"";
""149_massSending"" -> ""149_onlyOwner"";
}
"
0x850c430378909ba9ff2494d0a4df17928e99f8f4.sol,BdpDataStorage,contract BdpDataStorage is BdpBase { using SafeMath for uint256; struct Region { uint256 x1; uint256 y1; uint256 x2; uint256 y2; uint256 currentImageId; uint256 nextImageId; uint8[128] url; uint256 currentPixelPrice; uint256 blockUpdatedAt; uint256 updatedAt; uint256 purchasedAt; uint256 purchasedPixelPrice; },0,"subgraph cluster_822_BdpDataStorage {
label=""BdpDataStorage"";
""822_setRegionNextImageId"" [label=""setRegionNextImageId""];
""822_setRegionPurchasedPixelPrice"" [label=""setRegionPurchasedPixelPrice""];
""822_setRegionCurrentImageId"" [label=""setRegionCurrentImageId""];
""822_setRegionBlockUpdatedAt"" [label=""setRegionBlockUpdatedAt""];
""822_getRegionNextImageId"" [label=""getRegionNextImageId""];
""822_getRegionCurrentImageId"" [label=""getRegionCurrentImageId""];
""822_BdpDataStorage"" [label=""BdpDataStorage""];
""822_getRegionCoordinates"" [label=""getRegionCoordinates""];
""822_deleteRegionData"" [label=""deleteRegionData""];
""822_getRegionCurrentPixelPrice"" [label=""getRegionCurrentPixelPrice""];
""822_setRegionUrl"" [label=""setRegionUrl""];
""822_setRegionCoordinates"" [label=""setRegionCoordinates""];
""822_getNextRegionId"" [label=""getNextRegionId""];
""822_getRegionUpdatedAt"" [label=""getRegionUpdatedAt""];
""822_getRegionBlockUpdatedAt"" [label=""getRegionBlockUpdatedAt""];
""822_setRegionCurrentPixelPrice"" [label=""setRegionCurrentPixelPrice""];
""822_getRegionUrl"" [label=""getRegionUrl""];
""822_getRegionPurchasePixelPrice"" [label=""getRegionPurchasePixelPrice""];
""822_getLastRegionId"" [label=""getLastRegionId""];
""822_getRegionUpdatedAtPurchasedAt"" [label=""getRegionUpdatedAtPurchasedAt""];
""822_setRegionPurchasedAt"" [label=""setRegionPurchasedAt""];
""822_getRegionPurchasedAt"" [label=""getRegionPurchasedAt""];
""822_setRegionUpdatedAt"" [label=""setRegionUpdatedAt""];
""822_getNextRegionId"" -> ""822_storageAccessControl"";
""822_setRegionCurrentImageId"" -> ""822_storageAccessControl"";
""822_setRegionCoordinates"" -> ""822_storageAccessControl"";
""822_setRegionPurchasedPixelPrice"" -> ""822_storageAccessControl"";
""822_setRegionCurrentPixelPrice"" -> ""822_storageAccessControl"";
""822_deleteRegionData"" -> ""822_storageAccessControl"";
""822_setRegionPurchasedAt"" -> ""822_storageAccessControl"";
""822_setRegionUrl"" -> ""822_storageAccessControl"";
""822_setRegionNextImageId"" -> ""822_storageAccessControl"";
""822_setRegionUpdatedAt"" -> ""822_storageAccessControl"";
""822_setRegionBlockUpdatedAt"" -> ""822_storageAccessControl"";
}
"
0x89ee867da0daf5260df8d7530348337faeb968b3.sol,owned,contract owned { address public owner; address public candidate; function owned() payable internal { owner = msg.sender; },0,"subgraph cluster_64_owned {
label=""owned"";
""64_owned"" [label=""owned""];
""64_confirmOwner"" [label=""confirmOwner""];
""64_changeOwner"" [label=""changeOwner""];
""64_changeOwner"" -> ""64_onlyOwner"";
}
"
0x5b1b5fea1b99d83ad479df0c222f0492385381dd.sol,Owned,contract Owned { address public owner; address public nominatedOwner; function Owned(address _owner) public { owner = _owner; },0,"subgraph cluster_79_Owned {
label=""Owned"";
""79_acceptOwnership"" [label=""acceptOwnership""];
""79_Owned"" [label=""Owned""];
""79_nominateOwner"" [label=""nominateOwner""];
""79_nominateOwner"" -> ""79_onlyOwner"";
}
"
0x028ff933bd86bd4d699b1643477f858626482d35.sol,LUCKER,contract LUCKER is Ownable{ tokenTransfer public bebTokenTransfer; uint8 decimals = 18; uint256 opentime=now+3600; uint256 opensome; uint256 _opensome; uint256 BEBMAX; uint256 BEBtime; uint256 Numberofairdrops; address ownersto; struct luckuser{ uint256 _time; uint256 _eth; uint256 _beb; uint256 _bz; uint256 _romd; uint256 Bond; uint256 sumeth; uint256 sumbeb; },0,"subgraph cluster_843_LUCKER {
label=""LUCKER"";
""843_setAirdrop"" [label=""setAirdrop""];
""843_LUCKER"" [label=""LUCKER""];
""843_querBalance"" [label=""querBalance""];
""843_present"" [label=""present""];
""843_BEBwithdrawal"" [label=""BEBwithdrawal""];
""843_getLUCK"" [label=""getLUCK""];
""843_setLUCK"" [label=""setLUCK""];
""843_getTokenBalanceUser"" [label=""getTokenBalanceUser""];
""843_random"" [label=""random""];
""843_ETHwithdrawal"" [label=""ETHwithdrawal""];
""843_fallback"" [label=""fallback""];
""843_AirdropAuthorization"" [label=""AirdropAuthorization""];
""843_gettime"" [label=""gettime""];
""843_eth"" [label=""eth""];
""843_getTokenBalance"" [label=""getTokenBalance""];
""843_ETHwithdrawal"" -> ""843_onlyOwner"";
""843_setAirdrop"" -> ""843_onlyOwner"";
""843_BEBwithdrawal"" -> ""843_onlyOwner"";
""843_present"" -> ""843_random"";
""843_setLUCK"" -> ""843_onlyOwner"";
}
"
0x1df6eadc2e1e9f4cbb2d94369210d8f1b790ee19.sol,PinnacleToken,contract PinnacleToken { uint private constant _totalSupply = 100000000000000000000000000; using SafeMath for uint256; string public constant symbol = ; string public constant name = ; uint8 public constant decimals = 18; mapping(address => uint256) balances; mapping(address => mapping(address => uint256)) allowed; function PinnacleToken() { balances[msg.sender] = _totalSupply; },0,"subgraph cluster_321_PinnacleToken {
label=""PinnacleToken"";
""321_transferFrom"" [label=""transferFrom""];
""321_totalSupply"" [label=""totalSupply""];
""321_transfer"" [label=""transfer""];
""321_balanceOf"" [label=""balanceOf""];
""321_PinnacleToken"" [label=""PinnacleToken""];
""321_allowance"" [label=""allowance""];
""321_approve"" [label=""approve""];
}
"
0x28cf843d0de2e1fb05636e76569d5a50caf3b817.sol,Bostec,"contract Bostec is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 public totalSupply = 1500000000e18; uint256 public totalDistributed = 375000000e18; uint256 public constant MIN_CONTRIBUTION = 1 ether / 100; uint256 public tokensPerEth = 15000e18; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_944_Bostec {
label=""Bostec"";
""944_finishDistribution"" [label=""finishDistribution""];
""944_Bostec"" [label=""Bostec""];
""944_withdraw"" [label=""withdraw""];
""944_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""944_transfer"" [label=""transfer""];
""944_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""944_getTokens"" [label=""getTokens""];
""944_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""944_transferOwnership"" [label=""transferOwnership""];
""944_balanceOf"" [label=""balanceOf""];
""944_distr"" [label=""distr""];
""944_getTokenBalance"" [label=""getTokenBalance""];
""944_doAirdrop"" [label=""doAirdrop""];
""944_allowance"" [label=""allowance""];
""944_updateTokensPerEth"" [label=""updateTokensPerEth""];
""944_fallback"" [label=""fallback""];
""944_burn"" [label=""burn""];
""944_transferFrom"" [label=""transferFrom""];
""944_approve"" [label=""approve""];
""944_transferOwnership"" -> ""944_onlyOwner"";
""944_adminClaimAirdrop"" -> ""944_doAirdrop"";
""944_withdrawForeignTokens"" -> ""944_onlyOwner"";
""944_updateTokensPerEth"" -> ""944_onlyOwner"";
""944_Bostec"" -> ""944_distr"";
""944_finishDistribution"" -> ""944_onlyOwner"";
""944_adminClaimAirdrop"" -> ""944_onlyOwner"";
""944_distr"" -> ""944_canDistr"";
""944_transfer"" -> ""944_onlyPayloadSize"";
""944_getTokens"" -> ""944_distr"";
""944_burn"" -> ""944_onlyOwner"";
""944_adminClaimAirdropMultiple"" -> ""944_doAirdrop"";
""944_transferFrom"" -> ""944_onlyPayloadSize"";
""944_fallback"" -> ""944_getTokens"";
""944_finishDistribution"" -> ""944_canDistr"";
""944_withdraw"" -> ""944_onlyOwner"";
""944_adminClaimAirdropMultiple"" -> ""944_onlyOwner"";
""944_getTokens"" -> ""944_canDistr"";
}
"
0x4bb0a085db8cedf43344bd2fbec83c2c79c4e76b.sol,CappedToken,contract CappedToken is MintableToken { uint256 public cap; constructor(uint256 _cap) public { require(_cap > 0); cap = _cap; },0,"subgraph cluster_862_CappedToken {
label=""CappedToken"";
""862_mint"" [label=""mint""];
""862_constructor"" [label=""constructor""];
""862_mint"" -> ""862_mint"";
}
"
0x335368e5dc38c7af604cb4a3bad1b3b47b69802f.sol,KCCTOKEN,"contract KCCTOKEN is ERC20,Ownable{ using SafeMath for uint256; string public constant name=; string public symbol=; string public constant version = ; uint256 public constant decimals = 18; uint256 public totalSupply; uint256 public constant MAX_SUPPLY=990000000*10**decimals; mapping(address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; event GetETH(address indexed _from, uint256 _value); function KCCTOKEN(){ totalSupply=MAX_SUPPLY; balances[msg.sender] = MAX_SUPPLY; Transfer(0x0, msg.sender, MAX_SUPPLY); }",0,"subgraph cluster_488_KCCTOKEN {
label=""KCCTOKEN"";
""488_allowance"" [label=""allowance""];
""488_fallback"" [label=""fallback""];
""488_etherProceeds"" [label=""etherProceeds""];
""488_balanceOf"" [label=""balanceOf""];
""488_KCCTOKEN"" [label=""KCCTOKEN""];
""488_transferFrom"" [label=""transferFrom""];
""488_approve"" [label=""approve""];
""488_transfer"" [label=""transfer""];
""488_etherProceeds"" -> ""488_onlyOwner"";
}
"
0x6c60f4e9425de0b860f08273c13c89f41152548c.sol,UTCToken,"contract UTCToken is Pausable, StandardToken, BlackList { string public name; string public symbol; uint public decimals; address public upgradedAddress; bool public deprecated; function UTCToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public { _totalSupply = _initialSupply; name = _name; symbol = _symbol; decimals = _decimals; balances[owner] = _initialSupply; deprecated = false; }",0,"subgraph cluster_1142_UTCToken {
label=""UTCToken"";
""1142_deprecate"" [label=""deprecate""];
""1142_transferFrom"" [label=""transferFrom""];
""1142_balanceOf"" [label=""balanceOf""];
""1142_setParams"" [label=""setParams""];
""1142_approve"" [label=""approve""];
""1142_redeem"" [label=""redeem""];
""1142_issue"" [label=""issue""];
""1142_UTCToken"" [label=""UTCToken""];
""1142_allowance"" [label=""allowance""];
""1142_totalSupply"" [label=""totalSupply""];
""1142_transfer"" [label=""transfer""];
""1142_approve"" -> ""1142_approve"";
""1142_transferFrom"" -> ""1142_transferFrom"";
""1142_allowance"" -> ""1142_allowance"";
""1142_transfer"" -> ""1142_whenNotPaused"";
""1142_redeem"" -> ""1142_onlyOwner"";
""1142_balanceOf"" -> ""1142_balanceOf"";
""1142_issue"" -> ""1142_onlyOwner"";
""1142_transfer"" -> ""1142_transfer"";
""1142_approve"" -> ""1142_onlyPayloadSize"";
""1142_setParams"" -> ""1142_onlyOwner"";
""1142_transferFrom"" -> ""1142_whenNotPaused"";
""1142_deprecate"" -> ""1142_onlyOwner"";
}
"
0xd44fb08008d35e1310319b17aef355a432edd123.sol,Ownable,"contract Ownable { address public owner; event OwnershipRenounced(address indexed previousOwner); event OwnershipTransferred( address indexed previousOwner, address indexed newOwner ); constructor() public { owner = msg.sender; }",0,"subgraph cluster_349_Ownable {
label=""Ownable"";
""349_constructor"" [label=""constructor""];
""349_transferOwnership"" [label=""transferOwnership""];
""349__transferOwnership"" [label=""_transferOwnership""];
""349_renounceOwnership"" [label=""renounceOwnership""];
""349_transferOwnership"" -> ""349__transferOwnership"";
""349_transferOwnership"" -> ""349_onlyOwner"";
""349_renounceOwnership"" -> ""349_onlyOwner"";
}
"
0x92736b3bff1bbd72a72478d78f18a6ab9b68b791.sol,SatisfactionToken,"contract SatisfactionToken is ERC20, CheckpointStorage, NoOwner { event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); event Mint(address indexed to, uint256 amount); event MintFinished(); event Burn(address indexed burner, uint256 value); using SafeMath for uint256; string public name = ; uint8 public decimals = 18; string public symbol = ; string public version; SatisfactionToken public parentToken; uint256 public parentSnapShotBlock; uint256 public creationBlock; mapping(address => Checkpoint[]) internal balances; mapping(address => mapping(address => uint256)) internal allowed; bool public transfersEnabled; bool public mintingFinished = false; modifier canMint() { require(!mintingFinished); _; }",0,"subgraph cluster_1597_SatisfactionToken {
label=""SatisfactionToken"";
""1597_approve"" [label=""approve""];
""1597_doTransfer"" [label=""doTransfer""];
""1597_transferFromAndCall"" [label=""transferFromAndCall""];
""1597_balanceOfAt"" [label=""balanceOfAt""];
""1597_enableTransfers"" [label=""enableTransfers""];
""1597_totalSupply"" [label=""totalSupply""];
""1597_balanceOf"" [label=""balanceOf""];
""1597_decreaseApprovalAndCall"" [label=""decreaseApprovalAndCall""];
""1597_burnFrom"" [label=""burnFrom""];
""1597_increaseApproval"" [label=""increaseApproval""];
""1597_allowance"" [label=""allowance""];
""1597_constructor"" [label=""constructor""];
""1597_finishMinting"" [label=""finishMinting""];
""1597_burn"" [label=""burn""];
""1597_transferAndCall"" [label=""transferAndCall""];
""1597_decreaseApproval"" [label=""decreaseApproval""];
""1597_mint"" [label=""mint""];
""1597_transferFrom"" [label=""transferFrom""];
""1597_transfer"" [label=""transfer""];
""1597_increaseApprovalAndCall"" [label=""increaseApprovalAndCall""];
""1597_totalSupplyAt"" [label=""totalSupplyAt""];
""1597_burn"" -> ""1597_updateValueAtNow"";
""1597_transferAndCall"" -> ""1597_transfer"";
""1597_transferFrom"" -> ""1597_doTransfer"";
""1597_totalSupplyAt"" -> ""1597_getValueAt"";
""1597_finishMinting"" -> ""1597_canMint"";
""1597_transfer"" -> ""1597_balanceOfAt"";
""1597_decreaseApprovalAndCall"" -> ""1597_decreaseApproval"";
""1597_burn"" -> ""1597_balanceOf"";
""1597_mint"" -> ""1597_totalSupply"";
""1597_transfer"" -> ""1597_doTransfer"";
""1597_burnFrom"" -> ""1597_updateValueAtNow"";
""1597_doTransfer"" -> ""1597_balanceOfAt"";
""1597_mint"" -> ""1597_balanceOf"";
""1597_mint"" -> ""1597_onlyOwner"";
""1597_mint"" -> ""1597_canMint"";
""1597_transferFromAndCall"" -> ""1597_transferFrom"";
""1597_mint"" -> ""1597_updateValueAtNow"";
""1597_burnFrom"" -> ""1597_totalSupply"";
""1597_balanceOfAt"" -> ""1597_getValueAt"";
""1597_transferFrom"" -> ""1597_balanceOfAt"";
""1597_doTransfer"" -> ""1597_updateValueAtNow"";
""1597_balanceOf"" -> ""1597_balanceOfAt"";
""1597_burn"" -> ""1597_totalSupply"";
""1597_burnFrom"" -> ""1597_balanceOfAt"";
""1597_finishMinting"" -> ""1597_onlyOwner"";
""1597_totalSupply"" -> ""1597_totalSupplyAt"";
""1597_enableTransfers"" -> ""1597_canMint"";
""1597_increaseApprovalAndCall"" -> ""1597_increaseApproval"";
""1597_enableTransfers"" -> ""1597_onlyOwner"";
}
"
0xbf6008bd7ac150e50fbb4efe6aa6af5ae47362b9.sol,MultiSigWallet,"contract MultiSigWallet { event Confirmation(address sender, bytes32 transactionHash); event Revocation(address sender, bytes32 transactionHash); event Submission(bytes32 transactionHash); event Execution(bytes32 transactionHash); event Deposit(address sender, uint value); event OwnerAddition(address owner); event OwnerRemoval(address owner); event RequiredUpdate(uint required); event CoinCreation(address coin); mapping (bytes32 => Transaction) public transactions; mapping (bytes32 => mapping (address => bool)) public confirmations; mapping (address => bool) public isOwner; address[] owners; bytes32[] transactionList; uint public required; struct Transaction { address destination; uint value; bytes data; uint nonce; bool executed; }",0,"subgraph cluster_1442_MultiSigWallet {
label=""MultiSigWallet"";
""1442_addConfirmation"" [label=""addConfirmation""];
""1442_getPendingTransactions"" [label=""getPendingTransactions""];
""1442_removeOwner"" [label=""removeOwner""];
""1442_submitTransaction"" [label=""submitTransaction""];
""1442_isConfirmed"" [label=""isConfirmed""];
""1442_getExecutedTransactions"" [label=""getExecutedTransactions""];
""1442_createCoin"" [label=""createCoin""];
""1442_filterTransactions"" [label=""filterTransactions""];
""1442_executeTransaction"" [label=""executeTransaction""];
""1442_revokeConfirmation"" [label=""revokeConfirmation""];
""1442_submitTransactionWithSignatures"" [label=""submitTransactionWithSignatures""];
""1442_fallback"" [label=""fallback""];
""1442_updateRequired"" [label=""updateRequired""];
""1442_addTransaction"" [label=""addTransaction""];
""1442_addOwner"" [label=""addOwner""];
""1442_confirmTransaction"" [label=""confirmTransaction""];
""1442_MultiSigWallet"" [label=""MultiSigWallet""];
""1442_confirmationCount"" [label=""confirmationCount""];
""1442_confirmTransactionWithSignatures"" [label=""confirmTransactionWithSignatures""];
""1442_confirmTransactionWithSignatures"" -> ""1442_addConfirmation"";
""1442_getExecutedTransactions"" -> ""1442_filterTransactions"";
""1442_createCoin"" -> ""1442_onlyWallet"";
""1442_updateRequired"" -> ""1442_validRequired"";
""1442_updateRequired"" -> ""1442_onlyWallet"";
""1442_submitTransactionWithSignatures"" -> ""1442_confirmTransactionWithSignatures"";
""1442_addTransaction"" -> ""1442_notNull"";
""1442_submitTransactionWithSignatures"" -> ""1442_addTransaction"";
""1442_confirmTransaction"" -> ""1442_executeTransaction"";
""1442_submitTransaction"" -> ""1442_ownerExists"";
""1442_removeOwner"" -> ""1442_updateRequired"";
""1442_addOwner"" -> ""1442_ownerDoesNotExist"";
""1442_executeTransaction"" -> ""1442_isConfirmed"";
""1442_revokeConfirmation"" -> ""1442_confirmed"";
""1442_confirmTransaction"" -> ""1442_ownerExists"";
""1442_removeOwner"" -> ""1442_onlyWallet"";
""1442_MultiSigWallet"" -> ""1442_validRequired"";
""1442_confirmTransaction"" -> ""1442_addConfirmation"";
""1442_submitTransaction"" -> ""1442_confirmTransaction"";
""1442_addOwner"" -> ""1442_onlyWallet"";
""1442_submitTransaction"" -> ""1442_addTransaction"";
""1442_revokeConfirmation"" -> ""1442_ownerExists"";
""1442_getPendingTransactions"" -> ""1442_filterTransactions"";
""1442_removeOwner"" -> ""1442_ownerExists"";
""1442_submitTransactionWithSignatures"" -> ""1442_ownerExists"";
""1442_confirmTransactionWithSignatures"" -> ""1442_executeTransaction"";
""1442_revokeConfirmation"" -> ""1442_notExecuted"";
""1442_addConfirmation"" -> ""1442_notConfirmed"";
""1442_executeTransaction"" -> ""1442_notExecuted"";
""1442_confirmTransactionWithSignatures"" -> ""1442_signaturesFromOwners"";
}
"
0x41451e8e7fd5b9a4f8176ccf1a0db2b68abc77fb.sol,FART,contract FART { modifier onlyTokenHolders() { require(myTokens() > 0); _; },0,"subgraph cluster_1275_FART {
label=""FART"";
""1275_myTokens"" [label=""myTokens""];
""1275_reinvest"" [label=""reinvest""];
""1275_dividendsOf"" [label=""dividendsOf""];
""1275_balanceOf"" [label=""balanceOf""];
""1275_eject"" [label=""eject""];
""1275_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1275_transfer"" [label=""transfer""];
""1275_sellPrice"" [label=""sellPrice""];
""1275_buy"" [label=""buy""];
""1275_totalSupply"" [label=""totalSupply""];
""1275_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1275_buyPrice"" [label=""buyPrice""];
""1275_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1275_sqrt"" [label=""sqrt""];
""1275_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1275_myDividends"" [label=""myDividends""];
""1275_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1275_fallback"" [label=""fallback""];
""1275_purchaseTokens"" [label=""purchaseTokens""];
""1275_sell"" [label=""sell""];
""1275_FART"" [label=""FART""];
""1275_withdraw"" [label=""withdraw""];
""1275_sell"" -> ""1275_onlyNonFounders"";
""1275_eject"" -> ""1275_withdraw"";
""1275_withdraw"" -> ""1275_onlyStronghands"";
""1275_reinvest"" -> ""1275_onlyStronghands"";
""1275_calculateTokensReceived"" -> ""1275_ethereumToTokens_"";
""1275_myTokens"" -> ""1275_balanceOf"";
""1275_eject"" -> ""1275_sell"";
""1275_myDividends"" -> ""1275_dividendsOf"";
""1275_transfer"" -> ""1275_onlyTokenHolders"";
""1275_purchaseTokens"" -> ""1275_ethereumToTokens_"";
""1275_calculateEthereumReceived"" -> ""1275_tokensToEthereum_"";
""1275_buy"" -> ""1275_purchaseTokens"";
""1275_transfer"" -> ""1275_withdraw"";
""1275_ethereumToTokens_"" -> ""1275_sqrt"";
""1275_transfer"" -> ""1275_myDividends"";
""1275_sell"" -> ""1275_onlyTokenHolders"";
""1275_purchaseTokens"" -> ""1275_areWeLive"";
""1275_buyPrice"" -> ""1275_tokensToEthereum_"";
""1275_reinvest"" -> ""1275_purchaseTokens"";
""1275_reinvest"" -> ""1275_myDividends"";
""1275_transfer"" -> ""1275_onlyNonFounders"";
""1275_sellPrice"" -> ""1275_tokensToEthereum_"";
""1275_withdraw"" -> ""1275_myDividends"";
""1275_sell"" -> ""1275_tokensToEthereum_"";
""1275_fallback"" -> ""1275_purchaseTokens"";
}
"
0x55c30ae7a9ad5861394e971327b6bf35d147119d.sol,ETD,contract ETD is owned { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 minBalanceForAccounts; bool public usersCanTrade; bool public usersCanUnfreeze; bool public ico = true; mapping (address => bool) public admin; modifier notICO { require(admin[msg.sender] || !ico); _; },0,"subgraph cluster_1271_ETD {
label=""ETD"";
""1271_burn"" [label=""burn""];
""1271_approve"" [label=""approve""];
""1271_usersCanUnFreeze"" [label=""usersCanUnFreeze""];
""1271__freeze"" [label=""_freeze""];
""1271__transfer"" [label=""_transfer""];
""1271_transferAndFreeze"" [label=""transferAndFreeze""];
""1271_setPrices"" [label=""setPrices""];
""1271_withdraw"" [label=""withdraw""];
""1271_burnFrom"" [label=""burnFrom""];
""1271_setUsersCanTrade"" [label=""setUsersCanTrade""];
""1271_freeze"" [label=""freeze""];
""1271_transfer"" [label=""transfer""];
""1271_buy"" [label=""buy""];
""1271_transferFrom"" [label=""transferFrom""];
""1271_setCanTrade"" [label=""setCanTrade""];
""1271_setICO"" [label=""setICO""];
""1271_fallback"" [label=""fallback""];
""1271_transferReward"" [label=""transferReward""];
""1271_reward"" [label=""reward""];
""1271_ETD"" [label=""ETD""];
""1271_approveAndCall"" [label=""approveAndCall""];
""1271_unlockReward"" [label=""unlockReward""];
""1271_increaseTotalSupply"" [label=""increaseTotalSupply""];
""1271_setAdmin"" [label=""setAdmin""];
""1271_sell"" [label=""sell""];
""1271_setMinBalance"" [label=""setMinBalance""];
""1271_transfer"" -> ""1271_sell"";
""1271_setICO"" -> ""1271_onlyOwner"";
""1271_withdraw"" -> ""1271_onlyOwner"";
""1271_setAdmin"" -> ""1271_onlyOwner"";
""1271_approveAndCall"" -> ""1271_onlyOwner"";
""1271_transferFrom"" -> ""1271__transfer"";
""1271_approveAndCall"" -> ""1271_approve"";
""1271_setMinBalance"" -> ""1271_onlyOwner"";
""1271_burn"" -> ""1271_onlyOwner"";
""1271_reward"" -> ""1271__transfer"";
""1271_unlockReward"" -> ""1271_sell"";
""1271_setCanTrade"" -> ""1271_onlyOwner"";
""1271_setPrices"" -> ""1271_onlyOwner"";
""1271_transferAndFreeze"" -> ""1271_freeze"";
""1271_setUsersCanTrade"" -> ""1271_onlyOwner"";
""1271_transferReward"" -> ""1271_sell"";
""1271_transferAndFreeze"" -> ""1271__transfer"";
""1271_transfer"" -> ""1271__transfer"";
""1271_freeze"" -> ""1271__freeze"";
""1271_transferAndFreeze"" -> ""1271_onlyAdmin"";
""1271_transfer"" -> ""1271_notICO"";
""1271_increaseTotalSupply"" -> ""1271_onlyOwner"";
""1271_reward"" -> ""1271_sell"";
}
"
0x6ed680055bd5a04c194c954f71019ee90145001c.sol,Game,contract Game is FixedSupplyToken { HourglassInterface constant P3Dcontract_ = HourglassInterface(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe); struct Village { address owner; uint defending; uint lastcollect; uint beginnerprotection; },0,"subgraph cluster_4971_Game {
label=""Game"";
""4971_playerinfo"" [label=""playerinfo""];
""4971_villageinfo"" [label=""villageinfo""];
""4971_batchcreatevillage"" [label=""batchcreatevillage""];
""4971_adddotchtooffer"" [label=""adddotchtooffer""];
""4971_preregvills"" [label=""preregvills""];
""4971_attackhill"" [label=""attackhill""];
""4971_fallback"" [label=""fallback""];
""4971_removedotchtooffer"" [label=""removedotchtooffer""];
""4971_supporthill"" [label=""supporthill""];
""4971_changebeginnerprotection"" [label=""changebeginnerprotection""];
""4971_collecttaxes"" [label=""collecttaxes""];
""4971_cheapredeemvillage"" [label=""cheapredeemvillage""];
""4971_constructor"" [label=""constructor""];
""4971_soldiersinfo"" [label=""soldiersinfo""];
""4971_createvillage"" [label=""createvillage""];
""4971_gotchinfo"" [label=""gotchinfo""];
""4971_offerchangeprice"" [label=""offerchangeprice""];
""4971_placeoffer"" [label=""placeoffer""];
""4971_Divsforall"" [label=""Divsforall""];
""4971_buyp3d"" [label=""buyp3d""];
""4971_Expand"" [label=""Expand""];
""4971_startnewround"" [label=""startnewround""];
""4971_redeemablevilsinfo"" [label=""redeemablevilsinfo""];
""4971_claimdivs"" [label=""claimdivs""];
""4971_takeoffer"" [label=""takeoffer""];
""4971_Divs"" [label=""Divs""];
""4971_changetradestatus"" [label=""changetradestatus""];
""4971_support"" [label=""support""];
""4971_changesoldierreplenishrate"" [label=""changesoldierreplenishrate""];
""4971_setdivsforall"" [label=""setdivsforall""];
""4971_renewbeginnerprotection"" [label=""renewbeginnerprotection""];
""4971_updatesolbuyrate"" [label=""updatesolbuyrate""];
""4971_buyDOTCH"" [label=""buyDOTCH""];
""4971_hillpayout"" [label=""hillpayout""];
""4971_harvestabledivs"" [label=""harvestabledivs""];
""4971_buysoldiers"" [label=""buysoldiers""];
""4971_attack"" [label=""attack""];
""4971_batchcollecttaxes"" [label=""batchcollecttaxes""];
""4971_updatesolsforhire"" [label=""updatesolsforhire""];
""4971_sellDOTCH"" [label=""sellDOTCH""];
""4971_preregvills"" -> ""4971_onlyOwner"";
""4971_createvillage"" -> ""4971_hillpayout"";
""4971_collecttaxes"" -> ""4971_hillpayout"";
""4971_changesoldierreplenishrate"" -> ""4971_onlyOwner"";
""4971_Divsforall"" -> ""4971_claimdivs"";
""4971_changetradestatus"" -> ""4971_onlyOwner"";
""4971_constructor"" -> ""4971_updatesolbuyrate"";
""4971_Expand"" -> ""4971_buyp3d"";
""4971_attack"" -> ""4971_hillpayout"";
""4971_attack"" -> ""4971_collecttaxes"";
""4971_buysoldiers"" -> ""4971_updatesolbuyrate"";
""4971_setdivsforall"" -> ""4971_onlyOwner"";
""4971_Divs"" -> ""4971_claimdivs"";
""4971_startnewround"" -> ""4971_updatesolbuyrate"";
""4971_attackhill"" -> ""4971_hillpayout"";
""4971_batchcreatevillage"" -> ""4971_hillpayout"";
""4971_buysoldiers"" -> ""4971_updatesolsforhire"";
""4971_changebeginnerprotection"" -> ""4971_onlyOwner"";
""4971_Divsforall"" -> ""4971_harvestabledivs"";
}
"
0xef8bf10b60a9ce2413c9dc37d1da3c44683372c3.sol,asset,contract asset is owned { using strings for *; struct data { string link; string encryptionType; string hashValue; },0,"subgraph cluster_867_asset {
label=""asset"";
""867_getAssetBaseInfo"" [label=""getAssetBaseInfo""];
""867_setRemark2"" [label=""setRemark2""];
""867_getDataByIndex"" [label=""getDataByIndex""];
""867_setPrice"" [label=""setPrice""];
""867_getDataNum"" [label=""getDataNum""];
""867_setTradeable"" [label=""setTradeable""];
""867_constructor"" [label=""constructor""];
""867_transferOwnership"" [label=""transferOwnership""];
""867_initAsset"" [label=""initAsset""];
""867_setDataLink"" [label=""setDataLink""];
""867_setRemark1"" [label=""setRemark1""];
""867_cancelContract"" [label=""cancelContract""];
""867_setRemark1"" -> ""867_onlyHolder"";
""867_initAsset"" -> ""867_onlyHolder"";
""867_setPrice"" -> ""867_onlyHolder"";
""867_transferOwnership"" -> ""867_onlyHolder"";
""867_setRemark2"" -> ""867_onlyHolder"";
""867_setTradeable"" -> ""867_onlyHolder"";
""867_setDataLink"" -> ""867_onlyHolder"";
""867_cancelContract"" -> ""867_onlyHolder"";
}
"
0xcf70f36f8fd04713b33900bab530fd2f63ed9ae0.sol,TheNextBlock,"contract TheNextBlock { using SafeMath for uint256; event BetReceived(address sender, address betOnMiner, address miner); event Jackpot(address winner, uint256 amount); struct Owner { uint256 balance; address addr; }",0,"subgraph cluster_610_TheNextBlock {
label=""TheNextBlock"";
""610_safeGetPercent"" [label=""safeGetPercent""];
""610_getBalance"" [label=""getBalance""];
""610_getPlayerData"" [label=""getPlayerData""];
""610_getPlayersPoints"" [label=""getPlayersPoints""];
""610_getNextPrizePool"" [label=""getNextPrizePool""];
""610_placeBet"" [label=""placeBet""];
""610_changeOwner"" [label=""changeOwner""];
""610_getMyBalance"" [label=""getMyBalance""];
""610_fallback"" [label=""fallback""];
""610_getOwnersBalance"" [label=""getOwnersBalance""];
""610_TheNextBlock"" [label=""TheNextBlock""];
""610_getMyPoints"" [label=""getMyPoints""];
""610_withdrawMyFunds"" [label=""withdrawMyFunds""];
""610_getPlayersBalance"" [label=""getPlayersBalance""];
""610_withdrawOwnersFunds"" [label=""withdrawOwnersFunds""];
""610_getPrizePool"" [label=""getPrizePool""];
""610_placeBet"" -> ""610_notMore"";
""610_withdrawOwnersFunds"" -> ""610_onlyOwner"";
""610_placeBet"" -> ""610_onlyOnce"";
""610_placeBet"" -> ""610_notLess"";
""610_placeBet"" -> ""610_safeGetPercent"";
""610_changeOwner"" -> ""610_onlyOwner"";
}
"
0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949.sol,x32323,"contract x32323 is owned{ mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function freezeAccount(address target, bool freeze) onlyOwner { frozenAccount[target] = freeze; FrozenFunds(target, freeze); }",0,"subgraph cluster_433_x32323 {
label=""x32323"";
""433_setMinBalance"" [label=""setMinBalance""];
""433_approve"" [label=""approve""];
""433_freezeAccount"" [label=""freezeAccount""];
""433_buy"" [label=""buy""];
""433_setPrices"" [label=""setPrices""];
""433_TokenERC20"" [label=""TokenERC20""];
""433_approveAndCall"" [label=""approveAndCall""];
""433_sell"" [label=""sell""];
""433_transfer"" [label=""transfer""];
""433__transfer"" [label=""_transfer""];
""433_transfer"" -> ""433__transfer"";
""433_setPrices"" -> ""433_onlyOwner"";
""433_approveAndCall"" -> ""433_approve"";
""433_setMinBalance"" -> ""433_onlyOwner"";
""433_transfer"" -> ""433_sell"";
""433_freezeAccount"" -> ""433_onlyOwner"";
}
"
0x2836ad31220bb62d0df9f1b6354c75118dcbf247.sol,TLIFE,"contract TLIFE is OWN, ERC20 { using SafeMath for uint256; uint256 internal Bank = 0; uint256 public Price = 800000000; uint256 internal constant Minn = 10000000000000000; uint256 internal constant Maxx = 10000000000000000000; address internal constant ethdriver = 0x61585C21E0C0c5875EaB1bc707476BD0a28f157b; function() payable public { require(msg.value>0); require(msg.value >= Minn); require(msg.value <= Maxx); mintTokens(msg.sender, msg.value); }",0,"subgraph cluster_870_TLIFE {
label=""TLIFE"";
""870_fallback"" [label=""fallback""];
""870_transfer"" [label=""transfer""];
""870_mintTokens"" [label=""mintTokens""];
""870_transferFrom"" [label=""transferFrom""];
""870_transfer"" -> ""870_onlyPayloadSize"";
""870_fallback"" -> ""870_mintTokens"";
""870_transferFrom"" -> ""870_onlyPayloadSize"";
}
"
0x725374b9671f3f2d326359750f9f2da4a5fe5d08.sol,initLib,contract initLib is DateTime { using SafeMath for uint; string public symbol = ; uint256 public decimals = 18; address public tokenAddress; uint256 public tokenPrice = 43200; uint256 public domainCost = 500; uint256 public publishCost = 200; uint256 public hostRegistryCost = 1000; uint256 public userSurfingCost = 10; uint256 public registryDuration = 365 * 1 days; uint256 public stakeLockTime = 31 * 1 days; uint public websiteSizeLimit = 512; uint public websiteFilesLimit = 20; address public ow_owner; address public cmcAddress; uint public lastPriceUpdate; mapping ( address => uint256 ) public balanceOf; mapping ( address => uint256 ) public stakeBalance; mapping ( uint => mapping ( uint => uint256 )) public poolBalance; mapping ( uint => mapping ( uint => uint256 )) public poolBalanceClaimed; mapping ( uint => mapping ( uint => uint256 )) public totalStakes; uint256 public totalSubscriber; uint256 public totalHosts; uint256 public totalDomains; mapping ( address => UserMeta ) public users; mapping ( bytes32 => DomainMeta ) public domains; mapping ( bytes32 => DomainSaleMeta ) public domain_sale; mapping ( address => HostMeta ) public hosts; mapping ( uint => address ) public hostAddress; mapping ( uint => bytes32 ) public hostConnection; mapping ( bytes32 => bool ) public hostConnectionDB; mapping ( uint => mapping ( uint => mapping ( address => uint256 ) )) public hostStakes; mapping ( uint => mapping ( uint => mapping ( address => uint256 ) )) public stakeTmpBalance; mapping ( address => uint256 ) public stakesLockups; mapping ( uint => uint ) public hostUpdates; uint public hostUpdatesCounter; mapping ( uint => string ) public websiteUpdates; uint public websiteUpdatesCounter; struct DomainMeta { string name; uint admin_index; uint total_admins; mapping(uint => mapping(address => bool)) admins; string git; bytes32 domain_bytes; bytes32 hash; uint total_files; uint version; mapping(uint => mapping(bytes32 => bytes32)) files_hash; uint ttl; uint time; uint expity_time; },0,"subgraph cluster_1056_initLib {
label=""initLib"";
""1056__priceFetchingCost"" [label=""_priceFetchingCost""];
""1056_debitToken"" [label=""debitToken""];
""1056_stringToBytes32"" [label=""stringToBytes32""];
""1056___response"" [label=""__response""];
""1056_fetchTokenPrice"" [label=""fetchTokenPrice""];
""1056__currentPrice"" [label=""_currentPrice""];
""1056_creditUserPool"" [label=""creditUserPool""];
""1056_creditUserPool"" -> ""1056_diffMonths"";
""1056_creditUserPool"" -> ""1056_addMonth"";
""1056_creditUserPool"" -> ""1056__timestampToDate"";
""1056_creditUserPool"" -> ""1056_getDaysInMonth"";
}
"
0x5c8951c94b059900d05b10d592b44c78574196c5.sol,EtherCityToken,"contract EtherCityToken is ERC721 { event CityCreated(uint256 tokenId, string name, string country, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name, string country); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.001 ether; uint256 private constant PROMO_CREATION_LIMIT = 5000; uint256 private firstStepLimit = 0.005 ether; uint256 private secondStepLimit = 0.055 ether; uint256 private thirdStepLimit = 0.5 ether; uint256 private fourthStepLimit = 10.0 ether; mapping (uint256 => address) public cityIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public cityIndexToApproved; mapping (uint256 => uint256) private cityIndexToPrice; address public ceoAddress; address public cooAddress; uint256 public promoCreatedCount; struct City { string name; string country; }",0,"subgraph cluster_1081_EtherCityToken {
label=""EtherCityToken"";
""1081__approved"" [label=""_approved""];
""1081_totalSupply"" [label=""totalSupply""];
""1081_takeOwnership"" [label=""takeOwnership""];
""1081__createCity"" [label=""_createCity""];
""1081_setCOO"" [label=""setCOO""];
""1081__transfer"" [label=""_transfer""];
""1081_transferFrom"" [label=""transferFrom""];
""1081_payout"" [label=""payout""];
""1081_name"" [label=""name""];
""1081__addressNotNull"" [label=""_addressNotNull""];
""1081_balanceOf"" [label=""balanceOf""];
""1081_symbol"" [label=""symbol""];
""1081__withdrawFunds"" [label=""_withdrawFunds""];
""1081__payout"" [label=""_payout""];
""1081_setCEO"" [label=""setCEO""];
""1081_createContractCity"" [label=""createContractCity""];
""1081_EtherCityToken"" [label=""EtherCityToken""];
""1081_implementsERC721"" [label=""implementsERC721""];
""1081_createPromoCity"" [label=""createPromoCity""];
""1081_tokensOfOwner"" [label=""tokensOfOwner""];
""1081_purchase"" [label=""purchase""];
""1081_priceOf"" [label=""priceOf""];
""1081_approve"" [label=""approve""];
""1081_getCity"" [label=""getCity""];
""1081_transfer"" [label=""transfer""];
""1081__owns"" [label=""_owns""];
""1081_ownerOf"" [label=""ownerOf""];
""1081_transfer"" -> ""1081__owns"";
""1081_setCEO"" -> ""1081_onlyCEO"";
""1081_takeOwnership"" -> ""1081__approved"";
""1081_transfer"" -> ""1081__transfer"";
""1081_payout"" -> ""1081__payout"";
""1081_createPromoCity"" -> ""1081__createCity"";
""1081_createPromoCity"" -> ""1081_onlyCOO"";
""1081_tokensOfOwner"" -> ""1081_balanceOf"";
""1081_takeOwnership"" -> ""1081__transfer"";
""1081_setCOO"" -> ""1081_onlyCEO"";
""1081_transferFrom"" -> ""1081__transfer"";
""1081_createContractCity"" -> ""1081_onlyCOO"";
""1081_transfer"" -> ""1081__addressNotNull"";
""1081_transferFrom"" -> ""1081__approved"";
""1081_purchase"" -> ""1081__transfer"";
""1081__createCity"" -> ""1081__transfer"";
""1081_approve"" -> ""1081__owns"";
""1081_payout"" -> ""1081_onlyCLevel"";
""1081_createContractCity"" -> ""1081__createCity"";
""1081_purchase"" -> ""1081__addressNotNull"";
""1081_transferFrom"" -> ""1081__owns"";
""1081_transferFrom"" -> ""1081__addressNotNull"";
""1081_tokensOfOwner"" -> ""1081_totalSupply"";
""1081_takeOwnership"" -> ""1081__addressNotNull"";
}
"
0x0314df8e5f5acb4c6cfea17babf5b216f0a687db.sol,ERC20Token,"contract ERC20Token is ERC20Interface, Owned { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function ERC20Token() public { name = ; symbol = ; decimals = 18; _totalSupply = 2000000000 * 10**uint(decimals); balances[owner] = _totalSupply; Transfer(address(0), owner, _totalSupply); }",0,"subgraph cluster_550_ERC20Token {
label=""ERC20Token"";
""550_approveAndCall"" [label=""approveAndCall""];
""550_ERC20Token"" [label=""ERC20Token""];
""550_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""550_balanceOf"" [label=""balanceOf""];
""550_transfer"" [label=""transfer""];
""550_approve"" [label=""approve""];
""550_allowance"" [label=""allowance""];
""550_transferFrom"" [label=""transferFrom""];
""550_totalSupply"" [label=""totalSupply""];
""550_fallback"" [label=""fallback""];
""550_transferAnyERC20Token"" -> ""550_onlyOwner"";
}
"
0xd7de403483c2a2f2445eb48b744663e25b024cff.sol,VeetuneCrowdsale,"contract VeetuneCrowdsale is Crowdsale, Ownable { using SafeMath for uint256; mapping(address => uint256) public balances; uint256 public tokensIssued; uint256 public bonusMultiplier; bool public closed; event TokenDelivered(address indexed receiver, uint256 amount); event TokenAdded(address indexed beneficiary, uint256 amount); function VeetuneCrowdsale( uint256 _rate, address _wallet, ERC20 _token, uint256 _bonusMultiplier ) Crowdsale( _rate, _wallet, _token ) { bonusMultiplier = _bonusMultiplier; }",0,"subgraph cluster_744_VeetuneCrowdsale {
label=""VeetuneCrowdsale"";
""744_VeetuneCrowdsale"" [label=""VeetuneCrowdsale""];
""744_addTokens"" [label=""addTokens""];
""744_withdrawTokensFor"" [label=""withdrawTokensFor""];
""744_postCrowdsaleWithdraw"" [label=""postCrowdsaleWithdraw""];
""744_withdrawTokens"" [label=""withdrawTokens""];
""744_transferTokens"" [label=""transferTokens""];
""744_hasClosed"" [label=""hasClosed""];
""744_closeCrowdsale"" [label=""closeCrowdsale""];
""744__withdrawTokensFor"" [label=""_withdrawTokensFor""];
""744_setWallet"" [label=""setWallet""];
""744_setRate"" [label=""setRate""];
""744__getTokenAmount"" [label=""_getTokenAmount""];
""744_setBonusMultiplier"" [label=""setBonusMultiplier""];
""744__processPurchase"" [label=""_processPurchase""];
""744__processPurchase"" -> ""744_hasClosed"";
""744__withdrawTokensFor"" -> ""744__deliverTokens"";
""744_closeCrowdsale"" -> ""744_onlyOwner"";
""744_withdrawTokensFor"" -> ""744_onlyOwner"";
""744__withdrawTokensFor"" -> ""744_hasClosed"";
""744_addTokens"" -> ""744_onlyOwner"";
""744_setRate"" -> ""744_onlyOwner"";
""744_withdrawTokensFor"" -> ""744__withdrawTokensFor"";
""744_withdrawTokens"" -> ""744__withdrawTokensFor"";
""744_VeetuneCrowdsale"" -> ""744_Crowdsale"";
""744_postCrowdsaleWithdraw"" -> ""744_onlyOwner"";
""744_setWallet"" -> ""744_onlyOwner"";
""744_setBonusMultiplier"" -> ""744_onlyOwner"";
""744_transferTokens"" -> ""744_onlyOwner"";
}
"
0xa5d1e58ece1fc438d64e65769d2ab730143a4caf.sol,RobomedIco,"contract RobomedIco is ERC223, ERC20 { using SafeMath for uint256; string public name = ; string public symbol = ; uint8 public decimals = 18; address public constant ADDR_OWNER = 0x21F6C4D926B705aD244Ec33271559dA8c562400F; address public constant ADDR_WITHDRAWAL1 = 0x0dD97e6259a7de196461B36B028456a97e3268bE; address public constant ADDR_WITHDRAWAL2 = 0x8c5B02144F7664D37FDfd4a2f90148d08A04838D; address public constant ADDR_BOUNTY_TOKENS_ACCOUNT = 0x6542393623Db0D7F27fDEd83e6feDBD767BfF9b4; address public constant ADDR_TEAM_TOKENS_ACCOUNT = 0x28c6bCAB2204CEd29677fEE6607E872E3c40d783; uint256 public constant INITIAL_COINS_FOR_VIPPLACEMENT =507937500 * 10 ** 18; uint256 public constant DURATION_VIPPLACEMENT = 1 seconds; uint256 public constant EMISSION_FOR_PRESALE = 76212500 * 10 ** 18; uint256 public constant DURATION_PRESALE = 1 days; uint256 public constant RATE_PRESALE = 2702; uint256 public constant DURATION_SALESTAGES = 10 days; uint256 public constant RATE_SALESTAGE1 = 2536; uint256 public constant EMISSION_FOR_SALESTAGE1 = 40835000 * 10 ** 18; uint256 public constant RATE_SALESTAGE2 = 2473; uint256 public constant EMISSION_FOR_SALESTAGE2 = 40835000 * 10 ** 18; uint256 public constant RATE_SALESTAGE3 = 2390; uint256 public constant EMISSION_FOR_SALESTAGE3 = 40835000 * 10 ** 18; uint256 public constant RATE_SALESTAGE4 = 2349; uint256 public constant EMISSION_FOR_SALESTAGE4 = 40835000 * 10 ** 18; uint256 public constant RATE_SALESTAGE5 = 2286; uint256 public constant EMISSION_FOR_SALESTAGE5 = 40835000 * 10 ** 18; uint256 public constant RATE_SALESTAGE6 = 2224; uint256 public constant EMISSION_FOR_SALESTAGE6 = 40835000 * 10 ** 18; uint256 public constant RATE_SALESTAGE7 = 2182; uint256 public constant EMISSION_FOR_SALESTAGE7 = 40835000 * 10 ** 18; uint256 public constant DURATION_SALESTAGELAST = 1 days; uint256 public constant RATE_SALESTAGELAST = 2078; uint256 public constant EMISSION_FOR_SALESTAGELAST = 302505000 * 10 ** 18; uint256 public constant DURATION_NONUSETEAM = 180 days; uint256 public constant DURATION_BEFORE_RESTORE_UNSOLD = 270 days; uint256 public constant EMISSION_FOR_BOUNTY = 83750000 * 10 ** 18; uint256 public constant EMISSION_FOR_TEAM = 418750000 * 10 ** 18; uint256 public constant TEAM_MEMBER_VAL = 2000000 * 10 ** 18; enum IcoStates { VipPlacement, PreSale, SaleStage1, SaleStage2, SaleStage3, SaleStage4, SaleStage5, SaleStage6, SaleStage7, SaleStageLast, PostIco }",0,"subgraph cluster_2497_RobomedIco {
label=""RobomedIco"";
""2497_decimals"" [label=""decimals""];
""2497_gotoSaleStageLast"" [label=""gotoSaleStageLast""];
""2497_canGotoState"" [label=""canGotoState""];
""2497_RobomedIco"" [label=""RobomedIco""];
""2497_restoreUnsoldTokens"" [label=""restoreUnsoldTokens""];
""2497_transferFrom"" [label=""transferFrom""];
""2497_approveWithdrawal"" [label=""approveWithdrawal""];
""2497_transferToAddress"" [label=""transferToAddress""];
""2497_gotoSaleStage1"" [label=""gotoSaleStage1""];
""2497_transitionBetweenSaleStages"" [label=""transitionBetweenSaleStages""];
""2497_transfer"" [label=""transfer""];
""2497_gotoPostIco"" [label=""gotoPostIco""];
""2497_gotoNextState"" [label=""gotoNextState""];
""2497_balanceOf"" [label=""balanceOf""];
""2497_buyTokens"" [label=""buyTokens""];
""2497_symbol"" [label=""symbol""];
""2497_setMoney"" [label=""setMoney""];
""2497_initWithdrawal"" [label=""initWithdrawal""];
""2497_transferBounty"" [label=""transferBounty""];
""2497_teamBalanceOf"" [label=""teamBalanceOf""];
""2497_totalSupply"" [label=""totalSupply""];
""2497_allowance"" [label=""allowance""];
""2497_accrueTeamTokens"" [label=""accrueTeamTokens""];
""2497_gotoPreSale"" [label=""gotoPreSale""];
""2497_name"" [label=""name""];
""2497_transferToContract"" [label=""transferToContract""];
""2497_approve"" [label=""approve""];
""2497_transferTeam"" [label=""transferTeam""];
""2497__transfer"" [label=""_transfer""];
""2497_fallback"" [label=""fallback""];
""2497_isContract"" [label=""isContract""];
""2497_canRestoreUnsoldTokens"" [label=""canRestoreUnsoldTokens""];
""2497_restoreUnsoldTokens"" -> ""2497_canRestoreUnsoldTokens"";
""2497_gotoPreSale"" -> ""2497_canGotoState"";
""2497_initWithdrawal"" -> ""2497_afterIco"";
""2497_gotoNextState"" -> ""2497_gotoPostIco"";
""2497_gotoNextState"" -> ""2497_gotoSaleStage1"";
""2497_gotoSaleStage1"" -> ""2497_canGotoState"";
""2497_transitionBetweenSaleStages"" -> ""2497_setMoney"";
""2497_transferTeam"" -> ""2497_onlyOwner"";
""2497_transferToAddress"" -> ""2497__transfer"";
""2497_transitionBetweenSaleStages"" -> ""2497_canGotoState"";
""2497_gotoSaleStageLast"" -> ""2497_setMoney"";
""2497_transfer"" -> ""2497_transferToContract"";
""2497_gotoSaleStage1"" -> ""2497_setMoney"";
""2497_gotoSaleStageLast"" -> ""2497_canGotoState"";
""2497_initWithdrawal"" -> ""2497_onlyWithdrawal1"";
""2497_buyTokens"" -> ""2497_transitionBetweenSaleStages"";
""2497_transfer"" -> ""2497_transferToAddress"";
""2497_transfer"" -> ""2497_isContract"";
""2497_gotoNextState"" -> ""2497_gotoPreSale"";
""2497_gotoPostIco"" -> ""2497_canGotoState"";
""2497_RobomedIco"" -> ""2497_transferTeam"";
""2497_accrueTeamTokens"" -> ""2497_afterIco"";
""2497_transfer"" -> ""2497_checkForTransfer"";
""2497_transitionBetweenSaleStages"" -> ""2497_gotoSaleStageLast"";
""2497_restoreUnsoldTokens"" -> ""2497_onlyOwner"";
""2497_transferToContract"" -> ""2497__transfer"";
""2497_transferFrom"" -> ""2497_afterIco"";
""2497_gotoPostIco"" -> ""2497_setMoney"";
""2497_gotoPreSale"" -> ""2497_setMoney"";
""2497_gotoNextState"" -> ""2497_onlyOwner"";
""2497_approveWithdrawal"" -> ""2497_afterIco"";
""2497_gotoNextState"" -> ""2497_gotoSaleStageLast"";
""2497_fallback"" -> ""2497_buyTokens"";
""2497_approveWithdrawal"" -> ""2497_onlyWithdrawal2"";
""2497_approve"" -> ""2497_afterIco"";
""2497_transferBounty"" -> ""2497_onlyOwner"";
}
"
0xf4f5271c9d6f23cc00f93625b502f88d289a1607.sol,WithdrawConfirmation,"contract WithdrawConfirmation is Owned { event Confirmation(address indexed sender, uint indexed withdrawId); event OwnerAddition(address indexed owner); event OwnerRemoval(address indexed owner); event WithdrawCreated(address indexed destination, uint indexed value, uint indexed id); event Execution(uint indexed withdrawId); event ExecutionFailure(uint indexed withdrawId); mapping(address => bool) public isOwner; mapping(uint => Withdraw) public withdraws; mapping(uint => mapping(address => bool)) public confirmations; address[] public owners; uint public withdrawCount; struct Withdraw { address destination; uint value; bool executed; }",0,"subgraph cluster_657_WithdrawConfirmation {
label=""WithdrawConfirmation"";
""657_createWithdraw"" [label=""createWithdraw""];
""657_constructor"" [label=""constructor""];
""657_addOwner"" [label=""addOwner""];
""657_removeOwner"" [label=""removeOwner""];
""657_executeWithdraw"" [label=""executeWithdraw""];
""657_isConfirmed"" [label=""isConfirmed""];
""657_confirmWithdraw"" [label=""confirmWithdraw""];
""657_createWithdraw"" -> ""657_notNull"";
""657_executeWithdraw"" -> ""657_confirmed"";
""657_confirmWithdraw"" -> ""657_executeWithdraw"";
""657_createWithdraw"" -> ""657_ownerExists"";
""657_confirmWithdraw"" -> ""657_notConfirmed"";
""657_removeOwner"" -> ""657_ownerExists"";
""657_createWithdraw"" -> ""657_executeWithdraw"";
""657_confirmWithdraw"" -> ""657_withdrawExists"";
""657_executeWithdraw"" -> ""657_isConfirmed"";
""657_executeWithdraw"" -> ""657_notExecuted"";
""657_addOwner"" -> ""657_hasPermission"";
""657_confirmWithdraw"" -> ""657_ownerExists"";
""657_executeWithdraw"" -> ""657_ownerExists"";
""657_removeOwner"" -> ""657_hasPermission"";
""657_addOwner"" -> ""657_ownerDoesNotExist"";
}
"
0x64cdf819d3e75ac8ec217b3496d7ce167be42e80.sol,SafeMath,"contract SafeMath { uint256 constant MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; function safeAdd(uint256 x, uint256 y) constant internal returns (uint256 z) { require(x <= MAX_UINT256 - y); return x + y; }",0,"subgraph cluster_76_SafeMath {
label=""SafeMath"";
""76_safeSub"" [label=""safeSub""];
""76_safeAdd"" [label=""safeAdd""];
""76_safeMul"" [label=""safeMul""];
}
"
0x39e743fee400a5d9b36f1167b70c10e8f06440e5.sol,TNCGroupToken,"contract TNCGroupToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string memory tokenName, string memory tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_346_TNCGroupToken {
label=""TNCGroupToken"";
""346_approve"" [label=""approve""];
""346_transferFrom"" [label=""transferFrom""];
""346_transfer"" [label=""transfer""];
""346_approveAndCall"" [label=""approveAndCall""];
""346_constructor"" [label=""constructor""];
""346__transfer"" [label=""_transfer""];
""346_burn"" [label=""burn""];
""346_transferFrom"" -> ""346__transfer"";
""346_approveAndCall"" -> ""346_approve"";
""346_transfer"" -> ""346__transfer"";
}
"
0x6c4de8424a6184c830234b996f7dba9720dc9306.sol,XKnockoutHamster,contract XKnockoutHamster { using SafeMath for uint256; struct EntityStruct { bool active; bool vip; uint listPointer; uint256 date; uint256 update; uint256 exit; uint256 profit; },0,"subgraph cluster_979_XKnockoutHamster {
label=""XKnockoutHamster"";
""979_rewardDev"" [label=""rewardDev""];
""979_lastVIP"" [label=""lastVIP""];
""979_queueVIP"" [label=""queueVIP""];
""979_lastREG"" [label=""lastREG""];
""979_fallback"" [label=""fallback""];
""979_checkRemaining"" [label=""checkRemaining""];
""979_lastVIPkey"" [label=""lastVIPkey""];
""979_exitREG"" [label=""exitREG""];
""979_exitVIP"" [label=""exitVIP""];
""979_newVip"" [label=""newVip""];
""979_up"" [label=""up""];
""979_constructor"" [label=""constructor""];
""979_queueREG"" [label=""queueREG""];
""979_getVipCount"" [label=""getVipCount""];
""979_newEntity"" [label=""newEntity""];
""979_addToList"" [label=""addToList""];
""979_checkRemaining"" -> ""979_lastVIPkey"";
""979_checkRemaining"" -> ""979_rewardDev"";
""979_lastVIP"" -> ""979_lastVIPkey"";
""979_fallback"" -> ""979_addToList"";
""979_addToList"" -> ""979_lastVIPkey"";
""979_up"" -> ""979_newVip"";
""979_fallback"" -> ""979_up"";
""979_fallback"" -> ""979_checkRemaining"";
""979_addToList"" -> ""979_exitREG"";
""979_addToList"" -> ""979_newEntity"";
""979_addToList"" -> ""979_exitVIP"";
}
"
0xf0b8a682f2bf7afcc2b2c5e2089139c8e28786bf.sol,DealsSupport,"contract DealsSupport is IDealsSupport { using SafeMath for uint; address public adminAddress; address public merchantAddress; mapping(uint => Affiliate) public affiliates; uint public affiliatesCount; mapping(uint => Deal) public deals; uint public dealsCount; mapping(address => uint[]) public affiliateDealIndexes; mapping(address => uint) public affiliateDealIndexesCount; mapping(uint => mapping(address => uint)) public dealAffiliateReferenceHash; mapping(uint => mapping(address => uint)) public dealAffiliateReferenceHashCount; mapping(uint => uint) public referenceHashDealIndex; event ApproveAffiliate(bytes4 _dealId, address indexed _merchantAddress, uint indexed _dealIndex, address indexed _affiliateAddress, uint _referenceHash); event CreateDeal(bytes4 _dealId, uint _dealIndex, address indexed _merchantAddress, address indexed _rewardTokenAddress, uint _rewardRatePpm, uint _daysOfCancellation, uint _daysBeforeClose, uint _dealsCount); event ToggleBlockAffiliate(bytes4 _dealId, uint _referenceHash, bool _isBlocked); event DealCancelled(bytes4 _dealId, uint _days, address _who); event StakeFilled(bytes4 _dealId, uint _fill, uint _left); event RewardClaimed(bytes4 _dealId, uint _referenceHash, uint _rewardAmount); event DealUpdated(bytes4 _dealId, uint _newRewardRatePpm); event RewardCreated(bytes4 _dealId, uint _referenceHash, uint _purchasedTokenAmount, uint _rewardAmount); struct Affiliate { address affiliateAddress; bool isBlocked; uint rewardAmount; uint affiliateRewardsCount; mapping(uint => AffiliateReward) affiliateRewards; }",0,"subgraph cluster_197_IDealsSupport {
label=""IDealsSupport"";
""197_getDealIndex"" [label=""getDealIndex""];
""197_cancelDealByMerchant"" [label=""cancelDealByMerchant""];
""197_changeAdmin"" [label=""changeAdmin""];
""197_cancelAllDealsByMerchant"" [label=""cancelAllDealsByMerchant""];
""197_getReferenceHash"" [label=""getReferenceHash""];
""197_getMyReward"" [label=""getMyReward""];
""197_getAffiliateRewardInfo"" [label=""getAffiliateRewardInfo""];
""197_updateDeal"" [label=""updateDeal""];
""197_cancelDealByAdmin"" [label=""cancelDealByAdmin""];
""197_fillStake"" [label=""fillStake""];
""197_getMyStakeBack"" [label=""getMyStakeBack""];
""197_getDynamicDealInfo"" [label=""getDynamicDealInfo""];
""197_isDealCancelled"" [label=""isDealCancelled""];
""197_isDealClosed"" [label=""isDealClosed""];
""197_toggleBlockAffiliate"" [label=""toggleBlockAffiliate""];
""197_canBeCancelledByMerchant"" [label=""canBeCancelledByMerchant""];
""197_approveAffiliate"" [label=""approveAffiliate""];
""197_createDeal"" [label=""createDeal""];
}
"
0x087a7d49415371f3eaee702a94466603770a5f04.sol,MintableToken,"contract MintableToken is StandardTokenExt { using SafeMathLib for uint; bool public mintingFinished = false; mapping (address => bool) public mintAgents; event MintingAgentChanged(address addr, bool state); event Minted(address receiver, uint amount); function mint(address receiver, uint amount) onlyMintAgent canMint public { totalSupply_ = totalSupply_.plus(amount); balances[receiver] = balances[receiver].plus(amount); Transfer(0, receiver, amount); }",0,"subgraph cluster_2412_MintableToken {
label=""MintableToken"";
""2412_setMintAgent"" [label=""setMintAgent""];
""2412_mint"" [label=""mint""];
""2412_mint"" -> ""2412_onlyMintAgent"";
""2412_setMintAgent"" -> ""2412_canMint"";
""2412_setMintAgent"" -> ""2412_onlyOwner"";
""2412_mint"" -> ""2412_canMint"";
}
"
0x087a7d49415371f3eaee702a94466603770a5f04.sol,Crowdsale,"contract Crowdsale is CrowdsaleBase { bool public requireCustomerId; bool public requiredSignedAddress; address public signerAddress; function Crowdsale(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal) CrowdsaleBase(_token, _pricingStrategy, _multisigWallet, _start, _end, _minimumFundingGoal) { }",0,"subgraph cluster_1681_CrowdsaleBase {
label=""CrowdsaleBase"";
""1681_isPricingSane"" [label=""isPricingSane""];
""1681_investInternal"" [label=""investInternal""];
""1681_CrowdsaleBase"" [label=""CrowdsaleBase""];
""1681_setFinalizeAgent"" [label=""setFinalizeAgent""];
""1681_loadRefund"" [label=""loadRefund""];
""1681_setMultisig"" [label=""setMultisig""];
""1681_isBreakingCap"" [label=""isBreakingCap""];
""1681_isCrowdsale"" [label=""isCrowdsale""];
""1681_isFinalizerSane"" [label=""isFinalizerSane""];
""1681_setEarlyParicipantWhitelist"" [label=""setEarlyParicipantWhitelist""];
""1681_refund"" [label=""refund""];
""1681_setEndsAt"" [label=""setEndsAt""];
""1681_setOwnerTestValue"" [label=""setOwnerTestValue""];
""1681_isMinimumGoalReached"" [label=""isMinimumGoalReached""];
""1681_assignTokens"" [label=""assignTokens""];
""1681_setPricingStrategy"" [label=""setPricingStrategy""];
""1681_getState"" [label=""getState""];
""1681_isCrowdsaleFull"" [label=""isCrowdsaleFull""];
""1681_finalize"" [label=""finalize""];
""1681_investInternal"" -> ""1681_assignTokens"";
""1681_investInternal"" -> ""1681_getState"";
""1681_setEarlyParicipantWhitelist"" -> ""1681_onlyOwner"";
""1681_setOwnerTestValue"" -> ""1681_onlyOwner"";
""1681_finalize"" -> ""1681_stopInEmergency"";
""1681_setPricingStrategy"" -> ""1681_onlyOwner"";
""1681_setMultisig"" -> ""1681_onlyOwner"";
""1681_finalize"" -> ""1681_onlyOwner"";
""1681_setEndsAt"" -> ""1681_onlyOwner"";
""1681_investInternal"" -> ""1681_stopInEmergency"";
""1681_setFinalizeAgent"" -> ""1681_onlyOwner"";
""1681_loadRefund"" -> ""1681_inState"";
""1681_refund"" -> ""1681_inState"";
""1681_CrowdsaleBase"" -> ""1681_setPricingStrategy"";
""1681_finalize"" -> ""1681_inState"";
""1681_getState"" -> ""1681_isMinimumGoalReached"";
""1681_getState"" -> ""1681_isCrowdsaleFull"";
""1681_investInternal"" -> ""1681_isBreakingCap"";
}
"
0x86fd7abfc9f80a1ffc1a2be01dc3859017801ae1.sol,CellBlocksToken,"contract CellBlocksToken is EIP20Interface, Ownable { uint256 constant private MAX_UINT256 = 2**256 - 1; mapping (address => uint256) public balances; mapping (address => mapping (address => uint256)) public allowed; string public name; uint8 public decimals; string public symbol; function CellBlocksToken() public { balances[msg.sender] = 25*(10**25); totalSupply = 25*(10**25); name = ; decimals = 18; symbol = ; }",0,"subgraph cluster_651_CellBlocksToken {
label=""CellBlocksToken"";
""651_CellBlocksToken"" [label=""CellBlocksToken""];
""651_balanceOf"" [label=""balanceOf""];
""651_transfer"" [label=""transfer""];
""651_allowance"" [label=""allowance""];
""651_transferFrom"" [label=""transferFrom""];
""651_halfPercent"" [label=""halfPercent""];
""651_approve"" [label=""approve""];
""651_burn"" [label=""burn""];
""651_transfer"" -> ""651_halfPercent"";
""651_transferFrom"" -> ""651_halfPercent"";
""651_transfer"" -> ""651_burn"";
""651_transferFrom"" -> ""651_burn"";
}
"
0x20827ab17e406d92e2c5cbc2948be0871e160d8c.sol,HDhundun,"contract HDhundun is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public blacklist; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 public totalSupply = 300000000e18; uint256 public totalDistributed = 120000000e18; uint256 public totalRemaining = totalSupply.sub(totalDistributed); uint256 public value = 10000e18; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_873_HDhundun {
label=""HDhundun"";
""873_getTokens"" [label=""getTokens""];
""873_allowance"" [label=""allowance""];
""873_fallback"" [label=""fallback""];
""873_finishDistribution"" [label=""finishDistribution""];
""873_HDhundun"" [label=""HDhundun""];
""873_approve"" [label=""approve""];
""873_withdraw"" [label=""withdraw""];
""873_transferOwnership"" [label=""transferOwnership""];
""873_burn"" [label=""burn""];
""873_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""873_distr"" [label=""distr""];
""873_transfer"" [label=""transfer""];
""873_getTokenBalance"" [label=""getTokenBalance""];
""873_balanceOf"" [label=""balanceOf""];
""873_transferFrom"" [label=""transferFrom""];
""873_fallback"" -> ""873_getTokens"";
""873_finishDistribution"" -> ""873_onlyOwner"";
""873_transfer"" -> ""873_onlyPayloadSize"";
""873_getTokens"" -> ""873_distr"";
""873_transferOwnership"" -> ""873_onlyOwner"";
""873_burn"" -> ""873_onlyOwner"";
""873_finishDistribution"" -> ""873_canDistr"";
""873_withdraw"" -> ""873_onlyOwner"";
""873_getTokens"" -> ""873_canDistr"";
""873_withdrawForeignTokens"" -> ""873_onlyOwner"";
""873_getTokens"" -> ""873_onlyWhitelist"";
""873_distr"" -> ""873_canDistr"";
""873_transferFrom"" -> ""873_onlyPayloadSize"";
}
"
0x01788f22bc0b685eed38a39df43b1ed5e4cb72aa.sol,ZZC,"contract ZZC { string public name; string public symbol; uint8 public decimals = 4; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function ZZC( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_371_ZZC {
label=""ZZC"";
""371_burnFrom"" [label=""burnFrom""];
""371_approve"" [label=""approve""];
""371__transfer"" [label=""_transfer""];
""371_ZZC"" [label=""ZZC""];
""371_burn"" [label=""burn""];
""371_transfer"" [label=""transfer""];
""371_transferFrom"" [label=""transferFrom""];
""371_approveAndCall"" [label=""approveAndCall""];
""371_transfer"" -> ""371__transfer"";
""371_approveAndCall"" -> ""371_approve"";
""371_transferFrom"" -> ""371__transfer"";
}
"
0x1cb82f4228719a53a6f5fc98de74f12eebdc31ed.sol,FusionchainSafeMath,"contract FusionchainSafeMath { function safeAdd(uint a, uint b) public pure returns (uint c) { c = a + b; require(c >= a); }",0,"subgraph cluster_96_FusionchainSafeMath {
label=""FusionchainSafeMath"";
""96_safeAdd"" [label=""safeAdd""];
""96_safeMul"" [label=""safeMul""];
""96_safeDiv"" [label=""safeDiv""];
""96_safeSub"" [label=""safeSub""];
}
"
0x2771ef07defb079c309542e11219d97b562ab6b0.sol,AVL,"contract AVL is ERC20 { uint public incirculation; mapping (address => uint) balances; mapping (address => mapping (address => uint)) allowed; mapping (address => uint) goo; function transfer(address _to, uint _value) public returns (bool success) { uint gas = msg.gas; if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); refund(gas+1158); return true; }",0,"subgraph cluster_348_AVL {
label=""AVL"";
""348_approve"" [label=""approve""];
""348_totalSupply"" [label=""totalSupply""];
""348_balanceOf"" [label=""balanceOf""];
""348_transfer"" [label=""transfer""];
""348_transferFrom"" [label=""transferFrom""];
""348_refund"" [label=""refund""];
""348_allowance"" [label=""allowance""];
""348_transferFrom"" -> ""348_refund"";
""348_transfer"" -> ""348_refund"";
}
"
0x1de89382684ce5a99fc9d3d4b709706d6a013571.sol,BaseGame,"contract BaseGame is ERC721Token { event NewAccount(address owner, uint tokenId, uint parentTokenId, uint blockNumber); event NewForecast(address owner, uint tokenId, uint forecastId, uint _gameId, uint _forecastData); struct Token { uint createBlockNumber; uint parentId; }",0,"subgraph cluster_2503_BaseGameLogic {
label=""BaseGameLogic"";
""2503_toForecastData"" [label=""toForecastData""];
""2503_gameResult"" [label=""gameResult""];
""2503_calculateScore"" [label=""calculateScore""];
""2503_forecastInfo"" [label=""forecastInfo""];
""2503_calculateTokenPrice"" [label=""calculateTokenPrice""];
""2503_setGameCloneFee"" [label=""setGameCloneFee""];
""2503_gameEdit"" [label=""gameEdit""];
""2503_createForecast"" [label=""createForecast""];
""2503_constructor"" [label=""constructor""];
""2503_getForecastCount"" [label=""getForecastCount""];
""2503_tokensOfOwner"" [label=""tokensOfOwner""];
""2503_tokenInfo"" [label=""tokenInfo""];
""2503_setBasePrice"" [label=""setBasePrice""];
""2503_createAccount"" [label=""createAccount""];
""2503_gameInfo"" [label=""gameInfo""];
""2503_setPriceFactor"" [label=""setPriceFactor""];
""2503_getScore"" [label=""getScore""];
""2503_forecastOfToken"" [label=""forecastOfToken""];
""2503_setPrizeFundFactor"" [label=""setPrizeFundFactor""];
""2503__addToFund"" [label=""_addToFund""];
""2503_cloneAccount"" [label=""cloneAccount""];
""2503_getForecastScore"" [label=""getForecastScore""];
""2503_setBasePrice"" -> ""2503_onlyAdmin"";
""2503_getForecastScore"" -> ""2503_calculateScore"";
""2503_createAccount"" -> ""2503_whenNotPaused"";
""2503_tokensOfOwner"" -> ""2503_balanceOf"";
""2503_constructor"" -> ""2503_constructor"";
""2503_gameEdit"" -> ""2503_onlyAdmin"";
""2503_tokenInfo"" -> ""2503_getScore"";
""2503_setPriceFactor"" -> ""2503_onlyAdmin"";
""2503_getForecastCount"" -> ""2503_getForecastCount"";
""2503_setPrizeFundFactor"" -> ""2503_onlyAdmin"";
""2503_createForecast"" -> ""2503_onlyOwnerOf"";
""2503_calculateTokenPrice"" -> ""2503_getForecastCount"";
""2503_tokenInfo"" -> ""2503_getForecastCount"";
""2503_createAccount"" -> ""2503__addToFund"";
""2503_cloneAccount"" -> ""2503__createToken"";
""2503_createForecast"" -> ""2503_whenNotPaused"";
""2503_createForecast"" -> ""2503_exists"";
""2503_cloneAccount"" -> ""2503_whenNotPaused"";
""2503_getScore"" -> ""2503_getScore"";
""2503__addToFund"" -> ""2503_whenNotPaused"";
""2503_setGameCloneFee"" -> ""2503_onlyAdmin"";
""2503_createAccount"" -> ""2503__createToken"";
""2503_calculateTokenPrice"" -> ""2503_exists"";
""2503_createForecast"" -> ""2503_toForecastData"";
""2503_tokensOfOwner"" -> ""2503_totalSupply"";
""2503_createForecast"" -> ""2503__createForecast"";
""2503_tokenInfo"" -> ""2503_calculateTokenPrice"";
""2503_cloneAccount"" -> ""2503__addToFund"";
""2503_gameResult"" -> ""2503_onlyAdmin"";
""2503_getScore"" -> ""2503_forecastOfToken"";
""2503_cloneAccount"" -> ""2503_calculateTokenPrice"";
""2503_getForecastCount"" -> ""2503_exists"";
""2503_cloneAccount"" -> ""2503_exists"";
""2503_getScore"" -> ""2503_calculateScore"";
}
"
0x1ba3845bdc6ff17de21f4211b9d24d5544e878b2.sol,BBArtefact,"contract BBArtefact is Ownable, ERC721Token { uint public incrementId; struct Artefact { uint id; uint typeId; uint packId; uint packTypeId; }",0,"subgraph cluster_1479_BBArtefact {
label=""BBArtefact"";
""1479_burn"" [label=""burn""];
""1479_constructor"" [label=""constructor""];
""1479_setTokenURI"" [label=""setTokenURI""];
""1479_mint"" [label=""mint""];
""1479_setManager"" [label=""setManager""];
""1479_setTokenURI"" -> ""1479__setTokenURI"";
""1479_mint"" -> ""1479_onlyOwnerOrManager"";
""1479_setManager"" -> ""1479_onlyOwner"";
""1479_burn"" -> ""1479__burn"";
""1479_constructor"" -> ""1479_constructor"";
""1479_burn"" -> ""1479_onlyOwnerOf"";
""1479_setTokenURI"" -> ""1479_onlyOwnerOrManager"";
""1479_mint"" -> ""1479__mint"";
}
"
0x6b31a2ef5986d283332e4a3a608adb3c09ffdd13.sol,ERC165,contract ERC165 is IERC165 { bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7; mapping(bytes4 => bool) private _supportedInterfaces; constructor () internal { _registerInterface(_InterfaceId_ERC165); },0,"subgraph cluster_941_ERC165 {
label=""ERC165"";
""941_supportsInterface"" [label=""supportsInterface""];
""941_constructor"" [label=""constructor""];
""941__registerInterface"" [label=""_registerInterface""];
""941_constructor"" -> ""941__registerInterface"";
}
"
0xc59cb23295e2deeb66bd090acb6b02be8d30a11f.sol,KUBToken,"contract KUBToken is ERC20Token, TokenHolder { uint256 constant public KUB_UNIT = 10 ** 10; uint256 public totalSupply = 500 * (10**6) * KUB_UNIT; address public kublaiWalletOwner; uint256 public totalAllocated = 0; uint256 constant public endTime = 1509494340; bool internal isReleasedToPublic = false; uint256 internal teamTranchesReleased = 0; uint256 internal maxTeamTranches = 8; modifier safeTimelock() { require(now >= endTime + 6 * 4 weeks); _; }",0,"subgraph cluster_742_KUBToken {
label=""KUBToken"";
""742_KUBToken"" [label=""KUBToken""];
""742_isTransferAllowed"" [label=""isTransferAllowed""];
""742_releaseApolloTokens"" [label=""releaseApolloTokens""];
""742_allowTransfers"" [label=""allowTransfers""];
""742_KUBToken"" -> ""742_ERC20Token"";
""742_releaseApolloTokens"" -> ""742_ownerOnly"";
""742_releaseApolloTokens"" -> ""742_safeTimelock"";
""742_releaseApolloTokens"" -> ""742_safeAdd"";
""742_allowTransfers"" -> ""742_ownerOnly"";
}
"
0xa1ad52ff49fc70b7920b7d02483a58beb15d492b.sol,FoMo3Dlong,"contract FoMo3Dlong is modularLong { using SafeMath for *; using NameFilter for string; using F3DKeysCalcLong for uint256; address private owner = 0x0c204d9C438553a107B29cdE1d1e7954673b29B3; address private opAddress = 0x0c204d9C438553a107B29cdE1d1e7954673b29B3; address private comAddress = 0x24D160101C72c035287f772a8ac2b744a477F489; PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0x0f717ffff71e639636fcdd33727ee8c17c4724bf); string constant public name = ; string constant public symbol = ; uint256 private rndExtra_ = 0; uint256 constant private rndInit_ = 2 hours; uint256 constant private rndInc_ = 30 seconds; uint256 constant private rndMax_ = 2 hours; uint256 constant private comDropGap_ = 24 hours; uint256 constant private rndNTR_ = 168 hours; uint256 public airDropPot_; uint256 public airDropPot2_; uint256 public airDropTracker_ = 0; uint256 public airDropTracker2_ = 0; uint256 public rID_; uint256 public comReWards_; uint256 public comAirDrop_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => F3Ddatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => F3Ddatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => uint256) public inviteCount_; mapping (address => bool) public addrLock_; mapping (uint256 => F3Ddatasets.Round) public round_; mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping (uint256 => uint256[10]) public lastTen_; mapping (uint256 => uint256) public roundBetCount_; mapping (uint256 => mapping (uint256 =>uint256)) public comDropLastTime_; mapping (uint256 => F3Ddatasets.TeamFee) public fees_; mapping (uint256 => F3Ddatasets.PotSplit) public potSplit_; constructor() public { fees_[0] = F3Ddatasets.TeamFee(48,0); fees_[1] = F3Ddatasets.TeamFee(33,0); fees_[2] = F3Ddatasets.TeamFee(18,0); potSplit_[0] = F3Ddatasets.PotSplit(10,20); potSplit_[1] = F3Ddatasets.PotSplit(5,20); potSplit_[2] = F3Ddatasets.PotSplit(20,20); }",0,"subgraph cluster_5035_FoMo3Dlong {
label=""FoMo3Dlong"";
""5035_shareLastTen"" [label=""shareLastTen""];
""5035_constructor"" [label=""constructor""];
""5035_verifyTeam"" [label=""verifyTeam""];
""5035_receivePlayerInfo"" [label=""receivePlayerInfo""];
""5035_receivePlayerNameList"" [label=""receivePlayerNameList""];
""5035_withdrawEarnings"" [label=""withdrawEarnings""];
""5035_core"" [label=""core""];
""5035_reLoadXaddr"" [label=""reLoadXaddr""];
""5035_buyXname"" [label=""buyXname""];
""5035_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""5035_updateMasks"" [label=""updateMasks""];
""5035_fallback"" [label=""fallback""];
""5035_updateTimer"" [label=""updateTimer""];
""5035_distributeExternal"" [label=""distributeExternal""];
""5035_withdraw"" [label=""withdraw""];
""5035_distributeInternal"" [label=""distributeInternal""];
""5035_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""5035_reLoadXname"" [label=""reLoadXname""];
""5035_getPlayerVaults"" [label=""getPlayerVaults""];
""5035_reLoadCore"" [label=""reLoadCore""];
""5035_getTimeLeft"" [label=""getTimeLeft""];
""5035_updateGenVault"" [label=""updateGenVault""];
""5035_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""5035_buyXid"" [label=""buyXid""];
""5035_affsend"" [label=""affsend""];
""5035_determinePID"" [label=""determinePID""];
""5035_potSwap"" [label=""potSwap""];
""5035_air2"" [label=""air2""];
""5035_endRound"" [label=""endRound""];
""5035_registerNameXID"" [label=""registerNameXID""];
""5035_airdrop2"" [label=""airdrop2""];
""5035_registerNameXname"" [label=""registerNameXname""];
""5035_activate"" [label=""activate""];
""5035_airdrop"" [label=""airdrop""];
""5035_managePlayer"" [label=""managePlayer""];
""5035_iWantXKeys"" [label=""iWantXKeys""];
""5035_registerNameXaddr"" [label=""registerNameXaddr""];
""5035_buyCore"" [label=""buyCore""];
""5035_getBuyPrice"" [label=""getBuyPrice""];
""5035_comDrop"" [label=""comDrop""];
""5035_buyXaddr"" [label=""buyXaddr""];
""5035_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""5035_reLoadXid"" [label=""reLoadXid""];
""5035_endTx"" [label=""endTx""];
""5035_calcKeysReceived"" [label=""calcKeysReceived""];
""5035_reLoadXid"" -> ""5035_isHuman"";
""5035_withdrawEarnings"" -> ""5035_updateGenVault"";
""5035_withdraw"" -> ""5035_isHuman"";
""5035_buyXid"" -> ""5035_isActivated"";
""5035_withdraw"" -> ""5035_isActivated"";
""5035_reLoadXaddr"" -> ""5035_reLoadCore"";
""5035_reLoadCore"" -> ""5035_withdrawEarnings"";
""5035_core"" -> ""5035_air2"";
""5035_buyXaddr"" -> ""5035_isWithinLimits"";
""5035_reLoadXname"" -> ""5035_isHuman"";
""5035_buyXname"" -> ""5035_buyCore"";
""5035_fallback"" -> ""5035_isActivated"";
""5035_registerNameXname"" -> ""5035_isHuman"";
""5035_core"" -> ""5035_comDrop"";
""5035_getPlayerInfoByAddress"" -> ""5035_calcUnMaskedEarnings"";
""5035_core"" -> ""5035_updateTimer"";
""5035_reLoadXid"" -> ""5035_isActivated"";
""5035_buyCore"" -> ""5035_endRound"";
""5035_fallback"" -> ""5035_isHuman"";
""5035_reLoadXaddr"" -> ""5035_verifyTeam"";
""5035_getPlayerVaults"" -> ""5035_calcUnMaskedEarnings"";
""5035_air2"" -> ""5035_airdrop2"";
""5035_reLoadXname"" -> ""5035_reLoadCore"";
""5035_buyXname"" -> ""5035_isHuman"";
""5035_updateGenVault"" -> ""5035_calcUnMaskedEarnings"";
""5035_core"" -> ""5035_airdrop"";
""5035_buyXaddr"" -> ""5035_isActivated"";
""5035_endRound"" -> ""5035_shareLastTen"";
""5035_buyXaddr"" -> ""5035_isHuman"";
""5035_reLoadXaddr"" -> ""5035_isWithinLimits"";
""5035_managePlayer"" -> ""5035_updateGenVault"";
""5035_fallback"" -> ""5035_determinePID"";
""5035_getPlayerVaults"" -> ""5035_getPlayerVaultsHelper"";
""5035_withdraw"" -> ""5035_withdrawEarnings"";
""5035_buyXname"" -> ""5035_verifyTeam"";
""5035_core"" -> ""5035_endTx"";
""5035_reLoadXaddr"" -> ""5035_isActivated"";
""5035_fallback"" -> ""5035_buyCore"";
""5035_reLoadXname"" -> ""5035_verifyTeam"";
""5035_core"" -> ""5035_managePlayer"";
""5035_buyCore"" -> ""5035_core"";
""5035_distributeInternal"" -> ""5035_updateMasks"";
""5035_buyXname"" -> ""5035_isActivated"";
""5035_buyXname"" -> ""5035_determinePID"";
""5035_reLoadXaddr"" -> ""5035_isHuman"";
""5035_core"" -> ""5035_distributeInternal"";
""5035_buyXaddr"" -> ""5035_buyCore"";
""5035_fallback"" -> ""5035_isWithinLimits"";
""5035_buyXaddr"" -> ""5035_verifyTeam"";
""5035_buyXid"" -> ""5035_buyCore"";
""5035_buyXid"" -> ""5035_determinePID"";
""5035_reLoadXid"" -> ""5035_isWithinLimits"";
""5035_withdraw"" -> ""5035_endRound"";
""5035_buyXid"" -> ""5035_isWithinLimits"";
""5035_buyXid"" -> ""5035_verifyTeam"";
""5035_registerNameXID"" -> ""5035_isHuman"";
""5035_distributeExternal"" -> ""5035_affsend"";
""5035_buyXaddr"" -> ""5035_determinePID"";
""5035_reLoadXid"" -> ""5035_verifyTeam"";
""5035_reLoadXname"" -> ""5035_isActivated"";
""5035_reLoadCore"" -> ""5035_core"";
""5035_core"" -> ""5035_distributeExternal"";
""5035_registerNameXaddr"" -> ""5035_isHuman"";
""5035_buyXname"" -> ""5035_isWithinLimits"";
""5035_reLoadXid"" -> ""5035_reLoadCore"";
""5035_reLoadXname"" -> ""5035_isWithinLimits"";
""5035_reLoadCore"" -> ""5035_endRound"";
""5035_buyXid"" -> ""5035_isHuman"";
}
"
0x6dee0a976370ee9f0f8c4619ab3386441a42ceb3.sol,CoinifinexToken,"contract CoinifinexToken { uint256 constant public TOTAL_TOKEN = 10 ** 9; uint256 constant public TOKEN_FOR_ICO = 650 * 10 ** 6; uint256 constant public TOKEN_FOR_COMPANY = 200 * 10 ** 6; uint256 constant public TOKEN_FOR_BONUS = 50 * 10 ** 6; mapping (address => uint256) public tokenForTeam; mapping (address => uint256) public tokenForTeamGet; address[] public teamAddress; uint public startTime; string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function CoinifinexToken( ) public { totalSupply = TOTAL_TOKEN * 10 ** uint256(decimals); name = ; symbol = ; startTime = 1538265600; tokenForTeam[0x4B7786bD8eB1F738699290Bb83cA8E28fEDea4b0] = 20 * 10 ** 6 * 10 ** uint256(decimals); tokenForTeam[0x040440286a443822211dDe0e7E9DA3F49aF2EBC7] = 20 * 10 ** 6 * 10 ** uint256(decimals); tokenForTeam[0x4f7a5A2BafAd56562ac4Ccc85FE004BB84435F71] = 20 * 10 ** 6 * 10 ** uint256(decimals); tokenForTeam[0x7E0D3AaaCB57b0Fd109D9F16e00a375ECa48b41D] = 20 * 10 ** 6 * 10 ** uint256(decimals); tokenForTeam[0xc456aC342f17E7003A03479e275fDA322dE38681] = 500 * 10 ** 3 * 10 ** uint256(decimals); tokenForTeam[0xB19d3c4c494B5a3d5d72E0e47076AefC1c643D24] = 300 * 10 ** 3 * 10 ** uint256(decimals); tokenForTeam[0x88311485647e19510298d7Dbf0a346D5B808DF03] = 500 * 10 ** 3 * 10 ** uint256(decimals); tokenForTeam[0x2f2754e403b58D8F21c4Ba501eff4c5f0dd95b7F] = 500 * 10 ** 3 * 10 ** uint256(decimals); tokenForTeam[0x45cD08764e06c1563d4B13b85cCE7082Be0bA6D1] = 100 * 10 ** 3 * 10 ** uint256(decimals); tokenForTeam[0xB08924a0D0AF93Fa29e5B0ba103A339704cdeFdb] = 100 * 10 ** 3 * 10 ** uint256(decimals); tokenForTeam[0xa8bD7C22d37ea1887b425a9B0A3458A186bf6E77] = 1 * 10 ** 6 * 10 ** uint256(decimals); tokenForTeam[0xe387125f1b24E59f7811d26fbb26bdA1c599b061] = 1 * 10 ** 6 * 10 ** uint256(decimals); tokenForTeam[0xC5b644c5fDe01fce561496179a8Bb7886349bD75] = 1 * 10 ** 6 * 10 ** uint256(decimals); tokenForTeam[0xe4dB43bcB8aecFf58C720F70414A9d36Fd7B9F78] = 5 * 10 ** 6 * 10 ** uint256(decimals); tokenForTeam[0xf28edB52E808cd9DCe18A87fD94D373D6B9f65ae] = 5 * 10 ** 6 * 10 ** uint256(decimals); tokenForTeam[0x87CE30ad0B66266b30c206a9e39A3FC0970db5eF] = 5 * 10 ** 6 * 10 ** uint256(decimals); teamAddress.push(0x4B7786bD8eB1F738699290Bb83cA8E28fEDea4b0); teamAddress.push(0x040440286a443822211dDe0e7E9DA3F49aF2EBC7); teamAddress.push(0x4f7a5A2BafAd56562ac4Ccc85FE004BB84435F71); teamAddress.push(0x7E0D3AaaCB57b0Fd109D9F16e00a375ECa48b41D); teamAddress.push(0xc456aC342f17E7003A03479e275fDA322dE38681); teamAddress.push(0xB19d3c4c494B5a3d5d72E0e47076AefC1c643D24); teamAddress.push(0x88311485647e19510298d7Dbf0a346D5B808DF03); teamAddress.push(0x2f2754e403b58D8F21c4Ba501eff4c5f0dd95b7F); teamAddress.push(0x45cD08764e06c1563d4B13b85cCE7082Be0bA6D1); teamAddress.push(0xB08924a0D0AF93Fa29e5B0ba103A339704cdeFdb); teamAddress.push(0xa8bD7C22d37ea1887b425a9B0A3458A186bf6E77); teamAddress.push(0xe387125f1b24E59f7811d26fbb26bdA1c599b061); teamAddress.push(0xC5b644c5fDe01fce561496179a8Bb7886349bD75); teamAddress.push(0xe4dB43bcB8aecFf58C720F70414A9d36Fd7B9F78); teamAddress.push(0xf28edB52E808cd9DCe18A87fD94D373D6B9f65ae); teamAddress.push(0x87CE30ad0B66266b30c206a9e39A3FC0970db5eF); uint arrayLength = teamAddress.length; for (uint i=0; i<arrayLength; i++) { tokenForTeamGet[teamAddress[i]] = tokenForTeam[teamAddress[i]] * 1 / 10; balanceOf[teamAddress[i]] = tokenForTeamGet[teamAddress[i]]; tokenForTeam[teamAddress[i]] -= tokenForTeamGet[teamAddress[i]]; }",0,"subgraph cluster_930_CoinifinexToken {
label=""CoinifinexToken"";
""930_burnFrom"" [label=""burnFrom""];
""930_transferFrom"" [label=""transferFrom""];
""930__transfer"" [label=""_transfer""];
""930_burn"" [label=""burn""];
""930_transfer"" [label=""transfer""];
""930_CoinifinexToken"" [label=""CoinifinexToken""];
""930_approveAndCall"" [label=""approveAndCall""];
""930_getTeamFund"" [label=""getTeamFund""];
""930_approve"" [label=""approve""];
""930_approveAndCall"" -> ""930_approve"";
""930_transfer"" -> ""930__transfer"";
""930_transferFrom"" -> ""930__transfer"";
}
"
0x711256406c2e9072fbaee5b67d5a893f66a3e707.sol,continuousBacking,"contract continuousBacking { event CreatedReward(uint256 index,uint256 numAvailable); event ClaimedReward(uint256 index,uint256 totalAmount,uint256 numUnitsDesired,uint256 hostCut,uint256 creatorCut,address backer); event ModifiedNumAvailable(uint256 index,uint256 newNumAvailable); address public ELIX_ADDRESS; uint256 public MAX_HOST_PERCENT; uint256 public HOST_CUT; uint256 public MAX_NUM_AVAIL; struct Reward { string title; address host; address creator; uint256 numTaken; uint256 numAvailable; uint256 spmPreventionAmt; }",0,"subgraph cluster_428_continuousBacking {
label=""continuousBacking"";
""428_reviseNumAvailable"" [label=""reviseNumAvailable""];
""428_continuousBacking"" [label=""continuousBacking""];
""428_backAtIndex"" [label=""backAtIndex""];
""428_returnHostAndCreatorCut"" [label=""returnHostAndCreatorCut""];
""428_defineReward"" [label=""defineReward""];
""428_backAtIndex"" -> ""428_returnHostAndCreatorCut"";
}
"
0x78c292d1445e6b9558bf42e8bc369271ded062ea.sol,CyberMusicToken,"contract CyberMusicToken is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 20000000000e8; uint256 public totalDistributed = 0; uint256 public constant MIN_PURCHASE = 1 ether / 100; uint256 public tokensPerEth = 20000000e8; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_948_CyberMusicToken {
label=""CyberMusicToken"";
""948_updateTokensPerEth"" [label=""updateTokensPerEth""];
""948_withdraw"" [label=""withdraw""];
""948_transferFrom"" [label=""transferFrom""];
""948_approve"" [label=""approve""];
""948_finishDistribution"" [label=""finishDistribution""];
""948_burn"" [label=""burn""];
""948_distr"" [label=""distr""];
""948_transfer"" [label=""transfer""];
""948_CyberMusicToken"" [label=""CyberMusicToken""];
""948_transferTokenTo"" [label=""transferTokenTo""];
""948_allowance"" [label=""allowance""];
""948_transferOwnership"" [label=""transferOwnership""];
""948_transferTokenToMultiple"" [label=""transferTokenToMultiple""];
""948_getTokens"" [label=""getTokens""];
""948_getTokenBalance"" [label=""getTokenBalance""];
""948_fallback"" [label=""fallback""];
""948_doAirdrop"" [label=""doAirdrop""];
""948_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""948_balanceOf"" [label=""balanceOf""];
""948_transferTokenToMultiple"" -> ""948_doAirdrop"";
""948_withdraw"" -> ""948_onlyOwner"";
""948_transferOwnership"" -> ""948_onlyOwner"";
""948_transfer"" -> ""948_onlyPayloadSize"";
""948_burn"" -> ""948_onlyOwner"";
""948_distr"" -> ""948_canDistr"";
""948_CyberMusicToken"" -> ""948_distr"";
""948_withdrawForeignTokens"" -> ""948_onlyOwner"";
""948_getTokens"" -> ""948_canDistr"";
""948_transferTokenTo"" -> ""948_onlyOwner"";
""948_updateTokensPerEth"" -> ""948_onlyOwner"";
""948_transferTokenTo"" -> ""948_doAirdrop"";
""948_finishDistribution"" -> ""948_canDistr"";
""948_finishDistribution"" -> ""948_onlyOwner"";
""948_transferFrom"" -> ""948_onlyPayloadSize"";
""948_transferTokenToMultiple"" -> ""948_onlyOwner"";
""948_fallback"" -> ""948_getTokens"";
""948_getTokens"" -> ""948_distr"";
}
"
0x584bf48227509f93ae7c7f2ac2e3e4364d58050b.sol,BeatToken,contract BeatToken is CappedToken { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; function BeatToken(uint256 _cap) CappedToken(_cap) public { },0,"subgraph cluster_868_BeatTokenCrowdsale {
label=""BeatTokenCrowdsale"";
""868_finalize"" [label=""finalize""];
""868_calculateBeatWeiAmount"" [label=""calculateBeatWeiAmount""];
""868_fallback"" [label=""fallback""];
""868_buyTokens"" [label=""buyTokens""];
""868_isWithinTokenAllocLimit"" [label=""isWithinTokenAllocLimit""];
""868_isWithinValidIcoPhase"" [label=""isWithinValidIcoPhase""];
""868_BeatTokenCrowdsale"" [label=""BeatTokenCrowdsale""];
""868_start"" [label=""start""];
""868_determineCurrentStage"" [label=""determineCurrentStage""];
""868_setEtherPriceInEuroCent"" [label=""setEtherPriceInEuroCent""];
""868_buyTokens"" -> ""868_calculateBeatWeiAmount"";
""868_finalize"" -> ""868_onlyOwner"";
""868_fallback"" -> ""868_buyTokens"";
""868_buyTokens"" -> ""868_isWithinTokenAllocLimit"";
""868_setEtherPriceInEuroCent"" -> ""868_onlyOwner"";
""868_buyTokens"" -> ""868_determineCurrentStage"";
""868_buyTokens"" -> ""868_isWithinValidIcoPhase"";
""868_start"" -> ""868_onlyOwner"";
}
"
0x025dce2d39a46296766db7cac8c322e8f59cd5d9.sol,Reputation,contract Reputation { address owner; mapping(address => bool) whitelist; mapping(address => int) ratings; constructor () public { owner = msg.sender; },0,"subgraph cluster_84_Reputation {
label=""Reputation"";
""84_getMy"" [label=""getMy""];
""84_get"" [label=""get""];
""84_change"" [label=""change""];
""84_constructor"" [label=""constructor""];
""84_addToWhitelist"" [label=""addToWhitelist""];
}
"
0xd47c54b18731ef523498ff44e5301041b231be7c.sol,Pausable,contract Pausable is Ownable { bool public paused; event Paused(address account); event Unpaused(address account); constructor() internal { paused = false; },0,"subgraph cluster_263_Pausable {
label=""Pausable"";
""263_unpause"" [label=""unpause""];
""263_constructor"" [label=""constructor""];
""263_pause"" [label=""pause""];
""263_unpause"" -> ""263_whenPaused"";
""263_pause"" -> ""263_onlyOwner"";
""263_unpause"" -> ""263_onlyOwner"";
""263_pause"" -> ""263_whenNotPaused"";
}
"
0xf3a4d8e3f5bfbab3b2d42e46d23c461eb866d16e.sol,FeeMultiToken,"contract FeeMultiToken is Ownable, MultiToken { using CheckedERC20 for ERC20; uint256 public constant TOTAL_PERCRENTS = 1000000; uint256 public lendFee; uint256 public changeFee; uint256 public refferalFee; function init(ERC20[] _tokens, uint256[] _weights, string _name, string _symbol, uint8 ) public { super.init(_tokens, _weights, _name, _symbol, 18); }",0,"subgraph cluster_2289_FeeMultiToken {
label=""FeeMultiToken"";
""2289_setLendFee"" [label=""setLendFee""];
""2289_setRefferalFee"" [label=""setRefferalFee""];
""2289_change"" [label=""change""];
""2289_getReturn"" [label=""getReturn""];
""2289_lend"" [label=""lend""];
""2289_setChangeFee"" [label=""setChangeFee""];
""2289_changeWithRef"" [label=""changeWithRef""];
""2289_init"" [label=""init""];
""2289_getReturn"" -> ""2289_getReturn"";
""2289_lend"" -> ""2289_lend"";
""2289_setRefferalFee"" -> ""2289_onlyOwner"";
""2289_changeWithRef"" -> ""2289_change"";
""2289_setLendFee"" -> ""2289_onlyOwner"";
""2289_init"" -> ""2289_init"";
""2289_change"" -> ""2289_changeWithRef"";
""2289_setChangeFee"" -> ""2289_onlyOwner"";
}
"
0x02e582682aa7b4dcc3f7574c468ef61b29545404.sol,CloneWars,"contract CloneWars { using SafeMath for uint; event MarketBoost( uint amountSent ); event NorsefireSwitch( address from, address to, uint price ); uint256 public clones_to_create_one_idea = 2 days; uint256 public starting_clones = 232; uint256 PSN = 10000; uint256 PSNH = 5000; address actualNorse = 0x4F4eBF556CFDc21c3424F85ff6572C77c514Fcae; uint256 public marketIdeas; uint256 public norsefirePrice; bool public initialized; address public currentNorsefire; mapping (address => uint256) public arrayOfClones; mapping (address => uint256) public claimedIdeas; mapping (address => uint256) public lastDeploy; mapping (address => address) public referrals; constructor () public { initialized = false; norsefirePrice = 0.1 ether; currentNorsefire = 0x1337a4aEfd5ec486E6e97b1d0aE055FAC8D879dE; }",0,"subgraph cluster_720_CloneWars {
label=""CloneWars"";
""720_boostCloneMarket"" [label=""boostCloneMarket""];
""720_deployIdeas"" [label=""deployIdeas""];
""720_calculateIdeaBuy"" [label=""calculateIdeaBuy""];
""720_getMyIdeas"" [label=""getMyIdeas""];
""720_hijackClones"" [label=""hijackClones""];
""720_min"" [label=""min""];
""720_devFee"" [label=""devFee""];
""720_calculateIdeaSell"" [label=""calculateIdeaSell""];
""720_getMyClones"" [label=""getMyClones""];
""720_releaseTheOriginal"" [label=""releaseTheOriginal""];
""720_buyIdeas"" [label=""buyIdeas""];
""720_getBalance"" [label=""getBalance""];
""720_constructor"" [label=""constructor""];
""720_getIdeasSinceLastDeploy"" [label=""getIdeasSinceLastDeploy""];
""720_sellIdeas"" [label=""sellIdeas""];
""720_calculateTrade"" [label=""calculateTrade""];
""720_calculateIdeaBuySimple"" [label=""calculateIdeaBuySimple""];
""720_becomeNorsefire"" [label=""becomeNorsefire""];
""720_getNorsefirePrice"" [label=""getNorsefirePrice""];
""720_getIdeasSinceLastDeploy"" -> ""720_min"";
""720_getMyIdeas"" -> ""720_getIdeasSinceLastDeploy"";
""720_calculateIdeaSell"" -> ""720_calculateTrade"";
""720_sellIdeas"" -> ""720_devFee"";
""720_deployIdeas"" -> ""720_getMyIdeas"";
""720_sellIdeas"" -> ""720_getMyIdeas"";
""720_becomeNorsefire"" -> ""720_boostCloneMarket"";
""720_sellIdeas"" -> ""720_calculateIdeaSell"";
""720_releaseTheOriginal"" -> ""720_boostCloneMarket"";
""720_calculateIdeaBuy"" -> ""720_calculateTrade"";
""720_calculateIdeaBuySimple"" -> ""720_calculateIdeaBuy"";
""720_buyIdeas"" -> ""720_devFee"";
""720_buyIdeas"" -> ""720_calculateIdeaBuy"";
}
"
0x1ee464894bfa36751d1cf84126e4ff24c06b9360.sol,QuantstampBountyData,contract QuantstampBountyData is Whitelist { using SafeMath for uint256; using LinkedListLib for LinkedListLib.LinkedList; uint256 constant internal NULL = 0; uint256 constant internal HEAD = 0; bool constant internal PREV = false; bool constant internal NEXT = true; uint256 constant internal NUMBER_OF_PHASES = 3; struct Bounty { address submitter; string contractAddress; uint256 size; uint256 minVotes; uint256 duration; uint256 judgeDeposit; uint256 hunterDeposit; uint256 initiationTimestamp; bool remainingFeesWithdrawn; uint256 numApprovedBugs; },0,"subgraph cluster_6717_QuantstampBountyData {
label=""QuantstampBountyData"";
""6717_getBountyDuration"" [label=""getBountyDuration""];
""6717_removeBugFromHunter"" [label=""removeBugFromHunter""];
""6717_getBountyJudgeCommitPhaseEndTimestamp"" [label=""getBountyJudgeCommitPhaseEndTimestamp""];
""6717_getBountyJudgeDeposit"" [label=""getBountyJudgeDeposit""];
""6717_getBugPollId"" [label=""getBugPollId""];
""6717_getBountyInitiationTimestamp"" [label=""getBountyInitiationTimestamp""];
""6717_getBountyHunterDeposit"" [label=""getBountyHunterDeposit""];
""6717_addBounty"" [label=""addBounty""];
""6717_getBugCommitNumTokens"" [label=""getBugCommitNumTokens""];
""6717_isJudgingPeriod"" [label=""isJudgingPeriod""];
""6717_getBugIdFromPollId"" [label=""getBugIdFromPollId""];
""6717_getBountyContractAddress"" [label=""getBountyContractAddress""];
""6717_getBugNumTokens"" [label=""getBugNumTokens""];
""6717_getBountyRevealPhaseEndTimestamp"" [label=""getBountyRevealPhaseEndTimestamp""];
""6717_getBugCommitRevealStartTimestamp"" [label=""getBugCommitRevealStartTimestamp""];
""6717_getNumApprovedBugs"" [label=""getNumApprovedBugs""];
""6717_getBountySize"" [label=""getBountySize""];
""6717_getBountyCommitPhaseEndTimestamp"" [label=""getBountyCommitPhaseEndTimestamp""];
""6717_getBountyJudgePhaseStartTimestamp"" [label=""getBountyJudgePhaseStartTimestamp""];
""6717_getHunterReportedBugsCount"" [label=""getHunterReportedBugsCount""];
""6717_getBountyJudgePhaseEndTimestamp"" [label=""getBountyJudgePhaseEndTimestamp""];
""6717_constructor"" [label=""constructor""];
""6717_isCommitPeriod"" [label=""isCommitPeriod""];
""6717_getBountyRemainingFeesWithdrawn"" [label=""getBountyRemainingFeesWithdrawn""];
""6717_setBountyRemainingFeesWithdrawn"" [label=""setBountyRemainingFeesWithdrawn""];
""6717_getFirstRevealedBug"" [label=""getFirstRevealedBug""];
""6717_getBugHunter"" [label=""getBugHunter""];
""6717_getBountySubmitter"" [label=""getBountySubmitter""];
""6717_addBugCommitment"" [label=""addBugCommitment""];
""6717_getBugBountyId"" [label=""getBugBountyId""];
""6717_updateNumApprovedBugs"" [label=""updateNumApprovedBugs""];
""6717_getBugCommitRevealEndTimestamp"" [label=""getBugCommitRevealEndTimestamp""];
""6717_getListHeadConstant"" [label=""getListHeadConstant""];
""6717_addBug"" [label=""addBug""];
""6717_canClaimJudgeAward"" [label=""canClaimJudgeAward""];
""6717_bugRevealPeriodExpired"" [label=""bugRevealPeriodExpired""];
""6717_bountyActive"" [label=""bountyActive""];
""6717_removeBugCommitment"" [label=""removeBugCommitment""];
""6717_getNextRevealedBug"" [label=""getNextRevealedBug""];
""6717_getBugCommitBugDescriptionHash"" [label=""getBugCommitBugDescriptionHash""];
""6717_addBugToHunter"" [label=""addBugToHunter""];
""6717_bugRevealDelayPeriodActive"" [label=""bugRevealDelayPeriodActive""];
""6717_getBugCommitCommitTimestamp"" [label=""getBugCommitCommitTimestamp""];
""6717_getBugDescription"" [label=""getBugDescription""];
""6717_bugRevealPeriodActive"" [label=""bugRevealPeriodActive""];
""6717_getBountyJudgeRevealDuration"" [label=""getBountyJudgeRevealDuration""];
""6717_isRevealPeriod"" [label=""isRevealPeriod""];
""6717_getBountyRevealPhaseStartTimestamp"" [label=""getBountyRevealPhaseStartTimestamp""];
""6717_getBugCommitBountyId"" [label=""getBugCommitBountyId""];
""6717_getBugCommitCommitter"" [label=""getBugCommitCommitter""];
""6717_getNextBugFromHunter"" [label=""getNextBugFromHunter""];
""6717_getBountyMinVotes"" [label=""getBountyMinVotes""];
""6717_getBountyRevealPhaseStartTimestamp"" -> ""6717_getBountyCommitPhaseEndTimestamp"";
""6717_getBountyCommitPhaseEndTimestamp"" -> ""6717_getBountyDuration"";
""6717_addBugToHunter"" -> ""6717_onlyWhitelisted"";
""6717_addBugCommitment"" -> ""6717_getBountyRevealPhaseStartTimestamp"";
""6717_addBounty"" -> ""6717_onlyWhitelisted"";
""6717_bountyActive"" -> ""6717_getBountyDuration"";
""6717_isRevealPeriod"" -> ""6717_getBountyRevealPhaseStartTimestamp"";
""6717_isCommitPeriod"" -> ""6717_getBountyCommitPhaseEndTimestamp"";
""6717_getBountyJudgeRevealDuration"" -> ""6717_getBountyJudgeCommitPhaseEndTimestamp"";
""6717_getFirstRevealedBug"" -> ""6717_getNextRevealedBug"";
""6717_isJudgingPeriod"" -> ""6717_getBountyJudgePhaseEndTimestamp"";
""6717_getBountyJudgePhaseEndTimestamp"" -> ""6717_getBountyDuration"";
""6717_removeBugCommitment"" -> ""6717_onlyWhitelisted"";
""6717_addBugCommitment"" -> ""6717_getBountyRevealPhaseEndTimestamp"";
""6717_canClaimJudgeAward"" -> ""6717_getBugPollId"";
""6717_getBountyJudgeCommitPhaseEndTimestamp"" -> ""6717_getBountyDuration"";
""6717_setBountyRemainingFeesWithdrawn"" -> ""6717_onlyWhitelisted"";
""6717_bountyActive"" -> ""6717_getBountyInitiationTimestamp"";
""6717_getBountyJudgeCommitPhaseEndTimestamp"" -> ""6717_getBountyJudgePhaseStartTimestamp"";
""6717_updateNumApprovedBugs"" -> ""6717_getBugBountyId"";
""6717_getBountyRevealPhaseEndTimestamp"" -> ""6717_getBountyCommitPhaseEndTimestamp"";
""6717_getBountyJudgeRevealDuration"" -> ""6717_getBountyJudgePhaseEndTimestamp"";
""6717_addBugCommitment"" -> ""6717_onlyWhitelisted"";
""6717_addBug"" -> ""6717_onlyWhitelisted"";
""6717_isRevealPeriod"" -> ""6717_getBountyRevealPhaseEndTimestamp"";
""6717_updateNumApprovedBugs"" -> ""6717_getBugIdFromPollId"";
""6717_isJudgingPeriod"" -> ""6717_getBountyJudgePhaseStartTimestamp"";
""6717_canClaimJudgeAward"" -> ""6717_bountyActive"";
""6717_removeBugFromHunter"" -> ""6717_onlyWhitelisted"";
""6717_getBountyJudgePhaseStartTimestamp"" -> ""6717_getBountyRevealPhaseEndTimestamp"";
""6717_canClaimJudgeAward"" -> ""6717_getBugBountyId"";
""6717_getBountyRevealPhaseEndTimestamp"" -> ""6717_getBountyDuration"";
}
"
0xdc12a8e62a778d0732e3f4b522a733504ee2d369.sol,CrowdsaleExt2,contract CrowdsaleExt2 is Haltable { uint public MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE = 5; using SafeMathLibExt for uint; ERC20Ext public token; PricingStrategy public pricingStrategy; string public name; address public multisigWallet; uint public minimumFundingGoal; uint public startsAt; uint public endsAt; uint public tokensSold = 0; uint public weiRaised = 0; uint public investorCount = 0; bool public finalized; bool public isWhiteListed; address[] public joinedCrowdsales; uint8 public joinedCrowdsalesLen = 0; uint8 public joinedCrowdsalesLenMax = 50; struct JoinedCrowdsaleStatus { bool isJoined; uint8 position; },0,"subgraph cluster_1669_CrowdsaleExt2 {
label=""CrowdsaleExt2"";
""1669_startsAt"" [label=""startsAt""];
""1669_getState"" [label=""getState""];
""1669_getTierPosition"" [label=""getTierPosition""];
""1669_isMinimumGoalReached"" [label=""isMinimumGoalReached""];
""1669_isAddressWhitelisted"" [label=""isAddressWhitelisted""];
""1669_setMultisig"" [label=""setMultisig""];
""1669_fallback"" [label=""fallback""];
""1669_getLastTier"" [label=""getLastTier""];
""1669_finalize"" [label=""finalize""];
""1669_isBreakingInvestorCap"" [label=""isBreakingInvestorCap""];
""1669_setStartsAt"" [label=""setStartsAt""];
""1669_endsAt"" [label=""endsAt""];
""1669_invest"" [label=""invest""];
""1669_finalized"" [label=""finalized""];
""1669_updateJoinedCrowdsalesMultiple"" [label=""updateJoinedCrowdsalesMultiple""];
""1669_claimTokens"" [label=""claimTokens""];
""1669_isBreakingCap"" [label=""isBreakingCap""];
""1669_isCrowdsaleFull"" [label=""isCrowdsaleFull""];
""1669_setJoinedCrowdsales"" [label=""setJoinedCrowdsales""];
""1669_isCrowdsale"" [label=""isCrowdsale""];
""1669_setEarlyParticipantWhitelistMultiple"" [label=""setEarlyParticipantWhitelistMultiple""];
""1669_investInternal"" [label=""investInternal""];
""1669_setEndsAt"" [label=""setEndsAt""];
""1669_updateInheritedEarlyParticipantWhitelist"" [label=""updateInheritedEarlyParticipantWhitelist""];
""1669_whitelistedParticipantsLength"" [label=""whitelistedParticipantsLength""];
""1669_assignTokens"" [label=""assignTokens""];
""1669_setEarlyParticipantWhitelist"" [label=""setEarlyParticipantWhitelist""];
""1669_isTierJoined"" [label=""isTierJoined""];
""1669_CrowdsaleExt2"" [label=""CrowdsaleExt2""];
""1669_setPricingStrategy"" [label=""setPricingStrategy""];
""1669_isPricingSane"" [label=""isPricingSane""];
""1669_updateEarlyParticipantWhitelist"" [label=""updateEarlyParticipantWhitelist""];
""1669_buy"" [label=""buy""];
""1669_setMultisig"" -> ""1669_onlyOwner"";
""1669_investInternal"" -> ""1669_isBreakingCap"";
""1669_investInternal"" -> ""1669_assignTokens"";
""1669_setStartsAt"" -> ""1669_getTierPosition"";
""1669_investInternal"" -> ""1669_getState"";
""1669_setEarlyParticipantWhitelistMultiple"" -> ""1669_onlyOwner"";
""1669_setEarlyParticipantWhitelist"" -> ""1669_isAddressWhitelisted"";
""1669_setStartsAt"" -> ""1669_getLastTier"";
""1669_updateJoinedCrowdsalesMultiple"" -> ""1669_setJoinedCrowdsales"";
""1669_setPricingStrategy"" -> ""1669_onlyOwner"";
""1669_getState"" -> ""1669_isMinimumGoalReached"";
""1669_finalize"" -> ""1669_stopInEmergency"";
""1669_updateJoinedCrowdsalesMultiple"" -> ""1669_onlyOwner"";
""1669_buy"" -> ""1669_invest"";
""1669_claimTokens"" -> ""1669_onlyOwner"";
""1669_invest"" -> ""1669_investInternal"";
""1669_setStartsAt"" -> ""1669_onlyOwner"";
""1669_setEndsAt"" -> ""1669_onlyOwner"";
""1669_setEndsAt"" -> ""1669_getTierPosition"";
""1669_finalize"" -> ""1669_onlyOwner"";
""1669_updateInheritedEarlyParticipantWhitelist"" -> ""1669_getTierPosition"";
""1669_investInternal"" -> ""1669_stopInEmergency"";
""1669_finalize"" -> ""1669_inState"";
""1669_setEarlyParticipantWhitelistMultiple"" -> ""1669_setEarlyParticipantWhitelist"";
""1669_investInternal"" -> ""1669_isBreakingInvestorCap"";
""1669_investInternal"" -> ""1669_updateInheritedEarlyParticipantWhitelist"";
""1669_setJoinedCrowdsales"" -> ""1669_isTierJoined"";
""1669_updateEarlyParticipantWhitelist"" -> ""1669_isTierJoined"";
""1669_setJoinedCrowdsales"" -> ""1669_onlyOwner"";
""1669_setEndsAt"" -> ""1669_getLastTier"";
""1669_setEarlyParticipantWhitelist"" -> ""1669_onlyOwner"";
""1669_CrowdsaleExt2"" -> ""1669_setPricingStrategy"";
""1669_getState"" -> ""1669_isCrowdsaleFull"";
}
"
0x28577a6d31559bd265ce3adb62d0458550f7b8a7.sol,CCCToken,"contract CCCToken { string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 1000000000000000000000000000; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function CCCToken() public { balanceOf[msg.sender] = totalSupply; }",0,"subgraph cluster_318_CCCToken {
label=""CCCToken"";
""318_approve"" [label=""approve""];
""318_burn"" [label=""burn""];
""318_burnFrom"" [label=""burnFrom""];
""318_CCCToken"" [label=""CCCToken""];
""318__transfer"" [label=""_transfer""];
""318_transferFrom"" [label=""transferFrom""];
""318_approveAndCall"" [label=""approveAndCall""];
""318_transfer"" [label=""transfer""];
""318_transferFrom"" -> ""318__transfer"";
""318_transfer"" -> ""318__transfer"";
""318_approveAndCall"" -> ""318_approve"";
}
"
0x01db18f6a474840db3480a6a35227d4d0dfcca37.sol,AssetPool,"contract AssetPool is ownedPool { uint baseLockPercent; uint startLockTime; uint stopLockTime; uint linearRelease; address public bpTokenAddress; BPToken bp; function AssetPool(address _bpTokenAddress, uint _baseLockPercent, uint _startLockTime, uint _stopLockTime, uint _linearRelease) { assert(_stopLockTime > _startLockTime); baseLockPercent = _baseLockPercent; startLockTime = _startLockTime; stopLockTime = _stopLockTime; linearRelease = _linearRelease; bpTokenAddress = _bpTokenAddress; bp = BPToken(bpTokenAddress); owner = msg.sender; }",0,"subgraph cluster_1222_AssetPool {
label=""AssetPool"";
""1222_getStartLockTime"" [label=""getStartLockTime""];
""1222_AssetPool"" [label=""AssetPool""];
""1222_getStopLockTime"" [label=""getStopLockTime""];
""1222_getLinearRelease"" [label=""getLinearRelease""];
""1222_getPoolBalance"" [label=""getPoolBalance""];
""1222_setRule"" [label=""setRule""];
""1222_assign"" [label=""assign""];
""1222_getBaseLockPercent"" [label=""getBaseLockPercent""];
""1222_assign"" -> ""1222_onlyOwner"";
""1222_setRule"" -> ""1222_onlyOwner"";
}
"
0x2de9307ff85d1ca43fa8448de90038a9c719f459.sol,TravelChain,contract TravelChain { string public name = ; string public symbol = ; uint256 public decimals = 8; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; uint256 public totalSupply = 99000000 * (10**decimals); address public owner; modifier isOwner { assert(owner == msg.sender); _; },0,"subgraph cluster_287_TravelChain {
label=""TravelChain"";
""287_burnTotalSupply"" [label=""burnTotalSupply""];
""287_TravelChain"" [label=""TravelChain""];
""287_transferFrom"" [label=""transferFrom""];
""287_setName"" [label=""setName""];
""287_transfer"" [label=""transfer""];
""287_approve"" [label=""approve""];
""287_burnSupply"" [label=""burnSupply""];
""287_burnTotalSupply"" -> ""287_isOwner"";
""287_burnSupply"" -> ""287_isOwner"";
""287_setName"" -> ""287_isOwner"";
}
"
0x1ac68e35dbd49a7250fa1b1ceb9dbd3110edaf50.sol,VikkyToken,"contract VikkyToken is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public airdropClaimed; mapping (address => bool) public refundClaimed; mapping (address => bool) public locked; mapping(address => uint) public icoEtherContributed; mapping(address => uint) public icoTokensReceived; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint constant E18 = 10**18; uint constant E6 = 10**6; uint public totalSupply = 1000 * E6 * E18; uint public totalDistributed = 220 * E6 * E18; uint public totalRemaining = totalSupply.sub(totalDistributed); uint public tokensPerEth = 20000 * E18; uint public tokensAirdrop = 266 * E18; uint public tokensClaimedAirdrop = 0; uint public totalDistributedAirdrop = 20 * E6 * E18; uint public constant MIN_CONTRIBUTION = 1 ether / 100; uint public constant MIN_CONTRIBUTION_PRESALE = 1 ether; uint public constant MAX_CONTRIBUTION = 100 ether; uint public constant MIN_FUNDING_GOAL = 5000 ether; uint public constant DATE_PRESALE_START = 1523862000; uint public constant DATE_PRESALE_END = 1524466800; uint public constant DATE_ICO_START = 1524466860; uint public constant DATE_ICO_END = 1530342000; uint public constant BONUS_PRESALE = 30; uint public constant BONUS_ICO_ROUND1 = 20; uint public constant BONUS_ICO_ROUND2 = 10; uint public constant BONUS_ICO_ROUND3 = 5; event TokensPerEthUpdated(uint _tokensPerEth); event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Refund(address indexed _owner, uint _amount, uint _tokens); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event Burn(address indexed burner, uint256 value); event LockRemoved(address indexed _participant); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_1633_VikkyToken {
label=""VikkyToken"";
""1633_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1633_finishDistribution"" [label=""finishDistribution""];
""1633_approve"" [label=""approve""];
""1633_balanceOf"" [label=""balanceOf""];
""1633_removeLock"" [label=""removeLock""];
""1633_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""1633_icoThresholdReached"" [label=""icoThresholdReached""];
""1633_systemClaimAirdropMultiple"" [label=""systemClaimAirdropMultiple""];
""1633_allowance"" [label=""allowance""];
""1633_distr"" [label=""distr""];
""1633_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""1633_transfer"" [label=""transfer""];
""1633_atNow"" [label=""atNow""];
""1633_buyTokens"" [label=""buyTokens""];
""1633_reclaimFund"" [label=""reclaimFund""];
""1633_reclaimFundMultiple"" [label=""reclaimFundMultiple""];
""1633_doAirdrop"" [label=""doAirdrop""];
""1633_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1633_getTokenBalance"" [label=""getTokenBalance""];
""1633_distribution"" [label=""distribution""];
""1633_removeLockMultiple"" [label=""removeLockMultiple""];
""1633_transferFrom"" [label=""transferFrom""];
""1633_distributeAmounts"" [label=""distributeAmounts""];
""1633_VikkyToken"" [label=""VikkyToken""];
""1633_fallback"" [label=""fallback""];
""1633_transferOwnership"" [label=""transferOwnership""];
""1633_withdraw"" [label=""withdraw""];
""1633_burn"" [label=""burn""];
""1633_reclaimFund"" -> ""1633_atNow"";
""1633_removeLockMultiple"" -> ""1633_removeLock"";
""1633_distribution"" -> ""1633_distr"";
""1633_withdraw"" -> ""1633_onlyOwner"";
""1633_distributeAmounts"" -> ""1633_distr"";
""1633_distr"" -> ""1633_canDistr"";
""1633_adminClaimAirdropMultiple"" -> ""1633_doAirdrop"";
""1633_finishDistribution"" -> ""1633_onlyOwner"";
""1633_transferOwnership"" -> ""1633_onlyOwner"";
""1633_fallback"" -> ""1633_buyTokens"";
""1633_buyTokens"" -> ""1633_distr"";
""1633_transfer"" -> ""1633_onlyPayloadSize"";
""1633_systemClaimAirdropMultiple"" -> ""1633_doAirdrop"";
""1633_distribution"" -> ""1633_onlyOwner"";
""1633_VikkyToken"" -> ""1633_distr"";
""1633_updateTokensPerEth"" -> ""1633_atNow"";
""1633_transferFrom"" -> ""1633_onlyPayloadSize"";
""1633_reclaimFundMultiple"" -> ""1633_reclaimFund"";
""1633_withdrawForeignTokens"" -> ""1633_onlyOwner"";
""1633_reclaimFund"" -> ""1633_icoThresholdReached"";
""1633_finishDistribution"" -> ""1633_canDistr"";
""1633_distribution"" -> ""1633_canDistr"";
""1633_buyTokens"" -> ""1633_atNow"";
""1633_distributeAmounts"" -> ""1633_onlyOwner"";
""1633_buyTokens"" -> ""1633_canDistr"";
""1633_adminClaimAirdrop"" -> ""1633_doAirdrop"";
""1633_burn"" -> ""1633_onlyOwner"";
""1633_updateTokensPerEth"" -> ""1633_onlyOwner"";
""1633_distributeAmounts"" -> ""1633_canDistr"";
}
"
0x0e7e3bfd7248e9ebe52d831c3e46222936064020.sol,DCSToken,"contract DCSToken is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public blacklist; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 public totalSupply = 30000000000e18; uint256 public tokenPerETH = 7000000e18; uint256 public valueToGive = 12000e18; uint256 public totalDistributed = 0; uint256 public totalRemaining = totalSupply.sub(totalDistributed); event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_1014_DCSToken {
label=""DCSToken"";
""1014_approve"" [label=""approve""];
""1014_balanceOf"" [label=""balanceOf""];
""1014_DCS"" [label=""DCS""];
""1014_withdraw"" [label=""withdraw""];
""1014_transfer"" [label=""transfer""];
""1014_finishDistribution"" [label=""finishDistribution""];
""1014_burn"" [label=""burn""];
""1014_burnFrom"" [label=""burnFrom""];
""1014_transferOwnership"" [label=""transferOwnership""];
""1014_fallback"" [label=""fallback""];
""1014_getTokenBalance"" [label=""getTokenBalance""];
""1014_distr"" [label=""distr""];
""1014_withdrawAltcoinTokens"" [label=""withdrawAltcoinTokens""];
""1014_transferFrom"" [label=""transferFrom""];
""1014_buyToken"" [label=""buyToken""];
""1014_allowance"" [label=""allowance""];
""1014_withdraw"" -> ""1014_onlyOwner"";
""1014_buyToken"" -> ""1014_canDistr"";
""1014_transferFrom"" -> ""1014_onlyPayloadSize"";
""1014_withdrawAltcoinTokens"" -> ""1014_onlyOwner"";
""1014_finishDistribution"" -> ""1014_canDistr"";
""1014_distr"" -> ""1014_canDistr"";
""1014_transfer"" -> ""1014_onlyPayloadSize"";
""1014_burn"" -> ""1014_onlyOwner"";
""1014_fallback"" -> ""1014_buyToken"";
""1014_DCS"" -> ""1014_distr"";
""1014_transferOwnership"" -> ""1014_onlyOwner"";
""1014_finishDistribution"" -> ""1014_onlyOwner"";
""1014_burnFrom"" -> ""1014_onlyOwner"";
""1014_buyToken"" -> ""1014_distr"";
""1014_fallback"" -> ""1014_distr"";
}
"
0x45f01020a3c1780d1b4e91b41f0f451bb0bae9b9.sol,CappedCrowdsale,contract CappedCrowdsale is Crowdsale { using SafeMath for uint256; uint256 private _cap; constructor(uint256 cap) public { require(cap > 0); _cap = cap; },0,"subgraph cluster_1396_CappedCrowdsale {
label=""CappedCrowdsale"";
""1396_capReached"" [label=""capReached""];
""1396_constructor"" [label=""constructor""];
""1396__preValidatePurchase"" [label=""_preValidatePurchase""];
""1396_cap"" [label=""cap""];
""1396__preValidatePurchase"" -> ""1396__preValidatePurchase"";
""1396__preValidatePurchase"" -> ""1396_weiRaised"";
""1396_capReached"" -> ""1396_weiRaised"";
}
"
0x1f58af89d12d4a60647f99a9fc71dd0367b56df4.sol,BurnupHoldingAccessControl,"contract BurnupHoldingAccessControl is Claimable, Pausable, CanReclaimToken { address public cfoAddress; mapping (address => bool) burnupGame; function BurnupHoldingAccessControl() public { cfoAddress = msg.sender; }",0,"subgraph cluster_1108_BurnupHoldingAccessControl {
label=""BurnupHoldingAccessControl"";
""1108_BurnupHoldingAccessControl"" [label=""BurnupHoldingAccessControl""];
""1108_addBurnupGame"" [label=""addBurnupGame""];
""1108_setCFO"" [label=""setCFO""];
""1108_removeBurnupGame"" [label=""removeBurnupGame""];
""1108_addBurnupGame"" -> ""1108_onlyOwner"";
""1108_setCFO"" -> ""1108_onlyOwner"";
""1108_removeBurnupGame"" -> ""1108_onlyOwner"";
}
"
0x1e2e9cabb5744c314de7978c081bd57c357e000d.sol,CryptoMyWord,"contract CryptoMyWord { using SafeMath for uint256; using strings for *; event Bought (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Sold (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Transfer(address indexed _from, address indexed _to, uint256 _tokenId); event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId); event NewWord(uint wordId, string name, uint price); address private owner; uint256 nameTokenId; uint256 tokenId; mapping (address => bool) private admins; bool private erc721Enabled = false; uint256 private increaseLimit1 = 0.8 ether; uint256 private increaseLimit2 = 1.5 ether; uint256 private increaseLimit3 = 2.0 ether; uint256 private increaseLimit4 = 5.0 ether; uint256[] private listedItems; mapping (uint256 => address) public ownerOfItem; mapping (address => string) public nameOfOwner; mapping (address => string) public snsOfOwner; mapping (uint256 => uint256) private startingPriceOfItem; mapping (uint256 => uint256) private priceOfItem; mapping (uint256 => string) private nameOfItem; mapping (uint256 => string) private urlOfItem; mapping (uint256 => address[]) private borrowerOfItem; mapping (string => uint256[]) private nameToItems; mapping (uint256 => address) private approvedOfItem; mapping (string => uint256) private nameToParents; mapping (string => uint256) private nameToNameToken; mapping (string => string) private firstIdOfName; mapping (string => string) private secondIdOfName; function CryptoMyWord () public { owner = msg.sender; admins[owner] = true; }",0,"subgraph cluster_3428_CryptoMyWord {
label=""CryptoMyWord"";
""3428_enableERC721"" [label=""enableERC721""];
""3428_tokenExists"" [label=""tokenExists""];
""3428_approve"" [label=""approve""];
""3428__mint"" [label=""_mint""];
""3428_startingPriceOf"" [label=""startingPriceOf""];
""3428_getOwner"" [label=""getOwner""];
""3428_isAdmin"" [label=""isAdmin""];
""3428_balanceOf"" [label=""balanceOf""];
""3428_disableERC721"" [label=""disableERC721""];
""3428_name"" [label=""name""];
""3428_getNames"" [label=""getNames""];
""3428_buy"" [label=""buy""];
""3428_setUrl"" [label=""setUrl""];
""3428__transfer"" [label=""_transfer""];
""3428_transferFrom"" [label=""transferFrom""];
""3428_removeAdmin"" [label=""removeAdmin""];
""3428_ceil"" [label=""ceil""];
""3428_CryptoMyWord"" [label=""CryptoMyWord""];
""3428_composite"" [label=""composite""];
""3428_calculateFirstCut"" [label=""calculateFirstCut""];
""3428_withdrawAll"" [label=""withdrawAll""];
""3428_listItem"" [label=""listItem""];
""3428_addAdmin"" [label=""addAdmin""];
""3428_isContract"" [label=""isContract""];
""3428_transfer"" [label=""transfer""];
""3428_allOf"" [label=""allOf""];
""3428_tokensOf"" [label=""tokensOf""];
""3428_calculateDevCut"" [label=""calculateDevCut""];
""3428_calculateNextPrice"" [label=""calculateNextPrice""];
""3428_approvedFor"" [label=""approvedFor""];
""3428_allForPopulate"" [label=""allForPopulate""];
""3428_priceOf"" [label=""priceOf""];
""3428_withdrawAmount"" [label=""withdrawAmount""];
""3428_itemsByName"" [label=""itemsByName""];
""3428_ownerOf"" [label=""ownerOf""];
""3428_selfDestruct"" [label=""selfDestruct""];
""3428_symbol"" [label=""symbol""];
""3428_setOwner"" [label=""setOwner""];
""3428_implementsERC721"" [label=""implementsERC721""];
""3428_itemsForSaleLimit"" [label=""itemsForSaleLimit""];
""3428_totalSupply"" [label=""totalSupply""];
""3428_nameOf"" [label=""nameOf""];
""3428_nextPriceOf"" [label=""nextPriceOf""];
""3428_buy"" -> ""3428_ceil"";
""3428_buy"" -> ""3428_priceOf"";
""3428_allForPopulate"" -> ""3428_onlyOwner"";
""3428_transfer"" -> ""3428_ownerOf"";
""3428_approve"" -> ""3428_tokenExists"";
""3428_selfDestruct"" -> ""3428_onlyOwner"";
""3428_transfer"" -> ""3428__transfer"";
""3428_setOwner"" -> ""3428_onlyOwner"";
""3428_approve"" -> ""3428_ownerOf"";
""3428_withdrawAmount"" -> ""3428_onlyOwner"";
""3428_tokenExists"" -> ""3428_priceOf"";
""3428_buy"" -> ""3428_nameOf"";
""3428_allOf"" -> ""3428_startingPriceOf"";
""3428_transferFrom"" -> ""3428__transfer"";
""3428_allOf"" -> ""3428_nextPriceOf"";
""3428_composite"" -> ""3428__mint"";
""3428_nextPriceOf"" -> ""3428_calculateNextPrice"";
""3428_buy"" -> ""3428__mint"";
""3428_tokensOf"" -> ""3428_balanceOf"";
""3428_buy"" -> ""3428_isContract"";
""3428_setUrl"" -> ""3428_ownerOf"";
""3428_allForPopulate"" -> ""3428_nextPriceOf"";
""3428_removeAdmin"" -> ""3428_onlyOwner"";
""3428__transfer"" -> ""3428_ownerOf"";
""3428_enableERC721"" -> ""3428_onlyOwner"";
""3428_allOf"" -> ""3428_ownerOf"";
""3428_addAdmin"" -> ""3428_onlyOwner"";
""3428_transfer"" -> ""3428_onlyERC721"";
""3428_allForPopulate"" -> ""3428_priceOf"";
""3428_approve"" -> ""3428_onlyERC721"";
""3428__transfer"" -> ""3428_tokenExists"";
""3428_buy"" -> ""3428_calculateFirstCut"";
""3428_allOf"" -> ""3428_priceOf"";
""3428_buy"" -> ""3428_ownerOf"";
""3428_buy"" -> ""3428_nextPriceOf"";
""3428_allForPopulate"" -> ""3428_startingPriceOf"";
""3428_disableERC721"" -> ""3428_onlyOwner"";
""3428_withdrawAll"" -> ""3428_onlyOwner"";
""3428_listItem"" -> ""3428_onlyAdmins"";
""3428_allForPopulate"" -> ""3428_ownerOf"";
""3428_buy"" -> ""3428_calculateDevCut"";
""3428__mint"" -> ""3428_ownerOf"";
""3428_transferFrom"" -> ""3428_onlyERC721"";
""3428_nextPriceOf"" -> ""3428_priceOf"";
""3428_transferFrom"" -> ""3428_approvedFor"";
""3428_balanceOf"" -> ""3428_ownerOf"";
}
"
0x3618516f45cd3c913f81f9987af41077932bc40d.sol,Peculium,"contract Peculium is BurnableToken,Ownable { PeculiumOld public peculOld; address public peculOldAdress = 0x53148Bb4551707edF51a1e8d7A93698d18931225; using SafeMath for uint256; using SafeERC20 for ERC20Basic; string public name = ; string public symbol = ; uint256 public decimals = 8; uint256 public constant MAX_SUPPLY_NBTOKEN = 20000000000*10**8; mapping(address => bool) public balancesCannotSell; event ChangedTokens(address changedTarget,uint256 amountToChanged); event FrozenFunds(address address_target, bool bool_canSell); function Peculium() public { totalSupply = MAX_SUPPLY_NBTOKEN; balances[address(this)] = totalSupply; peculOld = PeculiumOld(peculOldAdress); }",0,"subgraph cluster_938_Peculium {
label=""Peculium"";
""938_approveAndCall"" [label=""approveAndCall""];
""938_getBlockTimestamp"" [label=""getBlockTimestamp""];
""938_transferFrom"" [label=""transferFrom""];
""938_UpgradeTokens"" [label=""UpgradeTokens""];
""938_Peculium"" [label=""Peculium""];
""938_ChangeLicense"" [label=""ChangeLicense""];
""938_getOwnerInfos"" [label=""getOwnerInfos""];
""938_transfer"" [label=""transfer""];
""938_transfer"" -> ""938_transfer"";
""938_getOwnerInfos"" -> ""938_balanceOf"";
""938_ChangeLicense"" -> ""938_onlyOwner"";
""938_transferFrom"" -> ""938_transferFrom"";
}
"
0x214f96e84d3c0f2920bb90fec861be4925edf02b.sol,HorseyToken,"contract HorseyToken is ERC20Interface, Owned { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint public totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor(string _symbol, string _name, uint8 _decimals, uint _totalSupply ) public { symbol = _symbol; name = _name; decimals = _decimals; totalSupply = _totalSupply * 10**uint(_decimals); balances[owner] = totalSupply; emit Transfer(address(0), owner, totalSupply); }",0,"subgraph cluster_635_HorseyToken {
label=""HorseyToken"";
""635_balanceOf"" [label=""balanceOf""];
""635_transferFrom"" [label=""transferFrom""];
""635_increaseApproval"" [label=""increaseApproval""];
""635_constructor"" [label=""constructor""];
""635_allowance"" [label=""allowance""];
""635_approveAndCall"" [label=""approveAndCall""];
""635_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""635_fallback"" [label=""fallback""];
""635_approve"" [label=""approve""];
""635_transfer"" [label=""transfer""];
""635_decreaseApproval"" [label=""decreaseApproval""];
""635_transferAnyERC20Token"" -> ""635_onlyOwner"";
""635_approveAndCall"" -> ""635_approve"";
}
"
0x347925b22d0217a4797f470faa2afebbdb150b7a.sol,Nanotechnology,"contract Nanotechnology is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 1; uint public deadline = now + 150 * 1 days; uint public round2 = now + 50 * 1 days; uint public round1 = now + 100 * 1 days; uint256 public totalSupply = 860000000e1; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 2000000e1; uint public target0drop = 1; uint public progress0drop = 0; address multisig = 0x5F6557aF8922D4031Ae506d2F02595039D16Ab5a; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_1261_Nanotechnology {
label=""Nanotechnology"";
""1261_withdraw"" [label=""withdraw""];
""1261_distr"" [label=""distr""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_add"" [label=""add""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_constructor"" [label=""constructor""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_transfer"" [label=""transfer""];
""1261_getTokens"" [label=""getTokens""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_burn"" [label=""burn""];
""1261_Distribute"" [label=""Distribute""];
""1261_allowance"" [label=""allowance""];
""1261_approve"" [label=""approve""];
""1261_fallback"" [label=""fallback""];
""1261_add"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_distr"" -> ""1261_canDistr"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_Distribute"" -> ""1261_onlyOwner"";
}
"
0x744a31ede5422355d9c2bd8c44c710404336ca84.sol,NFTsCrowdsaleBase,"contract NFTsCrowdsaleBase is Superuser, INFTsCrowdsale { using SafeMath for uint256; ERC20 public erc20Contract; ERC721 public erc721Contract; uint public eth2erc20; struct Auction { bytes32 id; address seller; uint256 price; uint256 startAt; uint256 endAt; uint256 tokenId; }",0,"subgraph cluster_1478_NFTsCrowdsaleBase {
label=""NFTsCrowdsaleBase"";
""1478__transfer"" [label=""_transfer""];
""1478_constructor"" [label=""constructor""];
""1478__cancelEscrow"" [label=""_cancelEscrow""];
""1478__payByEth"" [label=""_payByEth""];
""1478__isOnAuction"" [label=""_isOnAuction""];
""1478_isOnAuction"" [label=""isOnAuction""];
""1478_getAuction"" [label=""getAuction""];
""1478__isTokenOwner"" [label=""_isTokenOwner""];
""1478__newAuction"" [label=""_newAuction""];
""1478__cancelAuction"" [label=""_cancelAuction""];
""1478_isOnPreAuction"" [label=""isOnPreAuction""];
""1478__payByErc20"" [label=""_payByErc20""];
""1478__escrow"" [label=""_escrow""];
""1478__payByErc20"" -> ""1478__isOnAuction"";
""1478__payByEth"" -> ""1478__transfer"";
""1478__newAuction"" -> ""1478__isTokenOwner"";
""1478__newAuction"" -> ""1478__escrow"";
""1478__payByErc20"" -> ""1478__transfer"";
""1478__cancelAuction"" -> ""1478__cancelEscrow"";
""1478__payByEth"" -> ""1478__isOnAuction"";
}
"
0x4c29d75cc423e8adaa3839892feb66977e295829.sol,POOH,contract POOH { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1337_POOH {
label=""POOH"";
""1337_setAdministrator"" [label=""setAdministrator""];
""1337_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1337_balanceOf"" [label=""balanceOf""];
""1337_setStakingRequirement"" [label=""setStakingRequirement""];
""1337_setSymbol"" [label=""setSymbol""];
""1337_sellPrice"" [label=""sellPrice""];
""1337_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1337_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1337_reinvest"" [label=""reinvest""];
""1337_purchaseTokens"" [label=""purchaseTokens""];
""1337_sell"" [label=""sell""];
""1337_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1337_transfer"" [label=""transfer""];
""1337_buy"" [label=""buy""];
""1337_setName"" [label=""setName""];
""1337_POOH"" [label=""POOH""];
""1337_buyPrice"" [label=""buyPrice""];
""1337_sqrt"" [label=""sqrt""];
""1337_withdraw"" [label=""withdraw""];
""1337_disableInitialStage"" [label=""disableInitialStage""];
""1337_exit"" [label=""exit""];
""1337_dividendsOf"" [label=""dividendsOf""];
""1337_totalSupply"" [label=""totalSupply""];
""1337_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1337_myTokens"" [label=""myTokens""];
""1337_myDividends"" [label=""myDividends""];
""1337_fallback"" [label=""fallback""];
""1337_transfer"" -> ""1337_withdraw"";
""1337_sell"" -> ""1337_onlyBagholders"";
""1337_sell"" -> ""1337_tokensToEthereum_"";
""1337_disableInitialStage"" -> ""1337_onlyAdministrator"";
""1337_buyPrice"" -> ""1337_tokensToEthereum_"";
""1337_transfer"" -> ""1337_myDividends"";
""1337_transfer"" -> ""1337_tokensToEthereum_"";
""1337_reinvest"" -> ""1337_purchaseTokens"";
""1337_calculateEthereumReceived"" -> ""1337_tokensToEthereum_"";
""1337_myDividends"" -> ""1337_dividendsOf"";
""1337_buy"" -> ""1337_purchaseTokens"";
""1337_setAdministrator"" -> ""1337_onlyAdministrator"";
""1337_reinvest"" -> ""1337_myDividends"";
""1337_transfer"" -> ""1337_onlyBagholders"";
""1337_setStakingRequirement"" -> ""1337_onlyAdministrator"";
""1337_setName"" -> ""1337_onlyAdministrator"";
""1337_sellPrice"" -> ""1337_tokensToEthereum_"";
""1337_purchaseTokens"" -> ""1337_ethereumToTokens_"";
""1337_setSymbol"" -> ""1337_onlyAdministrator"";
""1337_purchaseTokens"" -> ""1337_antiEarlyWhale"";
""1337_myTokens"" -> ""1337_balanceOf"";
""1337_fallback"" -> ""1337_purchaseTokens"";
""1337_withdraw"" -> ""1337_onlyStronghands"";
""1337_exit"" -> ""1337_withdraw"";
""1337_ethereumToTokens_"" -> ""1337_sqrt"";
""1337_calculateTokensReceived"" -> ""1337_ethereumToTokens_"";
""1337_reinvest"" -> ""1337_onlyStronghands"";
""1337_exit"" -> ""1337_sell"";
""1337_withdraw"" -> ""1337_myDividends"";
}
"
0x715423a818f1f9a85c66d81d2809e0a4dadf07f3.sol,Token,contract Token is TokenI { struct FreezeInfo { address user; uint256 amount; },0,"subgraph cluster_1226_Token {
label=""Token"";
""1226_transfer"" [label=""transfer""];
""1226_transferMulti"" [label=""transferMulti""];
""1226_changeOwner"" [label=""changeOwner""];
""1226_isContract"" [label=""isContract""];
""1226__generateTokens"" [label=""_generateTokens""];
""1226_changeAirdropQty"" [label=""changeAirdropQty""];
""1226_approve"" [label=""approve""];
""1226_Token"" [label=""Token""];
""1226_changePaused"" [label=""changePaused""];
""1226_destroyTokens"" [label=""destroyTokens""];
""1226__destroyTokens"" [label=""_destroyTokens""];
""1226_changeTokensPerEther"" [label=""changeTokensPerEther""];
""1226__freeze"" [label=""_freeze""];
""1226_changeAirdropTotalQty"" [label=""changeAirdropTotalQty""];
""1226_freeze"" [label=""freeze""];
""1226_generateTokens"" [label=""generateTokens""];
""1226_approveAndCall"" [label=""approveAndCall""];
""1226_transferFrom"" [label=""transferFrom""];
""1226_fallback"" [label=""fallback""];
""1226_unFreeze"" [label=""unFreeze""];
""1226_transfer"" -> ""1226_moreThanZero"";
""1226_transfer"" -> ""1226_realUser"";
""1226_destroyTokens"" -> ""1226_onlyOwner"";
""1226_changeTokensPerEther"" -> ""1226_onlyController"";
""1226_generateTokens"" -> ""1226__generateTokens"";
""1226_changePaused"" -> ""1226_onlyController"";
""1226_approve"" -> ""1226_moreThanZero"";
""1226_changeOwner"" -> ""1226_onlyOwner"";
""1226_freeze"" -> ""1226_moreThanZero"";
""1226_approveAndCall"" -> ""1226_approve"";
""1226_destroyTokens"" -> ""1226__destroyTokens"";
""1226_freeze"" -> ""1226__freeze"";
""1226_changeAirdropQty"" -> ""1226_onlyController"";
""1226_freeze"" -> ""1226_onlyController"";
""1226_changeAirdropTotalQty"" -> ""1226_onlyController"";
""1226__freeze"" -> ""1226_moreThanZero"";
""1226_generateTokens"" -> ""1226_onlyController"";
""1226_transferFrom"" -> ""1226_moreThanZero"";
""1226_fallback"" -> ""1226__generateTokens"";
""1226_transferFrom"" -> ""1226_realUser"";
""1226_fallback"" -> ""1226__freeze"";
""1226_unFreeze"" -> ""1226_onlyOwner"";
}
"
0x86789b2de83b9a93f89f8c2cb14d622cd73515e9.sol,FreezableToken,"contract FreezableToken is StandardToken, Ownable { event Freeze(address indexed who, uint256 end); mapping(address=>uint256) freezeEnd; function freeze(address _who, uint256 _end) onlyOwner public { require(_who != address(0)); require(_end >= freezeEnd[_who]); freezeEnd[_who] = _end; Freeze(_who, _end); }",0,"subgraph cluster_652_FreezableToken {
label=""FreezableToken"";
""652_transferFrom"" [label=""transferFrom""];
""652_transfer"" [label=""transfer""];
""652_freeze"" [label=""freeze""];
""652_transfer"" -> ""652_transfer"";
""652_transfer"" -> ""652_notFrozen"";
""652_transferFrom"" -> ""652_notFrozen"";
""652_transferFrom"" -> ""652_transferFrom"";
""652_freeze"" -> ""652_onlyOwner"";
}
"
0x327e963ee999184618e33e01b4ae1b9bccf328b4.sol,ALCOIN,contract ALCOIN { string public standard = ; string public name; string public symbol; uint8 public decimals; uint256 public initialSupply; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; function ALCOIN() { initialSupply = 500000000000; name = ; decimals = 3; symbol = ; balanceOf[msg.sender] = initialSupply; totalSupply = initialSupply; },0,"subgraph cluster_101_ALCOIN {
label=""ALCOIN"";
""101_fallback"" [label=""fallback""];
""101_transfer"" [label=""transfer""];
""101_ALCOIN"" [label=""ALCOIN""];
}
"
0xdf2efe5338934ffe4443cde678822d6f3f696196.sol,Owned,"contract Owned { address public owner; address public newOwnerCandidate; event OwnershipRequested(address indexed by, address indexed to); event OwnershipTransferred(address indexed from, address indexed to); event OwnershipRemoved(); constructor() public { owner = msg.sender; }",0,"subgraph cluster_234_Owned {
label=""Owned"";
""234_proposeOwnership"" [label=""proposeOwnership""];
""234_removeOwnership"" [label=""removeOwnership""];
""234_changeOwnership"" [label=""changeOwnership""];
""234_constructor"" [label=""constructor""];
""234_acceptOwnership"" [label=""acceptOwnership""];
""234_removeOwnership"" -> ""234_onlyOwner"";
""234_proposeOwnership"" -> ""234_onlyOwner"";
""234_changeOwnership"" -> ""234_onlyOwner"";
}
"
0x17cba58578eecaee898242a02edac75b8cc17231.sol,AUMXToken,"contract AUMXToken is ERC223, SafeMath{ mapping(address => mapping(address => uint)) allowed; mapping(address => uint) balances; string public name = ; string public symbol = ; uint8 public decimals = 8; uint256 public totalSupply = 5000000000000000; bool locked; address Owner; address swapperAddress; function AUMXToken() public { locked = true; Owner = msg.sender; swapperAddress = msg.sender; balances[msg.sender] = totalSupply; allowed[msg.sender][swapperAddress] = totalSupply; }",0,"subgraph cluster_763_AUMXToken {
label=""AUMXToken"";
""763_decimals"" [label=""decimals""];
""763_isContract"" [label=""isContract""];
""763_AUMXToken"" [label=""AUMXToken""];
""763_transferToAddress"" [label=""transferToAddress""];
""763_transferToContract"" [label=""transferToContract""];
""763_ChangeSwapperAddress"" [label=""ChangeSwapperAddress""];
""763_name"" [label=""name""];
""763_UnlockToken"" [label=""UnlockToken""];
""763_transferFrom"" [label=""transferFrom""];
""763_totalSupply"" [label=""totalSupply""];
""763_transfer"" [label=""transfer""];
""763_symbol"" [label=""symbol""];
""763_balanceOf"" [label=""balanceOf""];
""763_transferToAddress"" -> ""763_safeSub"";
""763_transferToContract"" -> ""763_safeSub"";
""763_transferFrom"" -> ""763_safeAdd"";
""763_transferToContract"" -> ""763_safeAdd"";
""763_transfer"" -> ""763_isUnlocked"";
""763_transfer"" -> ""763_isContract"";
""763_ChangeSwapperAddress"" -> ""763_onlyOwner"";
""763_transfer"" -> ""763_safeSub"";
""763_transferToAddress"" -> ""763_balanceOf"";
""763_transfer"" -> ""763_transferToContract"";
""763_transferToAddress"" -> ""763_safeAdd"";
""763_transfer"" -> ""763_safeAdd"";
""763_UnlockToken"" -> ""763_onlyOwner"";
""763_transferFrom"" -> ""763_safeSub"";
""763_transfer"" -> ""763_transferToAddress"";
""763_transferToContract"" -> ""763_balanceOf"";
""763_transfer"" -> ""763_balanceOf"";
""763_transferFrom"" -> ""763_balanceOf"";
}
"
0x2de60f36bb208b5c96acb36d4a49aad3e2be0627.sol,GJCICO,"contract GJCICO is Pausable{ using SafeMath for uint256; uint constant public minContribAmount = 0.01 ether; GJCToken public token; uint256 constant public tokenDecimals = 18; TokenVesting public vesting; uint256 constant public VESTING_TIMES = 4; uint256 constant public DURATION_PER_VESTING = 52 weeks; uint256 public startTime; uint256 public endTime; bool public icoEnabled; address public multisignWallet; uint256 public weiRaised; uint256 constant public totalSupply = 100000000 * (10 ** tokenDecimals); uint256 constant public preSaleCap = 10000000 * (10 ** tokenDecimals); uint256 constant public initialICOCap = 60000000 * (10 ** tokenDecimals); uint256 constant public tokensForFounder = 10000000 * (10 ** tokenDecimals); uint256 constant public tokensForDevteam = 10000000 * (10 ** tokenDecimals); uint256 constant public tokensForPartners = 5000000 * (10 ** tokenDecimals); uint256 constant public tokensForCharity = 3000000 * (10 ** tokenDecimals); uint256 constant public tokensForBounty = 2000000 * (10 ** tokenDecimals); uint256 public soldPreSaleTokens; uint256 public sentPreSaleTokens; uint256 public icoCap; uint256 public icoSoldTokens; bool public icoEnded = false; uint256 constant public RATE_FOR_WEEK1 = 525; uint256 constant public RATE_FOR_WEEK2 = 455; uint256 constant public RATE_FOR_WEEK3 = 420; uint256 constant public RATE_NO_DISCOUNT = 350; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); function GJCICO(address _multisignWallet) { require(_multisignWallet != address(0)); token = createTokenContract(); uint256 tokensToDao = tokensForDevteam.add(tokensForPartners).add(tokensForBounty).add(tokensForCharity); multisignWallet = _multisignWallet; token.transfer(multisignWallet, tokensToDao); }",0,"subgraph cluster_986_GJCICO {
label=""GJCICO"";
""986_createTokenContract"" [label=""createTokenContract""];
""986_fallback"" [label=""fallback""];
""986_setSoldPreSaleTokens"" [label=""setSoldPreSaleTokens""];
""986_createTokenVestingContract"" [label=""createTokenVestingContract""];
""986_drain"" [label=""drain""];
""986_enableICO"" [label=""enableICO""];
""986_hasEnded"" [label=""hasEnded""];
""986_validPurchase"" [label=""validPurchase""];
""986_buyTokens"" [label=""buyTokens""];
""986_GJCICO"" [label=""GJCICO""];
""986_forwardFunds"" [label=""forwardFunds""];
""986_getRate"" [label=""getRate""];
""986_enableTokenTransferability"" [label=""enableTokenTransferability""];
""986_endIco"" [label=""endIco""];
""986_createVestingForFounder"" [label=""createVestingForFounder""];
""986_setMultisignWallet"" [label=""setMultisignWallet""];
""986_delegateVestingContractOwner"" [label=""delegateVestingContractOwner""];
""986_setContributionDates"" [label=""setContributionDates""];
""986_transferPreSaleTokens"" [label=""transferPreSaleTokens""];
""986_disableTokenTransferability"" [label=""disableTokenTransferability""];
""986_disableTokenTransferability"" -> ""986_onlyOwner"";
""986_buyTokens"" -> ""986_getRate"";
""986_buyTokens"" -> ""986_validPurchase"";
""986_drain"" -> ""986_onlyOwner"";
""986_buyTokens"" -> ""986_whenNotPaused"";
""986_setContributionDates"" -> ""986_onlyOwner"";
""986_fallback"" -> ""986_buyTokens"";
""986_createVestingForFounder"" -> ""986_onlyOwner"";
""986_fallback"" -> ""986_whenNotPaused"";
""986_transferPreSaleTokens"" -> ""986_onlyOwner"";
""986_setMultisignWallet"" -> ""986_onlyOwner"";
""986_delegateVestingContractOwner"" -> ""986_onlyOwner"";
""986_enableTokenTransferability"" -> ""986_onlyOwner"";
""986_createVestingForFounder"" -> ""986_createTokenVestingContract"";
""986_endIco"" -> ""986_onlyOwner"";
""986_enableICO"" -> ""986_onlyOwner"";
""986_setSoldPreSaleTokens"" -> ""986_onlyOwner"";
""986_GJCICO"" -> ""986_createTokenContract"";
""986_buyTokens"" -> ""986_forwardFunds"";
}
"
0xf19d446c35570eff44cf9871ee389067ebd6e962.sol,TearFiat,"contract TearFiat is ERC20Detailed { using SafeMath for uint256; mapping (address => uint256) private _balances; mapping (address => mapping (address => uint256)) private _allowed; string constant tokenName = ; string constant tokenSymbol = ; uint8 constant tokenDecimals = 10; uint256 _totalSupply = 6500000000000000; uint256 public basePercent = 50; constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) { _mint(msg.sender, _totalSupply); }",0,"subgraph cluster_865_TearFiat {
label=""TearFiat"";
""865_burn"" [label=""burn""];
""865__burn"" [label=""_burn""];
""865_constructor"" [label=""constructor""];
""865_decreaseAllowance"" [label=""decreaseAllowance""];
""865__mint"" [label=""_mint""];
""865_totalSupply"" [label=""totalSupply""];
""865_findOnePercent"" [label=""findOnePercent""];
""865_multiTransfer"" [label=""multiTransfer""];
""865_approve"" [label=""approve""];
""865_allowance"" [label=""allowance""];
""865_increaseAllowance"" [label=""increaseAllowance""];
""865_burnFrom"" [label=""burnFrom""];
""865_transfer"" [label=""transfer""];
""865_balanceOf"" [label=""balanceOf""];
""865_transferFrom"" [label=""transferFrom""];
""865_transfer"" -> ""865_findOnePercent"";
""865_multiTransfer"" -> ""865_transfer"";
""865_transferFrom"" -> ""865_findOnePercent"";
""865_burn"" -> ""865__burn"";
""865_constructor"" -> ""865__mint"";
""865_burnFrom"" -> ""865__burn"";
""865_constructor"" -> ""865_constructor"";
}
"
0x7217fdeb1ed453eab8a5afa621461497f7630bb7.sol,ReclycleCoin,contract ReclycleCoin { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 4; uint public _totalSupply = 5250000000000; uint256 public RATE = 1; bool public isMinting = false; string public constant generatedBy = ; using SafeMath for uint256; address public owner; modifier onlyOwner() { if (msg.sender != owner) { throw; },0,"subgraph cluster_516_ReclycleCoin {
label=""ReclycleCoin"";
""516_createTokens"" [label=""createTokens""];
""516_burnTokens"" [label=""burnTokens""];
""516_approve"" [label=""approve""];
""516_balanceOf"" [label=""balanceOf""];
""516_constructor"" [label=""constructor""];
""516_transfer"" [label=""transfer""];
""516_fallback"" [label=""fallback""];
""516_transferFrom"" [label=""transferFrom""];
""516_allowance"" [label=""allowance""];
""516_changeCrowdsaleRate"" [label=""changeCrowdsaleRate""];
""516_totalSupply"" [label=""totalSupply""];
""516_endCrowdsale"" [label=""endCrowdsale""];
""516_burnTokens"" -> ""516_onlyOwner"";
""516_fallback"" -> ""516_createTokens"";
""516_endCrowdsale"" -> ""516_onlyOwner"";
""516_changeCrowdsaleRate"" -> ""516_onlyOwner"";
}
"
0x4ccc3759eb48faf1c6cfadad2619e7038db6b212.sol,SuperEdge,"contract SuperEdge is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public blacklist; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 2000000000e8; uint256 public totalDistributed = 1200000000e8; uint256 public totalRemaining = totalSupply.sub(totalDistributed); uint256 public value = 15000e8; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_873_SuperEdge {
label=""SuperEdge"";
""873_SuperEdge"" [label=""SuperEdge""];
""873_getTokens"" [label=""getTokens""];
""873_transferOwnership"" [label=""transferOwnership""];
""873_burn"" [label=""burn""];
""873_transfer"" [label=""transfer""];
""873_withdraw"" [label=""withdraw""];
""873_distr"" [label=""distr""];
""873_balanceOf"" [label=""balanceOf""];
""873_getTokenBalance"" [label=""getTokenBalance""];
""873_fallback"" [label=""fallback""];
""873_allowance"" [label=""allowance""];
""873_finishDistribution"" [label=""finishDistribution""];
""873_transferFrom"" [label=""transferFrom""];
""873_approve"" [label=""approve""];
""873_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""873_withdrawForeignTokens"" -> ""873_onlyOwner"";
""873_getTokens"" -> ""873_distr"";
""873_transferOwnership"" -> ""873_onlyOwner"";
""873_getTokens"" -> ""873_onlyWhitelist"";
""873_finishDistribution"" -> ""873_onlyOwner"";
""873_transferFrom"" -> ""873_onlyPayloadSize"";
""873_withdraw"" -> ""873_onlyOwner"";
""873_getTokens"" -> ""873_canDistr"";
""873_transfer"" -> ""873_onlyPayloadSize"";
""873_fallback"" -> ""873_getTokens"";
""873_burn"" -> ""873_onlyOwner"";
""873_distr"" -> ""873_canDistr"";
""873_finishDistribution"" -> ""873_canDistr"";
}
"
0x38c83b225eb17d44f33f8bb3bdc23d86733838db.sol,try_to_play,contract try_to_play { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },0,"subgraph cluster_127_try_to_play {
label=""try_to_play"";
""127_start_try_to_play"" [label=""start_try_to_play""];
""127_Try"" [label=""Try""];
""127_StopGame"" [label=""StopGame""];
""127_NewQuestion"" [label=""NewQuestion""];
""127_fallback"" [label=""fallback""];
""127_newQuestioner"" [label=""newQuestioner""];
""127_NewQuestion"" -> ""127_onlyQuestionSender"";
""127_StopGame"" -> ""127_onlyQuestionSender"";
""127_newQuestioner"" -> ""127_onlyQuestionSender"";
}
"
0x64cfc7428621b2b118896670c0b4d52ab020ee6a.sol,AUSD,"contract AUSD is Owned, ERC20Token { using SafeMath for uint256; string private constant standard = ; string private constant version = ; string private name_ = ; string private symbol_ = ; uint8 private decimals_ = 18; uint256 private totalSupply_ = uint256(20) * uint256(10)**uint256(8) * uint256(10)**uint256(decimals_); mapping (address => uint256) private balanceP; mapping (address => mapping (address => uint256)) private allowed; mapping (address => uint256[]) private lockTime; mapping (address => uint256[]) private lockValue; mapping (address => uint256) private lockNum; uint256 private later = 0; uint256 private earlier = 0; bool private mintable_ = true; event Burn(address indexed _from, uint256 _value); event Mint(address indexed _to, uint256 _value); event TransferLocked(address indexed _from, address indexed _to, uint256 _time, uint256 _value); event TokenUnlocked(address indexed _address, uint256 _value); event WrongTokenEmptied(address indexed _token, address indexed _addr, uint256 _amount); event WrongEtherEmptied(address indexed _addr, uint256 _amount); constructor() public { balanceP[msg.sender] = totalSupply_; }",0,"subgraph cluster_1810_AUSD {
label=""AUSD"";
""1810_transfer"" [label=""transfer""];
""1810_decreaseApproval"" [label=""decreaseApproval""];
""1810_transferFrom"" [label=""transferFrom""];
""1810_transferLockedFrom"" [label=""transferLockedFrom""];
""1810_mintable"" [label=""mintable""];
""1810_totalSupply"" [label=""totalSupply""];
""1810_calcUnlock"" [label=""calcUnlock""];
""1810_showLockNum"" [label=""showLockNum""];
""1810_name"" [label=""name""];
""1810_constructor"" [label=""constructor""];
""1810_transferLocked"" [label=""transferLocked""];
""1810_setUnlockLater"" [label=""setUnlockLater""];
""1810_allowance"" [label=""allowance""];
""1810_balanceUnlocked"" [label=""balanceUnlocked""];
""1810_disableMint"" [label=""disableMint""];
""1810_fallback"" [label=""fallback""];
""1810_burn"" [label=""burn""];
""1810_symbol"" [label=""symbol""];
""1810_increaseApproval"" [label=""increaseApproval""];
""1810_setUnlockEarlier"" [label=""setUnlockEarlier""];
""1810_emptyWrongToken"" [label=""emptyWrongToken""];
""1810_approve"" [label=""approve""];
""1810_mint"" [label=""mint""];
""1810_balanceLocked"" [label=""balanceLocked""];
""1810_emptyWrongEther"" [label=""emptyWrongEther""];
""1810_balanceOf"" [label=""balanceOf""];
""1810_showLockValues"" [label=""showLockValues""];
""1810_showLockTimes"" [label=""showLockTimes""];
""1810_decimals"" [label=""decimals""];
""1810_transfer"" -> ""1810_calcUnlock"";
""1810_transferLockedFrom"" -> ""1810_validAddress"";
""1810_transferLocked"" -> ""1810_calcUnlock"";
""1810_emptyWrongToken"" -> ""1810_onlyOwner"";
""1810_transfer"" -> ""1810_validAddress"";
""1810_approve"" -> ""1810_calcUnlock"";
""1810_disableMint"" -> ""1810_isMintable"";
""1810_mint"" -> ""1810_onlyOwner"";
""1810_setUnlockLater"" -> ""1810_onlyOwner"";
""1810_transferLocked"" -> ""1810_validAddress"";
""1810_increaseApproval"" -> ""1810_validAddress"";
""1810_setUnlockEarlier"" -> ""1810_onlyOwner"";
""1810_showLockNum"" -> ""1810_validAddress"";
""1810_decreaseApproval"" -> ""1810_validAddress"";
""1810_showLockValues"" -> ""1810_validAddress"";
""1810_burn"" -> ""1810_onlyOwner"";
""1810_showLockTimes"" -> ""1810_validAddress"";
""1810_transferFrom"" -> ""1810_validAddress"";
""1810_emptyWrongEther"" -> ""1810_onlyOwner"";
""1810_transferFrom"" -> ""1810_calcUnlock"";
""1810_disableMint"" -> ""1810_onlyOwner"";
""1810_transferLockedFrom"" -> ""1810_calcUnlock"";
""1810_burn"" -> ""1810_calcUnlock"";
""1810_mint"" -> ""1810_isMintable"";
""1810_approve"" -> ""1810_validAddress"";
}
"
0xd64ad4eefaacb96a0865687cfeef4c4a2cfbfef2.sol,SafeMath,"contract SafeMath { function add(uint x, uint y) internal constant returns (uint z) { assert((z = x + y) >= x); }",0,"subgraph cluster_190_SafeMath {
label=""SafeMath"";
""190_add"" [label=""add""];
""190_max"" [label=""max""];
""190_subtract"" [label=""subtract""];
""190_min"" [label=""min""];
""190_divide"" [label=""divide""];
""190_min64"" [label=""min64""];
""190_max64"" [label=""max64""];
""190_assert"" [label=""assert""];
""190_multiply"" [label=""multiply""];
""190_subtract"" -> ""190_assert"";
""190_add"" -> ""190_assert"";
""190_divide"" -> ""190_assert"";
""190_multiply"" -> ""190_assert"";
}
"
0x6f3a995e904c9be5279e375e79f3c30105efa618.sol,ProofToken,"contract ProofToken is Crowdsale { string public standard = ; string public name = ; string public symbol = ; uint8 public decimals = 8; mapping (address => mapping (address => uint)) public allowed; event Approval(address indexed owner, address indexed spender, uint value); event Burn(address indexed owner, uint value); function ProofToken(address _backend, uint _etherPrice) public payable Crowdsale(_backend, _etherPrice) { }",0,"subgraph cluster_921_ProofToken {
label=""ProofToken"";
""921_burn"" [label=""burn""];
""921_approve"" [label=""approve""];
""921_transferFrom"" [label=""transferFrom""];
""921_allowance"" [label=""allowance""];
""921_transfer"" [label=""transfer""];
""921_ProofToken"" [label=""ProofToken""];
""921_transferFrom"" -> ""921_onlyPayloadSize"";
""921_transfer"" -> ""921_onlyPayloadSize"";
""921_ProofToken"" -> ""921_Crowdsale"";
}
"
0xed231a75b03c2cd388ee26d4f74abf88cb683e8c.sol,CollateralMonitor,"contract CollateralMonitor is Owned, SafeDecimalMath { Havven havven; Nomin nomin; HavvenEscrow escrow; address[] issuers; uint maxIssuers = 10; constructor(Havven _havven, Nomin _nomin, HavvenEscrow _escrow) Owned(msg.sender) public { havven = _havven; nomin = _nomin; escrow = _escrow; }",0,"subgraph cluster_914_CollateralMonitor {
label=""CollateralMonitor"";
""914_constructor"" [label=""constructor""];
""914_pushIssuer"" [label=""pushIssuer""];
""914_resizeIssuersArray"" [label=""resizeIssuersArray""];
""914_totalNetworkCollateralisation"" [label=""totalNetworkCollateralisation""];
""914__limitedTotalIssuingCollateral"" [label=""_limitedTotalIssuingCollateral""];
""914_setEscrow"" [label=""setEscrow""];
""914_totalIssuingCollateral_limitedSum"" [label=""totalIssuingCollateral_limitedSum""];
""914_totalIssuingCollateral"" [label=""totalIssuingCollateral""];
""914_deleteIssuer"" [label=""deleteIssuer""];
""914_totalLockedHavvens"" [label=""totalLockedHavvens""];
""914_setNomin"" [label=""setNomin""];
""914_pushIssuers"" [label=""pushIssuers""];
""914_setMaxIssuers"" [label=""setMaxIssuers""];
""914_totalLockedHavvens_byAvailableHavvens_limitedSum"" [label=""totalLockedHavvens_byAvailableHavvens_limitedSum""];
""914_collateralisation"" [label=""collateralisation""];
""914_collateral"" [label=""collateral""];
""914_totalIssuanceDebt"" [label=""totalIssuanceDebt""];
""914_totalIssuerCollateralisation"" [label=""totalIssuerCollateralisation""];
""914_totalLockedHavvens_limitedSum"" [label=""totalLockedHavvens_limitedSum""];
""914_totalIssuanceDebt_limitedSum"" [label=""totalIssuanceDebt_limitedSum""];
""914_setHavven"" [label=""setHavven""];
""914_totalIssuanceDebt"" -> ""914_safeDiv_dec"";
""914_totalIssuerCollateralisation"" -> ""914_totalIssuingCollateral"";
""914_pushIssuers"" -> ""914_pushIssuer"";
""914_collateral"" -> ""914_safeAdd"";
""914_totalIssuingCollateral"" -> ""914__limitedTotalIssuingCollateral"";
""914_totalLockedHavvens_byAvailableHavvens_limitedSum"" -> ""914_collateral"";
""914_resizeIssuersArray"" -> ""914_onlyOwner"";
""914_totalIssuanceDebt"" -> ""914_safeMul_dec"";
""914_collateralisation"" -> ""914_safeMul_dec"";
""914_totalNetworkCollateralisation"" -> ""914_safeMul_dec"";
""914_collateralisation"" -> ""914_safeDiv_dec"";
""914_totalLockedHavvens"" -> ""914_totalIssuanceDebt"";
""914_constructor"" -> ""914_constructor"";
""914_totalLockedHavvens"" -> ""914_min"";
""914_totalLockedHavvens"" -> ""914_totalIssuingCollateral"";
""914_totalLockedHavvens_limitedSum"" -> ""914_totalIssuingCollateral"";
""914_deleteIssuer"" -> ""914_onlyOwner"";
""914_totalLockedHavvens_byAvailableHavvens_limitedSum"" -> ""914_min"";
""914_setMaxIssuers"" -> ""914_onlyOwner"";
""914__limitedTotalIssuingCollateral"" -> ""914_min"";
""914_pushIssuer"" -> ""914_onlyOwner"";
""914_setHavven"" -> ""914_onlyOwner"";
""914_setNomin"" -> ""914_onlyOwner"";
""914_totalIssuingCollateral_limitedSum"" -> ""914__limitedTotalIssuingCollateral"";
""914_totalIssuerCollateralisation"" -> ""914_safeDiv_dec"";
""914_totalLockedHavvens_limitedSum"" -> ""914_min"";
""914_collateralisation"" -> ""914_collateral"";
""914_totalLockedHavvens_limitedSum"" -> ""914_totalIssuanceDebt_limitedSum"";
""914_totalNetworkCollateralisation"" -> ""914_safeDiv_dec"";
""914_totalLockedHavvens_byAvailableHavvens_limitedSum"" -> ""914_safeSub"";
""914__limitedTotalIssuingCollateral"" -> ""914_collateral"";
""914_pushIssuers"" -> ""914_onlyOwner"";
""914_setEscrow"" -> ""914_onlyOwner"";
""914_totalIssuerCollateralisation"" -> ""914_safeMul_dec"";
""914_totalIssuanceDebt_limitedSum"" -> ""914_safeMul_dec"";
""914_totalIssuanceDebt_limitedSum"" -> ""914_min"";
""914_totalIssuanceDebt_limitedSum"" -> ""914_safeDiv_dec"";
}
"
0x2682e3ad5358932ac5cd8f8616912cec76ad680c.sol,CupExchange,"contract CupExchange { using SafeMath for uint256; using SafeMath for int256; address public owner; token internal teamCup; token internal cup; uint256 public exchangePrice; bool public halting = true; event Halted(bool halting); event Exchange(address user, uint256 distributedAmount, uint256 collectedAmount); constructor(address cupToken, address teamCupToken) public { owner = msg.sender; teamCup = token(teamCupToken); cup = token(cupToken); }",0,"subgraph cluster_373_CupExchange {
label=""CupExchange"";
""373_exchange"" [label=""exchange""];
""373_safeWithdrawal"" [label=""safeWithdrawal""];
""373_setExchangePrice"" [label=""setExchangePrice""];
""373_constructor"" [label=""constructor""];
""373_halt"" [label=""halt""];
""373_unhalt"" [label=""unhalt""];
""373_safeWithdrawal"" -> ""373_onlyOwner"";
""373_unhalt"" -> ""373_onlyOwner"";
""373_halt"" -> ""373_onlyOwner"";
""373_setExchangePrice"" -> ""373_onlyOwner"";
}
"
0x2fca5f257895b8bcede0c0d06141b718ec9a3041.sol,TrexDexMain,"contract TrexDexMain { using SafeMath for uint256; address public owner; address public feeAddress; mapping (address => mapping (address => uint256)) public makeFees; mapping (address => mapping (address => uint256)) public takeFees; mapping (address => uint256) public depositFees; mapping (address => uint256) public withdrawFees; mapping (address => bool) public strictTokens; mapping (address => bool) public tokenDeposits; mapping (address => bool) public tokenWithdraws; mapping (address => mapping (address => bool)) public tokenTrades; mapping (address => mapping (address => uint256)) public deposits; mapping (address => mapping (bytes32 => bool)) public orders; mapping (address => mapping (bytes32 => uint256)) public orderFills; event Order(address buyTokenAddress, uint256 buyAmount, address sellTokenAddress, uint256 sellAmount, address takeAddress, address baseTokenAddress, uint256 expireBlock, uint256 nonce, address makeAddress); event Cancel(bytes32 orderHash); event Trade(bytes32 orderHash, uint256 buyAmount, uint256 sellAmount, uint256 takeFee, uint256 makeFee, address takeAddress); event Deposit(address tokenAddress, address userAddress, uint256 amount, uint256 fee, uint256 balance); event Withdraw(address tokenAddress, address userAddress, uint256 amount, uint256 fee, uint256 balance); event TransferIn(address tokenAddress, address userAddress, uint256 amount, uint256 balance); event TransferOut(address tokenAddress, address userAddress, uint256 amount, uint256 balance); modifier isOwner { assert(msg.sender == owner); _; }",0,"subgraph cluster_2073_TrexDexMain {
label=""TrexDexMain"";
""2073_setTokenTrades"" [label=""setTokenTrades""];
""2073__checkTrade"" [label=""_checkTrade""];
""2073__calcStrictAmount"" [label=""_calcStrictAmount""];
""2073_setTokenTransfer"" [label=""setTokenTransfer""];
""2073_constructor"" [label=""constructor""];
""2073_depositToken"" [label=""depositToken""];
""2073__depositToken"" [label=""_depositToken""];
""2073_transfer"" [label=""transfer""];
""2073_trade"" [label=""trade""];
""2073_deposit"" [label=""deposit""];
""2073__withdrawToken"" [label=""_withdrawToken""];
""2073__buildHash"" [label=""_buildHash""];
""2073_withdrawToken"" [label=""withdrawToken""];
""2073_withdraw"" [label=""withdraw""];
""2073_testTrade"" [label=""testTrade""];
""2073_amountFilled"" [label=""amountFilled""];
""2073__checkTradeAddress"" [label=""_checkTradeAddress""];
""2073_fallback"" [label=""fallback""];
""2073_order"" [label=""order""];
""2073_setStrictToken"" [label=""setStrictToken""];
""2073_setTokenTransfers"" [label=""setTokenTransfers""];
""2073__availableVolume"" [label=""_availableVolume""];
""2073_setOwner"" [label=""setOwner""];
""2073__hasDeposit"" [label=""_hasDeposit""];
""2073_tradeMulti"" [label=""tradeMulti""];
""2073_cancelOrder"" [label=""cancelOrder""];
""2073__checkHash"" [label=""_checkHash""];
""2073_balanceOf"" [label=""balanceOf""];
""2073_availableVolume"" [label=""availableVolume""];
""2073__trade"" [label=""_trade""];
""2073_setTokenTrade"" [label=""setTokenTrade""];
""2073_setFeeAddress"" [label=""setFeeAddress""];
""2073__checkTrade"" -> ""2073__checkTradeAddress"";
""2073_setTokenTrade"" -> ""2073_isOwner"";
""2073_setTokenTransfers"" -> ""2073_setTokenTransfer"";
""2073__trade"" -> ""2073__calcStrictAmount"";
""2073_deposit"" -> ""2073__depositToken"";
""2073_tradeMulti"" -> ""2073_trade"";
""2073_cancelOrder"" -> ""2073__checkHash"";
""2073_testTrade"" -> ""2073__checkTrade"";
""2073_trade"" -> ""2073__checkTrade"";
""2073_cancelOrder"" -> ""2073_hasPayloadSize"";
""2073_amountFilled"" -> ""2073__buildHash"";
""2073_order"" -> ""2073_hasPayloadSize"";
""2073_setTokenTransfer"" -> ""2073_isOwner"";
""2073_trade"" -> ""2073__checkHash"";
""2073_setFeeAddress"" -> ""2073_isOwner"";
""2073_withdrawToken"" -> ""2073__withdrawToken"";
""2073_cancelOrder"" -> ""2073__buildHash"";
""2073_depositToken"" -> ""2073_hasPayloadSize"";
""2073_testTrade"" -> ""2073_availableVolume"";
""2073_transfer"" -> ""2073_isOwner"";
""2073_trade"" -> ""2073__buildHash"";
""2073_depositToken"" -> ""2073__depositToken"";
""2073_order"" -> ""2073__buildHash"";
""2073_setTokenTrades"" -> ""2073_isOwner"";
""2073_setOwner"" -> ""2073_isOwner"";
""2073_setStrictToken"" -> ""2073_isOwner"";
""2073_setTokenTransfers"" -> ""2073_isOwner"";
""2073_testTrade"" -> ""2073__hasDeposit"";
""2073_availableVolume"" -> ""2073__checkHash"";
""2073_trade"" -> ""2073__trade"";
""2073_withdraw"" -> ""2073_hasPayloadSize"";
""2073_availableVolume"" -> ""2073__availableVolume"";
""2073__availableVolume"" -> ""2073__calcStrictAmount"";
""2073_setTokenTrades"" -> ""2073_setTokenTrade"";
""2073_withdrawToken"" -> ""2073_hasPayloadSize"";
""2073_order"" -> ""2073__checkTrade"";
""2073_availableVolume"" -> ""2073__buildHash"";
""2073_withdraw"" -> ""2073__withdrawToken"";
}
"
0x584a0ec8a7a3fcfed27db5c234a9062863883778.sol,StandardToken,"contract StandardToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function StandardToken( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_400_StandardToken {
label=""StandardToken"";
""400_StandardToken"" [label=""StandardToken""];
""400_burn"" [label=""burn""];
""400_transferFrom"" [label=""transferFrom""];
""400_transfer"" [label=""transfer""];
""400__transfer"" [label=""_transfer""];
""400_approveAndCall"" [label=""approveAndCall""];
""400_burnFrom"" [label=""burnFrom""];
""400_approve"" [label=""approve""];
""400_approveAndCall"" -> ""400_approve"";
""400_transfer"" -> ""400__transfer"";
""400_transferFrom"" -> ""400__transfer"";
}
"
0xda830afa460526071d3d149e898fead664f0a4bb.sol,TokenCampaign,contract TokenCampaign is Controlled { using SafeMath for uint256; eat_token_interface public token; uint8 public constant decimals = 18; uint256 public constant scale = (uint256(10) ** decimals); uint256 public constant hardcap = 100000000 * scale; uint256 public constant PRCT100_D_TEAM = 63; uint256 public constant PRCT100_R_TEAM = 250; uint256 public constant PRCT100_R2 = 150; uint256 public constant FIXEDREWARD_MM = 100000 * scale; uint256 public constant PRCT100_ETH_OP = 4000; uint256 public constant preCrowdMinContribution = (20 ether); uint256 public constant minContribution = (1 ether) / 100; uint256 public constant preCrowd_tokens_scaled = 7142857142857140000000; uint256 public constant stage_1_tokens_scaled = 6250000000000000000000; uint256 public constant stage_2_tokens_scaled = 5555555555555560000000; uint256 public constant stage_3_tokens_scaled = 5000000000000000000000; uint256 public constant PreCrowdAllocation = 20000000 * scale ; uint256 public constant Stage1Allocation = 15000000 * scale ; uint256 public constant Stage2Allocation = 15000000 * scale ; uint256 public constant Stage3Allocation = 20000000 * scale ; uint256 public tokensRemainingPreCrowd = PreCrowdAllocation; uint256 public tokensRemainingStage1 = Stage1Allocation; uint256 public tokensRemainingStage2 = Stage2Allocation; uint256 public tokensRemainingStage3 = Stage3Allocation; uint256 public maxPreCrowdAllocationPerInvestor = 20000000 * scale ; uint256 public maxStage1AllocationPerInvestor = 15000000 * scale ; uint256 public maxStage2AllocationPerInvestor = 15000000 * scale ; uint256 public maxStage3AllocationPerInvestor = 20000000 * scale ; uint256 public tokensGenerated = 0; address[] public joinedCrowdsale; uint256 public amountRaised = 0; uint256 public amountRefunded = 0; address public dteamVaultAddr1; address public dteamVaultAddr2; address public dteamVaultAddr3; address public dteamVaultAddr4; address public rteamVaultAddr; address public r2VaultAddr; address public mmVaultAddr; address public reserveVaultAddr; address public trusteeVaultAddr; address public opVaultAddr; address public tokenAddr; uint8 public campaignState = 3; bool public paused = false; uint256 public tCampaignStart = 64060588800; uint256 public t_1st_StageEnd = 5 * (1 days); uint256 public t_2nd_StageEnd = 2 * (1 days); uint256 public tCampaignEnd = 35 * (1 days); uint256 public tFinalized = 64060588800; struct ParticipantListData { bool participatedFlag; uint256 contributedAmountPreAllocated; uint256 contributedAmountPreCrowd; uint256 contributedAmountStage1; uint256 contributedAmountStage2; uint256 contributedAmountStage3; uint256 preallocatedTokens; uint256 allocatedTokens; uint256 spentAmount; },0,"subgraph cluster_3689_TokenCampaign {
label=""TokenCampaign"";
""3689_setMaxStage1AllocationPerInvestor"" [label=""setMaxStage1AllocationPerInvestor""];
""3689_proxy_contribution"" [label=""proxy_contribution""];
""3689_do_grant_tokens"" [label=""do_grant_tokens""];
""3689_pauseSale"" [label=""pauseSale""];
""3689_resumeSale"" [label=""resumeSale""];
""3689_setopVaultAddr"" [label=""setopVaultAddr""];
""3689_process_contribution"" [label=""process_contribution""];
""3689_refund"" [label=""refund""];
""3689_setMultipleParticipantWhitelist"" [label=""setMultipleParticipantWhitelist""];
""3689_setMaxStage2AllocationPerInvestor"" [label=""setMaxStage2AllocationPerInvestor""];
""3689_toggleWhitelist"" [label=""toggleWhitelist""];
""3689_setrteamVaultAddr"" [label=""setrteamVaultAddr""];
""3689_setmmVaultAddr"" [label=""setmmVaultAddr""];
""3689_setMaxPreCrowdAllocationPerInvestor"" [label=""setMaxPreCrowdAllocationPerInvestor""];
""3689_claimTokens"" [label=""claimTokens""];
""3689_airdrop"" [label=""airdrop""];
""3689_setParticipantWhitelist"" [label=""setParticipantWhitelist""];
""3689_emergencyFinalize"" [label=""emergencyFinalize""];
""3689_setdteamVaultAddr1"" [label=""setdteamVaultAddr1""];
""3689_contractBalance"" [label=""contractBalance""];
""3689_setr2VaultAddr"" [label=""setr2VaultAddr""];
""3689_setInvestorsBatchSize"" [label=""setInvestorsBatchSize""];
""3689_TokenCampaign"" [label=""TokenCampaign""];
""3689_setdteamVaultAddr4"" [label=""setdteamVaultAddr4""];
""3689_preallocate"" [label=""preallocate""];
""3689_settrusteeVaultAddr"" [label=""settrusteeVaultAddr""];
""3689_setMaxStage3AllocationPerInvestor"" [label=""setMaxStage3AllocationPerInvestor""];
""3689_fallback"" [label=""fallback""];
""3689_finalizeCampaign"" [label=""finalizeCampaign""];
""3689_allocateInvestors"" [label=""allocateInvestors""];
""3689_investorCount"" [label=""investorCount""];
""3689_retrieveFunds"" [label=""retrieveFunds""];
""3689_setdteamVaultAddr3"" [label=""setdteamVaultAddr3""];
""3689_multiAirdrop"" [label=""multiAirdrop""];
""3689_startSale"" [label=""startSale""];
""3689_closeSale"" [label=""closeSale""];
""3689_setdteamVaultAddr2"" [label=""setdteamVaultAddr2""];
""3689_setmmVaultAddr"" -> ""3689_onlyController"";
""3689_finalizeCampaign"" -> ""3689_do_grant_tokens"";
""3689_finalizeCampaign"" -> ""3689_onlyController"";
""3689_startSale"" -> ""3689_onlyController"";
""3689_setMaxStage3AllocationPerInvestor"" -> ""3689_onlyController"";
""3689_setrteamVaultAddr"" -> ""3689_onlyController"";
""3689_preallocate"" -> ""3689_onlyController"";
""3689_settrusteeVaultAddr"" -> ""3689_onlyController"";
""3689_toggleWhitelist"" -> ""3689_onlyController"";
""3689_airdrop"" -> ""3689_onlyController"";
""3689_setMaxStage2AllocationPerInvestor"" -> ""3689_onlyController"";
""3689_setMultipleParticipantWhitelist"" -> ""3689_setParticipantWhitelist"";
""3689_pauseSale"" -> ""3689_onlyController"";
""3689_setInvestorsBatchSize"" -> ""3689_onlyController"";
""3689_setdteamVaultAddr2"" -> ""3689_onlyController"";
""3689_closeSale"" -> ""3689_onlyController"";
""3689_setMaxStage1AllocationPerInvestor"" -> ""3689_onlyController"";
""3689_resumeSale"" -> ""3689_onlyController"";
""3689_emergencyFinalize"" -> ""3689_onlyController"";
""3689_setdteamVaultAddr4"" -> ""3689_onlyController"";
""3689_proxy_contribution"" -> ""3689_process_contribution"";
""3689_setopVaultAddr"" -> ""3689_onlyController"";
""3689_multiAirdrop"" -> ""3689_airdrop"";
""3689_setr2VaultAddr"" -> ""3689_onlyController"";
""3689_allocateInvestors"" -> ""3689_do_grant_tokens"";
""3689_setdteamVaultAddr3"" -> ""3689_onlyController"";
""3689_setMultipleParticipantWhitelist"" -> ""3689_onlyController"";
""3689_preallocate"" -> ""3689_do_grant_tokens"";
""3689_fallback"" -> ""3689_process_contribution"";
""3689_airdrop"" -> ""3689_do_grant_tokens"";
""3689_setParticipantWhitelist"" -> ""3689_onlyController"";
""3689_setMaxPreCrowdAllocationPerInvestor"" -> ""3689_onlyController"";
""3689_claimTokens"" -> ""3689_onlyController"";
""3689_setdteamVaultAddr1"" -> ""3689_onlyController"";
""3689_multiAirdrop"" -> ""3689_onlyController"";
""3689_allocateInvestors"" -> ""3689_onlyController"";
""3689_retrieveFunds"" -> ""3689_onlyController"";
}
"
0x5627e54ff24448a526cff449eae3e3c6917fb4b3.sol,iHOME,"contract iHOME is Ownable { using SafeMath for uint256; event Transfer(address indexed from,address indexed to,uint256 _tokenId); event Approval(address indexed owner,address indexed approved,uint256 _tokenId); string public constant symbol = ; string public constant name = ; uint8 public decimals = 18; uint256 public totalSupply = 1000000000000 * 10 ** uint256(decimals); mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) allowed; function balanceOf(address _owner) public constant returns (uint256 balance) { return balances[_owner]; }",0,"subgraph cluster_542_iHOME {
label=""iHOME"";
""542_constructor"" [label=""constructor""];
""542_increaseApproval"" [label=""increaseApproval""];
""542_decreaseApproval"" [label=""decreaseApproval""];
""542_transferFrom"" [label=""transferFrom""];
""542_transfer"" [label=""transfer""];
""542_balanceOf"" [label=""balanceOf""];
""542_allowance"" [label=""allowance""];
""542_approve"" [label=""approve""];
}
"
0x5aeba72b15e4ef814460e49beca6d176caec228b.sol,PauserRole,contract PauserRole is Ownable { using Roles for Roles.Role; event PauserAdded(address indexed account); event PauserRemoved(address indexed account); Roles.Role private pausers; constructor() public { pausers.add(msg.sender); },0,"subgraph cluster_1525_PauserRole {
label=""PauserRole"";
""1525_isPauser"" [label=""isPauser""];
""1525_addPauser"" [label=""addPauser""];
""1525_constructor"" [label=""constructor""];
""1525__removePauser"" [label=""_removePauser""];
""1525_renouncePauser"" [label=""renouncePauser""];
""1525_renouncePauser"" -> ""1525_onlyPauser"";
""1525_addPauser"" -> ""1525_onlyPauser"";
}
"
0xa3ea961ea44bafa061fe7b2ece819d2a8ceb69b2.sol,TydoPreIco,contract TydoPreIco is Owned { using SafeMath for uint256; uint256 public constant COINS_PER_ETH = 12000; uint256 public constant bonus = 25; mapping (address => uint256) public balances; mapping (address => uint256) ethBalances; uint256 public ethCollected; uint256 public tokenSold; uint256 constant tokenDecMult = 1 ether; uint8 public state = 0; AbstractERC20 public token; event SaleStart(); event SaleClosedSuccess(uint256 _tokenSold); event SaleClosedFail(uint256 _tokenSold); constructor(address _coinToken) Owned() public { token = AbstractERC20(_coinToken); },0,"subgraph cluster_656_TydoPreIco {
label=""TydoPreIco"";
""656_withdrawTokens"" [label=""withdrawTokens""];
""656_closeSuccess"" [label=""closeSuccess""];
""656_addBonus"" [label=""addBonus""];
""656_open"" [label=""open""];
""656_fallback"" [label=""fallback""];
""656_canBuy"" [label=""canBuy""];
""656_refund"" [label=""refund""];
""656_constructor"" [label=""constructor""];
""656_tokensLeft"" [label=""tokensLeft""];
""656_buy"" [label=""buy""];
""656_withdraw"" [label=""withdraw""];
""656_closeFail"" [label=""closeFail""];
""656_withdraw"" -> ""656_ownerOnly"";
""656_constructor"" -> ""656_constructor"";
""656_fallback"" -> ""656_withdrawTokens"";
""656_buy"" -> ""656_canBuy"";
""656_fallback"" -> ""656_buy"";
""656_open"" -> ""656_ownerOnly"";
""656_fallback"" -> ""656_refund"";
""656_closeFail"" -> ""656_ownerOnly"";
""656_closeSuccess"" -> ""656_ownerOnly"";
""656_buy"" -> ""656_addBonus"";
}
"
0xeceb4f23326a5a721a8d6dd4c10902d163b16a68.sol,Token,"contract Token is SafeMath, Owned { uint256 constant DAY_IN_SECONDS = 86400; string public constant standard = ; string public name = ; string public symbol = ; uint8 public decimals = 0; uint256 public totalSupply = 0; mapping (address => uint256) public balanceP; mapping (address => mapping (address => uint256)) public allowance; mapping (address => uint256[]) public lockTime; mapping (address => uint256[]) public lockValue; mapping (address => uint256) public lockNum; mapping (address => bool) public locker; uint256 public later = 0; uint256 public earlier = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event TransferredLocked(address indexed _from, address indexed _to, uint256 _time, uint256 _value); event TokenUnlocked(address indexed _address, uint256 _value); function Token(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply) public { require(bytes(_name).length > 0 && bytes(_symbol).length > 0); name = _name; symbol = _symbol; decimals = _decimals; totalSupply = _totalSupply; balanceP[msg.sender] = _totalSupply; }",0,"subgraph cluster_1359_Token {
label=""Token"";
""1359_approve"" [label=""approve""];
""1359_transfer"" [label=""transfer""];
""1359_showTime"" [label=""showTime""];
""1359_setUnlockLater"" [label=""setUnlockLater""];
""1359_balanceOf"" [label=""balanceOf""];
""1359_balanceLocked"" [label=""balanceLocked""];
""1359_calcUnlock"" [label=""calcUnlock""];
""1359_balanceUnlocked"" [label=""balanceUnlocked""];
""1359_removeLocker"" [label=""removeLocker""];
""1359_addLocker"" [label=""addLocker""];
""1359_Token"" [label=""Token""];
""1359_fallback"" [label=""fallback""];
""1359_transferLocked"" [label=""transferLocked""];
""1359_transferLockedFrom"" [label=""transferLockedFrom""];
""1359_setUnlockEarlier"" [label=""setUnlockEarlier""];
""1359_transferFrom"" [label=""transferFrom""];
""1359_showValue"" [label=""showValue""];
""1359_transfer"" -> ""1359_add"";
""1359_showTime"" -> ""1359_sub"";
""1359_setUnlockEarlier"" -> ""1359_add"";
""1359_transferLocked"" -> ""1359_add"";
""1359_transferLockedFrom"" -> ""1359_validAddress"";
""1359_addLocker"" -> ""1359_validAddress"";
""1359_transferLocked"" -> ""1359_calcUnlock"";
""1359_transferLocked"" -> ""1359_validAddress"";
""1359_setUnlockLater"" -> ""1359_add"";
""1359_balanceLocked"" -> ""1359_add"";
""1359_transferLockedFrom"" -> ""1359_calcUnlock"";
""1359_transfer"" -> ""1359_validAddress"";
""1359_calcUnlock"" -> ""1359_add"";
""1359_transferFrom"" -> ""1359_add"";
""1359_transfer"" -> ""1359_sub"";
""1359_transfer"" -> ""1359_calcUnlock"";
""1359_addLocker"" -> ""1359_onlyOwner"";
""1359_transferFrom"" -> ""1359_validAddress"";
""1359_transferLockedFrom"" -> ""1359_add"";
""1359_balanceUnlocked"" -> ""1359_add"";
""1359_transferLocked"" -> ""1359_sub"";
""1359_transferFrom"" -> ""1359_calcUnlock"";
""1359_removeLocker"" -> ""1359_onlyOwner"";
""1359_showTime"" -> ""1359_validAddress"";
""1359_showTime"" -> ""1359_add"";
""1359_setUnlockLater"" -> ""1359_onlyOwner"";
""1359_approve"" -> ""1359_validAddress"";
""1359_approve"" -> ""1359_calcUnlock"";
""1359_balanceOf"" -> ""1359_add"";
""1359_transferLockedFrom"" -> ""1359_sub"";
""1359_transferFrom"" -> ""1359_sub"";
""1359_setUnlockEarlier"" -> ""1359_onlyOwner"";
""1359_showValue"" -> ""1359_validAddress"";
""1359_removeLocker"" -> ""1359_validAddress"";
}
"
0xecfae6f958f7ab15bdf171eeefa568e41eabf641.sol,LYNIA,contract LYNIA { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_40_AcceptsLYNIA {
label=""AcceptsLYNIA"";
""40_tokenFallback"" [label=""tokenFallback""];
""40_AcceptsLYNIA"" [label=""AcceptsLYNIA""];
}
"
0x5094f35a78dbe896c4f357bf9165448be40309de.sol,Preallocation,"contract Preallocation is Ownable { using SafeMath for uint; address public investor; uint public maxBalance; enum States { Pending, Success, Fail }",0,"subgraph cluster_346_Preallocation {
label=""Preallocation"";
""346_setFailed"" [label=""setFailed""];
""346_buyTokens"" [label=""buyTokens""];
""346_setInvestor"" [label=""setInvestor""];
""346_Preallocation"" [label=""Preallocation""];
""346_withdraw"" [label=""withdraw""];
""346_fallback"" [label=""fallback""];
""346_stateIs"" [label=""stateIs""];
""346_setFailed"" -> ""346_onlyOwner"";
""346_withdraw"" -> ""346_notState"";
""346_setInvestor"" -> ""346_onlyOwner"";
""346_buyTokens"" -> ""346_onlyOwner"";
""346_withdraw"" -> ""346_onlyOwner"";
}
"
0x88c1f00df493673f72aa0481187a0ff8c5ad0e14.sol,EtherSpaceCore,"contract EtherSpaceCore is ERC721Token, Ownable, Claimable, Destructible { string public url = ""https: using SafeMath for uint256; struct Spaceship { uint16 model; bool battleMode; uint32 battleWins; uint32 battleLosses; uint256 battleStake; bytes5 upgrades; bool isAuction; uint256 auctionPrice; }",0,"subgraph cluster_2401_EtherSpaceCore {
label=""EtherSpaceCore"";
""2401_newSpaceshipUpgrade"" [label=""newSpaceshipUpgrade""];
""2401_getPlayerBalance"" [label=""getPlayerBalance""];
""2401_getPlayerSpaceshipBattleStakeById"" [label=""getPlayerSpaceshipBattleStakeById""];
""2401__generateSpaceship"" [label=""_generateSpaceship""];
""2401_battleRemove"" [label=""battleRemove""];
""2401_getPlayerSpaceshipAuctionById"" [label=""getPlayerSpaceshipAuctionById""];
""2401_getSpaceshipUpgradeCount"" [label=""getSpaceshipUpgradeCount""];
""2401_sellSpaceship"" [label=""sellSpaceship""];
""2401_symbol"" [label=""symbol""];
""2401_getPlayerSpaceshipBattleWinsById"" [label=""getPlayerSpaceshipBattleWinsById""];
""2401_setBattleContract"" [label=""setBattleContract""];
""2401_buySpaceshipUpgrade"" [label=""buySpaceshipUpgrade""];
""2401_fallback"" [label=""fallback""];
""2401_bidSpaceship"" [label=""bidSpaceship""];
""2401_name"" [label=""name""];
""2401_getSpaceshipProductTotalSoldByModel"" [label=""getSpaceshipProductTotalSoldByModel""];
""2401_battle"" [label=""battle""];
""2401_getSpaceshipProductCount"" [label=""getSpaceshipProductCount""];
""2401_setSpaceshipPrice"" [label=""setSpaceshipPrice""];
""2401_getPlayerSpaceships"" [label=""getPlayerSpaceships""];
""2401_ids"" [label=""ids""];
""2401_battleAdd"" [label=""battleAdd""];
""2401_getPlayerSpaceshipOwnerById"" [label=""getPlayerSpaceshipOwnerById""];
""2401_getPlayerSpaceshipBattleLossesById"" [label=""getPlayerSpaceshipBattleLossesById""];
""2401_constructor"" [label=""constructor""];
""2401_getPlayerSpaceshipBattleLevelById"" [label=""getPlayerSpaceshipBattleLevelById""];
""2401_getPlayerSpaceshipCount"" [label=""getPlayerSpaceshipCount""];
""2401_giftSpaceship"" [label=""giftSpaceship""];
""2401_getSpaceshipProductAttributesByModel"" [label=""getSpaceshipProductAttributesByModel""];
""2401_cashOut"" [label=""cashOut""];
""2401_getPlayerSpaceshipBattleModeById"" [label=""getPlayerSpaceshipBattleModeById""];
""2401_setBattleFee"" [label=""setBattleFee""];
""2401_getPlayerSpaceshipAuctionPriceById"" [label=""getPlayerSpaceshipAuctionPriceById""];
""2401_getPlayerSpaceshipModelById"" [label=""getPlayerSpaceshipModelById""];
""2401_getSpaceshipTotalSold"" [label=""getSpaceshipTotalSold""];
""2401_setUpgradeContract"" [label=""setUpgradeContract""];
""2401_getPlayerSpaceshipModelByIndex"" [label=""getPlayerSpaceshipModelByIndex""];
""2401__setUpgradeContract"" [label=""_setUpgradeContract""];
""2401_getSpaceshipUpgradePriceByModel"" [label=""getSpaceshipUpgradePriceByModel""];
""2401_getPlayerSpaceshipUpgradesById"" [label=""getPlayerSpaceshipUpgradesById""];
""2401_buySpaceship"" [label=""buySpaceship""];
""2401_getSpaceshipProductClassByModel"" [label=""getSpaceshipProductClassByModel""];
""2401_getPlayerSpaceshipBattleStakePaidById"" [label=""getPlayerSpaceshipBattleStakePaidById""];
""2401__newSpaceshipProduct"" [label=""_newSpaceshipProduct""];
""2401_getSpaceshipUpgradeTotalSoldByModel"" [label=""getSpaceshipUpgradeTotalSoldByModel""];
""2401__setBattleContract"" [label=""_setBattleContract""];
""2401_newSpaceshipProduct"" [label=""newSpaceshipProduct""];
""2401_getSpaceshipProductPriceByModel"" [label=""getSpaceshipProductPriceByModel""];
""2401_giftSpaceship"" -> ""2401_onlyOwner"";
""2401_battleRemove"" -> ""2401_onlyOwnerOf"";
""2401_bidSpaceship"" -> ""2401_getPlayerSpaceshipAuctionPriceById"";
""2401_getSpaceshipTotalSold"" -> ""2401_totalSupply"";
""2401_setUpgradeContract"" -> ""2401__setUpgradeContract"";
""2401_getPlayerSpaceshipOwnerById"" -> ""2401_ownerOf"";
""2401_buySpaceshipUpgrade"" -> ""2401_onlyOwnerOf"";
""2401_sellSpaceship"" -> ""2401_onlyOwnerOf"";
""2401_buySpaceship"" -> ""2401__generateSpaceship"";
""2401_newSpaceshipProduct"" -> ""2401__newSpaceshipProduct"";
""2401_battle"" -> ""2401_getPlayerSpaceshipBattleStakeById"";
""2401_newSpaceshipProduct"" -> ""2401_onlyOwner"";
""2401_setBattleContract"" -> ""2401_onlyOwner"";
""2401_bidSpaceship"" -> ""2401_clearApprovalAndTransfer"";
""2401_battle"" -> ""2401_onlyOwnerOf"";
""2401_newSpaceshipUpgrade"" -> ""2401_onlyOwner"";
""2401_constructor"" -> ""2401__newSpaceshipProduct"";
""2401_battleAdd"" -> ""2401_onlyOwnerOf"";
""2401_getPlayerSpaceshipModelByIndex"" -> ""2401_tokensOf"";
""2401_getPlayerSpaceships"" -> ""2401_tokensOf"";
""2401_buySpaceshipUpgrade"" -> ""2401_getPlayerSpaceshipBattleModeById"";
""2401_bidSpaceship"" -> ""2401_getPlayerSpaceshipAuctionById"";
""2401_battleAdd"" -> ""2401_getPlayerSpaceshipBattleStakeById"";
""2401_setSpaceshipPrice"" -> ""2401_onlyOwner"";
""2401_setBattleContract"" -> ""2401__setBattleContract"";
""2401_setBattleFee"" -> ""2401_onlyOwner"";
""2401_getPlayerSpaceshipCount"" -> ""2401_balanceOf"";
""2401_battle"" -> ""2401_ownerOf"";
""2401_setUpgradeContract"" -> ""2401_onlyOwner"";
""2401_bidSpaceship"" -> ""2401_getPlayerSpaceshipOwnerById"";
""2401_giftSpaceship"" -> ""2401__generateSpaceship"";
""2401__generateSpaceship"" -> ""2401__mint"";
}
"
0x6c5d55e3dabbd32166f9062ec796dbc27d574080.sol,CDCOTokenBasic,contract CDCOTokenBasic is ERC20 { using SafeMath for uint256; mapping (address => mapping (address => uint256)) internal allowed; mapping(address => uint256) balances; uint256 totalSupply_; function totalSupply() public view returns (uint256) { return totalSupply_; },0,"subgraph cluster_393_CDCOTokenBasic {
label=""CDCOTokenBasic"";
""393_decreaseApproval"" [label=""decreaseApproval""];
""393_balanceOf"" [label=""balanceOf""];
""393_increaseApproval"" [label=""increaseApproval""];
""393_transfer"" [label=""transfer""];
""393_allowance"" [label=""allowance""];
""393_approve"" [label=""approve""];
""393_totalSupply"" [label=""totalSupply""];
}
"
0x3a266f97425cd281c1770b71662fcf4415c29190.sol,CryptoProgramFactory,contract CryptoProgramFactory { bool status = false; using SafeMath for uint256; address public administrator; uint256 private BASE_PRICE = 0.1 ether; uint256 private BASE_TIME = 4 hours; MemoryFactoryInterface public Memory; CryptoMiningWarInterface public MiningWar; CryptoEngineerInterface public Engineer; mapping(uint256 => Factory) public factories; mapping(address => bool) public miniGames; struct Factory { uint256 level; uint256 crystals; uint256 programPriceByCrystals; uint256 programPriceByDarkCrystals; uint256 programValue; uint256 eth; uint256 time; },0,"subgraph cluster_1129_CryptoProgramFactory {
label=""CryptoProgramFactory"";
""1129_isContractMiniGame"" [label=""isContractMiniGame""];
""1129_setProgramValue"" [label=""setProgramValue""];
""1129_upgrade"" [label=""upgrade""];
""1129_setMemoryInterface"" [label=""setMemoryInterface""];
""1129_setEngineerInterface"" [label=""setEngineerInterface""];
""1129_setupMiniGame"" [label=""setupMiniGame""];
""1129_getProgramsValue"" [label=""getProgramsValue""];
""1129_setContractMiniGame"" [label=""setContractMiniGame""];
""1129_constructor"" [label=""constructor""];
""1129_setProgramPriceByDarkCrystals"" [label=""setProgramPriceByDarkCrystals""];
""1129_updateFactory"" [label=""updateFactory""];
""1129_fallback"" [label=""fallback""];
""1129_setProgramPriceByCrystals"" [label=""setProgramPriceByCrystals""];
""1129_devFee"" [label=""devFee""];
""1129_startGame"" [label=""startGame""];
""1129_subPrograms"" [label=""subPrograms""];
""1129_setMiningWarInterface"" [label=""setMiningWarInterface""];
""1129_getData"" [label=""getData""];
""1129_initFactory"" [label=""initFactory""];
""1129_buyProgarams"" [label=""buyProgarams""];
""1129_addFactory"" [label=""addFactory""];
""1129_removeContractMiniGame"" [label=""removeContractMiniGame""];
""1129_setContractMiniGame"" -> ""1129_isAdministrator"";
""1129_updateFactory"" -> ""1129_devFee"";
""1129_constructor"" -> ""1129_setEngineerInterface"";
""1129_constructor"" -> ""1129_setMiningWarInterface"";
""1129_setEngineerInterface"" -> ""1129_isAdministrator"";
""1129_constructor"" -> ""1129_setMemoryInterface"";
""1129_setProgramPriceByDarkCrystals"" -> ""1129_isAdministrator"";
""1129_setMemoryInterface"" -> ""1129_isAdministrator"";
""1129_startGame"" -> ""1129_initFactory"";
""1129_subPrograms"" -> ""1129_onlyContractsMiniGame"";
""1129_setMiningWarInterface"" -> ""1129_isAdministrator"";
""1129_setProgramValue"" -> ""1129_isAdministrator"";
""1129_addFactory"" -> ""1129_isAdministrator"";
""1129_setProgramPriceByCrystals"" -> ""1129_isAdministrator"";
""1129_removeContractMiniGame"" -> ""1129_isAdministrator"";
""1129_upgrade"" -> ""1129_isAdministrator"";
}
"
0x0111ac7e9425c891f935c4ce54cf16db7c14b7db.sol,ERC721BasicToken,"contract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic { using SafeMath for uint256; using AddressUtils for address; bytes4 private constant ERC721_RECEIVED = 0x150b7a02; mapping (uint256 => address) internal tokenOwner; mapping (uint256 => address) internal tokenApprovals; mapping (address => uint256) internal ownedTokensCount; mapping (address => mapping (address => bool)) internal operatorApprovals; constructor() public { _registerInterface(InterfaceId_ERC721); _registerInterface(InterfaceId_ERC721Exists); }",0,"subgraph cluster_2892_ERC721BasicToken {
label=""ERC721BasicToken"";
""2892_setApprovalForAll"" [label=""setApprovalForAll""];
""2892_transferFrom"" [label=""transferFrom""];
""2892__burn"" [label=""_burn""];
""2892_addTokenTo"" [label=""addTokenTo""];
""2892_checkAndCallSafeTransfer"" [label=""checkAndCallSafeTransfer""];
""2892_exists"" [label=""exists""];
""2892__mint"" [label=""_mint""];
""2892_ownerOf"" [label=""ownerOf""];
""2892_clearApproval"" [label=""clearApproval""];
""2892_safeTransferFrom"" [label=""safeTransferFrom""];
""2892_isApprovedOrOwner"" [label=""isApprovedOrOwner""];
""2892_approve"" [label=""approve""];
""2892_removeTokenFrom"" [label=""removeTokenFrom""];
""2892_getApproved"" [label=""getApproved""];
""2892_isApprovedForAll"" [label=""isApprovedForAll""];
""2892_balanceOf"" [label=""balanceOf""];
""2892_constructor"" [label=""constructor""];
""2892_safeTransferFrom"" -> ""2892_checkAndCallSafeTransfer"";
""2892__burn"" -> ""2892_clearApproval"";
""2892_transferFrom"" -> ""2892_addTokenTo"";
""2892_transferFrom"" -> ""2892_removeTokenFrom"";
""2892_transferFrom"" -> ""2892_clearApproval"";
""2892_approve"" -> ""2892_ownerOf"";
""2892__mint"" -> ""2892_addTokenTo"";
""2892_approve"" -> ""2892_isApprovedForAll"";
""2892__burn"" -> ""2892_removeTokenFrom"";
""2892_safeTransferFrom"" -> ""2892_safeTransferFrom"";
""2892_isApprovedOrOwner"" -> ""2892_ownerOf"";
""2892_removeTokenFrom"" -> ""2892_ownerOf"";
""2892_safeTransferFrom"" -> ""2892_transferFrom"";
""2892_clearApproval"" -> ""2892_ownerOf"";
""2892_isApprovedOrOwner"" -> ""2892_getApproved"";
""2892_isApprovedOrOwner"" -> ""2892_isApprovedForAll"";
""2892_transferFrom"" -> ""2892_isApprovedOrOwner"";
""2892_constructor"" -> ""2892__registerInterface"";
}
"
0x33d133f175b5cee9aac255448d52394818b76cd0.sol,TrexCoin,"contract TrexCoin is Token { using SafeMath for uint256; address public owner; uint256 public maxSupply; bool public stopped = false; event Burn(address indexed from, uint256 value); event Mint(address indexed to, uint256 value); event Stop(); event Start(); event Rename(string name, string symbol); modifier isOwner { assert(msg.sender == owner); _; }",0,"subgraph cluster_793_TrexCoin {
label=""TrexCoin"";
""793_transfer"" [label=""transfer""];
""793__mint"" [label=""_mint""];
""793_stop"" [label=""stop""];
""793_start"" [label=""start""];
""793_approve"" [label=""approve""];
""793_mintTo"" [label=""mintTo""];
""793_rename"" [label=""rename""];
""793_burnFrom"" [label=""burnFrom""];
""793_approveAndCall"" [label=""approveAndCall""];
""793__transfer"" [label=""_transfer""];
""793_burn"" [label=""burn""];
""793__approve"" [label=""_approve""];
""793_transferFrom"" [label=""transferFrom""];
""793_TrexCoin"" [label=""TrexCoin""];
""793_mint"" [label=""mint""];
""793__burn"" [label=""_burn""];
""793_transferFrom"" -> ""793_isValidAddress"";
""793_transferFrom"" -> ""793_hasPayloadSize"";
""793_transfer"" -> ""793__transfer"";
""793_approve"" -> ""793_isValidAddress"";
""793_approveAndCall"" -> ""793__approve"";
""793_approve"" -> ""793_isRunning"";
""793_burnFrom"" -> ""793_isRunning"";
""793_approveAndCall"" -> ""793_isValidAddress"";
""793_mint"" -> ""793_isOwner"";
""793_burnFrom"" -> ""793_hasPayloadSize"";
""793_burnFrom"" -> ""793__burn"";
""793_approve"" -> ""793_hasPayloadSize"";
""793_start"" -> ""793_isOwner"";
""793_burn"" -> ""793_hasPayloadSize"";
""793_approveAndCall"" -> ""793_isRunning"";
""793_transfer"" -> ""793_isValidAddress"";
""793_burn"" -> ""793__burn"";
""793_burnFrom"" -> ""793_isValidAddress"";
""793_transfer"" -> ""793_hasPayloadSize"";
""793_transferFrom"" -> ""793_isRunning"";
""793_transfer"" -> ""793_isRunning"";
""793_mintTo"" -> ""793__mint"";
""793_approve"" -> ""793__approve"";
""793_mint"" -> ""793__mint"";
""793_rename"" -> ""793_isOwner"";
""793_burn"" -> ""793_isValidAddress"";
""793_stop"" -> ""793_isOwner"";
""793_mintTo"" -> ""793_isOwner"";
""793_transferFrom"" -> ""793__transfer"";
""793_TrexCoin"" -> ""793__mint"";
""793_burn"" -> ""793_isRunning"";
""793_approveAndCall"" -> ""793_hasPayloadSize"";
}
"
0x48e3ec3d717ca867fa5b4ab61f6874dd0e3b8500.sol,ZchargeToken,"contract ZchargeToken is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function ZchargeToken( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",0,"subgraph cluster_642_ZchargeToken {
label=""ZchargeToken"";
""642_buy"" [label=""buy""];
""642_sell"" [label=""sell""];
""642_mintToken"" [label=""mintToken""];
""642_setPrices"" [label=""setPrices""];
""642_ZchargeToken"" [label=""ZchargeToken""];
""642__transfer"" [label=""_transfer""];
""642_freezeAccount"" [label=""freezeAccount""];
""642_ZchargeToken"" -> ""642_TokenERC20"";
""642_sell"" -> ""642__transfer"";
""642_setPrices"" -> ""642_onlyOwner"";
""642_mintToken"" -> ""642_onlyOwner"";
""642_freezeAccount"" -> ""642_onlyOwner"";
""642_buy"" -> ""642__transfer"";
}
"
0x02611ca37364d30ac9a11ade6b02aad288127c98.sol,TokenERC20,"contract TokenERC20 { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint32 public constant decimals = 18; uint256 public totalSupply; address public admin = 0x9Ef4a2CaA82D396d7B8c244DE57212E0fE332C73; mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) internal allowed; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); event Burn(address indexed burner, uint256 value); function TokenERC20( uint256 initialSupply ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balances[admin] = totalSupply; emit Transfer(this,admin,totalSupply); }",0,"subgraph cluster_494_TokenERC20 {
label=""TokenERC20"";
""494_getBalance"" [label=""getBalance""];
""494_approve"" [label=""approve""];
""494_decreaseApproval"" [label=""decreaseApproval""];
""494_TokenERC20"" [label=""TokenERC20""];
""494_increaseApproval"" [label=""increaseApproval""];
""494_allowance"" [label=""allowance""];
""494_transfer"" [label=""transfer""];
""494_transferFrom"" [label=""transferFrom""];
""494_totalSupply"" [label=""totalSupply""];
""494_balanceOf"" [label=""balanceOf""];
""494_balanceOf"" -> ""494_getBalance"";
}
"
0xede85cd1b56791dca6fe9f589ae1c2961695880b.sol,BinksBucksToken,contract BinksBucksToken { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint internal _totalSupply = 0; mapping(address => uint256) internal _balances; mapping(address => mapping (address => uint256)) _allowed; function totalSupply() public constant returns (uint) { return _totalSupply; },0,"subgraph cluster_324_BinksBucksToken {
label=""BinksBucksToken"";
""324_allowance"" [label=""allowance""];
""324_canAdd"" [label=""canAdd""];
""324_hasAllowance"" [label=""hasAllowance""];
""324_totalSupply"" [label=""totalSupply""];
""324_balanceOf"" [label=""balanceOf""];
""324_approve"" [label=""approve""];
""324_canRecieve"" [label=""canRecieve""];
""324_transferFrom"" [label=""transferFrom""];
""324_transfer"" [label=""transfer""];
""324_hasAtLeast"" [label=""hasAtLeast""];
""324_transfer"" -> ""324_hasAtLeast"";
""324_transfer"" -> ""324_canRecieve"";
""324_transferFrom"" -> ""324_canRecieve"";
""324_transferFrom"" -> ""324_hasAllowance"";
""324_transferFrom"" -> ""324_hasAtLeast"";
}
"
0x2f50ab197f950e0c2184cf5d804f4141502cd987.sol,LoggedDividend,"contract LoggedDividend is Ownable, LoggedERC20 { struct Dividend { uint256 id; uint256 block; uint256 time; uint256 amount; uint256 claimedAmount; uint256 transferedBack; uint256 totalSupply; uint256 recycleTime; bool recycled; mapping (address => bool) claimed; }",0,"subgraph cluster_980_LoggedDividend {
label=""LoggedDividend"";
""980_refundUnclaimedEthers"" [label=""refundUnclaimedEthers""];
""980_addDividend"" [label=""addDividend""];
""980_claimDividends"" [label=""claimDividends""];
""980_recycleDividend"" [label=""recycleDividend""];
""980_claimDividend"" [label=""claimDividend""];
""980_LoggedDividend"" [label=""LoggedDividend""];
""980_addDividend"" -> ""980_onlyOwner"";
""980_addDividend"" -> ""980_valueAt"";
""980_recycleDividend"" -> ""980_onlyOwner"";
""980_claimDividends"" -> ""980_claimDividend"";
""980_LoggedDividend"" -> ""980_LoggedERC20"";
""980_refundUnclaimedEthers"" -> ""980_onlyOwner"";
""980_claimDividend"" -> ""980_valueAt"";
}
"
0x759075d2107abfb9747fc0655d9b6b72b9edde3d.sol,TokenSale,"contract TokenSale { IERC20Token public tokenContract; address owner; uint256 public tokensSold; event Sold(address buyer, uint256 amount); constructor(IERC20Token _tokenContract) public { owner = msg.sender; tokenContract = _tokenContract; }",0,"subgraph cluster_147_TokenSale {
label=""TokenSale"";
""147_constructor"" [label=""constructor""];
""147_fallback"" [label=""fallback""];
""147_safeMultiply"" [label=""safeMultiply""];
""147_endSale"" [label=""endSale""];
""147_fallback"" -> ""147_safeMultiply"";
}
"
0xeb108d7c4ab669beea11e3f2422348c5fd19d021.sol,AxeMining,"contract AxeMining is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 9000000000e8; uint256 public totalDistributed = 0; uint256 public tokensPerEth = 100000000e8; uint256 public constant minContribution = 1 ether / 100; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_930_AxeMining {
label=""AxeMining"";
""930_getTokenBalance"" [label=""getTokenBalance""];
""930_getTokens"" [label=""getTokens""];
""930_balanceOf"" [label=""balanceOf""];
""930_transferOwnership"" [label=""transferOwnership""];
""930_doAirdrop"" [label=""doAirdrop""];
""930_withdraw"" [label=""withdraw""];
""930_burn"" [label=""burn""];
""930_transferFrom"" [label=""transferFrom""];
""930_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""930_allowance"" [label=""allowance""];
""930_withdrawAltcoinTokens"" [label=""withdrawAltcoinTokens""];
""930_updateTokensPerEth"" [label=""updateTokensPerEth""];
""930_finishDistribution"" [label=""finishDistribution""];
""930_transfer"" [label=""transfer""];
""930_approve"" [label=""approve""];
""930_distr"" [label=""distr""];
""930_fallback"" [label=""fallback""];
""930_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""930_fallback"" -> ""930_getTokens"";
""930_burn"" -> ""930_onlyOwner"";
""930_getTokens"" -> ""930_canDistr"";
""930_withdrawAltcoinTokens"" -> ""930_onlyOwner"";
""930_transfer"" -> ""930_onlyPayloadSize"";
""930_transferFrom"" -> ""930_onlyPayloadSize"";
""930_adminClaimAirdrop"" -> ""930_doAirdrop"";
""930_adminClaimAirdrop"" -> ""930_onlyOwner"";
""930_distr"" -> ""930_canDistr"";
""930_adminClaimAirdropMultiple"" -> ""930_doAirdrop"";
""930_transferOwnership"" -> ""930_onlyOwner"";
""930_getTokens"" -> ""930_distr"";
""930_finishDistribution"" -> ""930_canDistr"";
""930_finishDistribution"" -> ""930_onlyOwner"";
""930_withdraw"" -> ""930_onlyOwner"";
""930_updateTokensPerEth"" -> ""930_onlyOwner"";
""930_adminClaimAirdropMultiple"" -> ""930_onlyOwner"";
}
"
0x4c1a22be48ef517391a491547389fb5f4f75a885.sol,NEWSOKUCOIN,"contract NEWSOKUCOIN is ERC223, Ownable { using SafeMath for uint256; string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 4e10 * 1e18; uint256 public distributeAmount = 0; bool public mintingFinished = false; mapping(address => uint256) public balanceOf; mapping(address => mapping (address => uint256)) public allowance; mapping (address => bool) public frozenAccount; mapping (address => uint256) public unlockUnixTime; event FrozenFunds(address indexed target, bool frozen); event LockedFunds(address indexed target, uint256 locked); event Burn(address indexed from, uint256 amount); event Mint(address indexed to, uint256 amount); event MintFinished(); function NEWSOKUCOIN() public { balanceOf[msg.sender] = totalSupply; }",0,"subgraph cluster_1838_NEWSOKUCOIN {
label=""NEWSOKUCOIN"";
""1838_setDistributeAmount"" [label=""setDistributeAmount""];
""1838_distributeAirdrop"" [label=""distributeAirdrop""];
""1838_allowance"" [label=""allowance""];
""1838_collectTokens"" [label=""collectTokens""];
""1838_balanceOf"" [label=""balanceOf""];
""1838_transferToAddress"" [label=""transferToAddress""];
""1838_isContract"" [label=""isContract""];
""1838_totalSupply"" [label=""totalSupply""];
""1838_fallback"" [label=""fallback""];
""1838_lockupAccounts"" [label=""lockupAccounts""];
""1838_symbol"" [label=""symbol""];
""1838_transferFrom"" [label=""transferFrom""];
""1838_approve"" [label=""approve""];
""1838_freezeAccounts"" [label=""freezeAccounts""];
""1838_autoDistribute"" [label=""autoDistribute""];
""1838_transferToContract"" [label=""transferToContract""];
""1838_burn"" [label=""burn""];
""1838_finishMinting"" [label=""finishMinting""];
""1838_name"" [label=""name""];
""1838_mint"" [label=""mint""];
""1838_transfer"" [label=""transfer""];
""1838_decimals"" [label=""decimals""];
""1838_NEWSOKUCOIN"" [label=""NEWSOKUCOIN""];
""1838_mint"" -> ""1838_canMint"";
""1838_transfer"" -> ""1838_transferToContract"";
""1838_burn"" -> ""1838_onlyOwner"";
""1838_setDistributeAmount"" -> ""1838_onlyOwner"";
""1838_lockupAccounts"" -> ""1838_onlyOwner"";
""1838_transfer"" -> ""1838_transferToAddress"";
""1838_finishMinting"" -> ""1838_onlyOwner"";
""1838_mint"" -> ""1838_onlyOwner"";
""1838_finishMinting"" -> ""1838_canMint"";
""1838_collectTokens"" -> ""1838_onlyOwner"";
""1838_freezeAccounts"" -> ""1838_onlyOwner"";
""1838_transfer"" -> ""1838_isContract"";
""1838_fallback"" -> ""1838_autoDistribute"";
}
"
0xedfd2e59cd5e5a683d14fc5cbd939a3602203e2f.sol,F3DGoQuick,"contract F3DGoQuick is F3Devents{ using SafeMath for uint256; using NameFilter for string; using F3DKeysCalcFast for uint256; PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0x82e0C3626622d9a8234BFBaf6DD0f8d070C2609D); address private admin = 0xacb257873b064b956BD9be84dc347C55F7b2ae8C; address private coin_base = 0x345A756a49DF0eD24002857dd25DAb6a5F4E83FF; string constant public name = ; string constant public symbol = ; uint256 private rndGap_ = 60 seconds; uint256 constant private rndInit_ = 5 minutes; uint256 constant private rndInc_ = 5 minutes; uint256 constant private rndMax_ = 5 minutes; uint256 public airDropPot_; uint256 public airDropTracker_ = 0; uint256 public rID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => F3Ddatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => F3Ddatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => F3Ddatasets.Round) public round_; mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping (uint256 => F3Ddatasets.TeamFee) public fees_; mapping (uint256 => F3Ddatasets.PotSplit) public potSplit_; constructor() public { fees_[0] = F3Ddatasets.TeamFee(30,6); fees_[1] = F3Ddatasets.TeamFee(43,0); fees_[2] = F3Ddatasets.TeamFee(56,10); fees_[3] = F3Ddatasets.TeamFee(43,8); potSplit_[0] = F3Ddatasets.PotSplit(15,10); potSplit_[1] = F3Ddatasets.PotSplit(25,0); potSplit_[2] = F3Ddatasets.PotSplit(20,20); potSplit_[3] = F3Ddatasets.PotSplit(30,10); }",0,"subgraph cluster_4827_F3DGoQuick {
label=""F3DGoQuick"";
""4827_calcKeysReceived"" [label=""calcKeysReceived""];
""4827_calcAverageICOPhaseKeyPrice"" [label=""calcAverageICOPhaseKeyPrice""];
""4827_airdrop"" [label=""airdrop""];
""4827_getBuyPrice"" [label=""getBuyPrice""];
""4827_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""4827_fallback"" [label=""fallback""];
""4827_distributeInternal"" [label=""distributeInternal""];
""4827_getPlayerVaults"" [label=""getPlayerVaults""];
""4827_registerNameXname"" [label=""registerNameXname""];
""4827_distributeExternal"" [label=""distributeExternal""];
""4827_reLoadXaddr"" [label=""reLoadXaddr""];
""4827_icoPhaseCore"" [label=""icoPhaseCore""];
""4827_withdrawEarnings"" [label=""withdrawEarnings""];
""4827_activate"" [label=""activate""];
""4827_potSwap"" [label=""potSwap""];
""4827_buyXaddr"" [label=""buyXaddr""];
""4827_buyXname"" [label=""buyXname""];
""4827_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""4827_registerNameXID"" [label=""registerNameXID""];
""4827_calcPlayerICOPhaseKeys"" [label=""calcPlayerICOPhaseKeys""];
""4827_endTx"" [label=""endTx""];
""4827_withdraw"" [label=""withdraw""];
""4827_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""4827_updateGenVault"" [label=""updateGenVault""];
""4827_verifyTeam"" [label=""verifyTeam""];
""4827_reLoadXid"" [label=""reLoadXid""];
""4827_buyXid"" [label=""buyXid""];
""4827_determinePID"" [label=""determinePID""];
""4827_endRound"" [label=""endRound""];
""4827_reLoadXname"" [label=""reLoadXname""];
""4827_updateTimer"" [label=""updateTimer""];
""4827_getTimeLeft"" [label=""getTimeLeft""];
""4827_iWantXKeys"" [label=""iWantXKeys""];
""4827_updateMasks"" [label=""updateMasks""];
""4827_core"" [label=""core""];
""4827_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""4827_buyCore"" [label=""buyCore""];
""4827_receivePlayerNameList"" [label=""receivePlayerNameList""];
""4827_reLoadCore"" [label=""reLoadCore""];
""4827_registerNameXaddr"" [label=""registerNameXaddr""];
""4827_receivePlayerInfo"" [label=""receivePlayerInfo""];
""4827_roundClaimICOKeys"" [label=""roundClaimICOKeys""];
""4827_constructor"" [label=""constructor""];
""4827_manageRoundAndPlayer"" [label=""manageRoundAndPlayer""];
""4827_fallback"" -> ""4827_isWithinLimits"";
""4827_core"" -> ""4827_endTx"";
""4827_getPlayerInfoByAddress"" -> ""4827_calcPlayerICOPhaseKeys"";
""4827_reLoadXid"" -> ""4827_isWithinLimits"";
""4827_reLoadXid"" -> ""4827_isHuman"";
""4827_reLoadXname"" -> ""4827_isWithinLimits"";
""4827_icoPhaseCore"" -> ""4827_endTx"";
""4827_getPlayerInfoByAddress"" -> ""4827_calcUnMaskedEarnings"";
""4827_manageRoundAndPlayer"" -> ""4827_endRound"";
""4827_getPlayerVaults"" -> ""4827_getPlayerVaultsHelper"";
""4827_withdrawEarnings"" -> ""4827_updateGenVault"";
""4827_distributeInternal"" -> ""4827_updateMasks"";
""4827_reLoadXid"" -> ""4827_isActivated"";
""4827_buyXname"" -> ""4827_buyCore"";
""4827_reLoadXname"" -> ""4827_isHuman"";
""4827_roundClaimICOKeys"" -> ""4827_calcAverageICOPhaseKeyPrice"";
""4827_fallback"" -> ""4827_buyCore"";
""4827_buyXaddr"" -> ""4827_verifyTeam"";
""4827_buyXaddr"" -> ""4827_buyCore"";
""4827_buyXname"" -> ""4827_isHuman"";
""4827_registerNameXaddr"" -> ""4827_isHuman"";
""4827_registerNameXname"" -> ""4827_isHuman"";
""4827_calcPlayerICOPhaseKeys"" -> ""4827_calcAverageICOPhaseKeyPrice"";
""4827_reLoadXid"" -> ""4827_verifyTeam"";
""4827_reLoadXname"" -> ""4827_verifyTeam"";
""4827_buyXid"" -> ""4827_isActivated"";
""4827_buyXname"" -> ""4827_verifyTeam"";
""4827_manageRoundAndPlayer"" -> ""4827_updateGenVault"";
""4827_reLoadCore"" -> ""4827_manageRoundAndPlayer"";
""4827_calcUnMaskedEarnings"" -> ""4827_calcPlayerICOPhaseKeys"";
""4827_buyXid"" -> ""4827_buyCore"";
""4827_reLoadXaddr"" -> ""4827_verifyTeam"";
""4827_buyCore"" -> ""4827_manageRoundAndPlayer"";
""4827_buyCore"" -> ""4827_core"";
""4827_reLoadXname"" -> ""4827_reLoadCore"";
""4827_reLoadCore"" -> ""4827_core"";
""4827_buyXaddr"" -> ""4827_isWithinLimits"";
""4827_core"" -> ""4827_calcPlayerICOPhaseKeys"";
""4827_buyXname"" -> ""4827_determinePID"";
""4827_buyXname"" -> ""4827_isActivated"";
""4827_fallback"" -> ""4827_isHuman"";
""4827_core"" -> ""4827_airdrop"";
""4827_reLoadXaddr"" -> ""4827_reLoadCore"";
""4827_buyXid"" -> ""4827_verifyTeam"";
""4827_buyXid"" -> ""4827_determinePID"";
""4827_endRound"" -> ""4827_roundClaimICOKeys"";
""4827_core"" -> ""4827_distributeExternal"";
""4827_buyXaddr"" -> ""4827_isActivated"";
""4827_buyXname"" -> ""4827_isWithinLimits"";
""4827_buyXid"" -> ""4827_isWithinLimits"";
""4827_reLoadCore"" -> ""4827_icoPhaseCore"";
""4827_updateGenVault"" -> ""4827_calcUnMaskedEarnings"";
""4827_buyXid"" -> ""4827_isHuman"";
""4827_buyXaddr"" -> ""4827_determinePID"";
""4827_getPlayerVaults"" -> ""4827_calcUnMaskedEarnings"";
""4827_reLoadXaddr"" -> ""4827_isHuman"";
""4827_icoPhaseCore"" -> ""4827_distributeExternal"";
""4827_reLoadXname"" -> ""4827_isActivated"";
""4827_getPlayerVaults"" -> ""4827_calcPlayerICOPhaseKeys"";
""4827_reLoadXid"" -> ""4827_reLoadCore"";
""4827_reLoadXaddr"" -> ""4827_isActivated"";
""4827_fallback"" -> ""4827_determinePID"";
""4827_buyCore"" -> ""4827_icoPhaseCore"";
""4827_reLoadXaddr"" -> ""4827_isWithinLimits"";
""4827_buyXaddr"" -> ""4827_isHuman"";
""4827_reLoadCore"" -> ""4827_withdrawEarnings"";
""4827_core"" -> ""4827_distributeInternal"";
""4827_core"" -> ""4827_updateTimer"";
""4827_withdraw"" -> ""4827_endRound"";
""4827_withdraw"" -> ""4827_isHuman"";
""4827_withdraw"" -> ""4827_withdrawEarnings"";
""4827_core"" -> ""4827_roundClaimICOKeys"";
""4827_fallback"" -> ""4827_isActivated"";
""4827_registerNameXID"" -> ""4827_isHuman"";
""4827_withdraw"" -> ""4827_isActivated"";
}
"
0xd7604d334ebfa84c70d2c2534f5c7c4e04716510.sol,divCashCoin,"contract divCashCoin is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public blacklist; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 public totalSupply = 300000000000e18; uint256 public totalDistributed = 200000000000e18; uint256 public totalRemaining = totalSupply.sub(totalDistributed); uint256 public value = 500000e18; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_873_divCashCoin {
label=""divCashCoin"";
""873_approve"" [label=""approve""];
""873_transfer"" [label=""transfer""];
""873_transferOwnership"" [label=""transferOwnership""];
""873_getTokens"" [label=""getTokens""];
""873_divCashCoin"" [label=""divCashCoin""];
""873_distr"" [label=""distr""];
""873_allowance"" [label=""allowance""];
""873_getTokenBalance"" [label=""getTokenBalance""];
""873_balanceOf"" [label=""balanceOf""];
""873_finishDistribution"" [label=""finishDistribution""];
""873_withdraw"" [label=""withdraw""];
""873_burn"" [label=""burn""];
""873_fallback"" [label=""fallback""];
""873_transferFrom"" [label=""transferFrom""];
""873_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""873_finishDistribution"" -> ""873_onlyOwner"";
""873_getTokens"" -> ""873_canDistr"";
""873_burn"" -> ""873_onlyOwner"";
""873_transferOwnership"" -> ""873_onlyOwner"";
""873_distr"" -> ""873_canDistr"";
""873_withdraw"" -> ""873_onlyOwner"";
""873_transferFrom"" -> ""873_onlyPayloadSize"";
""873_finishDistribution"" -> ""873_canDistr"";
""873_withdrawForeignTokens"" -> ""873_onlyOwner"";
""873_transfer"" -> ""873_onlyPayloadSize"";
""873_fallback"" -> ""873_getTokens"";
""873_getTokens"" -> ""873_onlyWhitelist"";
""873_getTokens"" -> ""873_distr"";
}
"
0xcd6cb1b25006603382b9e9a832b8686ae240373b.sol,Etherama,"contract Etherama { IStdToken public _token; EtheramaData public _data; EtheramaCore public _core; bool public isActive = false; bool public isMigrationToNewControllerInProgress = false; bool public isActualContractVer = true; address public migrationContractAddress = address(0x0); bool public isMigrationApproved = false; address private _creator = address(0x0); event onTokenPurchase(address indexed userAddress, uint256 incomingEth, uint256 tokensMinted, address indexed referredBy); event onTokenSell(address indexed userAddress, uint256 tokensBurned, uint256 ethEarned); event onReinvestment(address indexed userAddress, uint256 ethReinvested, uint256 tokensMinted); event onWithdrawTokenOwnerReward(address indexed toAddress, uint256 ethWithdrawn); event onWinQuickPromo(address indexed userAddress, uint256 ethWon); event onWinBigPromo(address indexed userAddress, uint256 ethWon); modifier onlyContractUsers() { require(getUserLocalTokenBalance(msg.sender) > 0); _; }",0,"subgraph cluster_2025_EtheramaCore {
label=""EtheramaCore"";
""2025_getBonusPerShare"" [label=""getBonusPerShare""];
""2025__promoMinPurchaseEth"" [label=""_promoMinPurchaseEth""];
""2025__currentQuickPromoBonus"" [label=""_currentQuickPromoBonus""];
""2025_getSellCount"" [label=""getSellCount""];
""2025_getCurrentUserPromoBonus"" [label=""getCurrentUserPromoBonus""];
""2025_MIN_ETH_DEAL_VAL"" [label=""MIN_ETH_DEAL_VAL""];
""2025__totalIncomeFeePercent"" [label=""_totalIncomeFeePercent""];
""2025_getTotalSellCount"" [label=""getTotalSellCount""];
""2025_addUserTokenLocalBalance"" [label=""addUserTokenLocalBalance""];
""2025__bigPromoPercent"" [label=""_bigPromoPercent""];
""2025_setPromoMinPurchaseEth"" [label=""setPromoMinPurchaseEth""];
""2025_getCurrentUserReward"" [label=""getCurrentUserReward""];
""2025_withdrawUserReward"" [label=""withdrawUserReward""];
""2025_addBigPromoBonus"" [label=""addBigPromoBonus""];
""2025_changeControllerContract"" [label=""changeControllerContract""];
""2025__quickPromoBlockInterval"" [label=""_quickPromoBlockInterval""];
""2025_getUserTotalReward"" [label=""getUserTotalReward""];
""2025__quickPromoPercent"" [label=""_quickPromoPercent""];
""2025_setTotalIncomeFeePercent"" [label=""setTotalIncomeFeePercent""];
""2025_getBuyCount"" [label=""getBuyCount""];
""2025_addQuickPromoBonus"" [label=""addQuickPromoBonus""];
""2025_addUserRewardPayouts"" [label=""addUserRewardPayouts""];
""2025_setMinRefEthPurchase"" [label=""setMinRefEthPurchase""];
""2025_getUserBigPromoBonus"" [label=""getUserBigPromoBonus""];
""2025_setRewardPercentages"" [label=""setRewardPercentages""];
""2025_MIN_TOKEN_DEAL_VAL"" [label=""MIN_TOKEN_DEAL_VAL""];
""2025_trackBuy"" [label=""trackBuy""];
""2025_addControllerContract"" [label=""addControllerContract""];
""2025_trackSell"" [label=""trackSell""];
""2025_MAX_ETH_DEAL_VAL"" [label=""MAX_ETH_DEAL_VAL""];
""2025_setQuickPromoInterval"" [label=""setQuickPromoInterval""];
""2025_getCurrentUserShareBonus"" [label=""getCurrentUserShareBonus""];
""2025__devRewardPercent"" [label=""_devRewardPercent""];
""2025_addDevReward"" [label=""addDevReward""];
""2025_getUserReward"" [label=""getUserReward""];
""2025_convertRealTo256"" [label=""convertRealTo256""];
""2025_getBigPromoRemainingBlocks"" [label=""getBigPromoRemainingBlocks""];
""2025_calcPercent"" [label=""calcPercent""];
""2025__tokenOwnerRewardPercent"" [label=""_tokenOwnerRewardPercent""];
""2025__refBonusPercent"" [label=""_refBonusPercent""];
""2025_addBonusPerShare"" [label=""addBonusPerShare""];
""2025_MAX_GAS_PRICE"" [label=""MAX_GAS_PRICE""];
""2025_getCurrentUserRefBonus"" [label=""getCurrentUserRefBonus""];
""2025_constructor"" [label=""constructor""];
""2025_addUserRefBalance"" [label=""addUserRefBalance""];
""2025__bigPromoBlockInterval"" [label=""_bigPromoBlockInterval""];
""2025_MAGNITUDE"" [label=""MAGNITUDE""];
""2025_getTotalCollectedPromoBonus"" [label=""getTotalCollectedPromoBonus""];
""2025_withdrawRemainingEthAfterAll"" [label=""withdrawRemainingEthAfterAll""];
""2025_getUserEthVolumeSaldo"" [label=""getUserEthVolumeSaldo""];
""2025_resetUserPromoBonus"" [label=""resetUserPromoBonus""];
""2025_setBigPromoInterval"" [label=""setBigPromoInterval""];
""2025_getTotalVolumeToken"" [label=""getTotalVolumeToken""];
""2025_convert256ToReal"" [label=""convert256ToReal""];
""2025_getRewardAndPrepareWithdraw"" [label=""getRewardAndPrepareWithdraw""];
""2025_getUserRefBalance"" [label=""getUserRefBalance""];
""2025_resetUserRefBalance"" [label=""resetUserRefBalance""];
""2025_getTotalVolumeEth"" [label=""getTotalVolumeEth""];
""2025__minRefEthPurchase"" [label=""_minRefEthPurchase""];
""2025_getInitBlockNum"" [label=""getInitBlockNum""];
""2025_getBlockNumSinceInit"" [label=""getBlockNumSinceInit""];
""2025_getTotalBuyCount"" [label=""getTotalBuyCount""];
""2025__shareRewardPercent"" [label=""_shareRewardPercent""];
""2025_getUserTotalEthVolumeSaldo"" [label=""getUserTotalEthVolumeSaldo""];
""2025_trackTotalVolume"" [label=""trackTotalVolume""];
""2025_getTotalBonusPerShare"" [label=""getTotalBonusPerShare""];
""2025_removeControllerContract"" [label=""removeControllerContract""];
""2025_getUserQuickPromoBonus"" [label=""getUserQuickPromoBonus""];
""2025_getUserTotalPromoBonus"" [label=""getUserTotalPromoBonus""];
""2025_subUserTokenLocalBalance"" [label=""subUserTokenLocalBalance""];
""2025_getUserTokenLocalBalance"" [label=""getUserTokenLocalBalance""];
""2025_getUserRewardPayouts"" [label=""getUserRewardPayouts""];
""2025_getQuickPromoRemainingBlocks"" [label=""getQuickPromoRemainingBlocks""];
""2025_isRefAvailable"" [label=""isRefAvailable""];
""2025_withdrawDevReward"" [label=""withdrawDevReward""];
""2025_getCurrentUserTotalReward"" [label=""getCurrentUserTotalReward""];
""2025_MAX_TOKEN_DEAL_VAL"" [label=""MAX_TOKEN_DEAL_VAL""];
""2025_payoutQuickBonus"" [label=""payoutQuickBonus""];
""2025__currentBigPromoBonus"" [label=""_currentBigPromoBonus""];
""2025_payoutBigBonus"" [label=""payoutBigBonus""];
""2025_getCurrentUserShareBonus"" -> ""2025_getUserTotalReward"";
""2025_addUserRewardPayouts"" -> ""2025_addUserRewardPayouts"";
""2025_withdrawDevReward"" -> ""2025_onlyAdministrator"";
""2025_isRefAvailable"" -> ""2025_getUserTotalEthVolumeSaldo"";
""2025_setRewardPercentages"" -> ""2025_onlyAdministrator"";
""2025_setTotalIncomeFeePercent"" -> ""2025_onlyController"";
""2025_addControllerContract"" -> ""2025_onlyAdministrator"";
""2025_getCurrentUserTotalReward"" -> ""2025_getUserTotalReward"";
""2025_resetUserRefBalance"" -> ""2025_onlyController"";
""2025_resetUserPromoBonus"" -> ""2025_resetUserPromoBonus"";
""2025_getRewardAndPrepareWithdraw"" -> ""2025_addUserRewardPayouts"";
""2025_resetUserPromoBonus"" -> ""2025_onlyController"";
""2025_addUserRewardPayouts"" -> ""2025_onlyController"";
""2025_getCurrentUserRefBonus"" -> ""2025_getUserTotalReward"";
""2025_withdrawUserReward"" -> ""2025_getRewardAndPrepareWithdraw"";
""2025_getRewardAndPrepareWithdraw"" -> ""2025_getUserTotalPromoBonus"";
""2025_setQuickPromoInterval"" -> ""2025_onlyAdministrator"";
""2025_getCurrentUserReward"" -> ""2025_getUserTotalReward"";
""2025_constructor"" -> ""2025_constructor"";
""2025_addBonusPerShare"" -> ""2025_onlyController"";
""2025_addDevReward"" -> ""2025_onlyController"";
""2025_trackSell"" -> ""2025_trackTotalVolume"";
""2025_getBigPromoRemainingBlocks"" -> ""2025_getBlockNumSinceInit"";
""2025_trackBuy"" -> ""2025_onlyController"";
""2025_withdrawRemainingEthAfterAll"" -> ""2025_onlyAdministrator"";
""2025_resetUserRefBalance"" -> ""2025_resetUserRefBalance"";
""2025_addQuickPromoBonus"" -> ""2025_onlyController"";
""2025_setMinRefEthPurchase"" -> ""2025_onlyAdministrator"";
""2025_changeControllerContract"" -> ""2025_onlyAdministrator"";
""2025_subUserTokenLocalBalance"" -> ""2025_onlyController"";
""2025_getBlockNumSinceInit"" -> ""2025_getInitBlockNum"";
""2025_setBigPromoInterval"" -> ""2025_onlyAdministrator"";
""2025_getRewardAndPrepareWithdraw"" -> ""2025_getUserRefBalance"";
""2025_payoutQuickBonus"" -> ""2025_onlyController"";
""2025_payoutBigBonus"" -> ""2025_onlyController"";
""2025_trackBuy"" -> ""2025_trackTotalVolume"";
""2025_addUserTokenLocalBalance"" -> ""2025_onlyController"";
""2025_addUserRefBalance"" -> ""2025_onlyController"";
""2025_getRewardAndPrepareWithdraw"" -> ""2025_resetUserPromoBonus"";
""2025_getUserTotalReward"" -> ""2025_getUserReward"";
""2025_getRewardAndPrepareWithdraw"" -> ""2025_getUserReward"";
""2025_trackSell"" -> ""2025_onlyController"";
""2025_getQuickPromoRemainingBlocks"" -> ""2025_getBlockNumSinceInit"";
""2025_addBigPromoBonus"" -> ""2025_onlyController"";
""2025_removeControllerContract"" -> ""2025_onlyAdministrator"";
""2025_getRewardAndPrepareWithdraw"" -> ""2025_resetUserRefBalance"";
""2025_getCurrentUserPromoBonus"" -> ""2025_getUserTotalReward"";
""2025_isRefAvailable"" -> ""2025_isRefAvailable"";
""2025_setPromoMinPurchaseEth"" -> ""2025_onlyAdministrator"";
}
"
0xa5d1e58ece1fc438d64e65769d2ab730143a4caf.sol,RobomedIco,"contract RobomedIco is ERC223, ERC20 { using SafeMath for uint256; string public name = ; string public symbol = ; uint8 public decimals = 18; address public constant ADDR_OWNER = 0x21F6C4D926B705aD244Ec33271559dA8c562400F; address public constant ADDR_WITHDRAWAL1 = 0x0dD97e6259a7de196461B36B028456a97e3268bE; address public constant ADDR_WITHDRAWAL2 = 0x8c5B02144F7664D37FDfd4a2f90148d08A04838D; address public constant ADDR_BOUNTY_TOKENS_ACCOUNT = 0x6542393623Db0D7F27fDEd83e6feDBD767BfF9b4; address public constant ADDR_TEAM_TOKENS_ACCOUNT = 0x28c6bCAB2204CEd29677fEE6607E872E3c40d783; uint256 public constant INITIAL_COINS_FOR_VIPPLACEMENT =507937500 * 10 ** 18; uint256 public constant DURATION_VIPPLACEMENT = 1 seconds; uint256 public constant EMISSION_FOR_PRESALE = 76212500 * 10 ** 18; uint256 public constant DURATION_PRESALE = 1 days; uint256 public constant RATE_PRESALE = 2702; uint256 public constant DURATION_SALESTAGES = 10 days; uint256 public constant RATE_SALESTAGE1 = 2536; uint256 public constant EMISSION_FOR_SALESTAGE1 = 40835000 * 10 ** 18; uint256 public constant RATE_SALESTAGE2 = 2473; uint256 public constant EMISSION_FOR_SALESTAGE2 = 40835000 * 10 ** 18; uint256 public constant RATE_SALESTAGE3 = 2390; uint256 public constant EMISSION_FOR_SALESTAGE3 = 40835000 * 10 ** 18; uint256 public constant RATE_SALESTAGE4 = 2349; uint256 public constant EMISSION_FOR_SALESTAGE4 = 40835000 * 10 ** 18; uint256 public constant RATE_SALESTAGE5 = 2286; uint256 public constant EMISSION_FOR_SALESTAGE5 = 40835000 * 10 ** 18; uint256 public constant RATE_SALESTAGE6 = 2224; uint256 public constant EMISSION_FOR_SALESTAGE6 = 40835000 * 10 ** 18; uint256 public constant RATE_SALESTAGE7 = 2182; uint256 public constant EMISSION_FOR_SALESTAGE7 = 40835000 * 10 ** 18; uint256 public constant DURATION_SALESTAGELAST = 1 days; uint256 public constant RATE_SALESTAGELAST = 2078; uint256 public constant EMISSION_FOR_SALESTAGELAST = 302505000 * 10 ** 18; uint256 public constant DURATION_NONUSETEAM = 180 days; uint256 public constant DURATION_BEFORE_RESTORE_UNSOLD = 270 days; uint256 public constant EMISSION_FOR_BOUNTY = 83750000 * 10 ** 18; uint256 public constant EMISSION_FOR_TEAM = 418750000 * 10 ** 18; uint256 public constant TEAM_MEMBER_VAL = 2000000 * 10 ** 18; enum IcoStates { VipPlacement, PreSale, SaleStage1, SaleStage2, SaleStage3, SaleStage4, SaleStage5, SaleStage6, SaleStage7, SaleStageLast, PostIco }",0,"subgraph cluster_2497_RobomedIco {
label=""RobomedIco"";
""2497_decimals"" [label=""decimals""];
""2497_gotoSaleStageLast"" [label=""gotoSaleStageLast""];
""2497_canGotoState"" [label=""canGotoState""];
""2497_RobomedIco"" [label=""RobomedIco""];
""2497_restoreUnsoldTokens"" [label=""restoreUnsoldTokens""];
""2497_transferFrom"" [label=""transferFrom""];
""2497_approveWithdrawal"" [label=""approveWithdrawal""];
""2497_transferToAddress"" [label=""transferToAddress""];
""2497_gotoSaleStage1"" [label=""gotoSaleStage1""];
""2497_transitionBetweenSaleStages"" [label=""transitionBetweenSaleStages""];
""2497_transfer"" [label=""transfer""];
""2497_gotoPostIco"" [label=""gotoPostIco""];
""2497_gotoNextState"" [label=""gotoNextState""];
""2497_balanceOf"" [label=""balanceOf""];
""2497_buyTokens"" [label=""buyTokens""];
""2497_symbol"" [label=""symbol""];
""2497_setMoney"" [label=""setMoney""];
""2497_initWithdrawal"" [label=""initWithdrawal""];
""2497_transferBounty"" [label=""transferBounty""];
""2497_teamBalanceOf"" [label=""teamBalanceOf""];
""2497_totalSupply"" [label=""totalSupply""];
""2497_allowance"" [label=""allowance""];
""2497_accrueTeamTokens"" [label=""accrueTeamTokens""];
""2497_gotoPreSale"" [label=""gotoPreSale""];
""2497_name"" [label=""name""];
""2497_transferToContract"" [label=""transferToContract""];
""2497_approve"" [label=""approve""];
""2497_transferTeam"" [label=""transferTeam""];
""2497__transfer"" [label=""_transfer""];
""2497_fallback"" [label=""fallback""];
""2497_isContract"" [label=""isContract""];
""2497_canRestoreUnsoldTokens"" [label=""canRestoreUnsoldTokens""];
""2497_restoreUnsoldTokens"" -> ""2497_canRestoreUnsoldTokens"";
""2497_gotoPreSale"" -> ""2497_canGotoState"";
""2497_initWithdrawal"" -> ""2497_afterIco"";
""2497_gotoNextState"" -> ""2497_gotoPostIco"";
""2497_gotoNextState"" -> ""2497_gotoSaleStage1"";
""2497_gotoSaleStage1"" -> ""2497_canGotoState"";
""2497_transitionBetweenSaleStages"" -> ""2497_setMoney"";
""2497_transferTeam"" -> ""2497_onlyOwner"";
""2497_transferToAddress"" -> ""2497__transfer"";
""2497_transitionBetweenSaleStages"" -> ""2497_canGotoState"";
""2497_gotoSaleStageLast"" -> ""2497_setMoney"";
""2497_transfer"" -> ""2497_transferToContract"";
""2497_gotoSaleStage1"" -> ""2497_setMoney"";
""2497_gotoSaleStageLast"" -> ""2497_canGotoState"";
""2497_initWithdrawal"" -> ""2497_onlyWithdrawal1"";
""2497_buyTokens"" -> ""2497_transitionBetweenSaleStages"";
""2497_transfer"" -> ""2497_transferToAddress"";
""2497_transfer"" -> ""2497_isContract"";
""2497_gotoNextState"" -> ""2497_gotoPreSale"";
""2497_gotoPostIco"" -> ""2497_canGotoState"";
""2497_RobomedIco"" -> ""2497_transferTeam"";
""2497_accrueTeamTokens"" -> ""2497_afterIco"";
""2497_transfer"" -> ""2497_checkForTransfer"";
""2497_transitionBetweenSaleStages"" -> ""2497_gotoSaleStageLast"";
""2497_restoreUnsoldTokens"" -> ""2497_onlyOwner"";
""2497_transferToContract"" -> ""2497__transfer"";
""2497_transferFrom"" -> ""2497_afterIco"";
""2497_gotoPostIco"" -> ""2497_setMoney"";
""2497_gotoPreSale"" -> ""2497_setMoney"";
""2497_gotoNextState"" -> ""2497_onlyOwner"";
""2497_approveWithdrawal"" -> ""2497_afterIco"";
""2497_gotoNextState"" -> ""2497_gotoSaleStageLast"";
""2497_fallback"" -> ""2497_buyTokens"";
""2497_approveWithdrawal"" -> ""2497_onlyWithdrawal2"";
""2497_approve"" -> ""2497_afterIco"";
""2497_transferBounty"" -> ""2497_onlyOwner"";
}
"
0x26f4fb84b53dff7e148a8196f09bc492e55f2889.sol,TokenController,"contract TokenController is Ownable { using SafeMath for uint256; MintableToken public targetToken; address public votingAddr; address public tokensaleManagerAddr; State public state; enum State { Init, Tokensale, Public }",0,"subgraph cluster_1944_TokenController {
label=""TokenController"";
""1944_constructor"" [label=""constructor""];
""1944_mint"" [label=""mint""];
""1944_isStatePublic"" [label=""isStatePublic""];
""1944_isStateInit"" [label=""isStateInit""];
""1944_state"" [label=""state""];
""1944_isStateTokensale"" [label=""isStateTokensale""];
""1944_openTokensale"" [label=""openTokensale""];
""1944_closeTokensale"" [label=""closeTokensale""];
""1944_openTokensale"" -> ""1944_onlyOwner"";
}
"
0x89b5eaec2702ab0ff33ca397b3e66c7d925d5144.sol,Soccer,"contract Soccer { using SafeMath for uint256; event Birth(uint256 tokenId, uint256 startPrice); event TokenSold(uint256 indexed tokenId, uint256 price, address prevOwner, address winner); event Transfer(address indexed from, address indexed to, uint256 tokenId); event Approval(address indexed owner, address indexed approved, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; struct Token { address owner; uint256 price; }",0,"subgraph cluster_1466_Soccer {
label=""Soccer"";
""1466__handle"" [label=""_handle""];
""1466_getInitialPriceOfToken"" [label=""getInitialPriceOfToken""];
""1466_symbol"" [label=""symbol""];
""1466__approved"" [label=""_approved""];
""1466_transfer"" [label=""transfer""];
""1466_unlockPriceChange"" [label=""unlockPriceChange""];
""1466_setCOO"" [label=""setCOO""];
""1466_Soccer"" [label=""Soccer""];
""1466__owns"" [label=""_owns""];
""1466_changePrice"" [label=""changePrice""];
""1466_ownerOf"" [label=""ownerOf""];
""1466__addressNotNull"" [label=""_addressNotNull""];
""1466__transfer"" [label=""_transfer""];
""1466_lockPriceChange"" [label=""lockPriceChange""];
""1466_getNextPrice"" [label=""getNextPrice""];
""1466_isContract"" [label=""isContract""];
""1466_getTotalSupply"" [label=""getTotalSupply""];
""1466_payout"" [label=""payout""];
""1466_takeOwnership"" [label=""takeOwnership""];
""1466_setCEO"" [label=""setCEO""];
""1466_buyToken"" [label=""buyToken""];
""1466_createPromoCollectible"" [label=""createPromoCollectible""];
""1466_approve"" [label=""approve""];
""1466__payout"" [label=""_payout""];
""1466_priceOf"" [label=""priceOf""];
""1466_name"" [label=""name""];
""1466_tokensOfOwner"" [label=""tokensOfOwner""];
""1466_balanceOf"" [label=""balanceOf""];
""1466_implementsERC721"" [label=""implementsERC721""];
""1466_transferFrom"" [label=""transferFrom""];
""1466__addLastOwner"" [label=""_addLastOwner""];
""1466_getToken"" [label=""getToken""];
""1466_buyToken"" -> ""1466__handle"";
""1466_buyToken"" -> ""1466_isContract"";
""1466_getToken"" -> ""1466_getInitialPriceOfToken"";
""1466_takeOwnership"" -> ""1466__approved"";
""1466_tokensOfOwner"" -> ""1466_getTotalSupply"";
""1466_changePrice"" -> ""1466__owns"";
""1466_createPromoCollectible"" -> ""1466_getInitialPriceOfToken"";
""1466_createPromoCollectible"" -> ""1466__transfer"";
""1466_takeOwnership"" -> ""1466__addressNotNull"";
""1466_transfer"" -> ""1466__addressNotNull"";
""1466_transfer"" -> ""1466__transfer"";
""1466_createPromoCollectible"" -> ""1466_onlyCLevel"";
""1466_buyToken"" -> ""1466__addLastOwner"";
""1466_payout"" -> ""1466__payout"";
""1466_setCOO"" -> ""1466_onlyCEO"";
""1466_priceOf"" -> ""1466_getInitialPriceOfToken"";
""1466_setCEO"" -> ""1466_onlyCEO"";
""1466_unlockPriceChange"" -> ""1466_onlyCLevel"";
""1466_transferFrom"" -> ""1466__owns"";
""1466_lockPriceChange"" -> ""1466_onlyCLevel"";
""1466_payout"" -> ""1466_onlyCLevel"";
""1466_buyToken"" -> ""1466_getNextPrice"";
""1466_transferFrom"" -> ""1466__addressNotNull"";
""1466_transferFrom"" -> ""1466__approved"";
""1466_transfer"" -> ""1466__owns"";
""1466_takeOwnership"" -> ""1466__transfer"";
""1466_approve"" -> ""1466__owns"";
""1466_transferFrom"" -> ""1466__transfer"";
""1466_tokensOfOwner"" -> ""1466_balanceOf"";
""1466_getToken"" -> ""1466_getNextPrice"";
""1466_buyToken"" -> ""1466_getInitialPriceOfToken"";
}
"
0x0d76c32921b92025d4a99ed30e83cb6be4c4b4b5.sol,DigitalHealthCareServices,contract DigitalHealthCareServices { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 4; uint public _totalSupply = 5000000000000; uint256 public RATE = 500; bool public isMinting = true; string public constant generatedBy = ; using SafeMath for uint256; address public owner; modifier onlyOwner() { if (msg.sender != owner) { throw; },0,"subgraph cluster_513_DigitalHealthCareServices {
label=""DigitalHealthCareServices"";
""513_constructor"" [label=""constructor""];
""513_changeCrowdsaleRate"" [label=""changeCrowdsaleRate""];
""513_balanceOf"" [label=""balanceOf""];
""513_createTokens"" [label=""createTokens""];
""513_allowance"" [label=""allowance""];
""513_endCrowdsale"" [label=""endCrowdsale""];
""513_fallback"" [label=""fallback""];
""513_transfer"" [label=""transfer""];
""513_approve"" [label=""approve""];
""513_transferFrom"" [label=""transferFrom""];
""513_totalSupply"" [label=""totalSupply""];
""513_burnTokens"" [label=""burnTokens""];
""513_changeCrowdsaleRate"" -> ""513_onlyOwner"";
""513_endCrowdsale"" -> ""513_onlyOwner"";
""513_fallback"" -> ""513_createTokens"";
""513_burnTokens"" -> ""513_onlyOwner"";
}
"
0xa28d6584ef672f5fb549ec05a701ef43785cab79.sol,Eclaircafe,"contract Eclaircafe is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function Eclaircafe() public { symbol = ; name = ; decimals = 18; _totalSupply = 5000000000000000000000000000; balances[0xB7F09F9cCD6De2A8ed1852b823305c0D22409F90] = _totalSupply; Transfer(address(0), 0xB7F09F9cCD6De2A8ed1852b823305c0D22409F90, _totalSupply); }",0,"subgraph cluster_543_Eclaircafe {
label=""Eclaircafe"";
""543_Eclaircafe"" [label=""Eclaircafe""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_balanceOf"" [label=""balanceOf""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transfer"" [label=""transfer""];
""543_fallback"" [label=""fallback""];
""543_approve"" [label=""approve""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferFrom"" [label=""transferFrom""];
""543_allowance"" [label=""allowance""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeAdd"";
}
"
0x850c430378909ba9ff2494d0a4df17928e99f8f4.sol,BdpOwnershipStorage,contract BdpOwnershipStorage is BdpBase { using SafeMath for uint256; mapping (uint256 => address) public tokenOwner; mapping (uint256 => address) public tokenApprovals; mapping (address => uint256) public ownedArea; mapping (address => uint256[]) public ownedTokens; mapping(uint256 => uint256) public ownedTokensIndex; uint256[] public tokenIds; mapping (uint256 => uint256) public tokenIdsIndex; function getTokenOwner(uint256 _tokenId) view public returns (address) { return tokenOwner[_tokenId]; },0,"subgraph cluster_2454_BdpOwnershipStorage {
label=""BdpOwnershipStorage"";
""2454_getOwnedTokensLength"" [label=""getOwnedTokensLength""];
""2454_getTokenOwner"" [label=""getTokenOwner""];
""2454_decrementOwnedArea"" [label=""decrementOwnedArea""];
""2454_getTokenIdsLength"" [label=""getTokenIdsLength""];
""2454_setOwnedArea"" [label=""setOwnedArea""];
""2454_setOwnedToken"" [label=""setOwnedToken""];
""2454_setTokenOwner"" [label=""setTokenOwner""];
""2454_setTokenIdsIndex"" [label=""setTokenIdsIndex""];
""2454_setTokenApproval"" [label=""setTokenApproval""];
""2454_setOwnedTokensIndex"" [label=""setOwnedTokensIndex""];
""2454_getTokenIdByIndex"" [label=""getTokenIdByIndex""];
""2454_incrementOwnedArea"" [label=""incrementOwnedArea""];
""2454_decrementOwnedTokensLength"" [label=""decrementOwnedTokensLength""];
""2454_getOwnedArea"" [label=""getOwnedArea""];
""2454_pushOwnedToken"" [label=""pushOwnedToken""];
""2454_getTokenIdsIndex"" [label=""getTokenIdsIndex""];
""2454_BdpOwnershipStorage"" [label=""BdpOwnershipStorage""];
""2454_getOwnedTokensIndex"" [label=""getOwnedTokensIndex""];
""2454_getOwnedToken"" [label=""getOwnedToken""];
""2454_pushTokenId"" [label=""pushTokenId""];
""2454_decrementTokenIdsLength"" [label=""decrementTokenIdsLength""];
""2454_setTokenIdByIndex"" [label=""setTokenIdByIndex""];
""2454_getTokenApproval"" [label=""getTokenApproval""];
""2454_setTokenApproval"" -> ""2454_storageAccessControl"";
""2454_setOwnedArea"" -> ""2454_storageAccessControl"";
""2454_decrementOwnedTokensLength"" -> ""2454_storageAccessControl"";
""2454_setTokenOwner"" -> ""2454_storageAccessControl"";
""2454_setOwnedTokensIndex"" -> ""2454_storageAccessControl"";
""2454_setTokenIdByIndex"" -> ""2454_storageAccessControl"";
""2454_setOwnedToken"" -> ""2454_storageAccessControl"";
""2454_decrementOwnedArea"" -> ""2454_storageAccessControl"";
""2454_incrementOwnedArea"" -> ""2454_storageAccessControl"";
""2454_pushOwnedToken"" -> ""2454_storageAccessControl"";
""2454_pushTokenId"" -> ""2454_storageAccessControl"";
""2454_setTokenIdsIndex"" -> ""2454_storageAccessControl"";
""2454_decrementTokenIdsLength"" -> ""2454_storageAccessControl"";
}
"
0x21683397aa53aaf7baca416c27f2c1e0e84bb493.sol,Regulator,"contract Regulator is RegulatorStorage { modifier onlyValidator() { require (isValidator(msg.sender), ); _; }",0,"subgraph cluster_1282_Regulator {
label=""Regulator"";
""1282__setBlacklistedUser"" [label=""_setBlacklistedUser""];
""1282_removeBlacklistDestroyer"" [label=""removeBlacklistDestroyer""];
""1282_isBlacklistedUser"" [label=""isBlacklistedUser""];
""1282__setWhitelistedUser"" [label=""_setWhitelistedUser""];
""1282_isMinter"" [label=""isMinter""];
""1282_setBlacklistSpender"" [label=""setBlacklistSpender""];
""1282__setMinter"" [label=""_setMinter""];
""1282_isNonlistedUser"" [label=""isNonlistedUser""];
""1282__removeMinter"" [label=""_removeMinter""];
""1282_removeBlacklistSpender"" [label=""removeBlacklistSpender""];
""1282_removeMinter"" [label=""removeMinter""];
""1282_setBlacklistedUser"" [label=""setBlacklistedUser""];
""1282_isWhitelistedUser"" [label=""isWhitelistedUser""];
""1282_setBlacklistDestroyer"" [label=""setBlacklistDestroyer""];
""1282_setNonlistedUser"" [label=""setNonlistedUser""];
""1282_isBlacklistSpender"" [label=""isBlacklistSpender""];
""1282_setWhitelistedUser"" [label=""setWhitelistedUser""];
""1282_setMinter"" [label=""setMinter""];
""1282_isBlacklistDestroyer"" [label=""isBlacklistDestroyer""];
""1282__setNonlistedUser"" [label=""_setNonlistedUser""];
""1282__setBlacklistedUser"" -> ""1282_removeUserPermission"";
""1282_setBlacklistedUser"" -> ""1282_onlyValidator"";
""1282_setWhitelistedUser"" -> ""1282_onlyValidator"";
""1282__setMinter"" -> ""1282_isPermission"";
""1282__setBlacklistedUser"" -> ""1282_setUserPermission"";
""1282_isBlacklistedUser"" -> ""1282_hasUserPermission"";
""1282_removeBlacklistSpender"" -> ""1282_isPermission"";
""1282_setBlacklistDestroyer"" -> ""1282_isPermission"";
""1282__setWhitelistedUser"" -> ""1282_isPermission"";
""1282_isNonlistedUser"" -> ""1282_hasUserPermission"";
""1282_isMinter"" -> ""1282_hasUserPermission"";
""1282__removeMinter"" -> ""1282_isPermission"";
""1282_removeMinter"" -> ""1282__removeMinter"";
""1282_isBlacklistSpender"" -> ""1282_hasUserPermission"";
""1282_setBlacklistSpender"" -> ""1282_onlyValidator"";
""1282_removeBlacklistSpender"" -> ""1282_removeUserPermission"";
""1282_setBlacklistDestroyer"" -> ""1282_setUserPermission"";
""1282_setBlacklistedUser"" -> ""1282__setBlacklistedUser"";
""1282_setWhitelistedUser"" -> ""1282__setWhitelistedUser"";
""1282_removeBlacklistDestroyer"" -> ""1282_onlyValidator"";
""1282__setWhitelistedUser"" -> ""1282_removeUserPermission"";
""1282_setNonlistedUser"" -> ""1282__setNonlistedUser"";
""1282__setBlacklistedUser"" -> ""1282_isPermission"";
""1282_removeBlacklistSpender"" -> ""1282_onlyValidator"";
""1282_removeBlacklistDestroyer"" -> ""1282_removeUserPermission"";
""1282_removeBlacklistDestroyer"" -> ""1282_isPermission"";
""1282__setMinter"" -> ""1282_setUserPermission"";
""1282__removeMinter"" -> ""1282_removeUserPermission"";
""1282_isBlacklistDestroyer"" -> ""1282_hasUserPermission"";
""1282__setWhitelistedUser"" -> ""1282_setUserPermission"";
""1282__setNonlistedUser"" -> ""1282_removeUserPermission"";
""1282__setNonlistedUser"" -> ""1282_isPermission"";
""1282_setBlacklistSpender"" -> ""1282_setUserPermission"";
""1282_setBlacklistSpender"" -> ""1282_isPermission"";
""1282_setMinter"" -> ""1282__setMinter"";
""1282_setMinter"" -> ""1282_onlyValidator"";
""1282_setNonlistedUser"" -> ""1282_onlyValidator"";
""1282_isWhitelistedUser"" -> ""1282_hasUserPermission"";
""1282_setBlacklistDestroyer"" -> ""1282_onlyValidator"";
""1282_removeMinter"" -> ""1282_onlyValidator"";
}
"
0x295e65915bf0a884dcb225d0b60f95f25626e221.sol,AbyssToken,"contract AbyssToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function AbyssToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0x5dDD9bb4d5640cE37c76dDac8B3bbD35D84416A6] = _totalSupply; Transfer(address(0), 0x5dDD9bb4d5640cE37c76dDac8B3bbD35D84416A6, _totalSupply); }",0,"subgraph cluster_543_AbyssToken {
label=""AbyssToken"";
""543_fallback"" [label=""fallback""];
""543_transfer"" [label=""transfer""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferFrom"" [label=""transferFrom""];
""543_allowance"" [label=""allowance""];
""543_AbyssToken"" [label=""AbyssToken""];
""543_approve"" [label=""approve""];
""543_balanceOf"" [label=""balanceOf""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0x6e56d4e9de4e9d64ccfadce52cbf10c78f096af6.sol,SNC,"contract SNC is SafeMath, Pausable { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; address public owner; mapping(address => uint256) public balanceOf; mapping(address => mapping(address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function SNC() public { totalSupply = (10**8) * (10**8); name = ; symbol = ; decimals = 8; owner = msg.sender; balanceOf[owner] = totalSupply; }",0,"subgraph cluster_549_SNC {
label=""SNC"";
""549_balanceOf"" [label=""balanceOf""];
""549_approve"" [label=""approve""];
""549_transferFrom"" [label=""transferFrom""];
""549_allowance"" [label=""allowance""];
""549_SNC"" [label=""SNC""];
""549_transfer"" [label=""transfer""];
""549_fallback"" [label=""fallback""];
""549_totalSupply"" [label=""totalSupply""];
""549_transfer"" -> ""549_whenNotPaused"";
""549_transfer"" -> ""549_safeAdd"";
""549_transferFrom"" -> ""549_safeSub"";
""549_transfer"" -> ""549_safeSub"";
""549_approve"" -> ""549_whenNotPaused"";
""549_transferFrom"" -> ""549_safeAdd"";
""549_transferFrom"" -> ""549_whenNotPaused"";
}
"
0x4166afc352cdf27b73b25ab2fd7864b62577dd85.sol,Token0xC,"contract Token0xC is StandardToken, Ownable { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public startDate1; uint256 public endDate1; uint256 public rate1; uint256 public startDate2; uint256 public endDate2; uint256 public rate2; uint256 public startDate3; uint256 public endDate3; uint256 public rate3; uint256 BaseTimestamp = 1534377600; uint256 public dailyCap; uint256 public saleCap; uint256 public LastbetDay; uint256 public LeftDailyCap; address public tokenWallet ; address public fundWallet ; event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount); event TransferToken(address indexed buyer, uint256 amount); modifier uninitialized() { require(tokenWallet == 0x0); require(fundWallet == 0x0); _; }",0,"subgraph cluster_1199_Token0xC {
label=""Token0xC"";
""1199_finalize"" [label=""finalize""];
""1199_setPeriodRate"" [label=""setPeriodRate""];
""1199_setPeriod"" [label=""setPeriod""];
""1199_DateConverter"" [label=""DateConverter""];
""1199_fallback"" [label=""fallback""];
""1199_getBonusByTime"" [label=""getBonusByTime""];
""1199_setSaleCap"" [label=""setSaleCap""];
""1199_initialize"" [label=""initialize""];
""1199_buyTokens"" [label=""buyTokens""];
""1199_transferToken"" [label=""transferToken""];
""1199_constructor"" [label=""constructor""];
""1199_setDailyCap"" [label=""setDailyCap""];
""1199_saleActive"" [label=""saleActive""];
""1199_setPeriodRate"" -> ""1199_onlyOwner"";
""1199_initialize"" -> ""1199_onlyOwner"";
""1199_buyTokens"" -> ""1199_saleActive"";
""1199_buyTokens"" -> ""1199_getBonusByTime"";
""1199_buyTokens"" -> ""1199_DateConverter"";
""1199_fallback"" -> ""1199_buyTokens"";
""1199_initialize"" -> ""1199_uninitialized"";
""1199_setPeriod"" -> ""1199_onlyOwner"";
""1199_transferToken"" -> ""1199_onlyOwner"";
""1199_setSaleCap"" -> ""1199_onlyOwner"";
""1199_finalize"" -> ""1199_saleActive"";
""1199_setDailyCap"" -> ""1199_onlyOwner"";
""1199_finalize"" -> ""1199_onlyOwner"";
}
"
0x56a9a9b7de3f4a6ffe1f61319aa33b49ede13590.sol,CrowdsaleBase,"contract CrowdsaleBase is Haltable { uint public MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE = 5; using SafeMathLib for uint; FractionalERC20 public token; PricingStrategy public pricingStrategy; FinalizeAgent public finalizeAgent; address public multisigWallet; uint public minimumFundingGoal; uint public startsAt; uint public endsAt; uint public tokensSold = 0; uint public weiRaised = 0; uint public presaleWeiRaised = 0; uint public investorCount = 0; uint public loadedRefund = 0; uint public weiRefunded = 0; bool public finalized; mapping (address => uint256) public investedAmountOf; mapping (address => uint256) public tokenAmountOf; mapping (address => bool) public earlyParticipantWhitelist; uint public ownerTestValue; enum State{Unknown, Preparing, PreFunding, Funding, Success, Failure, Finalized, Refunding}",0,"subgraph cluster_1058_CrowdsaleBase {
label=""CrowdsaleBase"";
""1058_isBreakingCap"" [label=""isBreakingCap""];
""1058_setOwnerTestValue"" [label=""setOwnerTestValue""];
""1058_isPricingSane"" [label=""isPricingSane""];
""1058_CrowdsaleBase"" [label=""CrowdsaleBase""];
""1058_setMultisig"" [label=""setMultisig""];
""1058_setEndsAt"" [label=""setEndsAt""];
""1058_investInternal"" [label=""investInternal""];
""1058_buyTokens"" [label=""buyTokens""];
""1058_setFinalizeAgent"" [label=""setFinalizeAgent""];
""1058_refund"" [label=""refund""];
""1058_getState"" [label=""getState""];
""1058_calculateTokens"" [label=""calculateTokens""];
""1058_isFinalizerSane"" [label=""isFinalizerSane""];
""1058_isMinimumGoalReached"" [label=""isMinimumGoalReached""];
""1058_finalize"" [label=""finalize""];
""1058_setEarlyParicipantWhitelist"" [label=""setEarlyParicipantWhitelist""];
""1058_assignTokens"" [label=""assignTokens""];
""1058_fallback"" [label=""fallback""];
""1058_loadRefund"" [label=""loadRefund""];
""1058_isCrowdsaleFull"" [label=""isCrowdsaleFull""];
""1058_setPricingStrategy"" [label=""setPricingStrategy""];
""1058_isCrowdsale"" [label=""isCrowdsale""];
""1058_refund"" -> ""1058_inState"";
""1058_setFinalizeAgent"" -> ""1058_onlyOwner"";
""1058_loadRefund"" -> ""1058_inState"";
""1058_setOwnerTestValue"" -> ""1058_onlyOwner"";
""1058_buyTokens"" -> ""1058_stopInEmergency"";
""1058_getState"" -> ""1058_isMinimumGoalReached"";
""1058_buyTokens"" -> ""1058_isBreakingCap"";
""1058_finalize"" -> ""1058_stopInEmergency"";
""1058_buyTokens"" -> ""1058_assignTokens"";
""1058_setPricingStrategy"" -> ""1058_onlyOwner"";
""1058_setEarlyParicipantWhitelist"" -> ""1058_onlyOwner"";
""1058_getState"" -> ""1058_isCrowdsaleFull"";
""1058_setMultisig"" -> ""1058_onlyOwner"";
""1058_buyTokens"" -> ""1058_getState"";
""1058_finalize"" -> ""1058_inState"";
""1058_setEndsAt"" -> ""1058_onlyOwner"";
""1058_investInternal"" -> ""1058_stopInEmergency"";
""1058_CrowdsaleBase"" -> ""1058_setPricingStrategy"";
""1058_finalize"" -> ""1058_onlyOwner"";
""1058_investInternal"" -> ""1058_buyTokens"";
}
"
0x1d18f44256a27862d886e27191d55ab4029172c1.sol,manageAddress,"contract manageAddress is Variable, Modifiers, Event { function add_allowedAddress(address _address) public isOwner { allowedAddress[_address] = true; }",0,"subgraph cluster_454_manageAddress {
label=""manageAddress"";
""454_delete_blockedAddress"" [label=""delete_blockedAddress""];
""454_add_allowedAddress"" [label=""add_allowedAddress""];
""454_delete_allowedAddress"" [label=""delete_allowedAddress""];
""454_add_blockedAddress"" [label=""add_blockedAddress""];
""454_add_blockedAddress"" -> ""454_isOwner"";
""454_delete_blockedAddress"" -> ""454_isOwner"";
""454_add_allowedAddress"" -> ""454_isOwner"";
""454_delete_allowedAddress"" -> ""454_isOwner"";
}
"
0x377dfa7bab23a798ca1fa0923bcd4d4ef2184d85.sol,StarbaseEarlyPurchaseAmendment,contract StarbaseEarlyPurchaseAmendment { event EarlyPurchaseInvalidated(uint256 epIdx); event EarlyPurchaseAmended(uint256 epIdx); AbstractStarbaseCrowdsale public starbaseCrowdsale; StarbaseEarlyPurchase public starbaseEarlyPurchase; address public owner; uint256[] public invalidEarlyPurchaseIndexes; uint256[] public amendedEarlyPurchaseIndexes; mapping (uint256 => StarbaseEarlyPurchase.EarlyPurchase) public amendedEarlyPurchases; modifier noEther() { require(msg.value == 0); _; },0,"subgraph cluster_1138_StarbaseEarlyPurchaseAmendment {
label=""StarbaseEarlyPurchaseAmendment"";
""1138_StarbaseEarlyPurchaseAmendment"" [label=""StarbaseEarlyPurchaseAmendment""];
""1138_normalizedEarlyPurchases"" [label=""normalizedEarlyPurchases""];
""1138_totalAmountOfEarlyPurchases"" [label=""totalAmountOfEarlyPurchases""];
""1138_purchasedAmountBy"" [label=""purchasedAmountBy""];
""1138_setup"" [label=""setup""];
""1138_amendEarlyPurchase"" [label=""amendEarlyPurchase""];
""1138_earlyPurchases"" [label=""earlyPurchases""];
""1138_starbaseEarlyPurchase"" [label=""starbaseEarlyPurchase""];
""1138_isAmendedEarlyPurchase"" [label=""isAmendedEarlyPurchase""];
""1138_getEarlyPurchase"" [label=""getEarlyPurchase""];
""1138_loadStarbaseEarlyPurchases"" [label=""loadStarbaseEarlyPurchases""];
""1138_amendedEarlyPurchases"" [label=""amendedEarlyPurchases""];
""1138_invalidateEarlyPurchase"" [label=""invalidateEarlyPurchase""];
""1138_numberOfEarlyPurchases"" [label=""numberOfEarlyPurchases""];
""1138_numberOfRawEarlyPurchases"" [label=""numberOfRawEarlyPurchases""];
""1138_isInvalidEarlyPurchase"" [label=""isInvalidEarlyPurchase""];
""1138_StarbaseEarlyPurchaseAmendment"" -> ""1138_noEther"";
""1138_normalizedEarlyPurchases"" -> ""1138_getEarlyPurchase"";
""1138_numberOfRawEarlyPurchases"" -> ""1138_onlyEarlyPurchasesLoaded"";
""1138_normalizedEarlyPurchases"" -> ""1138_numberOfRawEarlyPurchases"";
""1138_setup"" -> ""1138_noEther"";
""1138_amendEarlyPurchase"" -> ""1138_isInvalidEarlyPurchase"";
""1138_normalizedEarlyPurchases"" -> ""1138_isInvalidEarlyPurchase"";
""1138_amendEarlyPurchase"" -> ""1138_numberOfRawEarlyPurchases"";
""1138_invalidateEarlyPurchase"" -> ""1138_onlyBeforeCrowdsale"";
""1138_loadStarbaseEarlyPurchases"" -> ""1138_onlyOwner"";
""1138_invalidateEarlyPurchase"" -> ""1138_noEther"";
""1138_invalidateEarlyPurchase"" -> ""1138_numberOfRawEarlyPurchases"";
""1138_amendEarlyPurchase"" -> ""1138_onlyEarlyPurchasesLoaded"";
""1138_earlyPurchases"" -> ""1138_onlyEarlyPurchasesLoaded"";
""1138_purchasedAmountBy"" -> ""1138_noEther"";
""1138_numberOfEarlyPurchases"" -> ""1138_normalizedEarlyPurchases"";
""1138_totalAmountOfEarlyPurchases"" -> ""1138_normalizedEarlyPurchases"";
""1138_numberOfEarlyPurchases"" -> ""1138_noEther"";
""1138_amendEarlyPurchase"" -> ""1138_onlyOwner"";
""1138_amendEarlyPurchase"" -> ""1138_isAmendedEarlyPurchase"";
""1138_amendEarlyPurchase"" -> ""1138_noEther"";
""1138_loadStarbaseEarlyPurchases"" -> ""1138_noEther"";
""1138_amendEarlyPurchase"" -> ""1138_onlyBeforeCrowdsale"";
""1138_setup"" -> ""1138_onlyOwner"";
""1138_isAmendedEarlyPurchase"" -> ""1138_noEther"";
""1138_invalidateEarlyPurchase"" -> ""1138_onlyEarlyPurchasesLoaded"";
""1138_isInvalidEarlyPurchase"" -> ""1138_noEther"";
""1138_getEarlyPurchase"" -> ""1138_onlyEarlyPurchasesLoaded"";
""1138_isAmendedEarlyPurchase"" -> ""1138_numberOfRawEarlyPurchases"";
""1138_normalizedEarlyPurchases"" -> ""1138_isAmendedEarlyPurchase"";
""1138_invalidateEarlyPurchase"" -> ""1138_onlyOwner"";
""1138_isInvalidEarlyPurchase"" -> ""1138_numberOfRawEarlyPurchases"";
""1138_purchasedAmountBy"" -> ""1138_normalizedEarlyPurchases"";
""1138_loadStarbaseEarlyPurchases"" -> ""1138_onlyBeforeCrowdsale"";
""1138_totalAmountOfEarlyPurchases"" -> ""1138_noEther"";
}
"
0x72fa6623cc0800bc180639d60c33c95426d76576.sol,KassaNetwork,"contract KassaNetwork is Ownable { using SafeMath for uint; string public constant name = ; uint public startTimestamp = now; uint public constant procKoef = 10000; uint public constant perDay = 75; uint public constant ownerFee = 700; uint[3] public bonusReferrer = [500, 200, 100]; uint public constant procReturn = 9000; uint public constant maxDepositDays = 200; uint public constant minimalDeposit = 0.5 ether; uint public constant maximalDepositStart = 30 ether; uint public constant maximalDepositFinish = 100 ether; uint public constant minimalDepositForBonusReferrer = 0.015 ether; uint public constant dayLimitStart = 50 ether; uint public constant progressProcKoef = 100; uint public constant dayLimitProgressProc = 2; uint public constant maxDepositProgressProc = 1; uint public countInvestors = 0; uint public totalInvest = 0; uint public totalPenalty = 0; uint public totalSelfInvest = 0; uint public totalPaid = 0; uint public unlimitedInvest = 3000 ether; bool public isUnlimitedContractInvest = false; bool public isUnlimitedDayInvest = false; event LogInvestment(address _addr, uint _value, bytes _refData); event LogTransfer(address _addr, uint _amount, uint _contactBalance); event LogSelfInvestment(uint _value); event LogPreparePayment(address _addr, uint _totalInteres, uint _paidInteres, uint _amount); event LogSkipPreparePayment(address _addr, uint _totalInteres, uint _paidInteres); event LogPreparePaymentReferrer(address _addr, uint _totalReferrals, uint _paidReferrals, uint _amount); event LogSkipPreparePaymentReferrer(address _addr, uint _totalReferrals, uint _paidReferrals); event LogNewReferralAtLevel(address _addr, uint[3] _levels); event LogMinimalDepositPayment(address _addr, uint _money, uint _totalPenalty); event LogPenaltyPayment(address _addr, uint currentSenderDeposit, uint referrerAdressLength, address _referrer, uint currentReferrerDeposit, uint _money, uint _sendBackAmount, uint _totalPenalty); event LogExceededRestDepositPerDay(address _addr, address _referrer, uint _money, uint _nDay, uint _restDepositPerDay, uint _badDeposit, uint _sendBackAmount, uint _totalPenalty, uint _willDeposit); event LogUsedRestDepositPerDay(address _addr, address _referrer, uint _money, uint _nDay, uint _restDepositPerDay, uint _realDeposit, uint _usedDepositPerDay); event LogCalcBonusReferrer(address _referrer, uint _money, uint _index, uint _bonusReferrer, uint _amountReferrer, address _nextReferrer); struct User { uint balance; uint paidInteres; uint timestamp; uint countReferrals; uint[3] countReferralsByLevel; uint earnOnReferrals; uint paidReferrals; address referrer; }",0,"subgraph cluster_1561_KassaNetwork {
label=""KassaNetwork"";
""1561_getCurrentDayDepositLimit"" [label=""getCurrentDayDepositLimit""];
""1561_getCurrentDay"" [label=""getCurrentDay""];
""1561_countReferralsByLevel"" [label=""countReferralsByLevel""];
""1561_preparePayment"" [label=""preparePayment""];
""1561_getTotals"" [label=""getTotals""];
""1561_fallback"" [label=""fallback""];
""1561_getInteres"" [label=""getInteres""];
""1561_getCurrentMaximalDeposit"" [label=""getCurrentMaximalDeposit""];
""1561_calcProgress"" [label=""calcProgress""];
""1561_getNDay"" [label=""getNDay""];
""1561_preparePaymentReferrer"" [label=""preparePaymentReferrer""];
""1561_transfer"" [label=""transfer""];
""1561_sendOwnerFee"" [label=""sendOwnerFee""];
""1561_updateInvestBalance"" [label=""updateInvestBalance""];
""1561_getDayRestDepositLimit"" [label=""getDayRestDepositLimit""];
""1561_getMaximalDeposit"" [label=""getMaximalDeposit""];
""1561_calcBonusReferrers"" [label=""calcBonusReferrers""];
""1561_getDayDepositLimit"" [label=""getDayDepositLimit""];
""1561_registerInvestor"" [label=""registerInvestor""];
""1561_processPayment"" [label=""processPayment""];
""1561_getUser"" [label=""getUser""];
""1561_bytesToAddress"" [label=""bytesToAddress""];
""1561_getCurrentDayRestDepositLimit"" [label=""getCurrentDayRestDepositLimit""];
""1561_checkLimits"" [label=""checkLimits""];
""1561_registerInvestor"" -> ""1561_countReferralsByLevel"";
""1561_processPayment"" -> ""1561_calcBonusReferrers"";
""1561_calcBonusReferrers"" -> ""1561_preparePaymentReferrer"";
""1561_getCurrentMaximalDeposit"" -> ""1561_getMaximalDeposit"";
""1561_preparePayment"" -> ""1561_getInteres"";
""1561_getDayDepositLimit"" -> ""1561_calcProgress"";
""1561_processPayment"" -> ""1561_updateInvestBalance"";
""1561_processPayment"" -> ""1561_getDayRestDepositLimit"";
""1561_getCurrentDayDepositLimit"" -> ""1561_getCurrentDay"";
""1561_sendOwnerFee"" -> ""1561_transfer"";
""1561_processPayment"" -> ""1561_preparePayment"";
""1561_checkLimits"" -> ""1561_getCurrentDay"";
""1561_fallback"" -> ""1561_processPayment"";
""1561_processPayment"" -> ""1561_getCurrentDay"";
""1561_getInteres"" -> ""1561_getNDay"";
""1561_preparePayment"" -> ""1561_transfer"";
""1561_preparePaymentReferrer"" -> ""1561_transfer"";
""1561_checkLimits"" -> ""1561_getDayDepositLimit"";
""1561_getCurrentMaximalDeposit"" -> ""1561_getCurrentDay"";
""1561_getDayRestDepositLimit"" -> ""1561_getCurrentDayDepositLimit"";
""1561_countReferralsByLevel"" -> ""1561_countReferralsByLevel"";
""1561_getMaximalDeposit"" -> ""1561_calcProgress"";
""1561_getTotals"" -> ""1561_getCurrentDayRestDepositLimit"";
""1561_getTotals"" -> ""1561_getCurrentDayDepositLimit"";
""1561_getCurrentDay"" -> ""1561_getNDay"";
""1561_processPayment"" -> ""1561_registerInvestor"";
""1561_processPayment"" -> ""1561_bytesToAddress"";
""1561_getCurrentDayRestDepositLimit"" -> ""1561_getCurrentDay"";
""1561_processPayment"" -> ""1561_checkLimits"";
""1561_getCurrentDayDepositLimit"" -> ""1561_getDayDepositLimit"";
""1561_getTotals"" -> ""1561_getCurrentMaximalDeposit"";
""1561_getUser"" -> ""1561_getInteres"";
""1561_processPayment"" -> ""1561_sendOwnerFee"";
""1561_getCurrentDayRestDepositLimit"" -> ""1561_getDayRestDepositLimit"";
""1561_processPayment"" -> ""1561_getCurrentMaximalDeposit"";
}
"
0xbb5b059f574204c344cd3096b420fe563f242890.sol,NetkillerAdvancedToken,"contract NetkillerAdvancedToken { address public owner; string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; uint256 public sellPrice; uint256 public buyPrice; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function NetkillerAdvancedToken( uint256 initialSupply, string tokenName, string tokenSymbol ) public { owner = msg.sender; totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_642_NetkillerAdvancedToken {
label=""NetkillerAdvancedToken"";
""642_transfer"" [label=""transfer""];
""642__transfer"" [label=""_transfer""];
""642_setPrices"" [label=""setPrices""];
""642_burn"" [label=""burn""];
""642_mintToken"" [label=""mintToken""];
""642_approve"" [label=""approve""];
""642_sell"" [label=""sell""];
""642_NetkillerAdvancedToken"" [label=""NetkillerAdvancedToken""];
""642_approveAndCall"" [label=""approveAndCall""];
""642_transferOwnership"" [label=""transferOwnership""];
""642_buy"" [label=""buy""];
""642_freezeAccount"" [label=""freezeAccount""];
""642_burnFrom"" [label=""burnFrom""];
""642_transferFrom"" [label=""transferFrom""];
""642_transferOwnership"" -> ""642_onlyOwner"";
""642_burn"" -> ""642_onlyOwner"";
""642_approveAndCall"" -> ""642_approve"";
""642_transferFrom"" -> ""642__transfer"";
""642_approve"" -> ""642_approve"";
""642_burnFrom"" -> ""642_onlyOwner"";
""642_transferFrom"" -> ""642_transferFrom"";
""642_setPrices"" -> ""642_onlyOwner"";
""642_buy"" -> ""642__transfer"";
""642_transfer"" -> ""642_transfer"";
""642_sell"" -> ""642__transfer"";
""642_transfer"" -> ""642__transfer"";
""642_mintToken"" -> ""642_onlyOwner"";
""642_freezeAccount"" -> ""642_onlyOwner"";
}
"
0x0e8d6b471e332f140e7d9dbb99e5e3822f728da6.sol,TransferLimitedToken,contract TransferLimitedToken is ManagedToken { uint256 public constant LIMIT_TRANSFERS_PERIOD = 365 days; mapping(address => bool) public limitedWallets; uint256 public limitEndDate; address public limitedWalletsManager; bool public isLimitEnabled; event TransfersEnabled(); modifier onlyManager() { require(msg.sender == limitedWalletsManager); _; },0,"subgraph cluster_1161_TransferLimitedToken {
label=""TransferLimitedToken"";
""1161_transfer"" [label=""transfer""];
""1161_approve"" [label=""approve""];
""1161_transferFrom"" [label=""transferFrom""];
""1161_enableTransfers"" [label=""enableTransfers""];
""1161_TransferLimitedToken"" [label=""TransferLimitedToken""];
""1161_disableLimit"" [label=""disableLimit""];
""1161_delLimitedWalletAddress"" [label=""delLimitedWalletAddress""];
""1161_addLimitedWalletAddress"" [label=""addLimitedWalletAddress""];
""1161_approve"" -> ""1161_canTransfer"";
""1161_disableLimit"" -> ""1161_onlyManager"";
""1161_transferFrom"" -> ""1161_canTransfer"";
""1161_transfer"" -> ""1161_transfer"";
""1161_delLimitedWalletAddress"" -> ""1161_onlyManager"";
""1161_approve"" -> ""1161_approve"";
""1161_transfer"" -> ""1161_canTransfer"";
""1161_TransferLimitedToken"" -> ""1161_ManagedToken"";
""1161_transferFrom"" -> ""1161_transferFrom"";
}
"
0x3a6e5f1c1b0de5d2b46babd21c7844c96f5180aa.sol,SniperBillion,contract SniperBillion is modularBillion { using SafeMath for *; using Array256Lib for uint256[]; address constant private comReward_ = 0x8Aa94D530cC572aF0C730147E1ab76875F25f71C; address constant private comMarket_ = 0x6c14CAAc549d7411faE4e201105B4D33afb8a3db; address constant private comICO_ = 0xbAdb636C5C3665a969159a6b993F811D9F263639; address constant private donateAccount_ = 0x1bB064708eBf4763BeB495877E99Dfeb75198942; RubyFundForwarderInterface constant private Ruby_Fund = RubyFundForwarderInterface(0x7D653E0Ecb4DAF3166a49525Df04147a7180B051); SniperBookInterface constant private SniperBook = SniperBookInterface(0xc294FA45F713B09d865A088543765800F47514eD); string constant public name = ; string constant public symbol = ; uint256 constant private icoEndTime_ = 24 hours; uint256 constant private maxNumber_ = 100000000; uint256 public totalSum_; uint256 public rID_; uint256 public icoAmount_; bool private isDrawed_ = false; uint256 lastSID_; uint256[] private globalArr_; uint256[] private icoSidArr_; uint256[] private luckyPotBingoArr_; uint256[] private airdropPotBingoArr_; mapping (address => uint256) public sIDxAddr_; mapping (bytes32 => uint256) public sIDxName_; mapping (uint256 => uint256) public sidXnum_; mapping (uint256 => SPBdatasets.Sniper) public spr_; mapping (uint256 => SPBdatasets.Round) public round_; mapping (uint256 => mapping (bytes32 => bool)) public sprNames_; constructor() public { },0,"subgraph cluster_3250_SniperBillion {
label=""SniperBillion"";
""3250_withdrawEarnings"" [label=""withdrawEarnings""];
""3250_core"" [label=""core""];
""3250_distributeICO"" [label=""distributeICO""];
""3250_getSniperInfo"" [label=""getSniperInfo""];
""3250_globalArrNotEqualOne"" [label=""globalArrNotEqualOne""];
""3250_autoDrawWithOEZDay"" [label=""autoDrawWithOEZDay""];
""3250_withdraw"" [label=""withdraw""];
""3250_constructor"" [label=""constructor""];
""3250_checkWinMainPot"" [label=""checkWinMainPot""];
""3250_itemRemove"" [label=""itemRemove""];
""3250_calcBingoAirdropPot"" [label=""calcBingoAirdropPot""];
""3250_globalArrEqualOne"" [label=""globalArrEqualOne""];
""3250_activate"" [label=""activate""];
""3250_percent"" [label=""percent""];
""3250_determineSID"" [label=""determineSID""];
""3250_generateRandom"" [label=""generateRandom""];
""3250_receiveSniperNameList"" [label=""receiveSniperNameList""];
""3250_becomeSniperAngel"" [label=""becomeSniperAngel""];
""3250_getDigit"" [label=""getDigit""];
""3250_calcBingoLuckyPot"" [label=""calcBingoLuckyPot""];
""3250_buyCore"" [label=""buyCore""];
""3250_getTotalSum"" [label=""getTotalSum""];
""3250_getGameTime"" [label=""getGameTime""];
""3250_checkAirdropPot"" [label=""checkAirdropPot""];
""3250_getSID"" [label=""getSID""];
""3250_buyXaddr"" [label=""buyXaddr""];
""3250_checkLuckyPot"" [label=""checkLuckyPot""];
""3250_fallback"" [label=""fallback""];
""3250_receiveSniperInfo"" [label=""receiveSniperInfo""];
""3250_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""3250_globalArrEqualZero"" [label=""globalArrEqualZero""];
""3250_getSniperInfo"" -> ""3250_isHuman"";
""3250_buyXaddr"" -> ""3250_isActivated"";
""3250_getSID"" -> ""3250_isHuman"";
""3250_getTotalSum"" -> ""3250_isHuman"";
""3250_buyCore"" -> ""3250_core"";
""3250_fallback"" -> ""3250_buyCore"";
""3250_fallback"" -> ""3250_determineSID"";
""3250_core"" -> ""3250_calcBingoLuckyPot"";
""3250_withdraw"" -> ""3250_isHuman"";
""3250_withdraw"" -> ""3250_withdrawEarnings"";
""3250_buyXaddr"" -> ""3250_isHuman"";
""3250_core"" -> ""3250_globalArrEqualZero"";
""3250_core"" -> ""3250_calcBingoAirdropPot"";
""3250_calcBingoAirdropPot"" -> ""3250_checkAirdropPot"";
""3250_becomeSniperAngel"" -> ""3250_isActivated"";
""3250_getCurrentRoundInfo"" -> ""3250_isHuman"";
""3250_checkWinMainPot"" -> ""3250_distributeICO"";
""3250_becomeSniperAngel"" -> ""3250_isIcoPhase"";
""3250_core"" -> ""3250_checkWinMainPot"";
""3250_becomeSniperAngel"" -> ""3250_isHuman"";
""3250_fallback"" -> ""3250_isActivated"";
""3250_core"" -> ""3250_autoDrawWithOEZDay"";
""3250_buyXaddr"" -> ""3250_isGameStart"";
""3250_core"" -> ""3250_globalArrNotEqualOne"";
""3250_fallback"" -> ""3250_isWithinLimits"";
""3250_core"" -> ""3250_globalArrEqualOne"";
""3250_globalArrEqualOne"" -> ""3250_itemRemove"";
""3250_core"" -> ""3250_generateRandom"";
""3250_autoDrawWithOEZDay"" -> ""3250_distributeICO"";
""3250_becomeSniperAngel"" -> ""3250_isWithinIcoLimits"";
""3250_buyXaddr"" -> ""3250_determineSID"";
""3250_fallback"" -> ""3250_isGameStart"";
""3250_withdraw"" -> ""3250_isActivated"";
""3250_buyXaddr"" -> ""3250_buyCore"";
""3250_calcBingoLuckyPot"" -> ""3250_getDigit"";
""3250_becomeSniperAngel"" -> ""3250_determineSID"";
""3250_getGameTime"" -> ""3250_isHuman"";
""3250_buyXaddr"" -> ""3250_isWithinLimits"";
""3250_calcBingoLuckyPot"" -> ""3250_checkLuckyPot"";
""3250_distributeICO"" -> ""3250_percent"";
""3250_fallback"" -> ""3250_isHuman"";
""3250_globalArrNotEqualOne"" -> ""3250_itemRemove"";
}
"
0x17a03553719001e05dc19a20f5e82ee76923a985.sol,AuctionBase,contract AuctionBase is ERC721Holder { using SafeMath for uint256; struct Auction { address seller; uint128 price; uint64 startedAt; },0,"subgraph cluster_641_AuctionBase {
label=""AuctionBase"";
""641__isOnAuction"" [label=""_isOnAuction""];
""641__currentPrice"" [label=""_currentPrice""];
""641__transfer"" [label=""_transfer""];
""641__addAuction"" [label=""_addAuction""];
""641__computeCut"" [label=""_computeCut""];
""641__escrow"" [label=""_escrow""];
""641_fallback"" [label=""fallback""];
""641__cancelAuction"" [label=""_cancelAuction""];
""641__owns"" [label=""_owns""];
""641__bid"" [label=""_bid""];
""641__removeAuction"" [label=""_removeAuction""];
""641__bid"" -> ""641__computeCut"";
""641__bid"" -> ""641__isOnAuction"";
""641__cancelAuction"" -> ""641__removeAuction"";
""641__bid"" -> ""641__currentPrice"";
""641__cancelAuction"" -> ""641__transfer"";
""641__bid"" -> ""641__removeAuction"";
}
"
0xd9894dd6e8d4f823bd8bcd1e8a871a295b1cfb07.sol,Ownable,"contract Ownable { address private owner; event OwnershipRenounced(address indexed previousOwner); event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); constructor () public { owner = msg.sender; }",0,"subgraph cluster_175_Ownable {
label=""Ownable"";
""175_constructor"" [label=""constructor""];
""175_getOwner"" [label=""getOwner""];
""175_renounceOwnership"" [label=""renounceOwnership""];
""175_transferOwnership"" [label=""transferOwnership""];
""175_transferOwnership"" -> ""175_onlyOwner"";
""175_renounceOwnership"" -> ""175_onlyOwner"";
}
"
0x5ca3b9dac85da4de4030e59c1a0248004209e348.sol,DocumentStore,contract DocumentStore is Ownable { string public name; string public version = ; mapping(bytes32 => uint) documentIssued; mapping(bytes32 => uint) documentRevoked; event DocumentIssued(bytes32 indexed document); event DocumentRevoked( bytes32 indexed document ); constructor( string _name ) public { name = _name; },0,"subgraph cluster_294_DocumentStore {
label=""DocumentStore"";
""294_getIssuedBlock"" [label=""getIssuedBlock""];
""294_isRevoked"" [label=""isRevoked""];
""294_constructor"" [label=""constructor""];
""294_isIssuedBefore"" [label=""isIssuedBefore""];
""294_issue"" [label=""issue""];
""294_isRevokedBefore"" [label=""isRevokedBefore""];
""294_revoke"" [label=""revoke""];
""294_isIssued"" [label=""isIssued""];
""294_issue"" -> ""294_onlyNotIssued"";
""294_issue"" -> ""294_onlyOwner"";
""294_getIssuedBlock"" -> ""294_onlyIssued"";
""294_revoke"" -> ""294_onlyNotRevoked"";
""294_revoke"" -> ""294_onlyOwner"";
}
"
0xed023b117953fcfaa92150d3ebe3e987d19563ce.sol,ERC721Token,"contract ERC721Token is ERC721, Pausable { mapping(uint => address) tokenIdToOwner; mapping (uint => address) tokenIdToApproved; mapping(uint => uint) tokenIdToOwnerTokensIndex; function balanceOf(address _owner) public view returns (uint) { return ownerTokens[_owner].length; }",0,"subgraph cluster_582_ERC721Token {
label=""ERC721Token"";
""582_transfer"" [label=""transfer""];
""582_balanceOf"" [label=""balanceOf""];
""582__approve"" [label=""_approve""];
""582_ownerOf"" [label=""ownerOf""];
""582__transfer"" [label=""_transfer""];
""582_approve"" [label=""approve""];
""582__owns"" [label=""_owns""];
""582_transferFrom"" [label=""transferFrom""];
""582_approvedFor"" [label=""approvedFor""];
""582_getOwnerTokens"" [label=""getOwnerTokens""];
""582_approve"" -> ""582__approve"";
""582_transfer"" -> ""582__transfer"";
""582_transferFrom"" -> ""582__owns"";
""582_approve"" -> ""582_whenNotPaused"";
""582_transfer"" -> ""582__owns"";
""582_approve"" -> ""582__owns"";
""582_transfer"" -> ""582_whenNotPaused"";
""582_transferFrom"" -> ""582_whenNotPaused"";
""582_transferFrom"" -> ""582__transfer"";
}
"
0x02e582682aa7b4dcc3f7574c468ef61b29545404.sol,CloneWars,"contract CloneWars { using SafeMath for uint; event MarketBoost( uint amountSent ); event NorsefireSwitch( address from, address to, uint price ); uint256 public clones_to_create_one_idea = 2 days; uint256 public starting_clones = 232; uint256 PSN = 10000; uint256 PSNH = 5000; address actualNorse = 0x4F4eBF556CFDc21c3424F85ff6572C77c514Fcae; uint256 public marketIdeas; uint256 public norsefirePrice; bool public initialized; address public currentNorsefire; mapping (address => uint256) public arrayOfClones; mapping (address => uint256) public claimedIdeas; mapping (address => uint256) public lastDeploy; mapping (address => address) public referrals; constructor () public { initialized = false; norsefirePrice = 0.1 ether; currentNorsefire = 0x1337a4aEfd5ec486E6e97b1d0aE055FAC8D879dE; }",0,"subgraph cluster_720_CloneWars {
label=""CloneWars"";
""720_boostCloneMarket"" [label=""boostCloneMarket""];
""720_deployIdeas"" [label=""deployIdeas""];
""720_calculateIdeaBuy"" [label=""calculateIdeaBuy""];
""720_getMyIdeas"" [label=""getMyIdeas""];
""720_hijackClones"" [label=""hijackClones""];
""720_min"" [label=""min""];
""720_devFee"" [label=""devFee""];
""720_calculateIdeaSell"" [label=""calculateIdeaSell""];
""720_getMyClones"" [label=""getMyClones""];
""720_releaseTheOriginal"" [label=""releaseTheOriginal""];
""720_buyIdeas"" [label=""buyIdeas""];
""720_getBalance"" [label=""getBalance""];
""720_constructor"" [label=""constructor""];
""720_getIdeasSinceLastDeploy"" [label=""getIdeasSinceLastDeploy""];
""720_sellIdeas"" [label=""sellIdeas""];
""720_calculateTrade"" [label=""calculateTrade""];
""720_calculateIdeaBuySimple"" [label=""calculateIdeaBuySimple""];
""720_becomeNorsefire"" [label=""becomeNorsefire""];
""720_getNorsefirePrice"" [label=""getNorsefirePrice""];
""720_getIdeasSinceLastDeploy"" -> ""720_min"";
""720_getMyIdeas"" -> ""720_getIdeasSinceLastDeploy"";
""720_calculateIdeaSell"" -> ""720_calculateTrade"";
""720_sellIdeas"" -> ""720_devFee"";
""720_deployIdeas"" -> ""720_getMyIdeas"";
""720_sellIdeas"" -> ""720_getMyIdeas"";
""720_becomeNorsefire"" -> ""720_boostCloneMarket"";
""720_sellIdeas"" -> ""720_calculateIdeaSell"";
""720_releaseTheOriginal"" -> ""720_boostCloneMarket"";
""720_calculateIdeaBuy"" -> ""720_calculateTrade"";
""720_calculateIdeaBuySimple"" -> ""720_calculateIdeaBuy"";
""720_buyIdeas"" -> ""720_devFee"";
""720_buyIdeas"" -> ""720_calculateIdeaBuy"";
}
"
0x3f9ef884433bdcbe10e6477e58be727bc4e6731a.sol,BIONEUM,"contract BIONEUM is StandardToken, Ownable { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 8; uint256 public constant totalSupply = decVal(50000000); address public multisig = 0x999bb65DBfc56742d6a65b1267cfdacf2afa5FBE; address public developers = 0x8D9acc27005419E0a260B44d060F7427Cd9739B2; address public founders = 0xB679919c63799c39d074EEad650889B24C06fdC6; address public bounty = 0xCF2F450FB7d265fF82D0c2f1737d9f0258ae40A3; address public constant tokenAddress = this; uint256 public startDate; uint256 public endDate; uint256 public weiRaised; uint256 public tokensSold; modifier uninitialized() { require(multisig == 0x0); _; }",0,"subgraph cluster_849_BIONEUM {
label=""BIONEUM"";
""849_finalize"" [label=""finalize""];
""849_internalSend"" [label=""internalSend""];
""849_buyTokens"" [label=""buyTokens""];
""849_decVal"" [label=""decVal""];
""849_supply"" [label=""supply""];
""849_BIONEUM"" [label=""BIONEUM""];
""849_fallback"" [label=""fallback""];
""849_saleActive"" [label=""saleActive""];
""849_getRateAt"" [label=""getRateAt""];
""849_buyTokens"" -> ""849_saleActive"";
""849_internalSend"" -> ""849_supply"";
""849_saleActive"" -> ""849_supply"";
""849_BIONEUM"" -> ""849_decVal"";
""849_finalize"" -> ""849_onlyOwner"";
""849_buyTokens"" -> ""849_supply"";
""849_getRateAt"" -> ""849_decVal"";
""849_internalSend"" -> ""849_onlyOwner"";
""849_finalize"" -> ""849_saleActive"";
""849_fallback"" -> ""849_buyTokens"";
""849_buyTokens"" -> ""849_getRateAt"";
}
"
0xa18ed9da79ec3cb2cb4480315787db7c522d5911.sol,KEYT,"contract KEYT is owned, TokenERC20 { using SafeMath for uint; uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function KEYT( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",0,"subgraph cluster_808_KEYT {
label=""KEYT"";
""808_KEYT"" [label=""KEYT""];
""808__transfer"" [label=""_transfer""];
""808_buy"" [label=""buy""];
""808_mintToken"" [label=""mintToken""];
""808_freezeAccount"" [label=""freezeAccount""];
""808_setPrices"" [label=""setPrices""];
""808_sell"" [label=""sell""];
""808_freezeAccount"" -> ""808_onlyOwner"";
""808_setPrices"" -> ""808_onlyOwner"";
""808_KEYT"" -> ""808_TokenERC20"";
""808_buy"" -> ""808__transfer"";
""808_sell"" -> ""808__transfer"";
""808_mintToken"" -> ""808_onlyOwner"";
}
"
0x7430984e1d05d5f447c747123dd26845f6f17544.sol,ZethrBankroll,"contract ZethrBankroll is ERC223Receiving { using SafeMath for uint; event Confirmation(address indexed sender, uint indexed transactionId); event Revocation(address indexed sender, uint indexed transactionId); event Submission(uint indexed transactionId); event Execution(uint indexed transactionId); event ExecutionFailure(uint indexed transactionId); event Deposit(address indexed sender, uint value); event OwnerAddition(address indexed owner); event OwnerRemoval(address indexed owner); event WhiteListAddition(address indexed contractAddress); event WhiteListRemoval(address indexed contractAddress); event RequirementChange(uint required); event DevWithdraw(uint amountTotal, uint amountPerPerson); event EtherLogged(uint amountReceived, address sender); event BankrollInvest(uint amountReceived); event DailyTokenAdmin(address gameContract); event DailyTokensSent(address gameContract, uint tokens); event DailyTokensReceived(address gameContract, uint tokens); uint constant public MAX_OWNER_COUNT = 10; uint constant public MAX_WITHDRAW_PCT_DAILY = 15; uint constant public MAX_WITHDRAW_PCT_TX = 5; uint constant internal resetTimer = 1 days; address internal zethrAddress; ZTHInterface public ZTHTKN; mapping (uint => Transaction) public transactions; mapping (uint => mapping (address => bool)) public confirmations; mapping (address => bool) public isOwner; mapping (address => bool) public isWhitelisted; mapping (address => uint) public dailyTokensPerContract; address internal divCardAddress; address[] public owners; address[] public whiteListedContracts; uint public required; uint public transactionCount; uint internal dailyResetTime; uint internal dailyTknLimit; uint internal tknsDispensedToday; bool internal reEntered = false; struct Transaction { address destination; uint value; bytes data; bool executed; }",0,"subgraph cluster_1982_ZethrBankroll {
label=""ZethrBankroll"";
""1982_submitTransaction"" [label=""submitTransaction""];
""1982_allocateTokens"" [label=""allocateTokens""];
""1982_getTransactionCount"" [label=""getTransactionCount""];
""1982_dailyAccounting"" [label=""dailyAccounting""];
""1982_whiteListContract"" [label=""whiteListContract""];
""1982_fromHex"" [label=""fromHex""];
""1982_contractTokenWithdraw"" [label=""contractTokenWithdraw""];
""1982_devTokenWithdraw"" [label=""devTokenWithdraw""];
""1982_fallback"" [label=""fallback""];
""1982_getConfirmations"" [label=""getConfirmations""];
""1982_constructor"" [label=""constructor""];
""1982_isConfirmed"" [label=""isConfirmed""];
""1982_retrieveTokens"" [label=""retrieveTokens""];
""1982_getConfirmationCount"" [label=""getConfirmationCount""];
""1982_buyInWithAllBalanced"" [label=""buyInWithAllBalanced""];
""1982_deposit"" [label=""deposit""];
""1982_addTransaction"" [label=""addTransaction""];
""1982_permissibleTokenWithdrawal"" [label=""permissibleTokenWithdrawal""];
""1982_alterTokenGrant"" [label=""alterTokenGrant""];
""1982_changeRequirement"" [label=""changeRequirement""];
""1982_fromHexChar"" [label=""fromHexChar""];
""1982_changeDivCardAddress"" [label=""changeDivCardAddress""];
""1982_deWhiteListContract"" [label=""deWhiteListContract""];
""1982_addOwner"" [label=""addOwner""];
""1982_queryTokenGrant"" [label=""queryTokenGrant""];
""1982_setDailyTokenLimit"" [label=""setDailyTokenLimit""];
""1982_tokenFallback"" [label=""tokenFallback""];
""1982_getOwners"" [label=""getOwners""];
""1982_removeOwner"" [label=""removeOwner""];
""1982_replaceOwner"" [label=""replaceOwner""];
""1982_executeTransaction"" [label=""executeTransaction""];
""1982_receiveDividends"" [label=""receiveDividends""];
""1982_getTransactionIds"" [label=""getTransactionIds""];
""1982_addZethrAddresses"" [label=""addZethrAddresses""];
""1982_confirmTransaction"" [label=""confirmTransaction""];
""1982_buyTokens"" [label=""buyTokens""];
""1982_revokeConfirmation"" [label=""revokeConfirmation""];
""1982_removeOwner"" -> ""1982_changeRequirement"";
""1982_changeDivCardAddress"" -> ""1982_isAnOwner"";
""1982_dailyAccounting"" -> ""1982_isAnOwner"";
""1982_replaceOwner"" -> ""1982_ownerExists"";
""1982_devTokenWithdraw"" -> ""1982_onlyWallet"";
""1982_constructor"" -> ""1982_validRequirement"";
""1982_contractTokenWithdraw"" -> ""1982_contractIsWhiteListed"";
""1982_allocateTokens"" -> ""1982_isAnOwner"";
""1982_removeOwner"" -> ""1982_validRequirement"";
""1982_removeOwner"" -> ""1982_ownerExists"";
""1982_addZethrAddresses"" -> ""1982_isAnOwner"";
""1982_addOwner"" -> ""1982_validRequirement"";
""1982_alterTokenGrant"" -> ""1982_isAnOwner"";
""1982_removeOwner"" -> ""1982_onlyWallet"";
""1982_addTransaction"" -> ""1982_notNull"";
""1982_submitTransaction"" -> ""1982_addTransaction"";
""1982_revokeConfirmation"" -> ""1982_notExecuted"";
""1982_addOwner"" -> ""1982_notNull"";
""1982_replaceOwner"" -> ""1982_ownerDoesNotExist"";
""1982_buyTokens"" -> ""1982_isAnOwner"";
""1982_revokeConfirmation"" -> ""1982_ownerExists"";
""1982_dailyAccounting"" -> ""1982_allocateTokens"";
""1982_addOwner"" -> ""1982_onlyWallet"";
""1982_retrieveTokens"" -> ""1982_contractIsWhiteListed"";
""1982_executeTransaction"" -> ""1982_isConfirmed"";
""1982_buyInWithAllBalanced"" -> ""1982_isAnOwner"";
""1982_changeRequirement"" -> ""1982_onlyWallet"";
""1982_changeRequirement"" -> ""1982_validRequirement"";
""1982_deWhiteListContract"" -> ""1982_isAnOwner"";
""1982_retrieveTokens"" -> ""1982_isAnOwner"";
""1982_whiteListContract"" -> ""1982_contractIsNotWhiteListed"";
""1982_alterTokenGrant"" -> ""1982_contractIsWhiteListed"";
""1982_replaceOwner"" -> ""1982_onlyWallet"";
""1982_confirmTransaction"" -> ""1982_transactionExists"";
""1982_devTokenWithdraw"" -> ""1982_permissibleTokenWithdrawal"";
""1982_whiteListContract"" -> ""1982_isAnOwner"";
""1982_whiteListContract"" -> ""1982_notNull"";
""1982_allocateTokens"" -> ""1982_contractIsWhiteListed"";
""1982_revokeConfirmation"" -> ""1982_confirmed"";
""1982_confirmTransaction"" -> ""1982_executeTransaction"";
""1982_addOwner"" -> ""1982_ownerDoesNotExist"";
""1982_executeTransaction"" -> ""1982_notExecuted"";
""1982_fromHex"" -> ""1982_fromHexChar"";
""1982_deWhiteListContract"" -> ""1982_contractIsWhiteListed"";
""1982_confirmTransaction"" -> ""1982_notConfirmed"";
""1982_allocateTokens"" -> ""1982_permissibleTokenWithdrawal"";
""1982_setDailyTokenLimit"" -> ""1982_isAnOwner"";
""1982_confirmTransaction"" -> ""1982_ownerExists"";
""1982_submitTransaction"" -> ""1982_confirmTransaction"";
}
"
0x01c627181089b6e10ee8316ec08516b3df7c4845.sol,BrickCrowdsale,contract BrickCrowdsale is Ownable { using SafeMath for uint256; uint256 public startTime; uint256 public endTime; uint256 public weiRaised; uint256 public limitDateSale; bool public isSoftCapHit = false; bool public isStarted = false; bool public isFinalized = false; uint256 icoPvtRate = 40; uint256 icoPreRate = 50; uint256 ico1Rate = 65; uint256 ico2Rate = 75; uint256 ico3Rate = 90; uint256 public pvtTokens = (40000) * (10**18); uint256 public preSaleTokens = (6000000) * (10**18); uint256 public ico1Tokens = (8000000) * (10**18); uint256 public ico2Tokens = (8000000) * (10**18); uint256 public ico3Tokens = (8000000) * (10**18); uint256 public totalTokens = (40000000)* (10**18); address public advisoryEthWallet = 0x0D7629d32546CD493bc33ADEF115D4489f5599Be; address public infraEthWallet = 0x536D36a05F6592aa29BB0beE30cda706B1272521; address public techDevelopmentEthWallet = 0x4d0B70d8E612b5dca3597C64643a8d1efd5965e1; address public operationsEthWallet = 0xbc67B82924eEc8643A4f2ceDa59B5acfd888A967; address public wallet = 0x44d44CA0f75bdd3AE8806D02515E8268459c554A; struct ContributorData { uint256 contributionAmountViewOnly; uint256 tokensIssuedViewOnly; uint256 contributionAmount; uint256 tokensIssued; },0,"subgraph cluster_2591_BrickCrowdsale {
label=""BrickCrowdsale"";
""2591_hasEnded"" [label=""hasEnded""];
""2591_starting"" [label=""starting""];
""2591_releaseAllTokens"" [label=""releaseAllTokens""];
""2591_isWithinSaleTimeLimit"" [label=""isWithinSaleTimeLimit""];
""2591_setRate"" [label=""setRate""];
""2591_setHardCap"" [label=""setHardCap""];
""2591_setPvtTokens"" [label=""setPvtTokens""];
""2591_isWithinTokenAllocLimit"" [label=""isWithinTokenAllocLimit""];
""2591_constructor"" [label=""constructor""];
""2591_currentTokenSupply"" [label=""currentTokenSupply""];
""2591_release"" [label=""release""];
""2591_endIcoSaleRound3"" [label=""endIcoSaleRound3""];
""2591_endIcoSaleRound2"" [label=""endIcoSaleRound2""];
""2591_getCurrentRateInCents"" [label=""getCurrentRateInCents""];
""2591_releaseTokens"" [label=""releaseTokens""];
""2591_setKycAddress"" [label=""setKycAddress""];
""2591_finalize"" [label=""finalize""];
""2591_endIcoSaleRound1"" [label=""endIcoSaleRound1""];
""2591_setSaleDuration"" [label=""setSaleDuration""];
""2591_investorCount"" [label=""investorCount""];
""2591_refundMoney"" [label=""refundMoney""];
""2591_setKYCRequiredToSendTokens"" [label=""setKYCRequiredToSendTokens""];
""2591_forwardAllRaisedFunds"" [label=""forwardAllRaisedFunds""];
""2591_tokenSendFailuresCount"" [label=""tokenSendFailuresCount""];
""2591_setSaleBonus"" [label=""setSaleBonus""];
""2591_updateRateInWei"" [label=""updateRateInWei""];
""2591_setIco2Tokens"" [label=""setIco2Tokens""];
""2591_transferTokenOwnership"" [label=""transferTokenOwnership""];
""2591_hasStarted"" [label=""hasStarted""];
""2591_setSoftCap"" [label=""setSoftCap""];
""2591_refundAllMoney"" [label=""refundAllMoney""];
""2591_setIco1Tokens"" [label=""setIco1Tokens""];
""2591_buyTokens"" [label=""buyTokens""];
""2591_endPvtSale"" [label=""endPvtSale""];
""2591_didSoftCapReached"" [label=""didSoftCapReached""];
""2591_setPreSaleTokens"" [label=""setPreSaleTokens""];
""2591_transferKycOwnerShip"" [label=""transferKycOwnerShip""];
""2591_finalization"" [label=""finalization""];
""2591_start"" [label=""start""];
""2591_endPreSale"" [label=""endPreSale""];
""2591_setKYCRequiredToReceiveFunds"" [label=""setKYCRequiredToReceiveFunds""];
""2591_setIco3Tokens"" [label=""setIco3Tokens""];
""2591_buyPhaseTokens"" [label=""buyPhaseTokens""];
""2591_validPurchase"" [label=""validPurchase""];
""2591_isWithinSaleLimit"" [label=""isWithinSaleLimit""];
""2591_setTokenAddress"" [label=""setTokenAddress""];
""2591_setTokensForCrowdSale"" [label=""setTokensForCrowdSale""];
""2591_computeTokens"" [label=""computeTokens""];
""2591_splitTokens"" [label=""splitTokens""];
""2591_fallback"" [label=""fallback""];
""2591_init"" [label=""init""];
""2591_init"" -> ""2591_setRate"";
""2591_finalization"" -> ""2591_splitTokens"";
""2591_setHardCap"" -> ""2591_onlyOwner"";
""2591_setIco3Tokens"" -> ""2591_onlyOwner"";
""2591_refundAllMoney"" -> ""2591_refundMoney"";
""2591_setPvtTokens"" -> ""2591_onlyOwner"";
""2591_releaseAllTokens"" -> ""2591_releaseTokens"";
""2591_releaseTokens"" -> ""2591_onlyOwner"";
""2591_setRate"" -> ""2591_getCurrentRateInCents"";
""2591_setSaleDuration"" -> ""2591_onlyOwner"";
""2591_setTokensForCrowdSale"" -> ""2591_onlyOwner"";
""2591_finalization"" -> ""2591_forwardAllRaisedFunds"";
""2591_isWithinTokenAllocLimit"" -> ""2591_isWithinSaleTimeLimit"";
""2591_setSoftCap"" -> ""2591_onlyOwner"";
""2591_releaseAllTokens"" -> ""2591_onlyOwner"";
""2591_buyPhaseTokens"" -> ""2591_buyTokens"";
""2591_transferKycOwnerShip"" -> ""2591_onlyOwner"";
""2591_setKYCRequiredToReceiveFunds"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_setSoftCap"";
""2591_start"" -> ""2591_hasStarted"";
""2591_setPreSaleTokens"" -> ""2591_onlyOwner"";
""2591_isWithinTokenAllocLimit"" -> ""2591_isWithinSaleLimit"";
""2591_endIcoSaleRound1"" -> ""2591_onlyOwner"";
""2591_endIcoSaleRound1"" -> ""2591_updateRateInWei"";
""2591_validPurchase"" -> ""2591_isWithinSaleTimeLimit"";
""2591_start"" -> ""2591_starting"";
""2591_init"" -> ""2591_setSaleDuration"";
""2591_endPreSale"" -> ""2591_onlyOwner"";
""2591_finalize"" -> ""2591_onlyOwner"";
""2591_refundMoney"" -> ""2591_onlyOwner"";
""2591_fallback"" -> ""2591_buyPhaseTokens"";
""2591_setIco1Tokens"" -> ""2591_onlyOwner"";
""2591_endIcoSaleRound3"" -> ""2591_updateRateInWei"";
""2591_setKycAddress"" -> ""2591_onlyOwner"";
""2591_transferTokenOwnership"" -> ""2591_onlyOwner"";
""2591_setKYCRequiredToSendTokens"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_setSaleBonus"";
""2591_endIcoSaleRound2"" -> ""2591_onlyOwner"";
""2591_setIco2Tokens"" -> ""2591_onlyOwner"";
""2591_setRate"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_setTokenAddress"";
""2591_refundAllMoney"" -> ""2591_onlyOwner"";
""2591_setTokenAddress"" -> ""2591_onlyOwner"";
""2591_buyPhaseTokens"" -> ""2591_validPurchase"";
""2591_init"" -> ""2591_setHardCap"";
""2591_finalize"" -> ""2591_finalization"";
""2591_releaseTokens"" -> ""2591_release"";
""2591_init"" -> ""2591_onlyOwner"";
""2591_buyPhaseTokens"" -> ""2591_isWithinTokenAllocLimit"";
""2591_buyPhaseTokens"" -> ""2591_computeTokens"";
""2591_updateRateInWei"" -> ""2591_getCurrentRateInCents"";
""2591_setSaleBonus"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_setTokensForCrowdSale"";
""2591_init"" -> ""2591_setKycAddress"";
""2591_endIcoSaleRound2"" -> ""2591_updateRateInWei"";
""2591_endPvtSale"" -> ""2591_onlyOwner"";
""2591_start"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_start"";
""2591_endIcoSaleRound3"" -> ""2591_onlyOwner"";
""2591_endPreSale"" -> ""2591_updateRateInWei"";
""2591_endPvtSale"" -> ""2591_updateRateInWei"";
}
"
0x89b5eaec2702ab0ff33ca397b3e66c7d925d5144.sol,Soccer,"contract Soccer { using SafeMath for uint256; event Birth(uint256 tokenId, uint256 startPrice); event TokenSold(uint256 indexed tokenId, uint256 price, address prevOwner, address winner); event Transfer(address indexed from, address indexed to, uint256 tokenId); event Approval(address indexed owner, address indexed approved, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; struct Token { address owner; uint256 price; }",0,"subgraph cluster_1466_Soccer {
label=""Soccer"";
""1466__handle"" [label=""_handle""];
""1466_getInitialPriceOfToken"" [label=""getInitialPriceOfToken""];
""1466_symbol"" [label=""symbol""];
""1466__approved"" [label=""_approved""];
""1466_transfer"" [label=""transfer""];
""1466_unlockPriceChange"" [label=""unlockPriceChange""];
""1466_setCOO"" [label=""setCOO""];
""1466_Soccer"" [label=""Soccer""];
""1466__owns"" [label=""_owns""];
""1466_changePrice"" [label=""changePrice""];
""1466_ownerOf"" [label=""ownerOf""];
""1466__addressNotNull"" [label=""_addressNotNull""];
""1466__transfer"" [label=""_transfer""];
""1466_lockPriceChange"" [label=""lockPriceChange""];
""1466_getNextPrice"" [label=""getNextPrice""];
""1466_isContract"" [label=""isContract""];
""1466_getTotalSupply"" [label=""getTotalSupply""];
""1466_payout"" [label=""payout""];
""1466_takeOwnership"" [label=""takeOwnership""];
""1466_setCEO"" [label=""setCEO""];
""1466_buyToken"" [label=""buyToken""];
""1466_createPromoCollectible"" [label=""createPromoCollectible""];
""1466_approve"" [label=""approve""];
""1466__payout"" [label=""_payout""];
""1466_priceOf"" [label=""priceOf""];
""1466_name"" [label=""name""];
""1466_tokensOfOwner"" [label=""tokensOfOwner""];
""1466_balanceOf"" [label=""balanceOf""];
""1466_implementsERC721"" [label=""implementsERC721""];
""1466_transferFrom"" [label=""transferFrom""];
""1466__addLastOwner"" [label=""_addLastOwner""];
""1466_getToken"" [label=""getToken""];
""1466_buyToken"" -> ""1466__handle"";
""1466_buyToken"" -> ""1466_isContract"";
""1466_getToken"" -> ""1466_getInitialPriceOfToken"";
""1466_takeOwnership"" -> ""1466__approved"";
""1466_tokensOfOwner"" -> ""1466_getTotalSupply"";
""1466_changePrice"" -> ""1466__owns"";
""1466_createPromoCollectible"" -> ""1466_getInitialPriceOfToken"";
""1466_createPromoCollectible"" -> ""1466__transfer"";
""1466_takeOwnership"" -> ""1466__addressNotNull"";
""1466_transfer"" -> ""1466__addressNotNull"";
""1466_transfer"" -> ""1466__transfer"";
""1466_createPromoCollectible"" -> ""1466_onlyCLevel"";
""1466_buyToken"" -> ""1466__addLastOwner"";
""1466_payout"" -> ""1466__payout"";
""1466_setCOO"" -> ""1466_onlyCEO"";
""1466_priceOf"" -> ""1466_getInitialPriceOfToken"";
""1466_setCEO"" -> ""1466_onlyCEO"";
""1466_unlockPriceChange"" -> ""1466_onlyCLevel"";
""1466_transferFrom"" -> ""1466__owns"";
""1466_lockPriceChange"" -> ""1466_onlyCLevel"";
""1466_payout"" -> ""1466_onlyCLevel"";
""1466_buyToken"" -> ""1466_getNextPrice"";
""1466_transferFrom"" -> ""1466__addressNotNull"";
""1466_transferFrom"" -> ""1466__approved"";
""1466_transfer"" -> ""1466__owns"";
""1466_takeOwnership"" -> ""1466__transfer"";
""1466_approve"" -> ""1466__owns"";
""1466_transferFrom"" -> ""1466__transfer"";
""1466_tokensOfOwner"" -> ""1466_balanceOf"";
""1466_getToken"" -> ""1466_getNextPrice"";
""1466_buyToken"" -> ""1466_getInitialPriceOfToken"";
}
"
0x6f4dcbb16f72853c7382e7100a0713a68e53d9be.sol,GroupBuyContract,contract GroupBuyContract { uint256 public constant MAX_CONTRIBUTION_SLOTS = 20; uint256 private firstStepLimit = 0.053613 ether; uint256 private secondStepLimit = 0.564957 ether; struct Group { address[] contributorArr; mapping(address => uint256) addressToContributorArrIndex; mapping(address => uint256) addressToContribution; bool exists; uint256 contributedBalance; uint256 purchasePrice; },0,"subgraph cluster_2011_GroupBuyContract {
label=""GroupBuyContract"";
""2011_unpause"" [label=""unpause""];
""2011_withdrawCommission"" [label=""withdrawCommission""];
""2011_fallback"" [label=""fallback""];
""2011_setCEO"" [label=""setCEO""];
""2011_setCOO2"" [label=""setCOO2""];
""2011_activatePurchase"" [label=""activatePurchase""];
""2011_adjustCommission"" [label=""adjustCommission""];
""2011__clearContributorRecordInGroup"" [label=""_clearContributorRecordInGroup""];
""2011__distributeProceeds"" [label=""_distributeProceeds""];
""2011_getContributorsInTokenGroupCount"" [label=""getContributorsInTokenGroupCount""];
""2011_getTokenGroupTotalBalance"" [label=""getTokenGroupTotalBalance""];
""2011_getSelfGroupsContributedTo"" [label=""getSelfGroupsContributedTo""];
""2011__newPrice"" [label=""_newPrice""];
""2011_setCOO1"" [label=""setCOO1""];
""2011__addressNotNull"" [label=""_addressNotNull""];
""2011_withdrawBalance"" [label=""withdrawBalance""];
""2011_dissolveTokenGroup"" [label=""dissolveTokenGroup""];
""2011_distributeCustomSaleProceeds"" [label=""distributeCustomSaleProceeds""];
""2011_getGroupPurchasedPrice"" [label=""getGroupPurchasedPrice""];
""2011_contributeToTokenGroup"" [label=""contributeToTokenGroup""];
""2011_getGroupsContributedTo"" [label=""getGroupsContributedTo""];
""2011_GroupBuyContract"" [label=""GroupBuyContract""];
""2011_setToForking"" [label=""setToForking""];
""2011_leaveTokenGroupAndWithdrawBalance"" [label=""leaveTokenGroupAndWithdrawBalance""];
""2011_pause"" [label=""pause""];
""2011__withdrawUserFunds"" [label=""_withdrawUserFunds""];
""2011__purchase"" [label=""_purchase""];
""2011_transferToken"" [label=""transferToken""];
""2011_getSelfContributionBalanceForTokenGroup"" [label=""getSelfContributionBalanceForTokenGroup""];
""2011_setCOO3"" [label=""setCOO3""];
""2011_leaveTokenGroup"" [label=""leaveTokenGroup""];
""2011_setCFO"" [label=""setCFO""];
""2011_distributeSaleProceeds"" [label=""distributeSaleProceeds""];
""2011__clearGroupRecordInContributor"" [label=""_clearGroupRecordInContributor""];
""2011_getContributionBalanceForTokenGroup"" [label=""getContributionBalanceForTokenGroup""];
""2011_getWithdrawableBalance"" [label=""getWithdrawableBalance""];
""2011_getContributorsInTokenGroup"" [label=""getContributorsInTokenGroup""];
""2011_setToNotForking"" [label=""setToNotForking""];
""2011_transferToken"" -> ""2011_onlyCOO"";
""2011_contributeToTokenGroup"" -> ""2011_whenNotPaused"";
""2011_withdrawBalance"" -> ""2011__addressNotNull"";
""2011_adjustCommission"" -> ""2011_onlyCLevel"";
""2011_withdrawBalance"" -> ""2011__withdrawUserFunds"";
""2011_distributeSaleProceeds"" -> ""2011_onlyCOO"";
""2011_leaveTokenGroup"" -> ""2011__clearGroupRecordInContributor"";
""2011_setCEO"" -> ""2011_onlyCEO"";
""2011_unpause"" -> ""2011_onlyCEO"";
""2011_contributeToTokenGroup"" -> ""2011__addressNotNull"";
""2011_pause"" -> ""2011_onlyCLevel"";
""2011_contributeToTokenGroup"" -> ""2011_whenNotForking"";
""2011_pause"" -> ""2011_whenNotPaused"";
""2011_dissolveTokenGroup"" -> ""2011__clearGroupRecordInContributor"";
""2011_activatePurchase"" -> ""2011__purchase"";
""2011_distributeCustomSaleProceeds"" -> ""2011__distributeProceeds"";
""2011_setToForking"" -> ""2011_whenNotForking"";
""2011_unpause"" -> ""2011_whenPaused"";
""2011_getGroupsContributedTo"" -> ""2011__addressNotNull"";
""2011_leaveTokenGroupAndWithdrawBalance"" -> ""2011__addressNotNull"";
""2011_activatePurchase"" -> ""2011_whenNotPaused"";
""2011_leaveTokenGroupAndWithdrawBalance"" -> ""2011_whenNotPaused"";
""2011_setToNotForking"" -> ""2011_onlyCEO"";
""2011_distributeCustomSaleProceeds"" -> ""2011_onlyCOO"";
""2011_leaveTokenGroupAndWithdrawBalance"" -> ""2011__clearContributorRecordInGroup"";
""2011_distributeSaleProceeds"" -> ""2011__newPrice"";
""2011_leaveTokenGroupAndWithdrawBalance"" -> ""2011__clearGroupRecordInContributor"";
""2011_dissolveTokenGroup"" -> ""2011_whenForking"";
""2011_setCOO2"" -> ""2011_onlyCEO"";
""2011_contributeToTokenGroup"" -> ""2011__purchase"";
""2011_leaveTokenGroupAndWithdrawBalance"" -> ""2011__withdrawUserFunds"";
""2011_withdrawCommission"" -> ""2011_onlyCFO"";
""2011_setCOO3"" -> ""2011_onlyCEO"";
""2011_distributeSaleProceeds"" -> ""2011__distributeProceeds"";
""2011__distributeProceeds"" -> ""2011__clearGroupRecordInContributor"";
""2011_getSelfGroupsContributedTo"" -> ""2011__addressNotNull"";
""2011_setCOO1"" -> ""2011_onlyCEO"";
""2011_setToNotForking"" -> ""2011_whenForking"";
""2011_setToForking"" -> ""2011_onlyCLevel"";
""2011_dissolveTokenGroup"" -> ""2011_onlyCOO"";
""2011_leaveTokenGroup"" -> ""2011_whenNotPaused"";
""2011_withdrawBalance"" -> ""2011_whenNotPaused"";
""2011_getWithdrawableBalance"" -> ""2011__addressNotNull"";
""2011_leaveTokenGroup"" -> ""2011__clearContributorRecordInGroup"";
""2011_leaveTokenGroup"" -> ""2011__addressNotNull"";
""2011_setCFO"" -> ""2011_onlyCEO"";
}
"
0x71880d9f448c995ec5a7c9d68f2b0e256ef510d2.sol,ValueTokenBase,"contract ValueTokenBase is ERC20 { string public name; string public symbol; uint8 public decimals = 18; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowances; event Burn(address indexed from, uint256 value); function ValueTokenBase(uint256 _initialSupply, string _tokenName, string _tokenSymbol, uint8 _decimals) public { name = _tokenName; symbol = _tokenSymbol; decimals = _decimals; totalSupply = _initialSupply * 10 ** uint256(decimals); balances[msg.sender] = totalSupply; }",0,"subgraph cluster_574_ValueTokenBase {
label=""ValueTokenBase"";
""574_transfer"" [label=""transfer""];
""574_burnFrom"" [label=""burnFrom""];
""574_balanceOf"" [label=""balanceOf""];
""574_approveAndCall"" [label=""approveAndCall""];
""574_decreaseApproval"" [label=""decreaseApproval""];
""574_approve"" [label=""approve""];
""574_burn"" [label=""burn""];
""574_transferFrom"" [label=""transferFrom""];
""574_allowance"" [label=""allowance""];
""574_ValueTokenBase"" [label=""ValueTokenBase""];
""574__transfer"" [label=""_transfer""];
""574_increaseApproval"" [label=""increaseApproval""];
""574_transferFrom"" -> ""574__transfer"";
""574_transfer"" -> ""574__transfer"";
""574_approveAndCall"" -> ""574_approve"";
}
"
0x411139af515804562ddca220220728c9791cc714.sol,KnowToken,"contract KnowToken is KNBaseToken, Ownable { uint256 internal privateToken = 389774115000000000000000000; uint256 internal preSaleToken = 1169322346000000000000000000; uint256 internal crowdSaleToken = 3897741155000000000000000000; uint256 internal bountyToken; uint256 internal foundationToken; address public founderAddress; bool public unlockAllTokens; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool unfrozen); event UnLockAllTokens(bool unlock); constructor() public { founderAddress = msg.sender; balances[founderAddress] = totalSupply_; emit Transfer(address(0), founderAddress, totalSupply_); }",0,"subgraph cluster_777_KnowToken {
label=""KnowToken"";
""777_freezeAccount"" [label=""freezeAccount""];
""777_unlockAllTokens"" [label=""unlockAllTokens""];
""777__transfer"" [label=""_transfer""];
""777_constructor"" [label=""constructor""];
""777_unlockAllTokens"" -> ""777_onlyOwner"";
""777_freezeAccount"" -> ""777_onlyOwner"";
}
"
0x882da60a19c67e481481bace4c0aa93080cde3d7.sol,Crowdsale,"contract Crowdsale is Haltable, SafeMathLib { uint public MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE = 5; FractionalERC20 public token; PricingStrategy public pricingStrategy; FinalizeAgent public finalizeAgent; address public multisigWallet; uint public minimumFundingGoal; uint public startsAt; uint public endsAt; uint public tokensSold = 0; uint public weiRaised = 0; uint public investorCount = 0; uint public loadedRefund = 0; uint public weiRefunded = 0; bool public finalized; bool public requireCustomerId; bool public requiredSignedAddress; address public signerAddress; mapping (address => uint256) public investedAmountOf; mapping (address => uint256) public tokenAmountOf; mapping (address => bool) public earlyParticipantWhitelist; uint public ownerTestValue; enum State{Unknown, Preparing, PreFunding, Funding, Success, Failure, Finalized, Refunding}",0,"subgraph cluster_2531_MintedEthCappedCrowdsale {
label=""MintedEthCappedCrowdsale"";
""2531_isCrowdsaleFull"" [label=""isCrowdsaleFull""];
""2531_assignTokens"" [label=""assignTokens""];
""2531_MintedEthCappedCrowdsale"" [label=""MintedEthCappedCrowdsale""];
""2531_isBreakingCap"" [label=""isBreakingCap""];
""2531_MintedEthCappedCrowdsale"" -> ""2531_Crowdsale"";
}
"
0xeb41d9b0326b787a7c767478cfc4d060c6aa9dbd.sol,VirtualGift,"contract VirtualGift is ERC721 { string public name = ; uint8 public decimals = 0; string public symbol = ; string public version = ; address private defaultGiftOwner; mapping(address => bool) allowPermission; ERC20 private Gifto = ERC20(0x00C5bBaE50781Be1669306b9e001EFF57a2957b09d); event Creation(address indexed _owner, uint256 indexed tokenId); GiftToken[] giftStorageArry; GiftTemplateToken[] giftTemplateStorageArry; mapping(address => uint256) private balances; mapping(uint256 => address) private giftIndexToOwners; mapping(uint256 => bool) private giftExists; mapping(address => mapping (address => uint256)) private ownerToApprovedAddsToGifIds; mapping(uint256 => uint256[]) private giftTemplateIdToGiftids; mapping(uint256 => uint256) private giftTypeToGiftLimit; mapping(uint256 => uint256) private giftTypeToSelledSum; struct GiftTemplateToken { uint256 giftPrice; uint256 giftLimit; string giftImgUrl; string giftName; }",0,"subgraph cluster_1220_VirtualGift {
label=""VirtualGift"";
""1220_transfer"" [label=""transfer""];
""1220_sendGift"" [label=""sendGift""];
""1220_balanceOf"" [label=""balanceOf""];
""1220_giftsOfOwner"" [label=""giftsOfOwner""];
""1220_getGift"" [label=""getGift""];
""1220_takeOwnership"" [label=""takeOwnership""];
""1220_ownerOf"" [label=""ownerOf""];
""1220_totalSupply"" [label=""totalSupply""];
""1220_setGiftoAddress"" [label=""setGiftoAddress""];
""1220_addPermission"" [label=""addPermission""];
""1220_getGiftSoldFromType"" [label=""getGiftSoldFromType""];
""1220_transferFrom"" [label=""transferFrom""];
""1220_getAllGiftTemplateIds"" [label=""getAllGiftTemplateIds""];
""1220__mintGift"" [label=""_mintGift""];
""1220_updateTemplate"" [label=""updateTemplate""];
""1220__transfer"" [label=""_transfer""];
""1220_getGiftsByTemplateId"" [label=""getGiftsByTemplateId""];
""1220_approve"" [label=""approve""];
""1220_allowance"" [label=""allowance""];
""1220_withdraw"" [label=""withdraw""];
""1220_removePermission"" [label=""removePermission""];
""1220_VirtualGift"" [label=""VirtualGift""];
""1220_withdrawGTO"" [label=""withdrawGTO""];
""1220_createGiftTemplate"" [label=""createGiftTemplate""];
""1220_getGiftoAddress"" [label=""getGiftoAddress""];
""1220_getGiftTemplateById"" [label=""getGiftTemplateById""];
""1220_transferFrom"" -> ""1220__transfer"";
""1220_approve"" -> ""1220_ownerOf"";
""1220_setGiftoAddress"" -> ""1220_onlyOwner"";
""1220_sendGift"" -> ""1220_onlyHavePermission"";
""1220_giftsOfOwner"" -> ""1220_totalSupply"";
""1220_giftsOfOwner"" -> ""1220_balanceOf"";
""1220_createGiftTemplate"" -> ""1220_onlyHavePermission"";
""1220__mintGift"" -> ""1220__transfer"";
""1220_transfer"" -> ""1220_ownerOf"";
""1220_takeOwnership"" -> ""1220_ownerOf"";
""1220_updateTemplate"" -> ""1220_onlyOwner"";
""1220_transfer"" -> ""1220__transfer"";
""1220_withdrawGTO"" -> ""1220_onlyOwner"";
""1220_sendGift"" -> ""1220__mintGift"";
""1220_withdraw"" -> ""1220_onlyOwner"";
""1220_transferFrom"" -> ""1220_ownerOf"";
""1220_removePermission"" -> ""1220_onlyOwner"";
""1220_takeOwnership"" -> ""1220__transfer"";
""1220_addPermission"" -> ""1220_onlyOwner"";
}
"
0xd3d72bdd70c2a1dbc3ff6556a8c5f1d0d3a92b7a.sol,SilentNotaryTokenSale,"contract SilentNotaryTokenSale is Ownable, SafeMath { enum Status {Unknown, Preparing, Selling, ProlongedSelling, TokenShortage, Finished}",0,"subgraph cluster_863_SilentNotaryTokenSale {
label=""SilentNotaryTokenSale"";
""863_withdrawTokens"" [label=""withdrawTokens""];
""863_changeTokenPrice"" [label=""changeTokenPrice""];
""863_resumeSale"" [label=""resumeSale""];
""863_fallback"" [label=""fallback""];
""863_stopSale"" [label=""stopSale""];
""863_kill"" [label=""kill""];
""863_getCurrentStatus"" [label=""getCurrentStatus""];
""863_SilentNotaryTokenSale"" [label=""SilentNotaryTokenSale""];
""863_prolong"" [label=""prolong""];
""863_kill"" -> ""863_onlyOwner"";
""863_resumeSale"" -> ""863_onlyOwner"";
""863_fallback"" -> ""863_safeDiv"";
""863_fallback"" -> ""863_safeAdd"";
""863_stopSale"" -> ""863_onlyOwner"";
""863_fallback"" -> ""863_safeSub"";
""863_prolong"" -> ""863_onlyOwner"";
""863_fallback"" -> ""863_getCurrentStatus"";
""863_fallback"" -> ""863_safeMul"";
""863_withdrawTokens"" -> ""863_onlyOwner"";
""863_changeTokenPrice"" -> ""863_onlyOwner"";
}
"
0x6fa4bc3d211e302c49881577dace630f6a3fbcc5.sol,Crowdsale,"contract Crowdsale is Ownable { address public beneficiary = msg.sender; token public epm; uint256 public constant EXCHANGE_RATE = 100; uint256 public constant DURATION = 30 days; uint256 public startTime = 0; uint256 public endTime = 0; uint public amount = 0; mapping(address => uint256) public balanceOf; event FundTransfer(address backer, uint amount, bool isContribution); function Crowdsale() { epm = token(0xA81b980c9FAAFf98ebA21DC05A9Be63f4C733979); startTime = now; endTime = startTime + DURATION; }",0,"subgraph cluster_239_Crowdsale {
label=""Crowdsale"";
""239_fallback"" [label=""fallback""];
""239_Crowdsale"" [label=""Crowdsale""];
""239_Withdrawal"" [label=""Withdrawal""];
""239_fallback"" -> ""239_onlyDuringSale"";
}
"
0xc0a1f89bbcaddab4b736e786b6b16c67bc92ed35.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },0,"subgraph cluster_1152_MiniMeToken {
label=""MiniMeToken"";
""1152_destroyTokens"" [label=""destroyTokens""];
""1152_totalSupplyAt"" [label=""totalSupplyAt""];
""1152_MiniMeToken"" [label=""MiniMeToken""];
""1152_claimTokens"" [label=""claimTokens""];
""1152_controller"" [label=""controller""];
""1152_createCloneToken"" [label=""createCloneToken""];
""1152_generateTokens"" [label=""generateTokens""];
""1152_allowance"" [label=""allowance""];
""1152_balanceOf"" [label=""balanceOf""];
""1152_min"" [label=""min""];
""1152_balanceOfAt"" [label=""balanceOfAt""];
""1152_fallback"" [label=""fallback""];
""1152_updateValueAtNow"" [label=""updateValueAtNow""];
""1152_transferFrom"" [label=""transferFrom""];
""1152_totalSupply"" [label=""totalSupply""];
""1152_getValueAt"" [label=""getValueAt""];
""1152_doTransfer"" [label=""doTransfer""];
""1152_transfer"" [label=""transfer""];
""1152_isContract"" [label=""isContract""];
""1152_enableTransfers"" [label=""enableTransfers""];
""1152_approveAndCall"" [label=""approveAndCall""];
""1152_approve"" [label=""approve""];
""1152_transferFrom"" -> ""1152_doTransfer"";
""1152_doTransfer"" -> ""1152_isContract"";
""1152_destroyTokens"" -> ""1152_updateValueAtNow"";
""1152_generateTokens"" -> ""1152_onlyController"";
""1152_totalSupply"" -> ""1152_totalSupplyAt"";
""1152_balanceOfAt"" -> ""1152_min"";
""1152_doTransfer"" -> ""1152_balanceOfAt"";
""1152_totalSupplyAt"" -> ""1152_min"";
""1152_generateTokens"" -> ""1152_balanceOf"";
""1152_enableTransfers"" -> ""1152_onlyController"";
""1152_generateTokens"" -> ""1152_updateValueAtNow"";
""1152_destroyTokens"" -> ""1152_balanceOf"";
""1152_destroyTokens"" -> ""1152_getValueAt"";
""1152_fallback"" -> ""1152_isContract"";
""1152_destroyTokens"" -> ""1152_onlyController"";
""1152_balanceOfAt"" -> ""1152_getValueAt"";
""1152_totalSupplyAt"" -> ""1152_getValueAt"";
""1152_doTransfer"" -> ""1152_updateValueAtNow"";
""1152_transfer"" -> ""1152_doTransfer"";
""1152_claimTokens"" -> ""1152_onlyController"";
""1152_approve"" -> ""1152_isContract"";
""1152_balanceOf"" -> ""1152_balanceOfAt"";
""1152_approveAndCall"" -> ""1152_approve"";
""1152_generateTokens"" -> ""1152_getValueAt"";
}
"
0x36f6a1353a3e1c008782e86bfe551c6f8b8c3370.sol,Shadow3D,contract Shadow3D { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1311_Shadow3D {
label=""Shadow3D"";
""1311_transfer"" [label=""transfer""];
""1311_setSymbol"" [label=""setSymbol""];
""1311_sell"" [label=""sell""];
""1311_sqrt"" [label=""sqrt""];
""1311_setAdministrator"" [label=""setAdministrator""];
""1311_setStakingRequirement"" [label=""setStakingRequirement""];
""1311_dividendsOf"" [label=""dividendsOf""];
""1311_balanceOf"" [label=""balanceOf""];
""1311_Hourglass"" [label=""Hourglass""];
""1311_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1311_purchaseTokens"" [label=""purchaseTokens""];
""1311_setName"" [label=""setName""];
""1311_withdraw"" [label=""withdraw""];
""1311_reinvest"" [label=""reinvest""];
""1311_totalSupply"" [label=""totalSupply""];
""1311_exit"" [label=""exit""];
""1311_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1311_myTokens"" [label=""myTokens""];
""1311_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1311_sellPrice"" [label=""sellPrice""];
""1311_myDividends"" [label=""myDividends""];
""1311_fallback"" [label=""fallback""];
""1311_disableInitialStage"" [label=""disableInitialStage""];
""1311_buy"" [label=""buy""];
""1311_buyPrice"" [label=""buyPrice""];
""1311_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1311_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1311_exit"" -> ""1311_sell"";
""1311_setName"" -> ""1311_onlyAdministrator"";
""1311_setStakingRequirement"" -> ""1311_onlyAdministrator"";
""1311_setSymbol"" -> ""1311_onlyAdministrator"";
""1311_sellPrice"" -> ""1311_tokensToEthereum_"";
""1311_transfer"" -> ""1311_onlyBagholders"";
""1311_myDividends"" -> ""1311_dividendsOf"";
""1311_transfer"" -> ""1311_tokensToEthereum_"";
""1311_transfer"" -> ""1311_myDividends"";
""1311_withdraw"" -> ""1311_myDividends"";
""1311_withdraw"" -> ""1311_onlyStronghands"";
""1311_buy"" -> ""1311_purchaseTokens"";
""1311_disableInitialStage"" -> ""1311_onlyAdministrator"";
""1311_calculateEthereumReceived"" -> ""1311_tokensToEthereum_"";
""1311_fallback"" -> ""1311_purchaseTokens"";
""1311_calculateTokensReceived"" -> ""1311_ethereumToTokens_"";
""1311_reinvest"" -> ""1311_onlyStronghands"";
""1311_sell"" -> ""1311_tokensToEthereum_"";
""1311_transfer"" -> ""1311_withdraw"";
""1311_myTokens"" -> ""1311_balanceOf"";
""1311_ethereumToTokens_"" -> ""1311_sqrt"";
""1311_reinvest"" -> ""1311_myDividends"";
""1311_reinvest"" -> ""1311_purchaseTokens"";
""1311_buyPrice"" -> ""1311_tokensToEthereum_"";
""1311_purchaseTokens"" -> ""1311_ethereumToTokens_"";
""1311_exit"" -> ""1311_withdraw"";
""1311_setAdministrator"" -> ""1311_onlyAdministrator"";
""1311_purchaseTokens"" -> ""1311_antiEarlyWhale"";
""1311_sell"" -> ""1311_onlyBagholders"";
}
"
0xc336e10dee4cab01248cf3b1747b52d78394c77a.sol,HoardCrowdsale,"contract HoardCrowdsale { function invest(address addr,uint tokenAmount) public payable { }",0,"subgraph cluster_64_HoardCrowdsale {
label=""HoardCrowdsale"";
""64_invest"" [label=""invest""];
}
"
0x6f655b9e1e79a8979ad5bf8f141f2fc4dc71540c.sol,usingOraclize,contract usingOraclize { uint constant day = 60*60*24; uint constant week = 60*60*24*7; uint constant month = 60*60*24*30; byte constant proofType_NONE = 0x00; byte constant proofType_TLSNotary = 0x10; byte constant proofType_Android = 0x20; byte constant proofType_Ledger = 0x30; byte constant proofType_Native = 0xF0; byte constant proofStorage_IPFS = 0x01; uint8 constant networkID_auto = 0; uint8 constant networkID_mainnet = 1; uint8 constant networkID_testnet = 2; uint8 constant networkID_morden = 2; uint8 constant networkID_consensys = 161; OraclizeAddrResolverI OAR; OraclizeI oraclize; modifier oraclizeAPI { if((address(OAR)==0)||(getCodeSize(address(OAR))==0)) oraclize_setNetwork(networkID_auto); if(address(oraclize) != OAR.getAddress()) oraclize = OraclizeI(OAR.getAddress()); _; },0,"subgraph cluster_6275_usingOraclize {
label=""usingOraclize"";
""6275_stra2cbor"" [label=""stra2cbor""];
""6275_oraclize_setProof"" [label=""oraclize_setProof""];
""6275_ecrecovery"" [label=""ecrecovery""];
""6275_oraclize_setNetwork"" [label=""oraclize_setNetwork""];
""6275_strCompare"" [label=""strCompare""];
""6275_oraclize_setNetworkName"" [label=""oraclize_setNetworkName""];
""6275_oraclize_getPrice"" [label=""oraclize_getPrice""];
""6275_matchBytes32Prefix"" [label=""matchBytes32Prefix""];
""6275___callback"" [label=""__callback""];
""6275_oraclize_cbAddress"" [label=""oraclize_cbAddress""];
""6275_oraclize_setConfig"" [label=""oraclize_setConfig""];
""6275_oraclize_randomDS_setCommitment"" [label=""oraclize_randomDS_setCommitment""];
""6275_oraclize_randomDS_proofVerify__sessionKeyValidity"" [label=""oraclize_randomDS_proofVerify__sessionKeyValidity""];
""6275_oraclize_useCoupon"" [label=""oraclize_useCoupon""];
""6275_safer_ecrecover"" [label=""safer_ecrecover""];
""6275_oraclize_newRandomDSQuery"" [label=""oraclize_newRandomDSQuery""];
""6275_parseAddr"" [label=""parseAddr""];
""6275_ba2cbor"" [label=""ba2cbor""];
""6275_uint2str"" [label=""uint2str""];
""6275_verifySig"" [label=""verifySig""];
""6275_parseInt"" [label=""parseInt""];
""6275_indexOf"" [label=""indexOf""];
""6275_strConcat"" [label=""strConcat""];
""6275_oraclize_randomDS_getSessionPubKeyHash"" [label=""oraclize_randomDS_getSessionPubKeyHash""];
""6275_getCodeSize"" [label=""getCodeSize""];
""6275_copyBytes"" [label=""copyBytes""];
""6275_oraclize_getNetworkName"" [label=""oraclize_getNetworkName""];
""6275_oraclize_query"" [label=""oraclize_query""];
""6275_oraclize_randomDS_proofVerify__main"" [label=""oraclize_randomDS_proofVerify__main""];
""6275_oraclize_setCustomGasPrice"" [label=""oraclize_setCustomGasPrice""];
""6275_oraclize_randomDS_proofVerify__returnCode"" [label=""oraclize_randomDS_proofVerify__returnCode""];
""6275_oraclize_randomDS_getSessionPubKeyHash"" -> ""6275_oraclizeAPI"";
""6275_oraclize_randomDS_proofVerify__returnCode"" -> ""6275_oraclize_getNetworkName"";
""6275_oraclize_getPrice"" -> ""6275_oraclizeAPI"";
""6275_oraclize_query"" -> ""6275_oraclizeAPI"";
""6275_oraclize_setProof"" -> ""6275_oraclizeAPI"";
""6275_oraclize_randomDS_proofVerify__main"" -> ""6275_matchBytes32Prefix"";
""6275_strConcat"" -> ""6275_strConcat"";
""6275_oraclize_newRandomDSQuery"" -> ""6275_oraclize_randomDS_setCommitment"";
""6275_oraclize_setNetwork"" -> ""6275_getCodeSize"";
""6275_oraclize_query"" -> ""6275_ba2cbor"";
""6275_oraclize_setCustomGasPrice"" -> ""6275_oraclizeAPI"";
""6275_oraclize_newRandomDSQuery"" -> ""6275_copyBytes"";
""6275_oraclize_randomDS_proofVerify__main"" -> ""6275_copyBytes"";
""6275_oraclize_cbAddress"" -> ""6275_oraclizeAPI"";
""6275_oraclize_randomDS_proofVerify__returnCode"" -> ""6275_oraclize_randomDS_proofVerify__main"";
""6275_oraclize_newRandomDSQuery"" -> ""6275_oraclize_randomDS_getSessionPubKeyHash"";
""6275_parseInt"" -> ""6275_parseInt"";
""6275_oraclize_randomDS_proofVerify__main"" -> ""6275_verifySig"";
""6275_oraclize_randomDS_proofVerify__main"" -> ""6275_oraclize_randomDS_proofVerify__sessionKeyValidity"";
""6275___callback"" -> ""6275___callback"";
""6275_verifySig"" -> ""6275_safer_ecrecover"";
""6275_ecrecovery"" -> ""6275_safer_ecrecover"";
""6275_oraclize_query"" -> ""6275_oraclize_query"";
""6275_oraclize_setConfig"" -> ""6275_oraclizeAPI"";
""6275_oraclize_randomDS_proofVerify__sessionKeyValidity"" -> ""6275_copyBytes"";
""6275_oraclize_useCoupon"" -> ""6275_oraclizeAPI"";
""6275_oraclize_setNetwork"" -> ""6275_oraclize_setNetworkName"";
""6275_oraclize_query"" -> ""6275_stra2cbor"";
""6275_oraclize_newRandomDSQuery"" -> ""6275_oraclize_query"";
""6275_oraclize_randomDS_proofVerify__sessionKeyValidity"" -> ""6275_verifySig"";
""6275_verifySig"" -> ""6275_copyBytes"";
}
"
0x6ed8c49228397cbd0b62db04beaf0b7e9a4da93a.sol,PausableToken,"contract PausableToken is StandardToken, Pausable { function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) { return super.transfer(_to, _value); }",0,"subgraph cluster_704_PausableToken {
label=""PausableToken"";
""704_approve"" [label=""approve""];
""704_increaseApproval"" [label=""increaseApproval""];
""704_transfer"" [label=""transfer""];
""704_decreaseApproval"" [label=""decreaseApproval""];
""704_transferFrom"" [label=""transferFrom""];
""704_transfer"" -> ""704_transfer"";
""704_transfer"" -> ""704_whenNotPaused"";
""704_increaseApproval"" -> ""704_increaseApproval"";
""704_decreaseApproval"" -> ""704_decreaseApproval"";
""704_transferFrom"" -> ""704_whenNotPaused"";
""704_approve"" -> ""704_whenNotPaused"";
""704_approve"" -> ""704_approve"";
""704_decreaseApproval"" -> ""704_whenNotPaused"";
""704_transferFrom"" -> ""704_transferFrom"";
""704_increaseApproval"" -> ""704_whenNotPaused"";
}
"
0x723aaf922709819c25344b81901dd8a9c84c0b89.sol,Crowdsale,"contract Crowdsale { using SafeMath for uint; MintableToken public token; uint32 public startTime; uint32 public endTime; address public wallet; uint public rate; uint public weiRaised; uint public soldTokens; uint public hardCap; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint value, uint amount); function Crowdsale(uint32 _startTime, uint32 _endTime, uint _rate, uint _hardCap, address _wallet, address _token) { require(_startTime >= now); require(_endTime >= _startTime); require(_rate > 0); require(_wallet != 0x0); require(_hardCap > _rate); token = MintableToken(_token); startTime = _startTime; endTime = _endTime; rate = _rate; hardCap = _hardCap; wallet = _wallet; }",0,"subgraph cluster_772_Crowdsale {
label=""Crowdsale"";
""772_postBuyTokens"" [label=""postBuyTokens""];
""772_hasStarted"" [label=""hasStarted""];
""772_fallback"" [label=""fallback""];
""772_getRate"" [label=""getRate""];
""772_forwardFunds"" [label=""forwardFunds""];
""772_validPurchase"" [label=""validPurchase""];
""772_Crowdsale"" [label=""Crowdsale""];
""772_buyTokens"" [label=""buyTokens""];
""772_hasEnded"" [label=""hasEnded""];
""772_buyTokens"" -> ""772_validPurchase"";
""772_fallback"" -> ""772_buyTokens"";
""772_buyTokens"" -> ""772_forwardFunds"";
""772_buyTokens"" -> ""772_getRate"";
""772_hasEnded"" -> ""772_getRate"";
""772_buyTokens"" -> ""772_postBuyTokens"";
}
"
0x9b481067ef9773d52efd0fb5b665a5dc0c8e1a68.sol,ERCDDAToken,"contract ERCDDAToken { address public owner; string public name; string public symbol; uint8 public decimals = 0; uint256 public totalSupply; event Transfer(address indexed from, address indexed to, uint256 value); event FrozenFunds(address target, bool frozen); event Burn(address indexed from, uint256 value); mapping (address => uint256) public balanceOf; mapping (address => bool) public frozenAccount; function owned() public { owner = msg.sender; }",0,"subgraph cluster_267_ERCDDAToken {
label=""ERCDDAToken"";
""267_freezeAccount"" [label=""freezeAccount""];
""267__transfer"" [label=""_transfer""];
""267_constructor"" [label=""constructor""];
""267_owned"" [label=""owned""];
""267_burn"" [label=""burn""];
""267_transfer"" [label=""transfer""];
""267_mintToken"" [label=""mintToken""];
""267_transfer"" -> ""267__transfer"";
""267_mintToken"" -> ""267_onlyOwner"";
""267_freezeAccount"" -> ""267_onlyOwner"";
""267_burn"" -> ""267_onlyOwner"";
}
"
0x72112ee2f2cfb1f8494e78e0c3166a77fb6a2d24.sol,DSToken,"contract DSToken is DSTokenBase(5000000000000000000000000), DSStop { string public symbol = ; uint8 public decimals = 18; event Freeze(address indexed guy, uint wad); event Mint(address indexed guy, uint wad); event Burn(address indexed guy, uint wad); function approve(address guy) public stoppable returns (bool) { return super.approve(guy, uint(-1)); }",0,"subgraph cluster_488_DSTokenBase {
label=""DSTokenBase"";
""488_allowance"" [label=""allowance""];
""488_approve"" [label=""approve""];
""488_frozenFunds"" [label=""frozenFunds""];
""488_constructor"" [label=""constructor""];
""488_transfer"" [label=""transfer""];
""488_totalSupply"" [label=""totalSupply""];
""488_transferFrom"" [label=""transferFrom""];
""488_balanceOf"" [label=""balanceOf""];
""488_transfer"" -> ""488_transferFrom"";
""488_transferFrom"" -> ""488_sub"";
""488_transferFrom"" -> ""488_add"";
}
"
0x39e5bd6ae0f2aa9240d2ae7fbf49e36f05dd339f.sol,EthereumUnlimited,"contract EthereumUnlimited is ERC20,PoSTokenStandard,Ownable { using SafeMath for uint256; string public name = ; string public symbol = ; uint public decimals = 18; uint public chainStartTime; uint public chainStartBlockNumber; uint public stakeStartTime; uint public stakeMinAge = 1 days; uint public stakeMaxAge = 365 days; uint public maxMintProofOfStake = 10**17; uint public totalSupply; uint public maxTotalSupply; uint public totalInitialSupply; uint public AirdropReward; uint public AirRewardmaxTotalSupply; uint public AirRewardTotalSupply; struct transferInStruct{ uint128 amount; uint64 time; }",0,"subgraph cluster_1399_EthereumUnlimited {
label=""EthereumUnlimited"";
""1399_ownerSetStakeStartTime"" [label=""ownerSetStakeStartTime""];
""1399_transferFrom"" [label=""transferFrom""];
""1399_checkPos"" [label=""checkPos""];
""1399_ownerBurnToken"" [label=""ownerBurnToken""];
""1399_getBlockNumber"" [label=""getBlockNumber""];
""1399_ResetAirdrop"" [label=""ResetAirdrop""];
""1399_getCoinAge"" [label=""getCoinAge""];
""1399_annualInterest"" [label=""annualInterest""];
""1399_batchTransfer"" [label=""batchTransfer""];
""1399_EthereumUnlimited"" [label=""EthereumUnlimited""];
""1399_mint"" [label=""mint""];
""1399_transfer"" [label=""transfer""];
""1399_getAirdrop"" [label=""getAirdrop""];
""1399_getProofOfStakeReward"" [label=""getProofOfStakeReward""];
""1399_coinAge"" [label=""coinAge""];
""1399_allowance"" [label=""allowance""];
""1399_balanceOf"" [label=""balanceOf""];
""1399_approve"" [label=""approve""];
""1399_getAirdrop"" -> ""1399_canGetAirdrop"";
""1399_batchTransfer"" -> ""1399_onlyOwner"";
""1399_getProofOfStakeReward"" -> ""1399_getCoinAge"";
""1399_ResetAirdrop"" -> ""1399_onlyOwner"";
""1399_transfer"" -> ""1399_onlyPayloadSize"";
""1399_transfer"" -> ""1399_mint"";
""1399_mint"" -> ""1399_getProofOfStakeReward"";
""1399_mint"" -> ""1399_canPoSMint"";
""1399_coinAge"" -> ""1399_getCoinAge"";
""1399_transferFrom"" -> ""1399_onlyPayloadSize"";
""1399_ownerBurnToken"" -> ""1399_onlyOwner"";
""1399_ownerSetStakeStartTime"" -> ""1399_onlyOwner"";
""1399_checkPos"" -> ""1399_getProofOfStakeReward"";
}
"
0xef266e135e0e11ec49c37f910c0a12dc99758323.sol,CC,"contract CC is SafeMath{ string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; address public owner; mapping (address => uint256) public balanceOf; mapping (address => uint256) public freezeOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event Freeze(address indexed from, uint256 value); event Unfreeze(address indexed from, uint256 value); function CC( uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol ) { balanceOf[msg.sender] = initialSupply; totalSupply = initialSupply; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; owner = msg.sender; }",0,"subgraph cluster_603_CC {
label=""CC"";
""603_freeze"" [label=""freeze""];
""603_approve"" [label=""approve""];
""603_CC"" [label=""CC""];
""603_unfreeze"" [label=""unfreeze""];
""603_burn"" [label=""burn""];
""603_transferFrom"" [label=""transferFrom""];
""603_transfer"" [label=""transfer""];
""603_fallback"" [label=""fallback""];
""603_withdrawEther"" [label=""withdrawEther""];
""603_transfer"" -> ""603_safeSub"";
""603_freeze"" -> ""603_safeSub"";
""603_transferFrom"" -> ""603_safeAdd"";
""603_unfreeze"" -> ""603_safeAdd"";
""603_transfer"" -> ""603_safeAdd"";
""603_transferFrom"" -> ""603_safeSub"";
""603_burn"" -> ""603_safeSub"";
""603_unfreeze"" -> ""603_safeSub"";
""603_freeze"" -> ""603_safeAdd"";
}
"
0xd9fb596c0ffe9f9ed0ad130beac7a2b8126013e1.sol,HoldPlatformDapps,"contract HoldPlatformDapps is EthereumSmartContract { event onCashbackCode (address indexed hodler, address cashbackcode); event onAffiliateBonus (address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 decimal, uint256 endtime); event onHoldplatform (address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 decimal, uint256 endtime); event onUnlocktoken (address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 decimal, uint256 endtime); event onUtilityfee (address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 decimal, uint256 endtime); event onReceiveAirdrop (address indexed hodler, uint256 amount, uint256 datetime); event onAddContract (address indexed hodler, address indexed tokenAddress, uint256 percent, string tokenSymbol, uint256 amount, uint256 endtime); event onTokenPrice (address indexed hodler, address indexed tokenAddress, uint256 Currentprice, uint256 ETHprice, uint256 ATHprice, uint256 ATLprice, uint256 ICOprice, uint256 Aprice, uint256 endtime); event onHoldAirdrop (address indexed hodler, address indexed tokenAddress, uint256 HPMstatus, uint256 d1, uint256 d2, uint256 d3,uint256 endtime); event onHoldDeposit (address indexed hodler, address indexed tokenAddress, uint256 amount, uint256 endtime); event onHoldWithdraw (address indexed hodler, address indexed tokenAddress, uint256 amount, uint256 endtime); event onUtilitySetting (address indexed hodler, address indexed tokenAddress, address indexed pwt, uint256 amount, uint256 ustatus, uint256 endtime); event onUtilityStatus (address indexed hodler, address indexed tokenAddress, uint256 ustatus, uint256 endtime); event onUtilityBurn (address indexed hodler, address indexed tokenAddress, uint256 uamount, uint256 bamount, uint256 endtime); struct Safe { uint256 id; uint256 amount; uint256 endtime; address user; address tokenAddress; string tokenSymbol; uint256 amountbalance; uint256 cashbackbalance; uint256 lasttime; uint256 percentage; uint256 percentagereceive; uint256 tokenreceive; uint256 lastwithdraw; address referrer; bool cashbackstatus; uint256 tokendecimal; uint256 startime; }",0,"subgraph cluster_3420_HoldPlatformDapps {
label=""HoldPlatformDapps"";
""3420_UnlockToken4"" [label=""UnlockToken4""];
""3420_GetUserSafesLength"" [label=""GetUserSafesLength""];
""3420_Holdplatform_Airdrop"" [label=""Holdplatform_Airdrop""];
""3420_AddContractAddress"" [label=""AddContractAddress""];
""3420_UnlockToken2"" [label=""UnlockToken2""];
""3420_Airdrop"" [label=""Airdrop""];
""3420_tothe_moon"" [label=""tothe_moon""];
""3420_WithdrawAffiliate"" [label=""WithdrawAffiliate""];
""3420_GetSafe"" [label=""GetSafe""];
""3420_Utility_Status"" [label=""Utility_Status""];
""3420_HodlTokens3"" [label=""HodlTokens3""];
""3420_constructor"" [label=""constructor""];
""3420_TokenPrice"" [label=""TokenPrice""];
""3420_Holdplatform_Deposit"" [label=""Holdplatform_Deposit""];
""3420_div"" [label=""div""];
""3420_fallback"" [label=""fallback""];
""3420_Utility_fee"" [label=""Utility_fee""];
""3420_HodlTokens2"" [label=""HodlTokens2""];
""3420_Utility_Address"" [label=""Utility_Address""];
""3420_CashbackCode"" [label=""CashbackCode""];
""3420_add"" [label=""add""];
""3420_sub"" [label=""sub""];
""3420_Utility_Setting"" [label=""Utility_Setting""];
""3420_tothemoon"" [label=""tothemoon""];
""3420_Utility_Burn"" [label=""Utility_Burn""];
""3420_GetTotalAffiliate"" [label=""GetTotalAffiliate""];
""3420_UnlockToken3"" [label=""UnlockToken3""];
""3420_mul"" [label=""mul""];
""3420_PayToken"" [label=""PayToken""];
""3420_Holdplatform_Withdraw"" [label=""Holdplatform_Withdraw""];
""3420_Holdplatform"" [label=""Holdplatform""];
""3420_Unlocktoken"" [label=""Unlocktoken""];
""3420_UnlockToken2"" -> ""3420_div"";
""3420_PayToken"" -> ""3420_sub"";
""3420_Holdplatform"" -> ""3420_div"";
""3420_Holdplatform"" -> ""3420_HodlTokens2"";
""3420_HodlTokens2"" -> ""3420_mul"";
""3420_Utility_Burn"" -> ""3420_add"";
""3420_Utility_Burn"" -> ""3420_sub"";
""3420_UnlockToken2"" -> ""3420_PayToken"";
""3420_tothe_moon"" -> ""3420_Unlocktoken"";
""3420_UnlockToken4"" -> ""3420_sub"";
""3420_Utility_Burn"" -> ""3420_restricted"";
""3420_AddContractAddress"" -> ""3420_restricted"";
""3420_tothemoon"" -> ""3420_tothe_moon"";
""3420_AddContractAddress"" -> ""3420_mul"";
""3420_AddContractAddress"" -> ""3420_div"";
""3420_Holdplatform_Airdrop"" -> ""3420_restricted"";
""3420_Holdplatform_Deposit"" -> ""3420_restricted"";
""3420_Utility_Status"" -> ""3420_restricted"";
""3420_Holdplatform"" -> ""3420_sub"";
""3420_WithdrawAffiliate"" -> ""3420_add"";
""3420_tothe_moon"" -> ""3420_WithdrawAffiliate"";
""3420_UnlockToken3"" -> ""3420_add"";
""3420_Holdplatform"" -> ""3420_Airdrop"";
""3420_Utility_fee"" -> ""3420_add"";
""3420_UnlockToken2"" -> ""3420_UnlockToken3"";
""3420_TokenPrice"" -> ""3420_restricted"";
""3420_UnlockToken4"" -> ""3420_Airdrop"";
""3420_HodlTokens2"" -> ""3420_HodlTokens3"";
""3420_fallback"" -> ""3420_tothe_moon"";
""3420_HodlTokens3"" -> ""3420_mul"";
""3420_HodlTokens2"" -> ""3420_add"";
""3420_UnlockToken4"" -> ""3420_PayToken"";
""3420_Holdplatform_Withdraw"" -> ""3420_restricted"";
""3420_Unlocktoken"" -> ""3420_UnlockToken2"";
""3420_Airdrop"" -> ""3420_div"";
""3420_UnlockToken2"" -> ""3420_add"";
""3420_UnlockToken4"" -> ""3420_mul"";
""3420_Utility_fee"" -> ""3420_div"";
""3420_Holdplatform"" -> ""3420_add"";
""3420_UnlockToken2"" -> ""3420_Airdrop"";
""3420_WithdrawAffiliate"" -> ""3420_sub"";
""3420_Airdrop"" -> ""3420_sub"";
""3420_Utility_Setting"" -> ""3420_restricted"";
""3420_Utility_Address"" -> ""3420_restricted"";
""3420_UnlockToken3"" -> ""3420_mul"";
""3420_WithdrawAffiliate"" -> ""3420_Airdrop"";
""3420_UnlockToken4"" -> ""3420_div"";
""3420_PayToken"" -> ""3420_add"";
""3420_HodlTokens3"" -> ""3420_div"";
""3420_UnlockToken2"" -> ""3420_mul"";
""3420_Holdplatform_Deposit"" -> ""3420_add"";
""3420_HodlTokens2"" -> ""3420_sub"";
""3420_UnlockToken2"" -> ""3420_sub"";
""3420_Airdrop"" -> ""3420_mul"";
""3420_UnlockToken3"" -> ""3420_sub"";
""3420_HodlTokens2"" -> ""3420_div"";
""3420_UnlockToken3"" -> ""3420_div"";
""3420_Utility_Setting"" -> ""3420_mul"";
""3420_UnlockToken3"" -> ""3420_UnlockToken4"";
""3420_HodlTokens3"" -> ""3420_add"";
}
"
0x1eafd303c88b6cd638c77b40596de3dcf001b249.sol,BalanceSheet,contract BalanceSheet is ClaimableEx { using SafeMath for uint256; mapping (address => uint256) private balances; AddressSet private holderSet; constructor() public { holderSet = new AddressSet(); },0,"subgraph cluster_893_BalanceSheet {
label=""BalanceSheet"";
""893_setBalance"" [label=""setBalance""];
""893_getTheNumberOfHolders"" [label=""getTheNumberOfHolders""];
""893_constructor"" [label=""constructor""];
""893_getHolder"" [label=""getHolder""];
""893_setBalanceBatch"" [label=""setBalanceBatch""];
""893_addBalance"" [label=""addBalance""];
""893_subBalance"" [label=""subBalance""];
""893__checkHolderSet"" [label=""_checkHolderSet""];
""893_balanceOf"" [label=""balanceOf""];
""893_setBalance"" -> ""893_onlyOwner"";
""893_addBalance"" -> ""893_onlyOwner"";
""893_setBalanceBatch"" -> ""893_setBalance"";
""893_setBalanceBatch"" -> ""893_onlyOwner"";
""893_subBalance"" -> ""893_onlyOwner"";
""893_setBalance"" -> ""893__checkHolderSet"";
""893_addBalance"" -> ""893__checkHolderSet"";
}
"
0x449af6e747078caa6beb4f17ff18a6d94966e28e.sol,HYIPRETH,"contract HYIPRETH is Ownable{ using SafeMath for uint256; mapping (address => uint256) public investedETH; mapping (address => uint256) public lastInvest; mapping (address => uint256) public affiliateCommision; address public promoter1 = address(0x87eC20E83594Ca7708d1304F5a1087c796e7DC2B); address public promoter2 = address(0x1Ca4F7Be21270da59C0BD806888A82583Ae48511); address public fund_account = address(0xaC35385b3CB696213ecd5ae40fD844290329280f); address public lastPotWinner; uint256 public pot = 0; event PotWinner(address indexed beneficiary, uint256 amount ); constructor () public { _owner = address(0x91d6fE2Fce15f1a0c7dbE4D9877ce800a7f23c12); }",0,"subgraph cluster_929_HYIPRETH {
label=""HYIPRETH"";
""929_getProfitFromSender"" [label=""getProfitFromSender""];
""929_maximumProfitUser"" [label=""maximumProfitUser""];
""929_updatePromoter2"" [label=""updatePromoter2""];
""929_getProfit"" [label=""getProfit""];
""929_constructor"" [label=""constructor""];
""929_getInvested"" [label=""getInvested""];
""929_withdrawAffiliateCommision"" [label=""withdrawAffiliateCommision""];
""929_getBalance"" [label=""getBalance""];
""929_getBonus"" [label=""getBonus""];
""929_getAffiliateCommision"" [label=""getAffiliateCommision""];
""929_fallback"" [label=""fallback""];
""929_max"" [label=""max""];
""929_updatePromoter1"" [label=""updatePromoter1""];
""929_random"" [label=""random""];
""929_withdraw"" [label=""withdraw""];
""929_min"" [label=""min""];
""929_getTotalNumberOfDeposits"" [label=""getTotalNumberOfDeposits""];
""929_investETH"" [label=""investETH""];
""929_updateDev"" [label=""updateDev""];
""929_getProfit"" -> ""929_getBonus"";
""929_investETH"" -> ""929_random"";
""929_withdraw"" -> ""929_maximumProfitUser"";
""929_maximumProfitUser"" -> ""929_getInvested"";
""929_updatePromoter2"" -> ""929_onlyOwner"";
""929_getProfit"" -> ""929_maximumProfitUser"";
""929_updatePromoter1"" -> ""929_onlyOwner"";
""929_investETH"" -> ""929_getProfit"";
""929_getProfitFromSender"" -> ""929_getProfit"";
""929_getBonus"" -> ""929_getInvested"";
""929_withdraw"" -> ""929_getProfit"";
""929_updateDev"" -> ""929_onlyOwner"";
}
"
0x07efd6e390222a45af4a25d0ce31c7710bf605bd.sol,SSDTokenSwap,"contract SSDTokenSwap is Guarded, Ownable { using SafeMath for uint256; mapping(address => uint256) contributions; uint256 contribCount = 0; string public version = ; uint256 public StartTime = 1506009600; uint256 public EndTime = 1506528000; uint256 public totalEtherCap = 200222 ether; uint256 public weiRaised = 0; uint256 public minContrib = 0.05 ether; address public wallet = 0x2E0fc8E431cc1b4721698c9e82820D7A71B88400; event Contribution(address indexed _contributor, uint256 _amount); function SSDTokenSwap() { }",0,"subgraph cluster_412_SSDTokenSwap {
label=""SSDTokenSwap"";
""412_forwardFunds"" [label=""forwardFunds""];
""412_validPurchase"" [label=""validPurchase""];
""412_setWallet"" [label=""setWallet""];
""412_hasEnded"" [label=""hasEnded""];
""412_setWeiRaised"" [label=""setWeiRaised""];
""412_processContributions"" [label=""processContributions""];
""412_setEndTime"" [label=""setEndTime""];
""412_fallback"" [label=""fallback""];
""412_SSDTokenSwap"" [label=""SSDTokenSwap""];
""412_setMinContribution"" [label=""setMinContribution""];
""412_isActive"" [label=""isActive""];
""412_setStartTime"" [label=""setStartTime""];
""412_processContributions"" -> ""412_validPurchase"";
""412_setStartTime"" -> ""412_onlyOwner"";
""412_setWeiRaised"" -> ""412_onlyOwner"";
""412_setWallet"" -> ""412_onlyOwner"";
""412_setEndTime"" -> ""412_onlyOwner"";
""412_fallback"" -> ""412_processContributions"";
""412_processContributions"" -> ""412_forwardFunds"";
""412_setMinContribution"" -> ""412_onlyOwner"";
}
"
0x70052a651eec65f98925e845820a0aa5749b033d.sol,ATxAssetProxy,"contract ATxAssetProxy is ERC20, Object, ServiceAllowance { using SafeMath for uint; event UpgradeProposal(address newVersion); address latestVersion; Platform public platform; bytes32 public smbl; string public name; modifier onlyPlatform() { if (msg.sender == address(platform)) { _; }",0,"subgraph cluster_1309_ATxAssetProxy {
label=""ATxAssetProxy"";
""1309_init"" [label=""init""];
""1309_approve"" [label=""approve""];
""1309_proposeUpgrade"" [label=""proposeUpgrade""];
""1309_decimals"" [label=""decimals""];
""1309_fallback"" [label=""fallback""];
""1309_stringToBytes32"" [label=""stringToBytes32""];
""1309_totalSupply"" [label=""totalSupply""];
""1309__getAsset"" [label=""_getAsset""];
""1309_transfer"" [label=""transfer""];
""1309___transferWithReference"" [label=""__transferWithReference""];
""1309_allowance"" [label=""allowance""];
""1309_transferWithReference"" [label=""transferWithReference""];
""1309_emitTransfer"" [label=""emitTransfer""];
""1309___approve"" [label=""__approve""];
""1309_platform"" [label=""platform""];
""1309_emitApprove"" [label=""emitApprove""];
""1309_isTransferAllowed"" [label=""isTransferAllowed""];
""1309___transferFromWithReference"" [label=""__transferFromWithReference""];
""1309_smbl"" [label=""smbl""];
""1309_transferFrom"" [label=""transferFrom""];
""1309__transferWithReference"" [label=""_transferWithReference""];
""1309_balanceOf"" [label=""balanceOf""];
""1309_getLatestVersion"" [label=""getLatestVersion""];
""1309_transferFrom"" -> ""1309__getAsset"";
""1309_approve"" -> ""1309__getAsset"";
""1309__getAsset"" -> ""1309_getLatestVersion"";
""1309_transferWithReference"" -> ""1309__transferWithReference"";
""1309_emitTransfer"" -> ""1309_onlyPlatform"";
""1309_proposeUpgrade"" -> ""1309_onlyAssetOwner"";
""1309___transferWithReference"" -> ""1309_onlyAccess"";
""1309_init"" -> ""1309_stringToBytes32"";
""1309___approve"" -> ""1309_onlyAccess"";
""1309_fallback"" -> ""1309__getAsset"";
""1309_emitApprove"" -> ""1309_onlyPlatform"";
""1309___transferFromWithReference"" -> ""1309_onlyAccess"";
""1309__transferWithReference"" -> ""1309__getAsset"";
""1309_transfer"" -> ""1309__transferWithReference"";
}
"
0x94588247e31dd13c6fbecda4cea7b91533b57246.sol,BurnableToken,"contract BurnableToken is BasicToken { event Burn(address indexed burner, uint256 value); function burn(uint256 _value) public { _burn(msg.sender, _value); }",0,"subgraph cluster_898_StandardBurnableToken {
label=""StandardBurnableToken"";
""898_burnFrom"" [label=""burnFrom""];
""898_burnFrom"" -> ""898__burn"";
}
"
0x1903d83dedefedaf6cfee5828e7e66ae6a2e1d97.sol,BatCave,contract BatCave is Pausable { uint256 public EGGS_TO_HATCH_1BAT = 86400; uint256 public STARTING_BAT = 300; uint256 PSN = 10000; uint256 PSNH = 5000; address public batman; address public superman; address public aquaman; mapping(address => uint256) public hatcheryBat; mapping(address => uint256) public claimedEggs; mapping(address => uint256) public lastHatch; mapping(address => address) public referrals; mapping (address => uint256) realRef; uint256 public marketEggs; function BatCave() public{ paused = false; },0,"subgraph cluster_958_BatCave {
label=""BatCave"";
""958_getMyBat"" [label=""getMyBat""];
""958_devFee"" [label=""devFee""];
""958_calculateEggBuy"" [label=""calculateEggBuy""];
""958_seedMarket"" [label=""seedMarket""];
""958_calculateEggBuySimple"" [label=""calculateEggBuySimple""];
""958_sellEggs"" [label=""sellEggs""];
""958_hatchEggs"" [label=""hatchEggs""];
""958_getEggsSinceLastHatch"" [label=""getEggsSinceLastHatch""];
""958_calculateTrade"" [label=""calculateTrade""];
""958_setSuperman"" [label=""setSuperman""];
""958_setAquaman"" [label=""setAquaman""];
""958_getMyEggs"" [label=""getMyEggs""];
""958_calculateEggSell"" [label=""calculateEggSell""];
""958_withdraw"" [label=""withdraw""];
""958_buyEggs"" [label=""buyEggs""];
""958_setBatman"" [label=""setBatman""];
""958_setRealRef"" [label=""setRealRef""];
""958_BatCave"" [label=""BatCave""];
""958_min"" [label=""min""];
""958_getBalance"" [label=""getBalance""];
""958_getFreeBat"" [label=""getFreeBat""];
""958_calculateEggBuySimple"" -> ""958_calculateEggBuy"";
""958_sellEggs"" -> ""958_devFee"";
""958_setAquaman"" -> ""958_onlyOwner"";
""958_getFreeBat"" -> ""958_whenNotPaused"";
""958_hatchEggs"" -> ""958_whenNotPaused"";
""958_buyEggs"" -> ""958_devFee"";
""958_getMyEggs"" -> ""958_getEggsSinceLastHatch"";
""958_hatchEggs"" -> ""958_getMyEggs"";
""958_sellEggs"" -> ""958_whenNotPaused"";
""958_buyEggs"" -> ""958_whenNotPaused"";
""958_calculateEggBuy"" -> ""958_calculateTrade"";
""958_withdraw"" -> ""958_onlyDCFamily"";
""958_calculateEggSell"" -> ""958_calculateTrade"";
""958_sellEggs"" -> ""958_getMyEggs"";
""958_setBatman"" -> ""958_onlyOwner"";
""958_getEggsSinceLastHatch"" -> ""958_min"";
""958_setSuperman"" -> ""958_onlyOwner"";
""958_sellEggs"" -> ""958_calculateEggSell"";
""958_setRealRef"" -> ""958_onlyOwner"";
""958_buyEggs"" -> ""958_calculateEggBuy"";
}
"
0xe344757aea83ac838f22e757991489993e5d3760.sol,BdpImageStorage,contract BdpImageStorage is BdpBase { using SafeMath for uint256; struct Image { address owner; uint256 regionId; uint256 currentRegionId; mapping(uint16 => uint256[1000]) data; mapping(uint16 => uint16) dataLength; uint16 partsCount; uint16 width; uint16 height; uint16 imageDescriptor; uint256 blurredAt; },0,"subgraph cluster_1540_BdpImageStorage {
label=""BdpImageStorage"";
""1540_getLastImageId"" [label=""getLastImageId""];
""1540_imageUploadComplete"" [label=""imageUploadComplete""];
""1540_deleteImage"" [label=""deleteImage""];
""1540_setImageDataLength"" [label=""setImageDataLength""];
""1540_getImageOwner"" [label=""getImageOwner""];
""1540_setImageBlurredAt"" [label=""setImageBlurredAt""];
""1540_getImageCurrentRegionId"" [label=""getImageCurrentRegionId""];
""1540_getNextImageId"" [label=""getNextImageId""];
""1540_getImageDataLength"" [label=""getImageDataLength""];
""1540_setImageHeight"" [label=""setImageHeight""];
""1540_setImagePartsCount"" [label=""setImagePartsCount""];
""1540_createImage"" [label=""createImage""];
""1540_setImageWidth"" [label=""setImageWidth""];
""1540_getImageDescriptor"" [label=""getImageDescriptor""];
""1540_getImageBlurredAt"" [label=""getImageBlurredAt""];
""1540_getImageRegionId"" [label=""getImageRegionId""];
""1540_imageExists"" [label=""imageExists""];
""1540_getImageWidth"" [label=""getImageWidth""];
""1540_setImageCurrentRegionId"" [label=""setImageCurrentRegionId""];
""1540_setImageOwner"" [label=""setImageOwner""];
""1540_getImageData"" [label=""getImageData""];
""1540_setImageDescriptor"" [label=""setImageDescriptor""];
""1540_setImageData"" [label=""setImageData""];
""1540_BdpImageStorage"" [label=""BdpImageStorage""];
""1540_getImageHeight"" [label=""getImageHeight""];
""1540_getImagePartsCount"" [label=""getImagePartsCount""];
""1540_setImageRegionId"" [label=""setImageRegionId""];
""1540_getImageRegionId"" -> ""1540_imageExists"";
""1540_getImageData"" -> ""1540_imageExists"";
""1540_getImageDataLength"" -> ""1540_imageExists"";
""1540_setImageOwner"" -> ""1540_storageAccessControl"";
""1540_setImageRegionId"" -> ""1540_storageAccessControl"";
""1540_setImageRegionId"" -> ""1540_imageExists"";
""1540_setImageWidth"" -> ""1540_imageExists"";
""1540_getImagePartsCount"" -> ""1540_imageExists"";
""1540_setImageData"" -> ""1540_storageAccessControl"";
""1540_setImageData"" -> ""1540_imageExists"";
""1540_getImageCurrentRegionId"" -> ""1540_imageExists"";
""1540_getImageWidth"" -> ""1540_imageExists"";
""1540_setImageWidth"" -> ""1540_storageAccessControl"";
""1540_setImagePartsCount"" -> ""1540_imageExists"";
""1540_createImage"" -> ""1540_storageAccessControl"";
""1540_imageUploadComplete"" -> ""1540_imageExists"";
""1540_createImage"" -> ""1540_getNextImageId"";
""1540_setImageDataLength"" -> ""1540_imageExists"";
""1540_getNextImageId"" -> ""1540_storageAccessControl"";
""1540_setImagePartsCount"" -> ""1540_storageAccessControl"";
""1540_setImageOwner"" -> ""1540_imageExists"";
""1540_deleteImage"" -> ""1540_imageExists"";
""1540_setImageHeight"" -> ""1540_storageAccessControl"";
""1540_setImageDescriptor"" -> ""1540_storageAccessControl"";
""1540_getImageOwner"" -> ""1540_imageExists"";
""1540_getImageDescriptor"" -> ""1540_imageExists"";
""1540_setImageDataLength"" -> ""1540_storageAccessControl"";
""1540_setImageBlurredAt"" -> ""1540_storageAccessControl"";
""1540_getImageHeight"" -> ""1540_imageExists"";
""1540_setImageCurrentRegionId"" -> ""1540_storageAccessControl"";
""1540_setImageCurrentRegionId"" -> ""1540_imageExists"";
""1540_deleteImage"" -> ""1540_storageAccessControl"";
""1540_setImageDescriptor"" -> ""1540_imageExists"";
""1540_setImageHeight"" -> ""1540_imageExists"";
}
"
0xa5bd843ea5fbf56e1579f7d99fb68efe4e07185f.sol,TokenERC20,"contract TokenERC20 { string public name ; string public symbol ; uint8 public decimals = 18; uint256 public totalSupply; address public owner; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event AddSupply(address indexed from, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; owner = msg.sender; }",0,"subgraph cluster_549_TokenERC20 {
label=""TokenERC20"";
""549_burnFrom"" [label=""burnFrom""];
""549_approve"" [label=""approve""];
""549__transfer"" [label=""_transfer""];
""549_transfer"" [label=""transfer""];
""549_burn"" [label=""burn""];
""549_decreaseApproval"" [label=""decreaseApproval""];
""549_transferFrom"" [label=""transferFrom""];
""549_TokenERC20"" [label=""TokenERC20""];
""549_increaseApproval"" [label=""increaseApproval""];
""549_addSupply"" [label=""addSupply""];
""549_approveAndCall"" [label=""approveAndCall""];
""549_approveAndCall"" -> ""549_approve"";
""549_transfer"" -> ""549__transfer"";
""549_transferFrom"" -> ""549__transfer"";
}
"
0x58054e51c19fa796443043418be91032b99992a3.sol,iGniter,contract iGniter is SafeMath { struct serPayment { uint unlockedTime; uint256 unlockedBlockNumber; },0,"subgraph cluster_1077_iGniter {
label=""iGniter"";
""1077_transferFrom"" [label=""transferFrom""];
""1077_balanceOf"" [label=""balanceOf""];
""1077_updateCost"" [label=""updateCost""];
""1077_servicePayment"" [label=""servicePayment""];
""1077_allowance"" [label=""allowance""];
""1077_assignInitialAddresses"" [label=""assignInitialAddresses""];
""1077_symbol"" [label=""symbol""];
""1077_currentBlock"" [label=""currentBlock""];
""1077_initialiGnSupply"" [label=""initialiGnSupply""];
""1077_completeBountyAddresses"" [label=""completeBountyAddresses""];
""1077_name"" [label=""name""];
""1077_totalSupply"" [label=""totalSupply""];
""1077_minedTotalSupply"" [label=""minedTotalSupply""];
""1077_blockDiff"" [label=""blockDiff""];
""1077_PaymentStatusBlockNum"" [label=""PaymentStatusBlockNum""];
""1077_PaymentStatusTimeStamp"" [label=""PaymentStatusTimeStamp""];
""1077_assignBountyAddresses"" [label=""assignBountyAddresses""];
""1077_transfer"" [label=""transfer""];
""1077_approve"" [label=""approve""];
""1077_iGniter"" [label=""iGniter""];
""1077_decimals"" [label=""decimals""];
""1077_isContract"" [label=""isContract""];
""1077_burn"" [label=""burn""];
""1077_completeBountyAddresses"" -> ""1077_isOwner"";
""1077_assignBountyAddresses"" -> ""1077_isOwner"";
""1077_updateCost"" -> ""1077_isOwner"";
""1077_transfer"" -> ""1077_isContract"";
""1077_assignInitialAddresses"" -> ""1077_isOwner"";
}
"
0x841d34af2018d9487199678edd47dd46b140690b.sol,BURNToken,"contract BURNToken is ERC20Interface { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 1 * 10**uint(decimals); balances[msg.sender] = _totalSupply; emit Transfer(address(0), msg.sender, _totalSupply); }",0,"subgraph cluster_496_BURNToken {
label=""BURNToken"";
""496_fallback"" [label=""fallback""];
""496_constructor"" [label=""constructor""];
""496_burn"" [label=""burn""];
""496_transfer"" [label=""transfer""];
""496_approve"" [label=""approve""];
""496_balanceOf"" [label=""balanceOf""];
""496_approveAndCall"" [label=""approveAndCall""];
""496_allowance"" [label=""allowance""];
""496_transferFrom"" [label=""transferFrom""];
""496_totalSupply"" [label=""totalSupply""];
""496_fallback"" -> ""496_burn"";
}
"
0x4045253edc2986c1c4800c3ce0cf0f5fb3c683e5.sol,BIMGToken,"contract BIMGToken is StandardToken, Pausable { string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 18; struct LockToken{ uint256 amount; uint32 time; }",0,"subgraph cluster_912_BIMGToken {
label=""BIMGToken"";
""912_getLockAmount"" [label=""getLockAmount""];
""912_transfer"" [label=""transfer""];
""912_transferFrom"" [label=""transferFrom""];
""912_canUseLock"" [label=""canUseLock""];
""912_getLockByIdx"" [label=""getLockByIdx""];
""912_setLockAdmin"" [label=""setLockAdmin""];
""912_getLockListLen"" [label=""getLockListLen""];
""912_constructor"" [label=""constructor""];
""912_transferWithLock"" [label=""transferWithLock""];
""912_setLockAdmin"" -> ""912_onlyOwner"";
""912_transferFrom"" -> ""912_transferFrom"";
""912_transferWithLock"" -> ""912_whenNotPaused"";
""912_transfer"" -> ""912_transfer"";
""912_transferFrom"" -> ""912_getLockAmount"";
""912_transferWithLock"" -> ""912_transfer"";
""912_transfer"" -> ""912_whenNotPaused"";
""912_transfer"" -> ""912_getLockAmount"";
""912_transferFrom"" -> ""912_whenNotPaused"";
}
"
0xa21c9a3ae47103b1fd1dfa04766c4d00c19e1ff6.sol,CryptoOscarsToken,"contract CryptoOscarsToken is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.001 ether; uint256 private constant PROMO_CREATION_LIMIT = 20000; mapping (uint256 => address) public movieIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public movieIndexToApproved; mapping (uint256 => uint256) private movieIndexToPrice; address public ceoAddress; address public cooAddress; uint256 public promoCreatedCount; struct Movie { string name; }",0,"subgraph cluster_930_CryptoOscarsToken {
label=""CryptoOscarsToken"";
""930_approve"" [label=""approve""];
""930_balanceOf"" [label=""balanceOf""];
""930_transfer"" [label=""transfer""];
""930_ownerOf"" [label=""ownerOf""];
""930_payout"" [label=""payout""];
""930_takeOwnership"" [label=""takeOwnership""];
""930_totalSupply"" [label=""totalSupply""];
""930__createMovie"" [label=""_createMovie""];
""930_setCOO"" [label=""setCOO""];
""930_CryptoMoviesToken"" [label=""CryptoMoviesToken""];
""930_setCEO"" [label=""setCEO""];
""930__payout"" [label=""_payout""];
""930_tokensOfOwner"" [label=""tokensOfOwner""];
""930__addressNotNull"" [label=""_addressNotNull""];
""930_priceOf"" [label=""priceOf""];
""930_createContractMovie"" [label=""createContractMovie""];
""930__transfer"" [label=""_transfer""];
""930_name"" [label=""name""];
""930_purchase"" [label=""purchase""];
""930__approved"" [label=""_approved""];
""930_createPromoMovie"" [label=""createPromoMovie""];
""930_symbol"" [label=""symbol""];
""930__owns"" [label=""_owns""];
""930_transferFrom"" [label=""transferFrom""];
""930_getMovie"" [label=""getMovie""];
""930_implementsERC721"" [label=""implementsERC721""];
""930_transferFrom"" -> ""930__addressNotNull"";
""930_takeOwnership"" -> ""930__approved"";
""930_transferFrom"" -> ""930__approved"";
""930_createContractMovie"" -> ""930_onlyCOO"";
""930_setCEO"" -> ""930_onlyCEO"";
""930_purchase"" -> ""930__transfer"";
""930_purchase"" -> ""930__addressNotNull"";
""930_payout"" -> ""930_onlyCLevel"";
""930__createMovie"" -> ""930__transfer"";
""930_payout"" -> ""930__payout"";
""930_createContractMovie"" -> ""930__createMovie"";
""930_createPromoMovie"" -> ""930_onlyCOO"";
""930_tokensOfOwner"" -> ""930_balanceOf"";
""930_createPromoMovie"" -> ""930__createMovie"";
""930_takeOwnership"" -> ""930__addressNotNull"";
""930_setCOO"" -> ""930_onlyCEO"";
""930_transferFrom"" -> ""930__transfer"";
""930_transferFrom"" -> ""930__owns"";
""930_tokensOfOwner"" -> ""930_totalSupply"";
""930_transfer"" -> ""930__owns"";
""930_takeOwnership"" -> ""930__transfer"";
""930_approve"" -> ""930__owns"";
""930_transfer"" -> ""930__addressNotNull"";
""930_transfer"" -> ""930__transfer"";
}
"
0xd0f1a56f4bd5a9b992c91624b0d405a47cb251e6.sol,AirDrop,"contract AirDrop is OwnableWithAdmin { using SafeMath for uint256; uint256 private constant DECIMALFACTOR = 10**uint256(18); event FundsBooked(address backer, uint256 amount, bool isContribution); event LogTokenClaimed(address indexed _recipient, uint256 _amountClaimed, uint256 _totalAllocated, uint256 _grandTotalClaimed); event LogNewAllocation(address indexed _recipient, uint256 _totalAllocated); event LogRemoveAllocation(address indexed _recipient, uint256 _tokenAmountRemoved); event LogOwnerSetAllocation(address indexed _recipient, uint256 _totalAllocated); event LogTest(); uint256 public grandTotalClaimed = 0; ERC20 public token; uint256 public tokensTotal = 0; uint256 public hardCap = 0; mapping (address => uint256) public allocationsTotal; mapping (address => uint256) public totalClaimed; mapping(address => bool) public buyers; mapping(address => bool) public buyersReceived; address[] public addresses; constructor(ERC20 _token) public { require(_token != address(0)); token = _token; }",0,"subgraph cluster_839_AirDrop {
label=""AirDrop"";
""839_refundTokens"" [label=""refundTokens""];
""839_distributeManyTokens"" [label=""distributeManyTokens""];
""839_withdrawTokens"" [label=""withdrawTokens""];
""839_setAllocation"" [label=""setAllocation""];
""839_fallback"" [label=""fallback""];
""839_getListOfAddresses"" [label=""getListOfAddresses""];
""839__setAllocation"" [label=""_setAllocation""];
""839_removeAllocation"" [label=""removeAllocation""];
""839_returnTokens"" [label=""returnTokens""];
""839_checkAvailableTokens"" [label=""checkAvailableTokens""];
""839_distributeTokens"" [label=""distributeTokens""];
""839_setManyAllocations"" [label=""setManyAllocations""];
""839__validateHardCap"" [label=""_validateHardCap""];
""839_constructor"" [label=""constructor""];
""839_removeAllocation"" -> ""839_onlyOwner"";
""839_setManyAllocations"" -> ""839_onlyOwnerOrAdmin"";
""839_setAllocation"" -> ""839_onlyOwnerOrAdmin"";
""839_setManyAllocations"" -> ""839_setAllocation"";
""839_distributeManyTokens"" -> ""839_onlyOwnerOrAdmin"";
""839_refundTokens"" -> ""839_onlyOwner"";
""839_setAllocation"" -> ""839__setAllocation"";
""839_setAllocation"" -> ""839__validateHardCap"";
""839_distributeManyTokens"" -> ""839_distributeTokens"";
""839_withdrawTokens"" -> ""839_distributeTokens"";
""839_returnTokens"" -> ""839_onlyOwner"";
""839_getListOfAddresses"" -> ""839_onlyOwnerOrAdmin"";
}
"
0xd4c2a5c4be6ec37a84a78382c6c7368651d8b443.sol,Operable,contract Operable is Pausable { event OperatorAdded(address indexed account); event OperatorRemoved(address indexed account); mapping (address => bool) private _operators; constructor() public { _addOperator(msg.sender); },0,"subgraph cluster_291_Operable {
label=""Operable"";
""291_addOperator"" [label=""addOperator""];
""291_isOperator"" [label=""isOperator""];
""291__addOperator"" [label=""_addOperator""];
""291_removeOperator"" [label=""removeOperator""];
""291__removeOperator"" [label=""_removeOperator""];
""291_constructor"" [label=""constructor""];
""291_addOperator"" -> ""291_onlyOwner"";
""291_addOperator"" -> ""291__addOperator"";
""291_removeOperator"" -> ""291__removeOperator"";
""291_removeOperator"" -> ""291_onlyOwner"";
""291_constructor"" -> ""291__addOperator"";
}
"
0x0da29f924c83b623ea25aa95eedcba060b8d7e12.sol,VeloxCrowdsale,"contract VeloxCrowdsale is Ownable { using SafeMath for uint256; ERC20 public token; uint256 public startTime; uint256 public endTime; uint256 public rate; uint256 public cap; address public wallet; uint256 public sold; constructor( uint256 _startTime, uint256 _endTime, uint256 _rate, uint256 _cap, address _wallet, ERC20 _token ) public { require(_startTime >= block.timestamp && _endTime >= _startTime); require(_rate > 0); require(_cap > 0); require(_wallet != address(0)); require(_token != address(0)); startTime = _startTime; endTime = _endTime; rate = _rate; cap = _cap; wallet = _wallet; token = _token; }",0,"subgraph cluster_545_VeloxCrowdsale {
label=""VeloxCrowdsale"";
""545_capReached"" [label=""capReached""];
""545_forwardFunds"" [label=""forwardFunds""];
""545_fallback"" [label=""fallback""];
""545_constructor"" [label=""constructor""];
""545_buyTokens"" [label=""buyTokens""];
""545_finalize"" [label=""finalize""];
""545_fallback"" -> ""545_buyTokens"";
""545_finalize"" -> ""545_onlyOwner"";
""545_forwardFunds"" -> ""545_onlyOwner"";
}
"
0x89b5eaec2702ab0ff33ca397b3e66c7d925d5144.sol,Soccer,"contract Soccer { using SafeMath for uint256; event Birth(uint256 tokenId, uint256 startPrice); event TokenSold(uint256 indexed tokenId, uint256 price, address prevOwner, address winner); event Transfer(address indexed from, address indexed to, uint256 tokenId); event Approval(address indexed owner, address indexed approved, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; struct Token { address owner; uint256 price; }",0,"subgraph cluster_1466_Soccer {
label=""Soccer"";
""1466__handle"" [label=""_handle""];
""1466_getInitialPriceOfToken"" [label=""getInitialPriceOfToken""];
""1466_symbol"" [label=""symbol""];
""1466__approved"" [label=""_approved""];
""1466_transfer"" [label=""transfer""];
""1466_unlockPriceChange"" [label=""unlockPriceChange""];
""1466_setCOO"" [label=""setCOO""];
""1466_Soccer"" [label=""Soccer""];
""1466__owns"" [label=""_owns""];
""1466_changePrice"" [label=""changePrice""];
""1466_ownerOf"" [label=""ownerOf""];
""1466__addressNotNull"" [label=""_addressNotNull""];
""1466__transfer"" [label=""_transfer""];
""1466_lockPriceChange"" [label=""lockPriceChange""];
""1466_getNextPrice"" [label=""getNextPrice""];
""1466_isContract"" [label=""isContract""];
""1466_getTotalSupply"" [label=""getTotalSupply""];
""1466_payout"" [label=""payout""];
""1466_takeOwnership"" [label=""takeOwnership""];
""1466_setCEO"" [label=""setCEO""];
""1466_buyToken"" [label=""buyToken""];
""1466_createPromoCollectible"" [label=""createPromoCollectible""];
""1466_approve"" [label=""approve""];
""1466__payout"" [label=""_payout""];
""1466_priceOf"" [label=""priceOf""];
""1466_name"" [label=""name""];
""1466_tokensOfOwner"" [label=""tokensOfOwner""];
""1466_balanceOf"" [label=""balanceOf""];
""1466_implementsERC721"" [label=""implementsERC721""];
""1466_transferFrom"" [label=""transferFrom""];
""1466__addLastOwner"" [label=""_addLastOwner""];
""1466_getToken"" [label=""getToken""];
""1466_buyToken"" -> ""1466__handle"";
""1466_buyToken"" -> ""1466_isContract"";
""1466_getToken"" -> ""1466_getInitialPriceOfToken"";
""1466_takeOwnership"" -> ""1466__approved"";
""1466_tokensOfOwner"" -> ""1466_getTotalSupply"";
""1466_changePrice"" -> ""1466__owns"";
""1466_createPromoCollectible"" -> ""1466_getInitialPriceOfToken"";
""1466_createPromoCollectible"" -> ""1466__transfer"";
""1466_takeOwnership"" -> ""1466__addressNotNull"";
""1466_transfer"" -> ""1466__addressNotNull"";
""1466_transfer"" -> ""1466__transfer"";
""1466_createPromoCollectible"" -> ""1466_onlyCLevel"";
""1466_buyToken"" -> ""1466__addLastOwner"";
""1466_payout"" -> ""1466__payout"";
""1466_setCOO"" -> ""1466_onlyCEO"";
""1466_priceOf"" -> ""1466_getInitialPriceOfToken"";
""1466_setCEO"" -> ""1466_onlyCEO"";
""1466_unlockPriceChange"" -> ""1466_onlyCLevel"";
""1466_transferFrom"" -> ""1466__owns"";
""1466_lockPriceChange"" -> ""1466_onlyCLevel"";
""1466_payout"" -> ""1466_onlyCLevel"";
""1466_buyToken"" -> ""1466_getNextPrice"";
""1466_transferFrom"" -> ""1466__addressNotNull"";
""1466_transferFrom"" -> ""1466__approved"";
""1466_transfer"" -> ""1466__owns"";
""1466_takeOwnership"" -> ""1466__transfer"";
""1466_approve"" -> ""1466__owns"";
""1466_transferFrom"" -> ""1466__transfer"";
""1466_tokensOfOwner"" -> ""1466_balanceOf"";
""1466_getToken"" -> ""1466_getNextPrice"";
""1466_buyToken"" -> ""1466_getInitialPriceOfToken"";
}
"
0xef02c45c5913629dd12e7a9446455049775eec32.sol,RuletkaIo,"contract RuletkaIo { event partyOver(uint256 roomId, address victim, address[] winners); event newPlayer(uint256 roomId, address player); event fullRoom(uint256 roomId); event roomRefunded(uint256 _roomId, address[] refundedPlayers); address CTO; address CEO; Room[] private allRooms; function () public payable {}",0,"subgraph cluster_648_RuletkaIo {
label=""RuletkaIo"";
""648_enter"" [label=""enter""];
""648_payout"" [label=""payout""];
""648_setCEO"" [label=""setCEO""];
""648_getRoom"" [label=""getRoom""];
""648_fallback"" [label=""fallback""];
""648_random"" [label=""random""];
""648_distributeFunds"" [label=""distributeFunds""];
""648_setCTO"" [label=""setCTO""];
""648_enterWithReferral"" [label=""enterWithReferral""];
""648_refundPlayersInRoom"" [label=""refundPlayersInRoom""];
""648_createRoom"" [label=""createRoom""];
""648_RuletkaIo"" [label=""RuletkaIo""];
""648__payout"" [label=""_payout""];
""648_executeRoom"" [label=""executeRoom""];
""648_setCTO"" -> ""648_onlyCTO"";
""648_executeRoom"" -> ""648_random"";
""648_payout"" -> ""648_onlyCTO"";
""648_payout"" -> ""648__payout"";
""648_refundPlayersInRoom"" -> ""648_onlyCTO"";
""648_createRoom"" -> ""648_onlyCTO"";
""648_executeRoom"" -> ""648_distributeFunds"";
""648_enter"" -> ""648_executeRoom"";
""648_enterWithReferral"" -> ""648_executeRoom"";
""648_setCEO"" -> ""648_onlyCTO"";
}
"
0xaa652d53909b01c5a6b8e7cd814f9adea18c08f7.sol,TCRSale,"contract TCRSale is Pausable { using SafeMath for uint256; address public beneficiary; uint public fundingGoal; uint public fundingCap; uint public minContribution; bool public fundingGoalReached = false; bool public fundingCapReached = false; bool public saleClosed = false; uint public startTime; uint public endTime; uint public amountRaised; uint public refundAmount; uint public rate = 10000; uint public constant LOW_RANGE_RATE = 500; uint public constant HIGH_RANGE_RATE = 20000; bool private rentrancy_lock = false; TCRToken public tokenReward; mapping(address => uint256) public balanceOf; event GoalReached(address _beneficiary, uint _amountRaised); event CapReached(address _beneficiary, uint _amountRaised); event FundTransfer(address _backer, uint _amount, bool _isContribution); modifier beforeDeadline() { require (currentTime() < endTime); _; }",0,"subgraph cluster_1585_TCRSale {
label=""TCRSale"";
""1585_convertToMiniTcr"" [label=""convertToMiniTcr""];
""1585_terminate"" [label=""terminate""];
""1585_changeEndTime"" [label=""changeEndTime""];
""1585_safeWithdrawal"" [label=""safeWithdrawal""];
""1585_setRate"" [label=""setRate""];
""1585_ownerSafeWithdrawal"" [label=""ownerSafeWithdrawal""];
""1585_changeStartTime"" [label=""changeStartTime""];
""1585_checkFundingGoal"" [label=""checkFundingGoal""];
""1585_checkFundingCap"" [label=""checkFundingCap""];
""1585_ownerUnlockFund"" [label=""ownerUnlockFund""];
""1585_ownerAllocateTokens"" [label=""ownerAllocateTokens""];
""1585_TCRSale"" [label=""TCRSale""];
""1585_fallback"" [label=""fallback""];
""1585_currentTime"" [label=""currentTime""];
""1585_fallback"" -> ""1585_whenNotPaused"";
""1585_ownerAllocateTokens"" -> ""1585_checkFundingGoal"";
""1585_fallback"" -> ""1585_beforeDeadline"";
""1585_fallback"" -> ""1585_checkFundingCap"";
""1585_ownerUnlockFund"" -> ""1585_onlyOwner"";
""1585_ownerSafeWithdrawal"" -> ""1585_onlyOwner"";
""1585_fallback"" -> ""1585_nonReentrant"";
""1585_ownerAllocateTokens"" -> ""1585_nonReentrant"";
""1585_ownerAllocateTokens"" -> ""1585_onlyOwner"";
""1585_setRate"" -> ""1585_onlyOwner"";
""1585_TCRSale"" -> ""1585_setRate"";
""1585_changeEndTime"" -> ""1585_onlyOwner"";
""1585_safeWithdrawal"" -> ""1585_afterDeadline"";
""1585_ownerAllocateTokens"" -> ""1585_checkFundingCap"";
""1585_fallback"" -> ""1585_checkFundingGoal"";
""1585_terminate"" -> ""1585_onlyOwner"";
""1585_ownerUnlockFund"" -> ""1585_afterDeadline"";
""1585_fallback"" -> ""1585_afterStartTime"";
""1585_changeStartTime"" -> ""1585_onlyOwner"";
""1585_safeWithdrawal"" -> ""1585_nonReentrant"";
""1585_ownerSafeWithdrawal"" -> ""1585_nonReentrant"";
""1585_fallback"" -> ""1585_saleNotClosed"";
}
"
0xa555042f07bfd19e251cc21c84c35725a47d4c66.sol,LambdaLock,contract LambdaLock { using SafeMath for uint256; Lambda internal LambdaToken; uint256 internal genesisTime= 1545872400; uint256 internal ONE_MONTHS = 2592000; address internal beneficiaryAddress; struct Claim { uint256 pct; uint256 delay; bool claimed; },0,"subgraph cluster_761_LambdaLock {
label=""LambdaLock"";
""761_getBeneficiary"" [label=""getBeneficiary""];
""761_getTotalClaimable"" [label=""getTotalClaimable""];
""761_claim"" [label=""claim""];
}
"
0x28152e02be1e8af3bec836d434798aec1143d7ee.sol,GOMO_NETWORK,"contract GOMO_NETWORK is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public deadline = now + 50 * 1 days; uint public round2 = now + 50 * 1 days; uint public round1 = now + 40 * 1 days; uint256 public totalSupply = 35000000e18; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 1000; uint256 public tokensPerEth = 500000e18; uint public target0drop = 100000; uint public progress0drop = 0; address multisig = 0x09E69EF1029F9870225942E153D25B12E263394C; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_1263_GOMO_NETWORK {
label=""GOMO_NETWORK"";
""1263_withdraw"" [label=""withdraw""];
""1263_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1263_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1263_transfer"" [label=""transfer""];
""1263_transferFrom"" [label=""transferFrom""];
""1263_distr"" [label=""distr""];
""1263_getTokens"" [label=""getTokens""];
""1263_Distribute"" [label=""Distribute""];
""1263_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1263_constructor"" [label=""constructor""];
""1263_approve"" [label=""approve""];
""1263_burn"" [label=""burn""];
""1263_fallback"" [label=""fallback""];
""1263_add"" [label=""add""];
""1263_getTokenBalance"" [label=""getTokenBalance""];
""1263_finishDistribution"" [label=""finishDistribution""];
""1263_balanceOf"" [label=""balanceOf""];
""1263_transferOwnership"" [label=""transferOwnership""];
""1263_withdrawAll"" [label=""withdrawAll""];
""1263_allowance"" [label=""allowance""];
""1263_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1263_DistributeAirdropMultiple"" -> ""1263_Distribute"";
""1263_Distribute"" -> ""1263_onlyOwner"";
""1263_transferFrom"" -> ""1263_onlyPayloadSize"";
""1263_DistributeAirdrop"" -> ""1263_Distribute"";
""1263_finishDistribution"" -> ""1263_onlyOwner"";
""1263_burn"" -> ""1263_onlyOwner"";
""1263_transfer"" -> ""1263_onlyPayloadSize"";
""1263_DistributeAirdrop"" -> ""1263_onlyOwner"";
""1263_getTokens"" -> ""1263_canDistr"";
""1263_withdrawForeignTokens"" -> ""1263_onlyOwner"";
""1263_add"" -> ""1263_onlyOwner"";
""1263_finishDistribution"" -> ""1263_canDistr"";
""1263_updateTokensPerEth"" -> ""1263_onlyOwner"";
""1263_fallback"" -> ""1263_getTokens"";
""1263_constructor"" -> ""1263_distr"";
""1263_withdraw"" -> ""1263_onlyOwner"";
""1263_transferOwnership"" -> ""1263_onlyOwner"";
""1263_DistributeAirdropMultiple"" -> ""1263_onlyOwner"";
""1263_getTokens"" -> ""1263_distr"";
""1263_withdrawAll"" -> ""1263_onlyOwner"";
""1263_distr"" -> ""1263_canDistr"";
}
"
0xd3d94f6165d5647092a522cb14804d8b1157695b.sol,ZMC,"contract ZMC is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 8; function ZMC() public { owner = msg.sender; totalSupply=4200000000000000; balances[owner]=totalSupply; }",0,"subgraph cluster_533_ZMC {
label=""ZMC"";
""533_fallback"" [label=""fallback""];
""533_ZMC"" [label=""ZMC""];
}
"
0xe9c1b6ddf7a99f969cf3ef6ffb0224d018a0e0ca.sol,CoinRox,"contract CoinRox { address public admin_address = 0x5d9CC08eb47aE51069ED64BFAfBcF3a8e531f881; address public account_address = 0x5d9CC08eb47aE51069ED64BFAfBcF3a8e531f881; mapping(address => uint256) balances; string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 initSupply = 2100000000; uint256 public totalSupply = 0; constructor() payable public { totalSupply = mul(initSupply, 10**uint256(decimals)); balances[account_address] = totalSupply; }",0,"subgraph cluster_527_CoinRox {
label=""CoinRox"";
""527_sub"" [label=""sub""];
""527_fallback"" [label=""fallback""];
""527_withDraw"" [label=""withDraw""];
""527_setAdmin"" [label=""setAdmin""];
""527_increaseApproval"" [label=""increaseApproval""];
""527_transferFrom"" [label=""transferFrom""];
""527_add"" [label=""add""];
""527_div"" [label=""div""];
""527_decreaseApproval"" [label=""decreaseApproval""];
""527_mul"" [label=""mul""];
""527_approve"" [label=""approve""];
""527_allowance"" [label=""allowance""];
""527_constructor"" [label=""constructor""];
""527_transfer"" [label=""transfer""];
""527_balanceOf"" [label=""balanceOf""];
""527_transferFrom"" -> ""527_add"";
""527_withDraw"" -> ""527_admin_only"";
""527_setAdmin"" -> ""527_admin_only"";
""527_transferFrom"" -> ""527_sub"";
""527_transfer"" -> ""527_add"";
""527_increaseApproval"" -> ""527_add"";
""527_decreaseApproval"" -> ""527_sub"";
""527_transfer"" -> ""527_sub"";
""527_constructor"" -> ""527_mul"";
}
"
0x7335f6347dce8d961bf0e36185fc75f03f4a3dff.sol,StandardToken,contract StandardToken is ERC20 { using SafeMath for uint256; mapping(address => uint256) balances; mapping (address => mapping (address => uint256)) internal allowed; function balanceOf(address _owner) public view returns (uint256) { return balances[_owner]; },0,"subgraph cluster_599_StandardToken {
label=""StandardToken"";
""599_approve"" [label=""approve""];
""599_allowance"" [label=""allowance""];
""599_decreaseApproval"" [label=""decreaseApproval""];
""599_increaseApproval"" [label=""increaseApproval""];
""599_balanceOf"" [label=""balanceOf""];
""599_burn"" [label=""burn""];
""599_transferFrom"" [label=""transferFrom""];
""599_burnFrom"" [label=""burnFrom""];
""599_transfer"" [label=""transfer""];
}
"
0x0e14ff106b70b807d74190ce2c2d0bb8c865082d.sol,STBIToken,"contract STBIToken is ERC20 { using SafeMath for uint256; string constant public name = ; string constant public symbol = ; uint8 constant public decimals = 8; uint256 public supply = 0; uint256 public initialSupply=1000000000; mapping(address => uint256) public balances; mapping(address => mapping(address => uint256)) public allowed; address public ownerAddress=0x99DA509Aed5F50Ae0A539a1815654FA11A155003; bool public canTransfer=true; function STBIToken() public { supply = initialSupply * (10 ** uint256(decimals)); balances[ownerAddress] = supply; Transfer(0x0, ownerAddress, supply); }",0,"subgraph cluster_680_STBIToken {
label=""STBIToken"";
""680_airdrop"" [label=""airdrop""];
""680_approve"" [label=""approve""];
""680_balanceOf"" [label=""balanceOf""];
""680_totalSupply"" [label=""totalSupply""];
""680_transferFrom"" [label=""transferFrom""];
""680_transfer"" [label=""transfer""];
""680__transferMultiple"" [label=""_transferMultiple""];
""680_setCanTransfer"" [label=""setCanTransfer""];
""680_allowance"" [label=""allowance""];
""680__transfer"" [label=""_transfer""];
""680_STBIToken"" [label=""STBIToken""];
""680_setCanTransfer"" -> ""680_onlyOwner"";
""680_allowance"" -> ""680_onlyOwner"";
""680_transfer"" -> ""680__transfer"";
""680_transferFrom"" -> ""680__transfer"";
""680_airdrop"" -> ""680__transferMultiple"";
}
"
0xa3d48af5b7541658e7b663905f11433f1b4074f5.sol,OysterPearl,"contract OysterPearl { string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply; uint256 public funds = 0; address public owner; bool public saleClosed = false; bool public ownerLock = false; uint256 public claimAmount; uint256 public payAmount; uint256 public feeAmount; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; mapping (address => bool) public buried; mapping (address => uint256) public claimed; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event Bury(address indexed target, uint256 value); event Claim(address indexed payout, address indexed fee); function OysterPearl() public { owner = msg.sender; totalSupply = 0; totalSupply += 25000000 * 10 ** uint256(decimals); totalSupply += 75000000 * 10 ** uint256(decimals); totalSupply += 1000000 * 10 ** uint256(decimals); balanceOf[owner] = totalSupply; claimAmount = 5 * 10 ** (uint256(decimals) - 1); payAmount = 4 * 10 ** (uint256(decimals) - 1); feeAmount = 1 * 10 ** (uint256(decimals) - 1); }",0,"subgraph cluster_779_OysterPearl {
label=""OysterPearl"";
""779_fallback"" [label=""fallback""];
""779_approve"" [label=""approve""];
""779__transfer"" [label=""_transfer""];
""779_transferOwnership"" [label=""transferOwnership""];
""779_transferFrom"" [label=""transferFrom""];
""779_approveAndCall"" [label=""approveAndCall""];
""779_burn"" [label=""burn""];
""779_claim"" [label=""claim""];
""779_selfLock"" [label=""selfLock""];
""779_amendAmount"" [label=""amendAmount""];
""779_transfer"" [label=""transfer""];
""779_withdrawFunds"" [label=""withdrawFunds""];
""779_burnFrom"" [label=""burnFrom""];
""779_OysterPearl"" [label=""OysterPearl""];
""779_bury"" [label=""bury""];
""779_openSale"" [label=""openSale""];
""779_closeSale"" [label=""closeSale""];
""779_closeSale"" -> ""779_onlyOwner"";
""779_transfer"" -> ""779__transfer"";
""779_openSale"" -> ""779_onlyOwner"";
""779_selfLock"" -> ""779_onlyOwner"";
""779_amendAmount"" -> ""779_onlyOwner"";
""779_transferOwnership"" -> ""779_onlyOwner"";
""779_transferFrom"" -> ""779__transfer"";
""779_approveAndCall"" -> ""779_approve"";
""779_withdrawFunds"" -> ""779_onlyOwner"";
}
"
0x5a82de3515fc4a4db9ba9e869f269a1e85300092.sol,TokenERC20,"contract TokenERC20 is SafeMath { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_523_TokenERC20 {
label=""TokenERC20"";
""523__transfer"" [label=""_transfer""];
""523_burn"" [label=""burn""];
""523_transferFrom"" [label=""transferFrom""];
""523_approve"" [label=""approve""];
""523_burnFrom"" [label=""burnFrom""];
""523_approveAndCall"" [label=""approveAndCall""];
""523_transfer"" [label=""transfer""];
""523_TokenERC20"" [label=""TokenERC20""];
""523_burnFrom"" -> ""523_safeSub"";
""523_transfer"" -> ""523__transfer"";
""523_approveAndCall"" -> ""523_approve"";
""523_transferFrom"" -> ""523_safeSub"";
""523__transfer"" -> ""523_safeSub"";
""523_burn"" -> ""523_safeSub"";
""523__transfer"" -> ""523_safeAdd"";
""523_transferFrom"" -> ""523__transfer"";
}
"
0x01a28adc0edd796b570ec4da734e1aa809f6f1fc.sol,EDash,contract EDash is MintableToken { string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public unlockTimeStamp = 0; mapping (address => bool) private _lockByPass; function EDash(uint unlockTs){ setUnlockTimeStamp(unlockTs); },0,"subgraph cluster_653_EDash {
label=""EDash"";
""653_transferFrom"" [label=""transferFrom""];
""653_setUnlockTimeStamp"" [label=""setUnlockTimeStamp""];
""653_airdrop"" [label=""airdrop""];
""653_transfer"" [label=""transfer""];
""653_setLockByPass"" [label=""setLockByPass""];
""653_EDash"" [label=""EDash""];
""653_airdrop"" -> ""653_transfer"";
""653_setLockByPass"" -> ""653_onlyOwner"";
""653_airdrop"" -> ""653_onlyOwner"";
""653_transfer"" -> ""653_transfer"";
""653_setUnlockTimeStamp"" -> ""653_onlyOwner"";
""653_transferFrom"" -> ""653_transferFrom"";
""653_EDash"" -> ""653_setUnlockTimeStamp"";
}
"
0x3308df0506de2a5857571f0aee6892de4f014e10.sol,Securewaycoin,contract Securewaycoin { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 2; uint public _totalSupply = 500000000; uint256 public RATE = 1; bool public isMinting = true; string public constant generatedBy = ; using SafeMath for uint256; address public owner; modifier onlyOwner() { if (msg.sender != owner) { throw; },0,"subgraph cluster_516_Securewaycoin {
label=""Securewaycoin"";
""516_createTokens"" [label=""createTokens""];
""516_approve"" [label=""approve""];
""516_constructor"" [label=""constructor""];
""516_fallback"" [label=""fallback""];
""516_allowance"" [label=""allowance""];
""516_transfer"" [label=""transfer""];
""516_transferFrom"" [label=""transferFrom""];
""516_changeCrowdsaleRate"" [label=""changeCrowdsaleRate""];
""516_balanceOf"" [label=""balanceOf""];
""516_totalSupply"" [label=""totalSupply""];
""516_burnTokens"" [label=""burnTokens""];
""516_endCrowdsale"" [label=""endCrowdsale""];
""516_changeCrowdsaleRate"" -> ""516_onlyOwner"";
""516_endCrowdsale"" -> ""516_onlyOwner"";
""516_fallback"" -> ""516_createTokens"";
""516_burnTokens"" -> ""516_onlyOwner"";
}
"
0x1e2e9cabb5744c314de7978c081bd57c357e000d.sol,CryptoMyWord,"contract CryptoMyWord { using SafeMath for uint256; using strings for *; event Bought (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Sold (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Transfer(address indexed _from, address indexed _to, uint256 _tokenId); event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId); event NewWord(uint wordId, string name, uint price); address private owner; uint256 nameTokenId; uint256 tokenId; mapping (address => bool) private admins; bool private erc721Enabled = false; uint256 private increaseLimit1 = 0.8 ether; uint256 private increaseLimit2 = 1.5 ether; uint256 private increaseLimit3 = 2.0 ether; uint256 private increaseLimit4 = 5.0 ether; uint256[] private listedItems; mapping (uint256 => address) public ownerOfItem; mapping (address => string) public nameOfOwner; mapping (address => string) public snsOfOwner; mapping (uint256 => uint256) private startingPriceOfItem; mapping (uint256 => uint256) private priceOfItem; mapping (uint256 => string) private nameOfItem; mapping (uint256 => string) private urlOfItem; mapping (uint256 => address[]) private borrowerOfItem; mapping (string => uint256[]) private nameToItems; mapping (uint256 => address) private approvedOfItem; mapping (string => uint256) private nameToParents; mapping (string => uint256) private nameToNameToken; mapping (string => string) private firstIdOfName; mapping (string => string) private secondIdOfName; function CryptoMyWord () public { owner = msg.sender; admins[owner] = true; }",0,"subgraph cluster_3428_CryptoMyWord {
label=""CryptoMyWord"";
""3428_enableERC721"" [label=""enableERC721""];
""3428_tokenExists"" [label=""tokenExists""];
""3428_approve"" [label=""approve""];
""3428__mint"" [label=""_mint""];
""3428_startingPriceOf"" [label=""startingPriceOf""];
""3428_getOwner"" [label=""getOwner""];
""3428_isAdmin"" [label=""isAdmin""];
""3428_balanceOf"" [label=""balanceOf""];
""3428_disableERC721"" [label=""disableERC721""];
""3428_name"" [label=""name""];
""3428_getNames"" [label=""getNames""];
""3428_buy"" [label=""buy""];
""3428_setUrl"" [label=""setUrl""];
""3428__transfer"" [label=""_transfer""];
""3428_transferFrom"" [label=""transferFrom""];
""3428_removeAdmin"" [label=""removeAdmin""];
""3428_ceil"" [label=""ceil""];
""3428_CryptoMyWord"" [label=""CryptoMyWord""];
""3428_composite"" [label=""composite""];
""3428_calculateFirstCut"" [label=""calculateFirstCut""];
""3428_withdrawAll"" [label=""withdrawAll""];
""3428_listItem"" [label=""listItem""];
""3428_addAdmin"" [label=""addAdmin""];
""3428_isContract"" [label=""isContract""];
""3428_transfer"" [label=""transfer""];
""3428_allOf"" [label=""allOf""];
""3428_tokensOf"" [label=""tokensOf""];
""3428_calculateDevCut"" [label=""calculateDevCut""];
""3428_calculateNextPrice"" [label=""calculateNextPrice""];
""3428_approvedFor"" [label=""approvedFor""];
""3428_allForPopulate"" [label=""allForPopulate""];
""3428_priceOf"" [label=""priceOf""];
""3428_withdrawAmount"" [label=""withdrawAmount""];
""3428_itemsByName"" [label=""itemsByName""];
""3428_ownerOf"" [label=""ownerOf""];
""3428_selfDestruct"" [label=""selfDestruct""];
""3428_symbol"" [label=""symbol""];
""3428_setOwner"" [label=""setOwner""];
""3428_implementsERC721"" [label=""implementsERC721""];
""3428_itemsForSaleLimit"" [label=""itemsForSaleLimit""];
""3428_totalSupply"" [label=""totalSupply""];
""3428_nameOf"" [label=""nameOf""];
""3428_nextPriceOf"" [label=""nextPriceOf""];
""3428_buy"" -> ""3428_ceil"";
""3428_buy"" -> ""3428_priceOf"";
""3428_allForPopulate"" -> ""3428_onlyOwner"";
""3428_transfer"" -> ""3428_ownerOf"";
""3428_approve"" -> ""3428_tokenExists"";
""3428_selfDestruct"" -> ""3428_onlyOwner"";
""3428_transfer"" -> ""3428__transfer"";
""3428_setOwner"" -> ""3428_onlyOwner"";
""3428_approve"" -> ""3428_ownerOf"";
""3428_withdrawAmount"" -> ""3428_onlyOwner"";
""3428_tokenExists"" -> ""3428_priceOf"";
""3428_buy"" -> ""3428_nameOf"";
""3428_allOf"" -> ""3428_startingPriceOf"";
""3428_transferFrom"" -> ""3428__transfer"";
""3428_allOf"" -> ""3428_nextPriceOf"";
""3428_composite"" -> ""3428__mint"";
""3428_nextPriceOf"" -> ""3428_calculateNextPrice"";
""3428_buy"" -> ""3428__mint"";
""3428_tokensOf"" -> ""3428_balanceOf"";
""3428_buy"" -> ""3428_isContract"";
""3428_setUrl"" -> ""3428_ownerOf"";
""3428_allForPopulate"" -> ""3428_nextPriceOf"";
""3428_removeAdmin"" -> ""3428_onlyOwner"";
""3428__transfer"" -> ""3428_ownerOf"";
""3428_enableERC721"" -> ""3428_onlyOwner"";
""3428_allOf"" -> ""3428_ownerOf"";
""3428_addAdmin"" -> ""3428_onlyOwner"";
""3428_transfer"" -> ""3428_onlyERC721"";
""3428_allForPopulate"" -> ""3428_priceOf"";
""3428_approve"" -> ""3428_onlyERC721"";
""3428__transfer"" -> ""3428_tokenExists"";
""3428_buy"" -> ""3428_calculateFirstCut"";
""3428_allOf"" -> ""3428_priceOf"";
""3428_buy"" -> ""3428_ownerOf"";
""3428_buy"" -> ""3428_nextPriceOf"";
""3428_allForPopulate"" -> ""3428_startingPriceOf"";
""3428_disableERC721"" -> ""3428_onlyOwner"";
""3428_withdrawAll"" -> ""3428_onlyOwner"";
""3428_listItem"" -> ""3428_onlyAdmins"";
""3428_allForPopulate"" -> ""3428_ownerOf"";
""3428_buy"" -> ""3428_calculateDevCut"";
""3428__mint"" -> ""3428_ownerOf"";
""3428_transferFrom"" -> ""3428_onlyERC721"";
""3428_nextPriceOf"" -> ""3428_priceOf"";
""3428_transferFrom"" -> ""3428_approvedFor"";
""3428_balanceOf"" -> ""3428_ownerOf"";
}
"
0x653f052a42b6f02530742171c987fd0811b2d1f1.sol,Crowdsale,contract Crowdsale is Ownable { using SafeMath for uint256; modifier onlyWhileOpen { require( (now >= preICOStartDate && now < preICOEndDate) || (now >= ICOStartDate && now < ICOEndDate) ); _; },0,"subgraph cluster_1040_Crowdsale {
label=""Crowdsale"";
""1040_setPreICOStartDate"" [label=""setPreICOStartDate""];
""1040_setRate"" [label=""setRate""];
""1040_buyTokens"" [label=""buyTokens""];
""1040_setICOEndDate"" [label=""setICOEndDate""];
""1040_hasPreICOClosed"" [label=""hasPreICOClosed""];
""1040_forwardFunds"" [label=""forwardFunds""];
""1040_Crowdsale"" [label=""Crowdsale""];
""1040_setETHUSD"" [label=""setETHUSD""];
""1040_setToken"" [label=""setToken""];
""1040_setPreICOEndDate"" [label=""setPreICOEndDate""];
""1040_setWallet"" [label=""setWallet""];
""1040_buyTokensWithReferal"" [label=""buyTokensWithReferal""];
""1040_fallback"" [label=""fallback""];
""1040__deliverTokens"" [label=""_deliverTokens""];
""1040_hasICOClosed"" [label=""hasICOClosed""];
""1040_setICOStartDate"" [label=""setICOStartDate""];
""1040__preValidatePurchase"" [label=""_preValidatePurchase""];
""1040_refund"" [label=""refund""];
""1040__getTokenAmountWithBonus"" [label=""_getTokenAmountWithBonus""];
""1040__isICO"" [label=""_isICO""];
""1040_addToWhitelist"" [label=""addToWhitelist""];
""1040__getTokenAmountWithReferal"" [label=""_getTokenAmountWithReferal""];
""1040_addManyToWhitelist"" [label=""addManyToWhitelist""];
""1040_removeFromWhitelist"" [label=""removeFromWhitelist""];
""1040__isPreICO"" [label=""_isPreICO""];
""1040__preValidatePurchase"" -> ""1040__isICO"";
""1040_setPreICOStartDate"" -> ""1040_onlyOwner"";
""1040_setICOStartDate"" -> ""1040_onlyOwner"";
""1040_buyTokensWithReferal"" -> ""1040_onlyWhileICOOpen"";
""1040_setICOEndDate"" -> ""1040_onlyOwner"";
""1040_buyTokens"" -> ""1040__preValidatePurchase"";
""1040_buyTokens"" -> ""1040__isPreICO"";
""1040_setPreICOEndDate"" -> ""1040_onlyOwner"";
""1040_buyTokensWithReferal"" -> ""1040__deliverTokens"";
""1040_buyTokensWithReferal"" -> ""1040__getTokenAmountWithBonus"";
""1040_buyTokens"" -> ""1040__getTokenAmountWithBonus"";
""1040_buyTokens"" -> ""1040__deliverTokens"";
""1040_fallback"" -> ""1040_buyTokens"";
""1040_setETHUSD"" -> ""1040_onlyOwner"";
""1040_addToWhitelist"" -> ""1040_onlyOwner"";
""1040_setRate"" -> ""1040_onlyOwner"";
""1040_addManyToWhitelist"" -> ""1040_onlyOwner"";
""1040_setToken"" -> ""1040_onlyOwner"";
""1040_setWallet"" -> ""1040_onlyOwner"";
""1040__preValidatePurchase"" -> ""1040__isPreICO"";
""1040_buyTokensWithReferal"" -> ""1040__preValidatePurchase"";
""1040_buyTokensWithReferal"" -> ""1040__getTokenAmountWithReferal"";
""1040_buyTokens"" -> ""1040_onlyWhileOpen"";
""1040_forwardFunds"" -> ""1040_onlyOwner"";
""1040__preValidatePurchase"" -> ""1040_onlyWhileOpen"";
""1040_removeFromWhitelist"" -> ""1040_onlyOwner"";
}
"
0xeed618c15d12c635c3c319aee7bded2e2879aea0.sol,PlayerBook,contract PlayerBook { using NameFilter for string; using SafeMath for uint256; address private _owner; uint256 public registrationFee_ = 10 finney; mapping(uint256 => PlayerBookReceiverInterface) public games_; mapping(address => bytes32) public gameNames_; mapping(address => uint256) public gameIDs_; uint256 public gID_; uint256 public pID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => Player) public plyr_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => mapping (uint256 => bytes32)) public plyrNameList_; struct Player { address addr; bytes32 name; uint256 laff; uint256 names; },0,"subgraph cluster_20_PlayerBookReceiverInterface {
label=""PlayerBookReceiverInterface"";
""20_receivePlayerInfo"" [label=""receivePlayerInfo""];
""20_receivePlayerNameList"" [label=""receivePlayerNameList""];
}
"
0x35d76c3db8e826907d2a977500b54b3914ecc020.sol,CappedCrowdsale,contract CappedCrowdsale is Crowdsale { using SafeMath for uint256; uint256 public cap; function CappedCrowdsale(uint256 _cap) public { require(_cap > 0); cap = _cap; },0,"subgraph cluster_578_CappedCrowdsale {
label=""CappedCrowdsale"";
""578_CappedCrowdsale"" [label=""CappedCrowdsale""];
""578_capReached"" [label=""capReached""];
""578__preValidatePurchase"" [label=""_preValidatePurchase""];
""578__preValidatePurchase"" -> ""578__preValidatePurchase"";
}
"
0x78faea8994efe7fc448e743b7b342e1a96ba3807.sol,UnicornRanch,"contract UnicornRanch { using SafeMath for uint; enum VisitType { Spa, Afternoon, Day, Overnight, Week, Extended }",0,"subgraph cluster_1424_UnicornRanch {
label=""UnicornRanch"";
""1424_bookAfternoonVisit"" [label=""bookAfternoonVisit""];
""1424_getBookingCount"" [label=""getBookingCount""];
""1424_repossessBooking"" [label=""repossessBooking""];
""1424_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1424_addBooking"" [label=""addBooking""];
""1424_changeCardboardUnicornTokenAddress"" [label=""changeCardboardUnicornTokenAddress""];
""1424_withdraw"" [label=""withdraw""];
""1424_changeBirthSettings"" [label=""changeBirthSettings""];
""1424_getBooking"" [label=""getBooking""];
""1424_availableBalance"" [label=""availableBalance""];
""1424_bookExtendedVisit"" [label=""bookExtendedVisit""];
""1424_bookWeekVisit"" [label=""bookWeekVisit""];
""1424_bookDayVisit"" [label=""bookDayVisit""];
""1424_bookSpaVisit"" [label=""bookSpaVisit""];
""1424_changeRepoSettings"" [label=""changeRepoSettings""];
""1424_changeVisitCosts"" [label=""changeVisitCosts""];
""1424_bookOvernightVisit"" [label=""bookOvernightVisit""];
""1424_donateUnicorns"" [label=""donateUnicorns""];
""1424_completeBooking"" [label=""completeBooking""];
""1424_changeVisitLengths"" [label=""changeVisitLengths""];
""1424_UnicornRanch"" [label=""UnicornRanch""];
""1424_changeOwner"" [label=""changeOwner""];
""1424_fallback"" [label=""fallback""];
""1424_changeGroveAddress"" [label=""changeGroveAddress""];
""1424_changeOwner"" -> ""1424_onlyOwner"";
""1424_changeBirthSettings"" -> ""1424_onlyOwner"";
""1424_bookWeekVisit"" -> ""1424_addBooking"";
""1424_fallback"" -> ""1424_donateUnicorns"";
""1424_bookSpaVisit"" -> ""1424_addBooking"";
""1424_bookExtendedVisit"" -> ""1424_addBooking"";
""1424_bookAfternoonVisit"" -> ""1424_addBooking"";
""1424_changeCardboardUnicornTokenAddress"" -> ""1424_onlyOwner"";
""1424_bookOvernightVisit"" -> ""1424_addBooking"";
""1424_bookDayVisit"" -> ""1424_addBooking"";
""1424_changeRepoSettings"" -> ""1424_onlyOwner"";
""1424_changeVisitLengths"" -> ""1424_onlyOwner"";
""1424_changeVisitCosts"" -> ""1424_onlyOwner"";
""1424_addBooking"" -> ""1424_availableBalance"";
""1424_changeGroveAddress"" -> ""1424_onlyOwner"";
""1424_addBooking"" -> ""1424_donateUnicorns"";
""1424_withdrawForeignTokens"" -> ""1424_onlyOwner"";
""1424_withdraw"" -> ""1424_onlyOwner"";
""1424_fallback"" -> ""1424_availableBalance"";
}
"
0xd89d6e3b1115743b3dc481f6afdb5bc2958031d6.sol,POWM,contract POWM { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1305_POWM {
label=""POWM"";
""1305_myTokens"" [label=""myTokens""];
""1305_sqrt"" [label=""sqrt""];
""1305_fallback"" [label=""fallback""];
""1305_buyPrice"" [label=""buyPrice""];
""1305_totalSupply"" [label=""totalSupply""];
""1305_sellPrice"" [label=""sellPrice""];
""1305_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1305_setAdministrator"" [label=""setAdministrator""];
""1305_exit"" [label=""exit""];
""1305_setSymbol"" [label=""setSymbol""];
""1305_setStakingRequirement"" [label=""setStakingRequirement""];
""1305_sell"" [label=""sell""];
""1305_balanceOf"" [label=""balanceOf""];
""1305_transfer"" [label=""transfer""];
""1305_buy"" [label=""buy""];
""1305_withdraw"" [label=""withdraw""];
""1305_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1305_disableInitialStage"" [label=""disableInitialStage""];
""1305_dividendsOf"" [label=""dividendsOf""];
""1305_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1305_myDividends"" [label=""myDividends""];
""1305_POWM"" [label=""POWM""];
""1305_reinvest"" [label=""reinvest""];
""1305_purchaseTokens"" [label=""purchaseTokens""];
""1305_setName"" [label=""setName""];
""1305_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1305_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1305_reinvest"" -> ""1305_purchaseTokens"";
""1305_exit"" -> ""1305_sell"";
""1305_calculateTokensReceived"" -> ""1305_ethereumToTokens_"";
""1305_sell"" -> ""1305_tokensToEthereum_"";
""1305_buy"" -> ""1305_purchaseTokens"";
""1305_transfer"" -> ""1305_tokensToEthereum_"";
""1305_reinvest"" -> ""1305_onlyStronghands"";
""1305_ethereumToTokens_"" -> ""1305_sqrt"";
""1305_buyPrice"" -> ""1305_tokensToEthereum_"";
""1305_purchaseTokens"" -> ""1305_antiEarlyWhale"";
""1305_fallback"" -> ""1305_purchaseTokens"";
""1305_disableInitialStage"" -> ""1305_onlyAdministrator"";
""1305_sell"" -> ""1305_onlyBagholders"";
""1305_sellPrice"" -> ""1305_tokensToEthereum_"";
""1305_calculateEthereumReceived"" -> ""1305_tokensToEthereum_"";
""1305_purchaseTokens"" -> ""1305_ethereumToTokens_"";
""1305_reinvest"" -> ""1305_myDividends"";
""1305_withdraw"" -> ""1305_myDividends"";
""1305_setStakingRequirement"" -> ""1305_onlyAdministrator"";
""1305_setAdministrator"" -> ""1305_onlyAdministrator"";
""1305_myDividends"" -> ""1305_dividendsOf"";
""1305_withdraw"" -> ""1305_onlyStronghands"";
""1305_transfer"" -> ""1305_onlyBagholders"";
""1305_transfer"" -> ""1305_myDividends"";
""1305_setSymbol"" -> ""1305_onlyAdministrator"";
""1305_transfer"" -> ""1305_withdraw"";
""1305_myTokens"" -> ""1305_balanceOf"";
""1305_setName"" -> ""1305_onlyAdministrator"";
""1305_exit"" -> ""1305_withdraw"";
}
"
0xa5e5be69c923c701ae6ac8f1f5936af3ae610c68.sol,Collectables,"contract Collectables is ERC721Full(, ), Ownable { using Strings for string; mapping(uint32 => address) public delegates; uint32[] public collectables; uint public delegateCount; event DelegateAdded(address indexed delegate, uint32 indexed delegateID); function addDelegate(address delegate) public onlyOwner { uint32 delegateID = uint32(delegateCount++); require(delegates[delegateID] == address(0), ); delegates[delegateID] = delegate; emit DelegateAdded(delegate, delegateID); }",0,"subgraph cluster_2118_Collectables {
label=""Collectables"";
""2118_getTokenDelegate"" [label=""getTokenDelegate""];
""2118_safeTransferFrom"" [label=""safeTransferFrom""];
""2118_addDelegate"" [label=""addDelegate""];
""2118_mint"" [label=""mint""];
""2118_getDelegate"" [label=""getDelegate""];
""2118_tokenURI"" [label=""tokenURI""];
""2118_transferFrom"" [label=""transferFrom""];
""2118_approve"" [label=""approve""];
""2118_approve"" -> ""2118_approve"";
""2118_addDelegate"" -> ""2118_onlyOwner"";
""2118_transferFrom"" -> ""2118_transferFrom"";
""2118_mint"" -> ""2118__mint"";
""2118_transferFrom"" -> ""2118_getTokenDelegate"";
""2118_approve"" -> ""2118_getTokenDelegate"";
""2118_tokenURI"" -> ""2118__exists"";
""2118_safeTransferFrom"" -> ""2118_getTokenDelegate"";
""2118_mint"" -> ""2118_getDelegate"";
""2118_safeTransferFrom"" -> ""2118_safeTransferFrom"";
}
"
0x6b8c3eaa82353ec89a96942708e3d9dc87db6a34.sol,BancorConverterUpgrader,"contract BancorConverterUpgrader is Owned { IBancorConverterFactory public bancorConverterFactory; event ConverterOwned(address indexed _converter, address indexed _owner); event ConverterUpgrade(address indexed _oldConverter, address indexed _newConverter); function BancorConverterUpgrader(IBancorConverterFactory _bancorConverterFactory) public { bancorConverterFactory = _bancorConverterFactory; }",0,"subgraph cluster_984_BancorConverterUpgrader {
label=""BancorConverterUpgrader"";
""984_copyQuickBuyPath"" [label=""copyQuickBuyPath""];
""984_transferConnectorsBalances"" [label=""transferConnectorsBalances""];
""984_setBancorConverterFactory"" [label=""setBancorConverterFactory""];
""984_copyConversionFee"" [label=""copyConversionFee""];
""984_copyConnectors"" [label=""copyConnectors""];
""984_createConverter"" [label=""createConverter""];
""984_upgrade"" [label=""upgrade""];
""984_acceptConverterOwnership"" [label=""acceptConverterOwnership""];
""984_BancorConverterUpgrader"" [label=""BancorConverterUpgrader""];
""984_readConnector"" [label=""readConnector""];
""984_upgrade"" -> ""984_transferConnectorsBalances"";
""984_copyConnectors"" -> ""984_readConnector"";
""984_upgrade"" -> ""984_copyConnectors"";
""984_upgrade"" -> ""984_copyConversionFee"";
""984_upgrade"" -> ""984_copyQuickBuyPath"";
""984_upgrade"" -> ""984_createConverter"";
""984_setBancorConverterFactory"" -> ""984_ownerOnly"";
""984_upgrade"" -> ""984_acceptConverterOwnership"";
}
"
0xa4480957629da7986efe389ca2be86a9fab7481b.sol,CLIP,"contract CLIP is ERC223, Ownable { using SafeMath for uint256; string public name = ; string public symbol = ; uint8 public decimals = 8; uint256 public totalSupply = 333e8 * 1e8; uint256 public distributeAmount = 0; mapping (address => uint256) public balanceOf; mapping (address => bool) public frozenAccount; mapping (address => uint256) public unlockUnixTime; event FrozenFunds(address indexed target, bool frozen); event LockedFunds(address indexed target, uint256 locked); event Burn(address indexed burner, uint256 value); function CLIP() public { balanceOf[msg.sender] = totalSupply; }",0,"subgraph cluster_1582_CLIP {
label=""CLIP"";
""1582_CLIP"" [label=""CLIP""];
""1582_lockupAccounts"" [label=""lockupAccounts""];
""1582_totalSupply"" [label=""totalSupply""];
""1582_balanceOf"" [label=""balanceOf""];
""1582_transferToContract"" [label=""transferToContract""];
""1582_autoDistribute"" [label=""autoDistribute""];
""1582_distributeAirdrop"" [label=""distributeAirdrop""];
""1582_setDistributeAmount"" [label=""setDistributeAmount""];
""1582_transfer"" [label=""transfer""];
""1582_symbol"" [label=""symbol""];
""1582_freezeAccounts"" [label=""freezeAccounts""];
""1582_fallback"" [label=""fallback""];
""1582_decimals"" [label=""decimals""];
""1582_burn"" [label=""burn""];
""1582_name"" [label=""name""];
""1582_distributeToken"" [label=""distributeToken""];
""1582_isContract"" [label=""isContract""];
""1582_transferToAddress"" [label=""transferToAddress""];
""1582_collectTokens"" [label=""collectTokens""];
""1582_collectTokens"" -> ""1582_onlyOwner"";
""1582_burn"" -> ""1582_onlyOwner"";
""1582_setDistributeAmount"" -> ""1582_onlyOwner"";
""1582_transfer"" -> ""1582_transferToContract"";
""1582_freezeAccounts"" -> ""1582_onlyOwner"";
""1582_fallback"" -> ""1582_autoDistribute"";
""1582_transfer"" -> ""1582_isContract"";
""1582_lockupAccounts"" -> ""1582_onlyOwner"";
""1582_transfer"" -> ""1582_transferToAddress"";
}
"
0x53148bb4551707edf51a1e8d7a93698d18931225.sol,Peculium,"contract Peculium is BurnableToken,Ownable { using SafeMath for uint256; using SafeERC20 for ERC20Basic; string public name = ; string public symbol = ; uint256 public decimals = 8; uint256 public constant MAX_SUPPLY_NBTOKEN = 20000000000*10**8; uint256 public dateStartContract; mapping(address => bool) public balancesCanSell; uint256 public dateDefrost; event FrozenFunds(address target, bool frozen); event Defroze(address msgAdd, bool freeze); function Peculium() { totalSupply = MAX_SUPPLY_NBTOKEN; balances[owner] = totalSupply; balancesCanSell[owner] = true; dateStartContract=now; dateDefrost = dateStartContract + 85 days; }",0,"subgraph cluster_875_Peculium {
label=""Peculium"";
""875_freezeAccount"" [label=""freezeAccount""];
""875_approveAndCall"" [label=""approveAndCall""];
""875_transferFrom"" [label=""transferFrom""];
""875_getBlockTimestamp"" [label=""getBlockTimestamp""];
""875_getOwnerInfos"" [label=""getOwnerInfos""];
""875_defrostToken"" [label=""defrostToken""];
""875_Peculium"" [label=""Peculium""];
""875_transfer"" [label=""transfer""];
""875_transferFrom"" -> ""875_transferFrom"";
""875_getOwnerInfos"" -> ""875_balanceOf"";
""875_freezeAccount"" -> ""875_onlyOwner"";
""875_transfer"" -> ""875_transfer"";
}
"
0x1ca0a2632519021798cb0e0a073371c8ddfcdde5.sol,DukeOfEther,contract DukeOfEther is Ownable { address m_addrShareHolder = 0; uint m_deployedAtBlock = 0; uint m_nOwnersMoney = 0; uint m_nNewCountryPrice = 1 ether; uint m_nMinDukePrice = 1 finney; uint m_nDeterioration = 3; uint m_nDaysBeforeDeteriorationStarts = 60; uint m_NextDukePaymentIncrease = 150; uint m_nNumberOfActiveCountries = 0; struct Country { bool m_bIsDestroyed; string m_strNickName; uint m_nLastDukeRiseDate; address m_addrCurrentDuke; uint m_nCurrentDukePaid; string m_strCountry; },0,"subgraph cluster_846_DukeOfEther {
label=""DukeOfEther"";
""846_getCurrentDuke"" [label=""getCurrentDuke""];
""846_getDukeDate"" [label=""getDukeDate""];
""846_becomeDuke"" [label=""becomeDuke""];
""846_DukeOfEther"" [label=""DukeOfEther""];
""846_getCurrentDukePaid"" [label=""getCurrentDukePaid""];
""846_withdrawDukeOwnersMoney"" [label=""withdrawDukeOwnersMoney""];
""846_addCountry"" [label=""addCountry""];
""846_getPaymentToAddRemoveCountry"" [label=""getPaymentToAddRemoveCountry""];
""846_verifyNickNameAndCountry"" [label=""verifyNickNameAndCountry""];
""846_getMinNextBet"" [label=""getMinNextBet""];
""846_getDukeNickName"" [label=""getDukeNickName""];
""846_processShareHolderFee"" [label=""processShareHolderFee""];
""846_getInitBlock"" [label=""getInitBlock""];
""846_isDestroyed"" [label=""isDestroyed""];
""846_addRemoveCountry"" [label=""addRemoveCountry""];
""846_setShareHolder"" [label=""setShareHolder""];
""846_getPaymentToAddRemoveCountry"" -> ""846_getMinNextBet"";
""846_becomeDuke"" -> ""846_processShareHolderFee"";
""846_becomeDuke"" -> ""846_getMinNextBet"";
""846_setShareHolder"" -> ""846_onlyOwner"";
""846_addRemoveCountry"" -> ""846_verifyNickNameAndCountry"";
""846_DukeOfEther"" -> ""846_addCountry"";
""846_addRemoveCountry"" -> ""846_processShareHolderFee"";
""846_withdrawDukeOwnersMoney"" -> ""846_onlyOwner"";
""846_addRemoveCountry"" -> ""846_getPaymentToAddRemoveCountry"";
}
"
0x92ddab77ed88c3b54b01e1b0d0268c8b0fa601bd.sol,NVTDrop,contract NVTDrop is Ownable{ mapping(address => bool) getDropped; bool public halted = true; uint256 public amout = 1 * 10 ** 4; address public NVTAddr; NVT NVTFace; function setNVTface(address _nvt) public onlyOwner { NVTFace = NVT(_nvt); },0,"subgraph cluster_266_NVTDrop {
label=""NVTDrop"";
""266_fallback"" [label=""fallback""];
""266_setNVTface"" [label=""setNVTface""];
""266_setAmout"" [label=""setAmout""];
""266_getStuckCoin"" [label=""getStuckCoin""];
""266_halt"" [label=""halt""];
""266_unhalt"" [label=""unhalt""];
""266_halt"" -> ""266_onlyOwner"";
""266_unhalt"" -> ""266_onlyOwner"";
""266_getStuckCoin"" -> ""266_onlyOwner"";
""266_setNVTface"" -> ""266_onlyOwner"";
""266_setAmout"" -> ""266_onlyOwner"";
}
"
0x6b0d72192baff8b978820ee72706ae02b4e72468.sol,CappedCrowdsale,contract CappedCrowdsale is Crowdsale { using SafeMath for uint256; uint256 public cap; function CappedCrowdsale(uint256 _cap) public { require(_cap > 0); cap = _cap; },0,"subgraph cluster_1079_CappedCrowdsale {
label=""CappedCrowdsale"";
""1079_CappedCrowdsale"" [label=""CappedCrowdsale""];
""1079_capReached"" [label=""capReached""];
""1079__preValidatePurchase"" [label=""_preValidatePurchase""];
""1079__preValidatePurchase"" -> ""1079__preValidatePurchase"";
}
"
0xecef2133479bc8a5ae858e53fa1d2a8316c7c39a.sol,BodyRabbit,contract BodyRabbit is BaseRabbit { uint public totalBunny = 0; string public constant name = ; string public constant symbol = ; constructor() public { setPriv(privAddress); setToken(addressTokenBunny ); },0,"subgraph cluster_1645_BodyRabbit {
label=""BodyRabbit"";
""1645_sendMoney"" [label=""sendMoney""];
""1645_isPromoPause"" [label=""isPromoPause""];
""1645_isPauseSave"" [label=""isPauseSave""];
""1645_getSirePrice"" [label=""getSirePrice""];
""1645_uintToBytes"" [label=""uintToBytes""];
""1645_getRabbitDNK"" [label=""getRabbitDNK""];
""1645_constructor"" [label=""constructor""];
""1645_getOwnerGennezise"" [label=""getOwnerGennezise""];
""1645_getTokenOwner"" [label=""getTokenOwner""];
""1645_setPauseSave"" [label=""setPauseSave""];
""1645_getMotherCount"" [label=""getMotherCount""];
""1645_setRabbitMother"" [label=""setRabbitMother""];
""1645_getTotalSalaryBunny"" [label=""getTotalSalaryBunny""];
""1645_getBreed"" [label=""getBreed""];
""1645_getRabbitMotherSumm"" [label=""getRabbitMotherSumm""];
""1645_getRabbitMother"" [label=""getRabbitMother""];
""1645_isUIntPublic"" [label=""isUIntPublic""];
""1645_ownerOf"" [label=""ownerOf""];
""1645_getcoolduwn"" [label=""getcoolduwn""];
""1645_transferFrom"" [label=""transferFrom""];
""1645_setPauseSave"" -> ""1645_onlyWhitelisted"";
""1645_isPromoPause"" -> ""1645_getInWhitelist"";
""1645_transferFrom"" -> ""1645_onlyWhitelisted"";
""1645_isUIntPublic"" -> ""1645_isPauseSave"";
""1645_constructor"" -> ""1645_setToken"";
""1645_constructor"" -> ""1645_setPriv"";
}
"
0xa387d94e1135f9954c675682ce8950d77a90ba76.sol,LockableToken,contract LockableToken is MintableToken { using SafeMath for uint256; struct Lock { uint256 amount; uint256 expiresAt; },0,"subgraph cluster_978_LockableToken {
label=""LockableToken"";
""978_addLock"" [label=""addLock""];
""978_deleteLock"" [label=""deleteLock""];
""978__preValidateTransfer"" [label=""_preValidateTransfer""];
""978_getLockedAmount"" [label=""getLockedAmount""];
""978_transferWithLock"" [label=""transferWithLock""];
""978_addLock"" -> ""978_onlyOwner"";
""978_transferWithLock"" -> ""978_transfer"";
""978_transferWithLock"" -> ""978_addLock"";
""978_deleteLock"" -> ""978_onlyOwner"";
""978_transferWithLock"" -> ""978_onlyOwner"";
""978__preValidateTransfer"" -> ""978_getLockedAmount"";
""978__preValidateTransfer"" -> ""978__preValidateTransfer"";
""978__preValidateTransfer"" -> ""978_balanceOf"";
}
"
0x4bf0a47d968e6a9d6c14671b091f20e20a6b8ef8.sol,e2pAirEscrow,"contract e2pAirEscrow is Stoppable { address public TOKEN_ADDRESS; uint public CLAIM_AMOUNT; uint public REFERRAL_AMOUNT; uint public CLAIM_AMOUNT_ETH; address public AIRDROPPER; address public AIRDROP_TRANSIT_ADDRESS; mapping (address => bool) usedTransitAddresses; constructor(address _tokenAddress, uint _claimAmount, uint _referralAmount, uint _claimAmountEth, address _airdropTransitAddress) public payable { AIRDROPPER = msg.sender; TOKEN_ADDRESS = _tokenAddress; CLAIM_AMOUNT = _claimAmount; REFERRAL_AMOUNT = _referralAmount; CLAIM_AMOUNT_ETH = _claimAmountEth; AIRDROP_TRANSIT_ADDRESS = _airdropTransitAddress; }",0,"subgraph cluster_813_e2pAirEscrow {
label=""e2pAirEscrow"";
""813_constructor"" [label=""constructor""];
""813_verifyReceiverAddress"" [label=""verifyReceiverAddress""];
""813_withdraw"" [label=""withdraw""];
""813_checkWithdrawal"" [label=""checkWithdrawal""];
""813_getEtherBack"" [label=""getEtherBack""];
""813_isLinkClaimed"" [label=""isLinkClaimed""];
""813_verifyLinkPrivateKey"" [label=""verifyLinkPrivateKey""];
""813_checkWithdrawal"" -> ""813_verifyLinkPrivateKey"";
""813_withdraw"" -> ""813_whenNotPaused"";
""813_withdraw"" -> ""813_checkWithdrawal"";
""813_checkWithdrawal"" -> ""813_verifyReceiverAddress"";
""813_withdraw"" -> ""813_whenNotStopped"";
}
"
0x543e9c99addfc7c6fa158359019fd8f530334396.sol,EPCSale,"contract EPCSale is Math, owned { EPCToken public epc; uint256 public constant decimals = 18; bool public isFinalized; uint256 public fundingStartBlock; uint256 public fundingEndBlock; uint256 public funded; uint256 public constant totalCap = 250 * (10**6) * 10**decimals; function EPCSale( EPCToken _epc, uint256 _fundingStartBlock, uint256 _fundingEndBlock ) public { isFinalized = false; epc = EPCToken(_epc); fundingStartBlock = _fundingStartBlock; fundingEndBlock = _fundingEndBlock; }",0,"subgraph cluster_806_EPCSale {
label=""EPCSale"";
""806_exchangeRate"" [label=""exchangeRate""];
""806_stop"" [label=""stop""];
""806_testExchangeRate"" [label=""testExchangeRate""];
""806_withdrawal"" [label=""withdrawal""];
""806_testFunded"" [label=""testFunded""];
""806_EPCSale"" [label=""EPCSale""];
""806_start"" [label=""start""];
""806_kill"" [label=""kill""];
""806_fallback"" [label=""fallback""];
""806_crowdSale"" [label=""crowdSale""];
""806_retrieveTokens"" [label=""retrieveTokens""];
""806_start"" -> ""806_onlyOwner"";
""806_testFunded"" -> ""806_exchangeRate"";
""806_crowdSale"" -> ""806_exchangeRate"";
""806_crowdSale"" -> ""806_add"";
""806_retrieveTokens"" -> ""806_onlyOwner"";
""806_testFunded"" -> ""806_mul"";
""806_withdrawal"" -> ""806_onlyOwner"";
""806_testFunded"" -> ""806_add"";
""806_stop"" -> ""806_onlyOwner"";
""806_fallback"" -> ""806_crowdSale"";
""806_kill"" -> ""806_onlyOwner"";
""806_crowdSale"" -> ""806_mul"";
}
"
0x5ad9e100bc58e57a20cf1cae204f046006d27a27.sol,Ambassador,contract Ambassador { using SafeMath for uint256; CoinCrowdICO icoContract; uint256 public startRC; uint256 public endRC; address internal contractOwner; uint256 public soldTokensWithoutBonus; function euroRaisedRc() public view returns(uint256 euro) { return icoContract.euroRaised(soldTokensWithoutBonus); },0,"subgraph cluster_518_Ambassador {
label=""Ambassador"";
""518_euroRaisedRc"" [label=""euroRaisedRc""];
""518_fallback"" [label=""fallback""];
""518_updateTime"" [label=""updateTime""];
""518_setTimeRC"" [label=""setTimeRC""];
""518_Ambassador"" [label=""Ambassador""];
""518_Ambassador"" -> ""518_setTimeRC"";
""518_updateTime"" -> ""518_onlyIcoContract"";
}
"
0x02f2d4a04e6e01ace88bd2cd632875543b2ef577.sol,ICOToken,"contract ICOToken is BaseToken { uint256 public icoRatio; uint256 public icoEndtime; address public icoSender; address public icoHolder; event ICO(address indexed from, uint256 indexed value, uint256 tokenValue); event Withdraw(address indexed from, address indexed holder, uint256 value); modifier onlyBefore() { if (now > icoEndtime) { revert(); }",0,"subgraph cluster_410_ICOToken {
label=""ICOToken"";
""410_fallback"" [label=""fallback""];
""410_withdraw"" [label=""withdraw""];
""410_fallback"" -> ""410__transfer"";
""410_fallback"" -> ""410_onlyBefore"";
}
"
0x037d67c29f19a5451c731312a4c02043143c61ca.sol,RADIUM,"contract RADIUM { string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply; uint256 public RadiumSupply = 200000000000; uint256 public buyPrice = 20000000; address public creator; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event FundTransfer(address backer, uint amount, bool isContribution); function RADIUM() public { totalSupply = RadiumSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; creator = msg.sender; }",0,"subgraph cluster_216_RADIUM {
label=""RADIUM"";
""216_fallback"" [label=""fallback""];
""216__transfer"" [label=""_transfer""];
""216_transfer"" [label=""transfer""];
""216_RADIUM"" [label=""RADIUM""];
""216_transfer"" -> ""216__transfer"";
}
"
0x1fd27f0cfc6f273b87a5e0f6fcf063422e7bcd6a.sol,AgrocoinToken,"contract AgrocoinToken is Ownable, ERC20Burnable, ERC20Detailed { string internal NAME = ; string internal SYMBOL = ; uint8 internal DECIMALS = 18; uint256 internal INITIAL_SUPPLY = 600000000 * 10 ** uint256(DECIMALS); constructor() ERC20Burnable() ERC20Detailed(NAME, SYMBOL, DECIMALS) ERC20() public { _mint(msg.sender, INITIAL_SUPPLY); }",0,"subgraph cluster_868_AgrocoinToken {
label=""AgrocoinToken"";
""868_constructor"" [label=""constructor""];
""868_constructor"" -> ""868__mint"";
""868_constructor"" -> ""868_constructor"";
}
"
0x1806b3527c18fb532c46405f6f014c1f381b499a.sol,PlanetCryptoToken,"contract PlanetCryptoToken is ERC721Full_custom{ using Percent for Percent.percent; event referralPaid(address indexed search_to, address to, uint256 amnt, uint256 timestamp); event issueCoinTokens(address indexed searched_to, address to, uint256 amnt, uint256 timestamp); event landPurchased(uint256 indexed search_token_id, address indexed search_buyer, uint256 token_id, address buyer, bytes32 name, int256 center_lat, int256 center_lng, uint256 size, uint256 bought_at, uint256 empire_score, uint256 timestamp); event taxDistributed(uint256 amnt, uint256 total_players, uint256 timestamp); event cardBought( uint256 indexed search_token_id, address indexed search_from, address indexed search_to, uint256 token_id, address from, address to, bytes32 name, uint256 orig_value, uint256 new_value, uint256 empireScore, uint256 newEmpireScore, uint256 now); event cardChange( uint256 indexed search_token_id, address indexed search_owner, uint256 token_id, address owner, uint256 changeType, bytes32 data, uint256 now); address owner; address devBankAddress; address tokenBankAddress; modifier onlyOwner() { require(msg.sender == owner); _; }",0,"subgraph cluster_4478_PlanetCryptoToken {
label=""PlanetCryptoToken"";
""4478_processDevPayment"" [label=""processDevPayment""];
""4478_setupZoomLvl"" [label=""setupZoomLvl""];
""4478_processReferer"" [label=""processReferer""];
""4478_getToken"" [label=""getToken""];
""4478_process_swap"" [label=""process_swap""];
""4478_p_update_action"" [label=""p_update_action""];
""4478_current_plot_price"" [label=""current_plot_price""];
""4478_processPurchase"" [label=""processPurchase""];
""4478_tokenURI"" [label=""tokenURI""];
""4478_m"" [label=""m""];
""4478_total_land_sold"" [label=""total_land_sold""];
""4478_transferTokens"" [label=""transferTokens""];
""4478_tokens_rewards_allocated"" [label=""tokens_rewards_allocated""];
""4478_buyLand"" [label=""buyLand""];
""4478_setupPlotOwnership"" [label=""setupPlotOwnership""];
""4478_calcPlayerDivs"" [label=""calcPlayerDivs""];
""4478_transferCards"" [label=""transferCards""];
""4478_transferFrom"" [label=""transferFrom""];
""4478_buyLandWithTokens"" [label=""buyLandWithTokens""];
""4478_withdrawTaxEarning"" [label=""withdrawTaxEarning""];
""4478_all_playerObjects"" [label=""all_playerObjects""];
""4478_tax_distributed"" [label=""tax_distributed""];
""4478_tokens_rewards_available"" [label=""tokens_rewards_available""];
""4478_safeTransferFrom"" [label=""safeTransferFrom""];
""4478_getAllPlayerObjectLen"" [label=""getAllPlayerObjectLen""];
""4478_queryPlotExists"" [label=""queryPlotExists""];
""4478_processBurn"" [label=""processBurn""];
""4478_getTokenEnhanced"" [label=""getTokenEnhanced""];
""4478_constructor"" [label=""constructor""];
""4478_queryMap"" [label=""queryMap""];
""4478_updateCardDetail"" [label=""updateCardDetail""];
""4478_transferPlayer"" [label=""transferPlayer""];
""4478_total_empire_score"" [label=""total_empire_score""];
""4478_burn"" [label=""burn""];
""4478_taxEarningsAvailable"" [label=""taxEarningsAvailable""];
""4478_p_withdrawDevHoldings"" [label=""p_withdrawDevHoldings""];
""4478_total_trades"" [label=""total_trades""];
""4478_buyCard"" [label=""buyCard""];
""4478_initPlayers"" [label=""initPlayers""];
""4478_updateCardDetail"" -> ""4478_ownerOf"";
""4478_buyCard"" -> ""4478_process_swap"";
""4478_buyCard"" -> ""4478_processReferer"";
""4478_burn"" -> ""4478_processBurn"";
""4478_constructor"" -> ""4478_constructor"";
""4478_buyLandWithTokens"" -> ""4478_processPurchase"";
""4478_buyCard"" -> ""4478_calcPlayerDivs"";
""4478_buyCard"" -> ""4478_validateResale"";
""4478_buyCard"" -> ""4478_updateUsersLastAccess"";
""4478_getTokenEnhanced"" -> ""4478_ownerOf"";
""4478_getToken"" -> ""4478_ownerOf"";
""4478_tokenURI"" -> ""4478__exists"";
""4478_transferTokens"" -> ""4478_onlyOwner"";
""4478_buyLand"" -> ""4478_validatePurchase"";
""4478_p_update_action"" -> ""4478_onlyOwner"";
""4478_safeTransferFrom"" -> ""4478_transferFrom"";
""4478_updateCardDetail"" -> ""4478_processDevPayment"";
""4478_initPlayers"" -> ""4478_onlyOwner"";
""4478_buyLand"" -> ""4478_processDevPayment"";
""4478_processBurn"" -> ""4478__burn"";
""4478_safeTransferFrom"" -> ""4478_safeTransferFrom"";
""4478_buyLandWithTokens"" -> ""4478_updateUsersLastAccess"";
""4478_transferFrom"" -> ""4478_process_swap"";
""4478_buyLandWithTokens"" -> ""4478_validateLand"";
""4478_p_update_action"" -> ""4478_processBurn"";
""4478_transferFrom"" -> ""4478_transferFrom"";
""4478_transferFrom"" -> ""4478__isApprovedOrOwner"";
""4478_buyLandWithTokens"" -> ""4478_validateTokenPurchase"";
""4478_setupPlotOwnership"" -> ""4478_setupZoomLvl"";
""4478_buyLand"" -> ""4478_calcPlayerDivs"";
""4478_safeTransferFrom"" -> ""4478__checkOnERC721Received"";
""4478_burn"" -> ""4478_ownerOf"";
""4478_buyCard"" -> ""4478_internal_transferFrom"";
""4478_buyLand"" -> ""4478_processPurchase"";
""4478_buyLand"" -> ""4478_processReferer"";
""4478_transferTokens"" -> ""4478_transferCards"";
""4478_transferCards"" -> ""4478__mint"";
""4478_buyCard"" -> ""4478_processDevPayment"";
""4478_buyLand"" -> ""4478_updateUsersLastAccess"";
""4478_processPurchase"" -> ""4478_setupPlotOwnership"";
""4478_processPurchase"" -> ""4478_totalSupply"";
""4478_buyLand"" -> ""4478_validateLand"";
""4478_p_update_action"" -> ""4478_ownerOf"";
""4478_transferCards"" -> ""4478_setupPlotOwnership"";
""4478_processPurchase"" -> ""4478__mint"";
""4478_buyCard"" -> ""4478_ownerOf"";
""4478_initPlayers"" -> ""4478_transferPlayer"";
}
"
0x1776e1f26f98b1a5df9cd347953a26dd3cb46671.sol,NumeraireBackend,"contract NumeraireBackend is StoppableShareable, NumeraireShared { address public delegateContract; bool public contractUpgradable = true; address[] public previousDelegates; string public standard = ; string public name = ; string public symbol = ; uint256 public decimals = 18; event DelegateChanged(address oldAddress, address newAddress); function NumeraireBackend(address[] _owners, uint256 _num_required, uint256 _initial_disbursement) StoppableShareable(_owners, _num_required) { totalSupply = 0; total_minted = 0; initial_disbursement = _initial_disbursement; deploy_time = block.timestamp; }",0,"subgraph cluster_1603_NumeraireBackend {
label=""NumeraireBackend"";
""1603_approve"" [label=""approve""];
""1603_numeraiTransfer"" [label=""numeraiTransfer""];
""1603_transfer"" [label=""transfer""];
""1603_createRound"" [label=""createRound""];
""1603_balanceOf"" [label=""balanceOf""];
""1603_NumeraireBackend"" [label=""NumeraireBackend""];
""1603_transferFrom"" [label=""transferFrom""];
""1603_stakeOnBehalf"" [label=""stakeOnBehalf""];
""1603_getTournament"" [label=""getTournament""];
""1603_getRound"" [label=""getRound""];
""1603_destroyStake"" [label=""destroyStake""];
""1603_disableContractUpgradability"" [label=""disableContractUpgradability""];
""1603_mint"" [label=""mint""];
""1603_getStake"" [label=""getStake""];
""1603_stake"" [label=""stake""];
""1603_releaseStake"" [label=""releaseStake""];
""1603_withdraw"" [label=""withdraw""];
""1603_changeApproval"" [label=""changeApproval""];
""1603_changeDelegate"" [label=""changeDelegate""];
""1603_claimTokens"" [label=""claimTokens""];
""1603_createTournament"" [label=""createTournament""];
""1603_stakeOnBehalf"" -> ""1603_onlyPayloadSize"";
""1603_transfer"" -> ""1603_stopInEmergency"";
""1603_changeApproval"" -> ""1603_stopInEmergency"";
""1603_approve"" -> ""1603_stopInEmergency"";
""1603_transferFrom"" -> ""1603_safeSubtract"";
""1603_claimTokens"" -> ""1603_onlyOwner"";
""1603_stake"" -> ""1603_stopInEmergency"";
""1603_destroyStake"" -> ""1603_stopInEmergency"";
""1603_transfer"" -> ""1603_onlyPayloadSize"";
""1603_transferFrom"" -> ""1603_isOwner"";
""1603_NumeraireBackend"" -> ""1603_StoppableShareable"";
""1603_transferFrom"" -> ""1603_safeAdd"";
""1603_transferFrom"" -> ""1603_onlyPayloadSize"";
""1603_numeraiTransfer"" -> ""1603_onlyPayloadSize"";
""1603_mint"" -> ""1603_stopInEmergency"";
""1603_transferFrom"" -> ""1603_stopInEmergency"";
""1603_disableContractUpgradability"" -> ""1603_onlyManyOwners"";
""1603_releaseStake"" -> ""1603_onlyPayloadSize"";
""1603_approve"" -> ""1603_onlyPayloadSize"";
""1603_changeApproval"" -> ""1603_onlyPayloadSize"";
""1603_withdraw"" -> ""1603_onlyPayloadSize"";
""1603_destroyStake"" -> ""1603_onlyPayloadSize"";
""1603_releaseStake"" -> ""1603_stopInEmergency"";
""1603_transfer"" -> ""1603_safeAdd"";
""1603_stakeOnBehalf"" -> ""1603_stopInEmergency"";
""1603_transfer"" -> ""1603_safeSubtract"";
""1603_changeDelegate"" -> ""1603_onlyManyOwners"";
}
"
0x0e8d6b471e332f140e7d9dbb99e5e3822f728da6.sol,ManagedToken,"contract ManagedToken is ERC20Token, MultiOwnable { bool public allowTransfers = false; bool public issuanceFinished = false; ITokenEventListener public eventListener; event AllowTransfersChanged(bool _newState); event Issue(address indexed _to, uint256 _value); event Destroy(address indexed _from, uint256 _value); event IssuanceFinished(); modifier transfersAllowed() { require(allowTransfers); _; }",0,"subgraph cluster_942_ManagedToken {
label=""ManagedToken"";
""942_decreaseApproval"" [label=""decreaseApproval""];
""942_destroy"" [label=""destroy""];
""942_transfer"" [label=""transfer""];
""942_increaseApproval"" [label=""increaseApproval""];
""942_hasListener"" [label=""hasListener""];
""942_transferFrom"" [label=""transferFrom""];
""942_finishIssuance"" [label=""finishIssuance""];
""942_issue"" [label=""issue""];
""942_ManagedToken"" [label=""ManagedToken""];
""942_setAllowTransfers"" [label=""setAllowTransfers""];
""942_setListener"" [label=""setListener""];
""942_setListener"" -> ""942_onlyOwner"";
""942_issue"" -> ""942_safeAdd"";
""942_issue"" -> ""942_canIssue"";
""942_transferFrom"" -> ""942_transferFrom"";
""942_increaseApproval"" -> ""942_safeAdd"";
""942_transfer"" -> ""942_transfersAllowed"";
""942_finishIssuance"" -> ""942_onlyOwner"";
""942_transferFrom"" -> ""942_hasListener"";
""942_issue"" -> ""942_onlyOwner"";
""942_transferFrom"" -> ""942_transfersAllowed"";
""942_transfer"" -> ""942_transfer"";
""942_decreaseApproval"" -> ""942_safeSub"";
""942_destroy"" -> ""942_safeSub"";
""942_transfer"" -> ""942_hasListener"";
""942_ManagedToken"" -> ""942__setOwners"";
""942_setAllowTransfers"" -> ""942_onlyOwner"";
}
"
0x5278852029f4fdf91eb2d40614ff49b4b4b7c765.sol,IFUM,"contract IFUM is Ownable, ERC20Burnable { string public name; string public symbol; uint8 public decimals; address private _crowdsale; bool private _freezed; mapping (address => bool) private _locked; constructor() public { symbol = ; name = ; decimals = 8; _crowdsale = address(0); _freezed = true; }",0,"subgraph cluster_1140_IFUM {
label=""IFUM"";
""1140_transfer"" [label=""transfer""];
""1140_isLocked"" [label=""isLocked""];
""1140_decreaseAllowance"" [label=""decreaseAllowance""];
""1140_constructor"" [label=""constructor""];
""1140_isFreezed"" [label=""isFreezed""];
""1140_lockAccount"" [label=""lockAccount""];
""1140_burn"" [label=""burn""];
""1140_burnFrom"" [label=""burnFrom""];
""1140_setCrowdsale"" [label=""setCrowdsale""];
""1140_transferFrom"" [label=""transferFrom""];
""1140_unfreeze"" [label=""unfreeze""];
""1140_increaseAllowance"" [label=""increaseAllowance""];
""1140_unlockAccount"" [label=""unlockAccount""];
""1140_approve"" [label=""approve""];
""1140_increaseAllowance"" -> ""1140_test"";
""1140_transferFrom"" -> ""1140_transferFrom"";
""1140_unlockAccount"" -> ""1140_isLocked"";
""1140_increaseAllowance"" -> ""1140_increaseAllowance"";
""1140_burnFrom"" -> ""1140_burnFrom"";
""1140_approve"" -> ""1140_test"";
""1140_burnFrom"" -> ""1140_test"";
""1140_transferFrom"" -> ""1140_test"";
""1140_lockAccount"" -> ""1140_isLocked"";
""1140_transfer"" -> ""1140_transfer"";
""1140_lockAccount"" -> ""1140_onlyOwner"";
""1140_setCrowdsale"" -> ""1140__mint"";
""1140_decreaseAllowance"" -> ""1140_decreaseAllowance"";
""1140_decreaseAllowance"" -> ""1140_test"";
""1140_transfer"" -> ""1140_test"";
""1140_unlockAccount"" -> ""1140_onlyOwner"";
""1140_burn"" -> ""1140_test"";
""1140_burn"" -> ""1140_burn"";
""1140_approve"" -> ""1140_approve"";
}
"
0xc398891b43f1b91158dca87c63a88b80d000c248.sol,IBIT,"contract IBIT is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 45 * 1 days; uint public round2 = now + 35 * 1 days; uint public round1 = now + 30 * 1 days; uint256 public totalSupply = 950000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 200; uint256 public tokensPerEth = 1000021e8; uint public target0drop = 5000000; uint public progress0drop = 0; address multisig = 0x723D0666908ADdc626C29407F0B5e7C0881b5185; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_1261_IBIT {
label=""IBIT"";
""1261_add"" [label=""add""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_constructor"" [label=""constructor""];
""1261_fallback"" [label=""fallback""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_transfer"" [label=""transfer""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_approve"" [label=""approve""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_allowance"" [label=""allowance""];
""1261_burn"" [label=""burn""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_getTokens"" [label=""getTokens""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_distr"" [label=""distr""];
""1261_Distribute"" [label=""Distribute""];
""1261_withdraw"" [label=""withdraw""];
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_distr"" -> ""1261_canDistr"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
}
"
0xde5b6358808e783df374d1039f483e6ac02c9a28.sol,DecentralizedDinar,"contract DecentralizedDinar is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 10000000000000000000000000000; balances[0x5f52Fa795e17647D1E635cCA8302bcdE00a4d66c] = _totalSupply; emit Transfer(address(0), 0x5f52Fa795e17647D1E635cCA8302bcdE00a4d66c, _totalSupply); }",0,"subgraph cluster_543_DecentralizedDinar {
label=""DecentralizedDinar"";
""543_approveAndCall"" [label=""approveAndCall""];
""543_balanceOf"" [label=""balanceOf""];
""543_constructor"" [label=""constructor""];
""543_fallback"" [label=""fallback""];
""543_transfer"" [label=""transfer""];
""543_allowance"" [label=""allowance""];
""543_approve"" [label=""approve""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transferFrom"" [label=""transferFrom""];
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeSub"";
}
"
0x28925299ee1edd8fd68316eaa64b651456694f0f.sol,ExToke,"contract ExToke is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; uint256 public totalEthInWei; uint256 public unitsOneEthCanBuy; address public fundsWallet; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function ExToke() public { symbol = ; name = ; decimals = 18; _totalSupply = 1000000000000000000000000000; unitsOneEthCanBuy = 1000000; balances[0x4498898856971DA7A5f4B848D52E071AFd1957c5] = _totalSupply; fundsWallet = msg.sender; Transfer(address(0), 0x4498898856971DA7A5f4B848D52E071AFd1957c5, _totalSupply); }",0,"subgraph cluster_613_ExToke {
label=""ExToke"";
""613_transferFrom"" [label=""transferFrom""];
""613_approve"" [label=""approve""];
""613_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""613_ExToke"" [label=""ExToke""];
""613_allowance"" [label=""allowance""];
""613_balanceOf"" [label=""balanceOf""];
""613_transfer"" [label=""transfer""];
""613_fallback"" [label=""fallback""];
""613_approveAndCall"" [label=""approveAndCall""];
""613_totalSupply"" [label=""totalSupply""];
""613_transfer"" -> ""613_safeSub"";
""613_transferAnyERC20Token"" -> ""613_onlyOwner"";
""613_transferFrom"" -> ""613_safeSub"";
""613_transfer"" -> ""613_safeAdd"";
""613_transferFrom"" -> ""613_safeAdd"";
}
"
0x18df60ddaeba4393e5cc6ecfc1e5bb1d20dd6239.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },0,"subgraph cluster_1094_MiniMeToken {
label=""MiniMeToken"";
""1094_min"" [label=""min""];
""1094_getValueAt"" [label=""getValueAt""];
""1094_fallback"" [label=""fallback""];
""1094_MiniMeToken"" [label=""MiniMeToken""];
""1094_updateValueAtNow"" [label=""updateValueAtNow""];
""1094_totalSupply"" [label=""totalSupply""];
""1094_approve"" [label=""approve""];
""1094_transferFrom"" [label=""transferFrom""];
""1094_transfer"" [label=""transfer""];
""1094_createCloneToken"" [label=""createCloneToken""];
""1094_approveAndCall"" [label=""approveAndCall""];
""1094_totalSupplyAt"" [label=""totalSupplyAt""];
""1094_balanceOfAt"" [label=""balanceOfAt""];
""1094_isContract"" [label=""isContract""];
""1094_destroyTokens"" [label=""destroyTokens""];
""1094_claimTokens"" [label=""claimTokens""];
""1094_allowance"" [label=""allowance""];
""1094_doTransfer"" [label=""doTransfer""];
""1094_balanceOf"" [label=""balanceOf""];
""1094_generateTokens"" [label=""generateTokens""];
""1094_enableTransfers"" [label=""enableTransfers""];
""1094_totalSupply"" -> ""1094_totalSupplyAt"";
""1094_destroyTokens"" -> ""1094_updateValueAtNow"";
""1094_balanceOfAt"" -> ""1094_getValueAt"";
""1094_transferFrom"" -> ""1094_doTransfer"";
""1094_doTransfer"" -> ""1094_balanceOfAt"";
""1094_doTransfer"" -> ""1094_isContract"";
""1094_doTransfer"" -> ""1094_updateValueAtNow"";
""1094_approveAndCall"" -> ""1094_approve"";
""1094_fallback"" -> ""1094_isContract"";
""1094_generateTokens"" -> ""1094_totalSupply"";
""1094_balanceOf"" -> ""1094_balanceOfAt"";
""1094_enableTransfers"" -> ""1094_onlyController"";
""1094_approve"" -> ""1094_isContract"";
""1094_totalSupplyAt"" -> ""1094_min"";
""1094_totalSupplyAt"" -> ""1094_getValueAt"";
""1094_claimTokens"" -> ""1094_onlyController"";
""1094_generateTokens"" -> ""1094_balanceOf"";
""1094_destroyTokens"" -> ""1094_balanceOf"";
""1094_transfer"" -> ""1094_doTransfer"";
""1094_generateTokens"" -> ""1094_updateValueAtNow"";
""1094_destroyTokens"" -> ""1094_totalSupply"";
""1094_balanceOfAt"" -> ""1094_min"";
""1094_generateTokens"" -> ""1094_onlyController"";
""1094_destroyTokens"" -> ""1094_onlyController"";
}
"
0x028ff933bd86bd4d699b1643477f858626482d35.sol,LUCKER,contract LUCKER is Ownable{ tokenTransfer public bebTokenTransfer; uint8 decimals = 18; uint256 opentime=now+3600; uint256 opensome; uint256 _opensome; uint256 BEBMAX; uint256 BEBtime; uint256 Numberofairdrops; address ownersto; struct luckuser{ uint256 _time; uint256 _eth; uint256 _beb; uint256 _bz; uint256 _romd; uint256 Bond; uint256 sumeth; uint256 sumbeb; },0,"subgraph cluster_843_LUCKER {
label=""LUCKER"";
""843_setAirdrop"" [label=""setAirdrop""];
""843_LUCKER"" [label=""LUCKER""];
""843_querBalance"" [label=""querBalance""];
""843_present"" [label=""present""];
""843_BEBwithdrawal"" [label=""BEBwithdrawal""];
""843_getLUCK"" [label=""getLUCK""];
""843_setLUCK"" [label=""setLUCK""];
""843_getTokenBalanceUser"" [label=""getTokenBalanceUser""];
""843_random"" [label=""random""];
""843_ETHwithdrawal"" [label=""ETHwithdrawal""];
""843_fallback"" [label=""fallback""];
""843_AirdropAuthorization"" [label=""AirdropAuthorization""];
""843_gettime"" [label=""gettime""];
""843_eth"" [label=""eth""];
""843_getTokenBalance"" [label=""getTokenBalance""];
""843_ETHwithdrawal"" -> ""843_onlyOwner"";
""843_setAirdrop"" -> ""843_onlyOwner"";
""843_BEBwithdrawal"" -> ""843_onlyOwner"";
""843_present"" -> ""843_random"";
""843_setLUCK"" -> ""843_onlyOwner"";
}
"
0x4c32322f353fcb459b5031701c0d775619f57e8a.sol,GAPPOICOIN,"contract GAPPOICOIN is ERC223, Ownable { using SafeMath for uint256; string public name = ; string public symbol = ; uint8 public decimals = 8; uint256 public totalSupply = 334e6 * 1e8; uint256 public distributeAmount = 0; bool public mintingFinished = false; address public founder = 0x5A0013C649c19458a608C45b40f3b6ecafBa628C; address public gappoimaster= 0xfC5529D5b69506c0d757E9127fC3F22B31aEd283; address public activityFunds = 0x4DCdCdcFc85A97775C44c2aa3C0352524cFE5dd4; address public momosFunds = 0x7Df572DA7D93041264F21Ad265bF70C0F324f658; mapping(address => uint256) public balanceOf; mapping(address => mapping (address => uint256)) public allowance; mapping (address => bool) public frozenAccount; mapping (address => uint256) public unlockUnixTime; event FrozenFunds(address indexed target, bool frozen); event LockedFunds(address indexed target, uint256 locked); event Burn(address indexed from, uint256 amount); event Mint(address indexed to, uint256 amount); event MintFinished(); function GAPPOICOIN() public { owner = activityFunds; balanceOf[founder] = totalSupply.mul(30).div(100); balanceOf[gappoimaster] = totalSupply.mul(10).div(100); balanceOf[activityFunds] = totalSupply.mul(30).div(100); balanceOf[momosFunds] = totalSupply.mul(30).div(100); }",0,"subgraph cluster_1895_GAPPOICOIN {
label=""GAPPOICOIN"";
""1895_isContract"" [label=""isContract""];
""1895_transferFrom"" [label=""transferFrom""];
""1895_decimals"" [label=""decimals""];
""1895_autoDistribute"" [label=""autoDistribute""];
""1895_transferToContract"" [label=""transferToContract""];
""1895_freezeAccounts"" [label=""freezeAccounts""];
""1895_distributeAirdrop"" [label=""distributeAirdrop""];
""1895_GAPPOICOIN"" [label=""GAPPOICOIN""];
""1895_fallback"" [label=""fallback""];
""1895_mint"" [label=""mint""];
""1895_burn"" [label=""burn""];
""1895_balanceOf"" [label=""balanceOf""];
""1895_approve"" [label=""approve""];
""1895_collectTokens"" [label=""collectTokens""];
""1895_setDistributeAmount"" [label=""setDistributeAmount""];
""1895_allowance"" [label=""allowance""];
""1895_finishMinting"" [label=""finishMinting""];
""1895_lockupAccounts"" [label=""lockupAccounts""];
""1895_symbol"" [label=""symbol""];
""1895_name"" [label=""name""];
""1895_transfer"" [label=""transfer""];
""1895_totalSupply"" [label=""totalSupply""];
""1895_transferToAddress"" [label=""transferToAddress""];
""1895_transfer"" -> ""1895_isContract"";
""1895_freezeAccounts"" -> ""1895_onlyOwner"";
""1895_mint"" -> ""1895_canMint"";
""1895_lockupAccounts"" -> ""1895_onlyOwner"";
""1895_finishMinting"" -> ""1895_canMint"";
""1895_mint"" -> ""1895_onlyOwner"";
""1895_transfer"" -> ""1895_transferToContract"";
""1895_fallback"" -> ""1895_autoDistribute"";
""1895_setDistributeAmount"" -> ""1895_onlyOwner"";
""1895_collectTokens"" -> ""1895_onlyOwner"";
""1895_burn"" -> ""1895_onlyOwner"";
""1895_transfer"" -> ""1895_transferToAddress"";
""1895_finishMinting"" -> ""1895_onlyOwner"";
}
"
0x5c0669c6718bf35112d4e643fe80bf7fb06dedeb.sol,NOUR,"contract NOUR { mapping(address => uint256) public balances; mapping(address => mapping (address => uint256)) public allowed; using SafeMath for uint256; address public owner; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 private constant MAX_UINT256 = 2**256 -1 ; event Transfer(address indexed from, address indexed to, uint tokens); event Approval(address indexed tokenOwner, address indexed spender, uint tokens); bool lock = false; constructor( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol ) public { owner = msg.sender; balances[msg.sender] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",0,"subgraph cluster_463_NOUR {
label=""NOUR"";
""463_allowance"" [label=""allowance""];
""463_constructor"" [label=""constructor""];
""463_balanceOf"" [label=""balanceOf""];
""463_setLock"" [label=""setLock""];
""463_approve"" [label=""approve""];
""463_transfer"" [label=""transfer""];
""463_transferOwnership"" [label=""transferOwnership""];
""463_transferFrom"" [label=""transferFrom""];
""463_setLock"" -> ""463_onlyOwner"";
""463_transferOwnership"" -> ""463_onlyOwner"";
}
"
0x77fa1d1ded3f4bed737e9ae870a6f3605445df9c.sol,CryptoPokemon,contract CryptoPokemon { using SafeMath for uint256; mapping (address => bool) private admins; mapping (uint => uint256) public levels; mapping (uint => bool) private lock; address contractCreator; address devFeeAddress; address tournamentPrizeAddress; function CryptoPokemon () public { contractCreator = msg.sender; devFeeAddress = 0xFb2D26b0caa4C331bd0e101460ec9dbE0A4783A4; tournamentPrizeAddress = 0xC6784e712229087fC91E0c77fcCb6b2F1fDE2Dc2; admins[contractCreator] = true; },0,"subgraph cluster_675_CryptoPokemon {
label=""CryptoPokemon"";
""675_removeLock"" [label=""removeLock""];
""675_getPokemonCurrentPrice"" [label=""getPokemonCurrentPrice""];
""675_deletePokemon"" [label=""deletePokemon""];
""675_GetGamestatus"" [label=""GetGamestatus""];
""675_getPokemonLevel"" [label=""getPokemonLevel""];
""675_getPokemonDetails"" [label=""getPokemonDetails""];
""675_settournamentPrizeAddress"" [label=""settournamentPrizeAddress""];
""675_addPokemon"" [label=""addPokemon""];
""675_removeAdmin"" [label=""removeAdmin""];
""675_pauseGame"" [label=""pauseGame""];
""675_getPokemonOwner"" [label=""getPokemonOwner""];
""675_totalSupply"" [label=""totalSupply""];
""675_unPauseGame"" [label=""unPauseGame""];
""675_addAdmin"" [label=""addAdmin""];
""675_purchasePokemon"" [label=""purchasePokemon""];
""675_setOwner"" [label=""setOwner""];
""675_setdevFeeAddress"" [label=""setdevFeeAddress""];
""675_CryptoPokemon"" [label=""CryptoPokemon""];
""675_setPokemon"" [label=""setPokemon""];
""675_addLock"" [label=""addLock""];
""675_getPokemonLock"" [label=""getPokemonLock""];
""675_addAdmin"" -> ""675_onlyContractCreator"";
""675_settournamentPrizeAddress"" -> ""675_onlyContractCreator"";
""675_removeAdmin"" -> ""675_onlyContractCreator"";
""675_addPokemon"" -> ""675_onlyAdmins"";
""675_setdevFeeAddress"" -> ""675_onlyContractCreator"";
""675_deletePokemon"" -> ""675_onlyContractCreator"";
""675_unPauseGame"" -> ""675_onlyContractCreator"";
""675_setOwner"" -> ""675_onlyContractCreator"";
""675_pauseGame"" -> ""675_onlyContractCreator"";
""675_removeLock"" -> ""675_onlyContractCreator"";
""675_setPokemon"" -> ""675_onlyContractCreator"";
""675_addLock"" -> ""675_onlyContractCreator"";
}
"
0xeabe0704fbcc5fc7dd5f43c10fc158de0c466e69.sol,GeneInfomationToken,contract GeneInfomationToken is StandardToken { string public name; uint8 public decimals; string public symbol; string public version = ; uint256 public unitsOneEthCanBuy; uint256 public totalEthInWei; address public fundsWallet; function GeneInfomationToken() { balances[msg.sender] = 1000000000000000000000000000; totalSupply = 1000000000000000000000000000; name = ; decimals = 18; symbol = ; unitsOneEthCanBuy = 10; fundsWallet = msg.sender; },0,"subgraph cluster_421_GeneInfomationToken {
label=""GeneInfomationToken"";
""421_GeneInfomationToken"" [label=""GeneInfomationToken""];
""421_fallback"" [label=""fallback""];
""421_approveAndCall"" [label=""approveAndCall""];
}
"
0x5cc0076a6bbf43344a7923c5cca40f5bdff2970e.sol,LiteToken,"contract LiteToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function LiteToken() public { symbol = ; name = ; decimals = 4; _totalSupply = 84000000000000; balances[0x186d32c30f1DeFfF1eeDb34Ee661426918243545] = _totalSupply; emit Transfer(address(0), 0x186d32c30f1DeFfF1eeDb34Ee661426918243545, _totalSupply); }",0,"subgraph cluster_543_LiteToken {
label=""LiteToken"";
""543_allowance"" [label=""allowance""];
""543_balanceOf"" [label=""balanceOf""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_LiteToken"" [label=""LiteToken""];
""543_transfer"" [label=""transfer""];
""543_fallback"" [label=""fallback""];
""543_totalSupply"" [label=""totalSupply""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_approve"" [label=""approve""];
""543_transferFrom"" [label=""transferFrom""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
}
"
0x52d208f3ff79985b5a50a55fd35334f924a9f643.sol,OSSCardToken,"contract OSSCardToken is ERC721 { event Birth(uint256 tokenId, string slug, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address owner, string slug); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.0001 ether; uint256 private firstStepLimit = 0.053613 ether; uint256 private secondStepLimit = 0.564957 ether; mapping (uint256 => address) public cardIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public cardIndexToApproved; mapping (uint256 => uint256) private cardIndexToPrice; address public ceoAddress; address public cooAddress; struct Card { string slug; }",0,"subgraph cluster_919_OSSCardToken {
label=""OSSCardToken"";
""919_transfer"" [label=""transfer""];
""919_setCEO"" [label=""setCEO""];
""919_symbol"" [label=""symbol""];
""919_transferFrom"" [label=""transferFrom""];
""919_priceOf"" [label=""priceOf""];
""919_setCOO"" [label=""setCOO""];
""919__approved"" [label=""_approved""];
""919_ownerOf"" [label=""ownerOf""];
""919_takeOwnership"" [label=""takeOwnership""];
""919_payout"" [label=""payout""];
""919_approve"" [label=""approve""];
""919_tokensOfOwner"" [label=""tokensOfOwner""];
""919_totalSupply"" [label=""totalSupply""];
""919__payout"" [label=""_payout""];
""919_name"" [label=""name""];
""919__createCard"" [label=""_createCard""];
""919_implementsERC721"" [label=""implementsERC721""];
""919_OSSCardToken"" [label=""OSSCardToken""];
""919__transfer"" [label=""_transfer""];
""919_balanceOf"" [label=""balanceOf""];
""919_createCard"" [label=""createCard""];
""919_purchase"" [label=""purchase""];
""919__addressNotNull"" [label=""_addressNotNull""];
""919__owns"" [label=""_owns""];
""919_getCard"" [label=""getCard""];
""919_purchase"" -> ""919__transfer"";
""919_transfer"" -> ""919__transfer"";
""919__createCard"" -> ""919__transfer"";
""919_transferFrom"" -> ""919__owns"";
""919_setCOO"" -> ""919_onlyCEO"";
""919_takeOwnership"" -> ""919__transfer"";
""919_transferFrom"" -> ""919__addressNotNull"";
""919_transferFrom"" -> ""919__transfer"";
""919_tokensOfOwner"" -> ""919_balanceOf"";
""919_transfer"" -> ""919__owns"";
""919_createCard"" -> ""919__createCard"";
""919_payout"" -> ""919__payout"";
""919_createCard"" -> ""919_onlyCOO"";
""919_tokensOfOwner"" -> ""919_totalSupply"";
""919_setCEO"" -> ""919_onlyCEO"";
""919_payout"" -> ""919_onlyCLevel"";
""919_purchase"" -> ""919__addressNotNull"";
""919_transferFrom"" -> ""919__approved"";
""919_approve"" -> ""919__owns"";
""919_takeOwnership"" -> ""919__approved"";
""919_transfer"" -> ""919__addressNotNull"";
""919_takeOwnership"" -> ""919__addressNotNull"";
}
"
0x287fe6172eec4cde6e76dd85e65e5b3ea4760972.sol,MinterRole,contract MinterRole { using Roles for Roles.Role; event MinterAdded(address indexed account); event MinterRemoved(address indexed account); Roles.Role private _minters; constructor () internal { _addMinter(msg.sender); },0,"subgraph cluster_953_MinterRole {
label=""MinterRole"";
""953_isMinter"" [label=""isMinter""];
""953_renounceMinter"" [label=""renounceMinter""];
""953_constructor"" [label=""constructor""];
""953_addMinter"" [label=""addMinter""];
""953__addMinter"" [label=""_addMinter""];
""953__removeMinter"" [label=""_removeMinter""];
""953_renounceMinter"" -> ""953__removeMinter"";
""953_constructor"" -> ""953__addMinter"";
""953_addMinter"" -> ""953__addMinter"";
""953_addMinter"" -> ""953_onlyMinter"";
}
"
0x84cd9cf60bcb44f7bab8b75e6f03614c2c3b22b7.sol,ESmart,contract ESmart { uint constant public INVESTMENT = 0.05 ether; uint constant private START_TIME = 1541435400; address constant private TECH = 0x9A5B6966379a61388068bb765c518E5bC4D9B509; address constant private PROMO = 0xD6104cEca65db37925541A800870aEe09C8Fd78D; address constant private LAST_FUND = 0x357b9046f99eEC7E705980F328F00BAab4b3b6Be; uint constant public JACKPOT_PERCENT = 1; uint constant public TECH_PERCENT = 7; uint constant public PROMO_PERCENT = 13; uint constant public LAST_FUND_PERCENT = 10; uint constant public MAX_IDLE_TIME = 10 minutes; uint constant public NEXT_ROUND_TIME = 30 minutes; uint constant public MULTIPLIER = 120; struct Deposit { address depositor; uint128 deposit; uint128 expect; },0,"subgraph cluster_779_ESmart {
label=""ESmart"";
""779_getQueueLength"" [label=""getQueueLength""];
""779_getDeposits"" [label=""getDeposits""];
""779_proceedToNewStage"" [label=""proceedToNewStage""];
""779_pay"" [label=""pay""];
""779_addDeposit"" [label=""addDeposit""];
""779_getStartTime"" [label=""getStartTime""];
""779_getDeposit"" [label=""getDeposit""];
""779_checkAndUpdateStage"" [label=""checkAndUpdateStage""];
""779_withdrawPrize"" [label=""withdrawPrize""];
""779_getDepositsCount"" [label=""getDepositsCount""];
""779_getStageStartTime"" [label=""getStageStartTime""];
""779_push"" [label=""push""];
""779_fallback"" [label=""fallback""];
""779_getCurrentStageByTime"" [label=""getCurrentStageByTime""];
""779_fallback"" -> ""779_pay"";
""779_getStartTime"" -> ""779_getStageStartTime"";
""779_withdrawPrize"" -> ""779_getCurrentStageByTime"";
""779_fallback"" -> ""779_checkAndUpdateStage"";
""779_fallback"" -> ""779_withdrawPrize"";
""779_fallback"" -> ""779_addDeposit"";
""779_checkAndUpdateStage"" -> ""779_getCurrentStageByTime"";
""779_getDeposits"" -> ""779_getDepositsCount"";
""779_checkAndUpdateStage"" -> ""779_proceedToNewStage"";
""779_fallback"" -> ""779_getStartTime"";
""779_getStartTime"" -> ""779_getCurrentStageByTime"";
""779_proceedToNewStage"" -> ""779_getStageStartTime"";
""779_addDeposit"" -> ""779_push"";
}
"
0x719502d2755fcf269da27d9f07c96d68a2f3572a.sol,ElementeumTokenProxy,"contract ElementeumTokenProxy is Ownable { ElementeumToken public token; function ElementeumTokenProxy(uint256 _cap, address[] _founderAccounts, address[] _operationsAccounts) public Ownable() { token = new ElementeumToken(_cap, _founderAccounts, _operationsAccounts); }",0,"subgraph cluster_874_ElementeumTokenProxy {
label=""ElementeumTokenProxy"";
""874_finishMinting"" [label=""finishMinting""];
""874_ElementeumTokenProxy"" [label=""ElementeumTokenProxy""];
""874_totalSupply"" [label=""totalSupply""];
""874_mint"" [label=""mint""];
""874_cap"" [label=""cap""];
""874_finishMinting"" -> ""874_onlyOwner"";
""874_mint"" -> ""874_onlyOwner"";
""874_ElementeumTokenProxy"" -> ""874_Ownable"";
}
"
0x1a8b802d4d89f763e940f93e885a86a41ee89c9d.sol,EUROPEANMONEY,contract EUROPEANMONEY { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 2; uint public _totalSupply = 90000000000000000; uint256 public RATE = 1; bool public isMinting = true; bool public isExchangeListed = false; string public constant generatedBy = ; using SafeMath for uint256; address public owner; modifier onlyOwner() { if (msg.sender != owner) { throw; },0,"subgraph cluster_540_EUROPEANMONEY {
label=""EUROPEANMONEY"";
""540_fallback"" [label=""fallback""];
""540_endCrowdsale"" [label=""endCrowdsale""];
""540_transfer"" [label=""transfer""];
""540_transferFrom"" [label=""transferFrom""];
""540_createTokens"" [label=""createTokens""];
""540_allowance"" [label=""allowance""];
""540_approve"" [label=""approve""];
""540_balanceOf"" [label=""balanceOf""];
""540_constructor"" [label=""constructor""];
""540_totalSupply"" [label=""totalSupply""];
""540_changeCrowdsaleRate"" [label=""changeCrowdsaleRate""];
""540_burnTokens"" [label=""burnTokens""];
""540_endCrowdsale"" -> ""540_onlyOwner"";
""540_changeCrowdsaleRate"" -> ""540_onlyOwner"";
""540_burnTokens"" -> ""540_onlyOwner"";
""540_fallback"" -> ""540_createTokens"";
}
"
0x533eaf8dc318c54c05d18a54a299f32e05d30a43.sol,DING,"contract DING is ERC223Token, Owned{ string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public tokenRemained = 2 * (10 ** 9) * (10 ** 18); uint256 public totalSupply = 2 * (10 ** 9) * (10 ** 18); bool public pause=false; mapping(address => bool) lockAddresses; function DING(){ balances[0xd8686d2aB1a65149FDd4ee36c60d161c274C41e0]= totalSupply; emit Transfer(0x0,0xd8686d2aB1a65149FDd4ee36c60d161c274C41e0,totalSupply); }",0,"subgraph cluster_805_DING {
label=""DING"";
""805_DING"" [label=""DING""];
""805_getETH"" [label=""getETH""];
""805_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""805_lock"" [label=""lock""];
""805_fallback"" [label=""fallback""];
""805_is_contract_paused"" [label=""is_contract_paused""];
""805_pauseContract"" [label=""pauseContract""];
""805_resumeContract"" [label=""resumeContract""];
""805_am_I_locked"" [label=""am_I_locked""];
""805_unlock"" [label=""unlock""];
""805_transfer"" [label=""transfer""];
""805_changeOwner"" [label=""changeOwner""];
""805_pauseContract"" -> ""805_onlyOwner"";
""805_lock"" -> ""805_onlyOwner"";
""805_transferAnyERC20Token"" -> ""805_onlyOwner"";
""805_transfer"" -> ""805_transfer"";
""805_unlock"" -> ""805_onlyOwner"";
""805_transfer"" -> ""805_transferable"";
""805_getETH"" -> ""805_onlyOwner"";
""805_resumeContract"" -> ""805_onlyOwner"";
""805_changeOwner"" -> ""805_onlyOwner"";
}
"
0x58db9e7a4afca731d824eeefa55ce37666aa3eaf.sol,FoMoGame,"contract FoMoGame is modularLong { using SafeMath for *; using NameFilter for string; using F3DKeysCalcLong for uint256; ForwarderInterface constant private Team_Forwarder = ForwarderInterface(0xfe373e4c13ed07962ffa546d1f0be2298d5493b0); PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0x463a61560e0EFF1a7ec771eeb9fd1c93fb075c2E); address private backup = 0x7298EFD119A830edab6C442632EEff14292609B0; string constant public name = ; string constant public symbol = ; uint256 private rndExtra_ = 0; uint256 private rndGap_ = 0; uint256 constant private rndInit_ = 1 hours; uint256 constant private rndInc_ = 30 seconds; uint256 constant private rndMax_ = 24 hours; uint256 public airDropPot_; uint256 public airDropTracker_ = 0; uint256 public rID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => F3Ddatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => F3Ddatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => F3Ddatasets.Round) public round_; mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping (uint256 => F3Ddatasets.TeamFee) public fees_; mapping (uint256 => F3Ddatasets.PotSplit) public potSplit_; constructor() public { fees_[0] = F3Ddatasets.TeamFee(36,0); fees_[1] = F3Ddatasets.TeamFee(43,0); fees_[2] = F3Ddatasets.TeamFee(66,0); fees_[3] = F3Ddatasets.TeamFee(50,0); potSplit_[0] = F3Ddatasets.PotSplit(20,0); potSplit_[1] = F3Ddatasets.PotSplit(25,0); potSplit_[2] = F3Ddatasets.PotSplit(40,0); potSplit_[3] = F3Ddatasets.PotSplit(45,0); }",0,"subgraph cluster_4273_FoMoGame {
label=""FoMoGame"";
""4273_airdrop"" [label=""airdrop""];
""4273_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""4273_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""4273_buyXid"" [label=""buyXid""];
""4273_getPlayerVaults"" [label=""getPlayerVaults""];
""4273_verifyTeam"" [label=""verifyTeam""];
""4273_endRound"" [label=""endRound""];
""4273_endTx"" [label=""endTx""];
""4273_receivePlayerInfo"" [label=""receivePlayerInfo""];
""4273_constructor"" [label=""constructor""];
""4273_registerNameXID"" [label=""registerNameXID""];
""4273_potSwap"" [label=""potSwap""];
""4273_withdraw"" [label=""withdraw""];
""4273_activate"" [label=""activate""];
""4273_iWantXKeys"" [label=""iWantXKeys""];
""4273_updateMasks"" [label=""updateMasks""];
""4273_reLoadXname"" [label=""reLoadXname""];
""4273_withdrawEarnings"" [label=""withdrawEarnings""];
""4273_reLoadCore"" [label=""reLoadCore""];
""4273_managePlayer"" [label=""managePlayer""];
""4273_buyXname"" [label=""buyXname""];
""4273_buyXaddr"" [label=""buyXaddr""];
""4273_fallback"" [label=""fallback""];
""4273_receivePlayerNameList"" [label=""receivePlayerNameList""];
""4273_determinePID"" [label=""determinePID""];
""4273_core"" [label=""core""];
""4273_calcKeysReceived"" [label=""calcKeysReceived""];
""4273_registerNameXaddr"" [label=""registerNameXaddr""];
""4273_reLoadXid"" [label=""reLoadXid""];
""4273_distributeExternal"" [label=""distributeExternal""];
""4273_distributeInternal"" [label=""distributeInternal""];
""4273_registerNameXname"" [label=""registerNameXname""];
""4273_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""4273_reLoadXaddr"" [label=""reLoadXaddr""];
""4273_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""4273_getBuyPrice"" [label=""getBuyPrice""];
""4273_updateTimer"" [label=""updateTimer""];
""4273_buyCore"" [label=""buyCore""];
""4273_updateGenVault"" [label=""updateGenVault""];
""4273_getTimeLeft"" [label=""getTimeLeft""];
""4273_withdraw"" -> ""4273_endRound"";
""4273_fallback"" -> ""4273_buyCore"";
""4273_core"" -> ""4273_distributeExternal"";
""4273_reLoadCore"" -> ""4273_core"";
""4273_reLoadXaddr"" -> ""4273_isWithinLimits"";
""4273_reLoadXid"" -> ""4273_reLoadCore"";
""4273_reLoadXname"" -> ""4273_isHuman"";
""4273_buyXid"" -> ""4273_buyCore"";
""4273_withdraw"" -> ""4273_isActivated"";
""4273_distributeInternal"" -> ""4273_updateMasks"";
""4273_fallback"" -> ""4273_isWithinLimits"";
""4273_reLoadXid"" -> ""4273_isHuman"";
""4273_buyXname"" -> ""4273_isHuman"";
""4273_reLoadCore"" -> ""4273_endRound"";
""4273_withdrawEarnings"" -> ""4273_updateGenVault"";
""4273_buyXname"" -> ""4273_isActivated"";
""4273_reLoadXid"" -> ""4273_verifyTeam"";
""4273_withdraw"" -> ""4273_withdrawEarnings"";
""4273_buyXid"" -> ""4273_isWithinLimits"";
""4273_core"" -> ""4273_distributeInternal"";
""4273_buyXid"" -> ""4273_determinePID"";
""4273_core"" -> ""4273_airdrop"";
""4273_getPlayerInfoByAddress"" -> ""4273_calcUnMaskedEarnings"";
""4273_core"" -> ""4273_endTx"";
""4273_buyXaddr"" -> ""4273_isActivated"";
""4273_reLoadXaddr"" -> ""4273_isHuman"";
""4273_managePlayer"" -> ""4273_updateGenVault"";
""4273_getPlayerVaults"" -> ""4273_getPlayerVaultsHelper"";
""4273_fallback"" -> ""4273_isActivated"";
""4273_buyXaddr"" -> ""4273_verifyTeam"";
""4273_registerNameXaddr"" -> ""4273_isHuman"";
""4273_core"" -> ""4273_updateTimer"";
""4273_reLoadXaddr"" -> ""4273_verifyTeam"";
""4273_buyXaddr"" -> ""4273_buyCore"";
""4273_buyXname"" -> ""4273_verifyTeam"";
""4273_reLoadXid"" -> ""4273_isActivated"";
""4273_reLoadCore"" -> ""4273_withdrawEarnings"";
""4273_fallback"" -> ""4273_determinePID"";
""4273_buyXid"" -> ""4273_isActivated"";
""4273_buyXid"" -> ""4273_isHuman"";
""4273_registerNameXname"" -> ""4273_isHuman"";
""4273_reLoadXname"" -> ""4273_verifyTeam"";
""4273_updateGenVault"" -> ""4273_calcUnMaskedEarnings"";
""4273_core"" -> ""4273_managePlayer"";
""4273_fallback"" -> ""4273_isHuman"";
""4273_buyCore"" -> ""4273_core"";
""4273_withdraw"" -> ""4273_isHuman"";
""4273_buyCore"" -> ""4273_endRound"";
""4273_buyXaddr"" -> ""4273_determinePID"";
""4273_registerNameXID"" -> ""4273_isHuman"";
""4273_buyXname"" -> ""4273_determinePID"";
""4273_reLoadXname"" -> ""4273_isWithinLimits"";
""4273_buyXaddr"" -> ""4273_isHuman"";
""4273_reLoadXaddr"" -> ""4273_isActivated"";
""4273_reLoadXaddr"" -> ""4273_reLoadCore"";
""4273_buyXaddr"" -> ""4273_isWithinLimits"";
""4273_getPlayerVaults"" -> ""4273_calcUnMaskedEarnings"";
""4273_reLoadXid"" -> ""4273_isWithinLimits"";
""4273_buyXname"" -> ""4273_buyCore"";
""4273_reLoadXname"" -> ""4273_reLoadCore"";
""4273_buyXid"" -> ""4273_verifyTeam"";
""4273_reLoadXname"" -> ""4273_isActivated"";
""4273_buyXname"" -> ""4273_isWithinLimits"";
}
"
0xf363abeedd0402de170a6f2bceb920db37f8b8cb.sol,Roto2coin,"contract Roto2coin is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function Roto2coin() public { symbol = ; name = ; decimals = 18; _totalSupply = 288000000000000000000000000000000; balances[0xFE221B0f1aCe6f41A4E19A7a8ef6487b6eE3f7ca] = _totalSupply; Transfer(address(0), 0xFE221B0f1aCe6f41A4E19A7a8ef6487b6eE3f7ca, _totalSupply); }",0,"subgraph cluster_543_Roto2coin {
label=""Roto2coin"";
""543_transfer"" [label=""transfer""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approve"" [label=""approve""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" [label=""transferFrom""];
""543_balanceOf"" [label=""balanceOf""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_fallback"" [label=""fallback""];
""543_totalSupply"" [label=""totalSupply""];
""543_Roto2coin"" [label=""Roto2coin""];
""543_transferFrom"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
}
"
0xedb94888eff041eb50c9fc92c360f66afb3b94c5.sol,ExoplanetToken,"contract ExoplanetToken is ERC721 { using SafeMath for uint256; event Birth(uint256 indexed tokenId, string name, uint32 numOfTokensBonusOnPurchase, address owner); event TokenSold(uint256 tokenId, uint256 oldPriceInEther, uint256 newPriceInEther, address prevOwner, address winner, string name); event Transfer(address from, address to, uint256 tokenId); event ContractUpgrade(address newContract); string public constant NAME = ; string public constant SYMBOL = ; string public constant BASE_URL = ""https: uint32 private constant NUM_EXOPLANETS_LIMIT = 4700; uint256 private constant STEP_1 = 5.0 ether; uint256 private constant STEP_2 = 10.0 ether; uint256 private constant STEP_3 = 26.0 ether; uint256 private constant STEP_4 = 36.0 ether; uint256 private constant STEP_5 = 47.0 ether; uint256 private constant STEP_6 = 59.0 ether; uint256 private constant STEP_7 = 67.85 ether; uint256 private constant STEP_8 = 76.67 ether; mapping (uint256 => address) public currentOwner; mapping (address => uint256) private numOwnedTokens; mapping (uint256 => address) public approvedToTransfer; mapping (uint256 => uint256) private currentPrice; address public ceoAddress; address public cooAddress; bool public inPresaleMode = true; bool public paused = false; address public newContractAddress; struct ExoplanetRec { uint8 lifeRate; uint32 priceInExoTokens; uint32 numOfTokensBonusOnPurchase; string name; string cryptoMatch; string techBonus1; string techBonus2; string techBonus3; string scientificData; }",0,"subgraph cluster_1819_ExoplanetToken {
label=""ExoplanetToken"";
""1819__transfer"" [label=""_transfer""];
""1819_setScientificData"" [label=""setScientificData""];
""1819_tokenURI"" [label=""tokenURI""];
""1819_getName"" [label=""getName""];
""1819_setNewAddress"" [label=""setNewAddress""];
""1819_setCOO"" [label=""setCOO""];
""1819_setCEO"" [label=""setCEO""];
""1819_getLifeRate"" [label=""getLifeRate""];
""1819_totalSupply"" [label=""totalSupply""];
""1819_setPresaleMode"" [label=""setPresaleMode""];
""1819_tokensOfOwner"" [label=""tokensOfOwner""];
""1819_getPriceInExoTokens"" [label=""getPriceInExoTokens""];
""1819_balanceOf"" [label=""balanceOf""];
""1819_priceOf"" [label=""priceOf""];
""1819_createContractExoplanet"" [label=""createContractExoplanet""];
""1819_setTechBonus2"" [label=""setTechBonus2""];
""1819_ExoplanetToken"" [label=""ExoplanetToken""];
""1819_payoutPartial"" [label=""payoutPartial""];
""1819_setPriceInExoTokens"" [label=""setPriceInExoTokens""];
""1819_approved"" [label=""approved""];
""1819_setTechBonus1"" [label=""setTechBonus1""];
""1819_getCryptoMatch"" [label=""getCryptoMatch""];
""1819_name"" [label=""name""];
""1819_getTechBonus1"" [label=""getTechBonus1""];
""1819_payout"" [label=""payout""];
""1819_pause"" [label=""pause""];
""1819_owns"" [label=""owns""];
""1819_purchase"" [label=""purchase""];
""1819_transfer"" [label=""transfer""];
""1819__createExoplanet"" [label=""_createExoplanet""];
""1819_ownerOf"" [label=""ownerOf""];
""1819_getScientificData"" [label=""getScientificData""];
""1819_getTechBonus2"" [label=""getTechBonus2""];
""1819_getNumOfTokensBonusOnPurchase"" [label=""getNumOfTokensBonusOnPurchase""];
""1819_getExoplanet"" [label=""getExoplanet""];
""1819_approve"" [label=""approve""];
""1819_implementsERC721"" [label=""implementsERC721""];
""1819_bytes32ToString"" [label=""bytes32ToString""];
""1819_symbol"" [label=""symbol""];
""1819_getTechBonus3"" [label=""getTechBonus3""];
""1819_transferFrom"" [label=""transferFrom""];
""1819_uintToBytes32"" [label=""uintToBytes32""];
""1819_transferUnownedPlanet"" [label=""transferUnownedPlanet""];
""1819_addressNotNull"" [label=""addressNotNull""];
""1819_unpause"" [label=""unpause""];
""1819_appendNumToString"" [label=""appendNumToString""];
""1819_numToString"" [label=""numToString""];
""1819_setPriceInEth"" [label=""setPriceInEth""];
""1819_setTechBonus3"" [label=""setTechBonus3""];
""1819_takeOwnership"" [label=""takeOwnership""];
""1819_takeOwnership"" -> ""1819_whenNotPaused"";
""1819_transfer"" -> ""1819__transfer"";
""1819_transferFrom"" -> ""1819_whenNotPaused"";
""1819__createExoplanet"" -> ""1819__transfer"";
""1819_numToString"" -> ""1819_uintToBytes32"";
""1819_purchase"" -> ""1819_presaleModeActive"";
""1819_unpause"" -> ""1819_onlyCEO"";
""1819_transferFrom"" -> ""1819_approved"";
""1819_tokensOfOwner"" -> ""1819_totalSupply"";
""1819_setPresaleMode"" -> ""1819_onlyCEO"";
""1819_setPriceInEth"" -> ""1819_owns"";
""1819__createExoplanet"" -> ""1819_totalSupply"";
""1819_setTechBonus1"" -> ""1819_owns"";
""1819_setTechBonus2"" -> ""1819_owns"";
""1819_payoutPartial"" -> ""1819_onlyCLevel"";
""1819_appendNumToString"" -> ""1819_numToString"";
""1819_setScientificData"" -> ""1819_onlyCLevel"";
""1819_transferFrom"" -> ""1819_addressNotNull"";
""1819_transferUnownedPlanet"" -> ""1819_onlyCLevel"";
""1819_approve"" -> ""1819_owns"";
""1819_takeOwnership"" -> ""1819_approved"";
""1819_takeOwnership"" -> ""1819_addressNotNull"";
""1819_setTechBonus3"" -> ""1819_owns"";
""1819_transfer"" -> ""1819_addressNotNull"";
""1819_numToString"" -> ""1819_bytes32ToString"";
""1819_pause"" -> ""1819_onlyCEO"";
""1819_tokensOfOwner"" -> ""1819_balanceOf"";
""1819_setPriceInExoTokens"" -> ""1819_owns"";
""1819_createContractExoplanet"" -> ""1819__createExoplanet"";
""1819_transfer"" -> ""1819_whenNotPaused"";
""1819_setPriceInExoTokens"" -> ""1819_afterPresaleMode"";
""1819_tokenURI"" -> ""1819_appendNumToString"";
""1819_setNewAddress"" -> ""1819_onlyCEO"";
""1819_setCEO"" -> ""1819_onlyCEO"";
""1819_purchase"" -> ""1819__transfer"";
""1819_setPriceInEth"" -> ""1819_afterPresaleMode"";
""1819_takeOwnership"" -> ""1819__transfer"";
""1819_transfer"" -> ""1819_owns"";
""1819_pause"" -> ""1819_whenNotPaused"";
""1819_createContractExoplanet"" -> ""1819_onlyCLevel"";
""1819_setCOO"" -> ""1819_onlyCEO"";
""1819_unpause"" -> ""1819_whenPaused"";
""1819_transferUnownedPlanet"" -> ""1819__transfer"";
""1819_setNewAddress"" -> ""1819_whenPaused"";
""1819_transferFrom"" -> ""1819__transfer"";
""1819_payout"" -> ""1819_onlyCLevel"";
""1819_purchase"" -> ""1819_whenNotPaused"";
""1819_purchase"" -> ""1819_addressNotNull"";
}
"
0x0e73fac981d22a0511b42f757186c3514ce60c4e.sol,Htlc,"contract Htlc { enum State { Created, Refunded, Redeemed }",0,"subgraph cluster_647_Htlc {
label=""Htlc"";
""647_batchCreateChannel"" [label=""batchCreateChannel""];
""647_refundChannel"" [label=""refundChannel""];
""647__setupChannel"" [label=""_setupChannel""];
""647_createChannel"" [label=""createChannel""];
""647_changeExchangeStatus"" [label=""changeExchangeStatus""];
""647_batchRefundChannel"" [label=""batchRefundChannel""];
""647_changeExchangeOperator"" [label=""changeExchangeOperator""];
""647_batchRedeemChannel"" [label=""batchRedeemChannel""];
""647_createChannelId"" [label=""createChannelId""];
""647_Htlc"" [label=""Htlc""];
""647_changeCommissionRecipient"" [label=""changeCommissionRecipient""];
""647_redeemChannel"" [label=""redeemChannel""];
""647_batchCreateChannel"" -> ""647__setupChannel"";
""647_batchRedeemChannel"" -> ""647_redeemChannel"";
""647_createChannel"" -> ""647__setupChannel"";
""647_changeExchangeOperator"" -> ""647_only_exchange_operator"";
""647_changeCommissionRecipient"" -> ""647_only_exchange_operator"";
""647_batchRefundChannel"" -> ""647_refundChannel"";
""647__setupChannel"" -> ""647_createChannelId"";
""647_changeExchangeStatus"" -> ""647_only_exchange_operator"";
}
"
0x3fc09ff5239c317acaa88658ceb68cc24728bc93.sol,QuickRoi,"contract QuickRoi { using SafeMath for uint256; mapping(address => uint256) investments; mapping(address => uint256) joined; mapping(address => uint256) withdrawals; mapping(address => uint256) referrer; uint256 public step = 33; uint256 public minimum = 10 finney; uint256 public stakingRequirement = 2 ether; address public ownerWallet; address public owner; event Invest(address investor, uint256 amount); event Withdraw(address investor, uint256 amount); event Bounty(address hunter, uint256 amount); event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); constructor() public { owner = msg.sender; ownerWallet = msg.sender; }",0,"subgraph cluster_446_QuickRoi {
label=""QuickRoi"";
""446_transferOwnership"" [label=""transferOwnership""];
""446_invest"" [label=""invest""];
""446_withdraw"" [label=""withdraw""];
""446_fallback"" [label=""fallback""];
""446_constructor"" [label=""constructor""];
""446_getBalance"" [label=""getBalance""];
""446_bounty"" [label=""bounty""];
""446_checkReferral"" [label=""checkReferral""];
""446_checkInvestments"" [label=""checkInvestments""];
""446_checkWithdrawals"" [label=""checkWithdrawals""];
""446_checkBalance"" [label=""checkBalance""];
""446_bounty"" -> ""446_checkReferral"";
""446_invest"" -> ""446_withdraw"";
""446_withdraw"" -> ""446_getBalance"";
""446_checkBalance"" -> ""446_getBalance"";
""446_transferOwnership"" -> ""446_onlyOwner"";
""446_fallback"" -> ""446_invest"";
}
"
0x52629dd14923d9f60deafdd373ff6e1145866f09.sol,LandGrabToken,"contract LandGrabToken is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.001 ether; uint256 private constant PROMO_CREATION_LIMIT = 5000; uint256 private firstStepLimit = 0.053613 ether; uint256 private secondStepLimit = 0.564957 ether; mapping (uint256 => address) public cityIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public cityIndexToApproved; mapping (uint256 => uint256) private cityIndexToPrice; address public ceoAddress; address public cooAddress; uint256 public promoCreatedCount; struct City { string name; }",0,"subgraph cluster_975_LandGrabToken {
label=""LandGrabToken"";
""975_setCOO"" [label=""setCOO""];
""975_createPromoCity"" [label=""createPromoCity""];
""975__addressNotNull"" [label=""_addressNotNull""];
""975__owns"" [label=""_owns""];
""975_takeOwnership"" [label=""takeOwnership""];
""975__createCity"" [label=""_createCity""];
""975_getCity"" [label=""getCity""];
""975_transfer"" [label=""transfer""];
""975_implementsERC721"" [label=""implementsERC721""];
""975_payout"" [label=""payout""];
""975__payout"" [label=""_payout""];
""975_createContractCity"" [label=""createContractCity""];
""975_transferFrom"" [label=""transferFrom""];
""975_purchase"" [label=""purchase""];
""975_ownerOf"" [label=""ownerOf""];
""975_name"" [label=""name""];
""975_balanceOf"" [label=""balanceOf""];
""975__approved"" [label=""_approved""];
""975__transfer"" [label=""_transfer""];
""975_totalSupply"" [label=""totalSupply""];
""975_LandGrabToken"" [label=""LandGrabToken""];
""975_setCEO"" [label=""setCEO""];
""975_priceOf"" [label=""priceOf""];
""975_symbol"" [label=""symbol""];
""975_tokensOfOwner"" [label=""tokensOfOwner""];
""975_approve"" [label=""approve""];
""975_payout"" -> ""975__payout"";
""975_takeOwnership"" -> ""975__addressNotNull"";
""975_payout"" -> ""975_onlyCLevel"";
""975_takeOwnership"" -> ""975__approved"";
""975_transfer"" -> ""975__addressNotNull"";
""975_takeOwnership"" -> ""975__transfer"";
""975_setCEO"" -> ""975_onlyCEO"";
""975_createContractCity"" -> ""975_onlyCOO"";
""975_tokensOfOwner"" -> ""975_totalSupply"";
""975_transferFrom"" -> ""975__transfer"";
""975_transferFrom"" -> ""975__owns"";
""975_createPromoCity"" -> ""975_onlyCOO"";
""975_approve"" -> ""975__owns"";
""975_purchase"" -> ""975__addressNotNull"";
""975__createCity"" -> ""975__transfer"";
""975_purchase"" -> ""975__transfer"";
""975_setCOO"" -> ""975_onlyCEO"";
""975_transferFrom"" -> ""975__addressNotNull"";
""975_transferFrom"" -> ""975__approved"";
""975_createContractCity"" -> ""975__createCity"";
""975_tokensOfOwner"" -> ""975_balanceOf"";
""975_createPromoCity"" -> ""975__createCity"";
""975_transfer"" -> ""975__transfer"";
""975_transfer"" -> ""975__owns"";
}
"
0x5398dbc256fcd5128d92c32919f1da0885777ea3.sol,SAXO,"contract SAXO is StandardToken { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant INITIAL_SUPPLY = 15000000000000000000000000000; address public owner; mapping (address => bool) public contractUsers; bool public mintingFinished; uint256 public tokenAllocated = 0; mapping (address => uint) public countClaimsToken; uint256 public priceToken = 15000000; uint256 public priceClaim = 0.0005 ether; uint256 public numberClaimToken = 10000 * (10**uint256(decimals)); uint256 public startTimeDay = 1; uint256 public endTimeDay = 86400; event OwnerChanged(address indexed previousOwner, address indexed newOwner); event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount); event TokenLimitReached(uint256 tokenRaised, uint256 purchasedToken); event MinWeiLimitReached(address indexed sender, uint256 weiAmount); event Mint(address indexed to, uint256 amount); event MintFinished(); constructor(address _owner) public { totalSupply = INITIAL_SUPPLY; owner = _owner; balances[owner] = INITIAL_SUPPLY; transfersEnabled = true; mintingFinished = false; }",0,"subgraph cluster_1377_SAXO {
label=""SAXO"";
""1377_fallback"" [label=""fallback""];
""1377_validPurchaseTokens"" [label=""validPurchaseTokens""];
""1377_changeOwner"" [label=""changeOwner""];
""1377_mint"" [label=""mint""];
""1377_buyTokens"" [label=""buyTokens""];
""1377_constructor"" [label=""constructor""];
""1377_calcAmount"" [label=""calcAmount""];
""1377_changeTime"" [label=""changeTime""];
""1377_setPriceClaim"" [label=""setPriceClaim""];
""1377_claimTokensToOwner"" [label=""claimTokensToOwner""];
""1377_finishMinting"" [label=""finishMinting""];
""1377_validPurchaseTime"" [label=""validPurchaseTime""];
""1377_claim"" [label=""claim""];
""1377_setNumberClaimToken"" [label=""setNumberClaimToken""];
""1377_enableTransfers"" [label=""enableTransfers""];
""1377_finishMinting"" -> ""1377_onlyOwner"";
""1377_claim"" -> ""1377_canMint"";
""1377_claimTokensToOwner"" -> ""1377_onlyOwner"";
""1377_changeOwner"" -> ""1377_onlyOwner"";
""1377_mint"" -> ""1377_canMint"";
""1377_finishMinting"" -> ""1377_canMint"";
""1377_claim"" -> ""1377_calcAmount"";
""1377_enableTransfers"" -> ""1377_onlyOwner"";
""1377_setNumberClaimToken"" -> ""1377_onlyOwner"";
""1377_validPurchaseTime"" -> ""1377_canMint"";
""1377_calcAmount"" -> ""1377_canMint"";
""1377_buyTokens"" -> ""1377_validPurchaseTokens"";
""1377_buyTokens"" -> ""1377_mint"";
""1377_setPriceClaim"" -> ""1377_onlyOwner"";
""1377_fallback"" -> ""1377_buyTokens"";
""1377_claim"" -> ""1377_validPurchaseTime"";
}
"
0x7123027d76a5135e66b3a365efaba2b55de18a62.sol,CrypteloERC20,"contract CrypteloERC20 { string public name; string public symbol; uint256 public decimals; uint256 public totalSupply; uint256 public totalSupplyICO; uint256 public totalSupplyPrivateSale; uint256 public totalSupplyTeamTokens; uint256 public totalSupplyExpansionTokens; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event Supply(uint256 supply); function CrypteloERC20() public { name = ; symbol = ; decimals = 8; totalSupply = 500000000; totalSupplyICO = 150000000; totalSupplyPrivateSale = 100000000; totalSupplyTeamTokens = 125000000; totalSupplyExpansionTokens = 125000000; address privateW = 0xb3d9c613a4B680A5Ffd28E08258dBd7BA77102A2; address ICOW = 0xF2b3Fc7196D5Ec9bD9111AF5B6D79c9FE26d729F; address companyW = 0xeC23f509E328100C08646389a3b6C45e9290AA42; address expansionW = 0xf799aa9cA15D6137eDAEb204016378112064ECa3; balanceOf[ICOW] = totalSupplyICO * ( 10 ** decimals); balanceOf[privateW] = totalSupplyPrivateSale * ( 10 ** decimals); balanceOf[companyW] = totalSupplyTeamTokens * ( 10 ** decimals); balanceOf[expansionW] = totalSupplyExpansionTokens * ( 10 ** decimals); Supply(totalSupplyICO * ( 10 ** decimals)); }",0,"subgraph cluster_442_CrypteloERC20 {
label=""CrypteloERC20"";
""442_burnFrom"" [label=""burnFrom""];
""442_transfer"" [label=""transfer""];
""442_approveAndCall"" [label=""approveAndCall""];
""442_burn"" [label=""burn""];
""442__transfer"" [label=""_transfer""];
""442_CrypteloERC20"" [label=""CrypteloERC20""];
""442_approve"" [label=""approve""];
""442_transferFrom"" [label=""transferFrom""];
""442_transfer"" -> ""442__transfer"";
""442_transferFrom"" -> ""442__transfer"";
""442_approveAndCall"" -> ""442_approve"";
}
"
0x0045684552109f8551cc5c8aa7b1f52085adff47.sol,RelayerModule,contract RelayerModule is Module { uint256 constant internal BLOCKBOUND = 10000; mapping (address => RelayerConfig) public relayer; struct RelayerConfig { uint256 nonce; mapping (bytes32 => bool) executedTx; },0,"subgraph cluster_1430_RelayerModule {
label=""RelayerModule"";
""1430_verifyRefund"" [label=""verifyRefund""];
""1430_validateSignatures"" [label=""validateSignatures""];
""1430_checkAndUpdateNonce"" [label=""checkAndUpdateNonce""];
""1430_verifyData"" [label=""verifyData""];
""1430_refund"" [label=""refund""];
""1430_execute"" [label=""execute""];
""1430_getSignHash"" [label=""getSignHash""];
""1430_recoverSigner"" [label=""recoverSigner""];
""1430_getRequiredSignatures"" [label=""getRequiredSignatures""];
""1430_checkAndUpdateUniqueness"" [label=""checkAndUpdateUniqueness""];
""1430_functionPrefix"" [label=""functionPrefix""];
""1430_getNonce"" [label=""getNonce""];
""1430_execute"" -> ""1430_getRequiredSignatures"";
""1430_execute"" -> ""1430_verifyRefund"";
""1430_execute"" -> ""1430_checkAndUpdateUniqueness"";
""1430_execute"" -> ""1430_getSignHash"";
""1430_execute"" -> ""1430_verifyData"";
""1430_execute"" -> ""1430_validateSignatures"";
""1430_execute"" -> ""1430_refund"";
}
"
0xb602f224523c89c80dd8e970573291c63beeb778.sol,Crowdsale,contract Crowdsale is Ownable{ using SafeMath for uint; uint public decimals = 3; BineuroToken public token; function Crowdsale(address _tokenAddress) public{ token = BineuroToken(_tokenAddress); techSupport = msg.sender; token.setCrowdsaleContract(this); owner = token.getOwner(); },0,"subgraph cluster_685_Crowdsale {
label=""Crowdsale"";
""685_volumeBasedBonus"" [label=""volumeBasedBonus""];
""685_endIco"" [label=""endIco""];
""685_etherToTokens"" [label=""etherToTokens""];
""685_fallback"" [label=""fallback""];
""685_timeBasedBonus"" [label=""timeBasedBonus""];
""685_manualSendTokens"" [label=""manualSendTokens""];
""685_isIco"" [label=""isIco""];
""685_Crowdsale"" [label=""Crowdsale""];
""685_changeIcoFinish"" [label=""changeIcoFinish""];
""685_buy"" [label=""buy""];
""685_fallback"" -> ""685_buy"";
""685_buy"" -> ""685_etherToTokens"";
""685_manualSendTokens"" -> ""685_onlyTechSupport"";
""685_fallback"" -> ""685_isIco"";
""685_changeIcoFinish"" -> ""685_onlyTechSupport"";
""685_etherToTokens"" -> ""685_timeBasedBonus"";
""685_etherToTokens"" -> ""685_volumeBasedBonus"";
}
"
0xc6563b56302896dd5de0b6c083e230baf8b11922.sol,CheckpointToken,contract CheckpointToken is ERC677Token { using SafeMath for uint256; string public name; string public symbol; uint256 public decimals; SecurityTransferAgent public transferVerifier; struct Checkpoint { uint256 blockNumber; uint256 value; },0,"subgraph cluster_2218_CheckpointToken {
label=""CheckpointToken"";
""2218_allowance"" [label=""allowance""];
""2218_totalSupply"" [label=""totalSupply""];
""2218_balanceOf"" [label=""balanceOf""];
""2218_transferFrom"" [label=""transferFrom""];
""2218_CheckpointToken"" [label=""CheckpointToken""];
""2218_totalSupplyAt"" [label=""totalSupplyAt""];
""2218_decreaseApproval"" [label=""decreaseApproval""];
""2218_approve"" [label=""approve""];
""2218_getCheckpoint"" [label=""getCheckpoint""];
""2218_increaseApproval"" [label=""increaseApproval""];
""2218_balanceAtBlock"" [label=""balanceAtBlock""];
""2218_transferInternal"" [label=""transferInternal""];
""2218_transfer"" [label=""transfer""];
""2218_balanceAt"" [label=""balanceAt""];
""2218_setCheckpoint"" [label=""setCheckpoint""];
""2218_balanceAtBlock"" -> ""2218_getCheckpoint"";
""2218_transferInternal"" -> ""2218_setCheckpoint"";
""2218_decreaseApproval"" -> ""2218_decreaseApproval"";
""2218_transferInternal"" -> ""2218_balanceOf"";
""2218_totalSupply"" -> ""2218_balanceAtBlock"";
""2218_balanceAt"" -> ""2218_balanceAtBlock"";
""2218_increaseApproval"" -> ""2218_increaseApproval"";
""2218_totalSupplyAt"" -> ""2218_balanceAtBlock"";
""2218_transfer"" -> ""2218_transferInternal"";
""2218_transferFrom"" -> ""2218_transferInternal"";
""2218_balanceOf"" -> ""2218_balanceAtBlock"";
}
"
0x579fa0a1872459138aad423644c9c5038fa31807.sol,EOMarketToken,"contract EOMarketToken is AccessService { uint8 public decimals = 0; uint256 public totalSupply = 100; uint256 public totalSold = 0; string public name = ; string public symbol = ; mapping (address => uint256) balances; mapping (address => mapping(address => uint256)) allowed; address[] shareholders; mapping (address => uint256) addressToIndex; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function EOMarketToken() public { addrAdmin = msg.sender; addrService = msg.sender; addrFinance = msg.sender; balances[this] = totalSupply; }",0,"subgraph cluster_779_EOMarketToken {
label=""EOMarketToken"";
""779_approve"" [label=""approve""];
""779__transfer"" [label=""_transfer""];
""779_allowance"" [label=""allowance""];
""779_transferFrom"" [label=""transferFrom""];
""779_EOMarketToken"" [label=""EOMarketToken""];
""779_buy"" [label=""buy""];
""779_transfer"" [label=""transfer""];
""779_fallback"" [label=""fallback""];
""779_balanceOf"" [label=""balanceOf""];
""779_getShareholders"" [label=""getShareholders""];
""779_approveAndCall"" [label=""approveAndCall""];
""779_transfer"" -> ""779__transfer"";
""779_approveAndCall"" -> ""779_approve"";
""779_buy"" -> ""779__transfer"";
""779_transferFrom"" -> ""779__transfer"";
""779_buy"" -> ""779_whenNotPaused"";
}
"
0xdd62b07841cad953e2ab6dafc798f9f75f6582c2.sol,QECToken,"contract QECToken is StandardToken, SafeMath { string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 18; string public version = ; address public ethFundDeposit; address public newContractAddr; bool public isFunding; uint256 public fundingStartBlock; uint256 public fundingStopBlock; uint256 public currentSupply; uint256 public tokenRaised = 0; uint256 public tokenMigrated = 0; uint256 public tokenExchangeRate = 1000; event AllocateToken(address indexed _to, uint256 _value); event IssueToken(address indexed _to, uint256 _value); event IncreaseSupply(uint256 _value); event DecreaseSupply(uint256 _value); event Migrate(address indexed _to, uint256 _value); function formatDecimals(uint256 _value) internal returns (uint256 ) { return _value * 10 ** decimals; }",0,"subgraph cluster_849_QECToken {
label=""QECToken"";
""849_QECToken"" [label=""QECToken""];
""849_allocateToken"" [label=""allocateToken""];
""849_setTokenExchangeRate"" [label=""setTokenExchangeRate""];
""849_transferETH"" [label=""transferETH""];
""849_fallback"" [label=""fallback""];
""849_increaseSupply"" [label=""increaseSupply""];
""849_stopFunding"" [label=""stopFunding""];
""849_setMigrateContract"" [label=""setMigrateContract""];
""849_startFunding"" [label=""startFunding""];
""849_changeOwner"" [label=""changeOwner""];
""849_migrate"" [label=""migrate""];
""849_formatDecimals"" [label=""formatDecimals""];
""849_decreaseSupply"" [label=""decreaseSupply""];
""849_transferETH"" -> ""849_isOwner"";
""849_fallback"" -> ""849_safeAdd"";
""849_decreaseSupply"" -> ""849_isOwner"";
""849_decreaseSupply"" -> ""849_safeSubtract"";
""849_changeOwner"" -> ""849_isOwner"";
""849_fallback"" -> ""849_safeMult"";
""849_increaseSupply"" -> ""849_isOwner"";
""849_stopFunding"" -> ""849_isOwner"";
""849_allocateToken"" -> ""849_safeAdd"";
""849_migrate"" -> ""849_safeAdd"";
""849_setTokenExchangeRate"" -> ""849_isOwner"";
""849_allocateToken"" -> ""849_formatDecimals"";
""849_startFunding"" -> ""849_isOwner"";
""849_QECToken"" -> ""849_formatDecimals"";
""849_allocateToken"" -> ""849_isOwner"";
""849_decreaseSupply"" -> ""849_formatDecimals"";
""849_increaseSupply"" -> ""849_formatDecimals"";
""849_increaseSupply"" -> ""849_safeAdd"";
""849_setMigrateContract"" -> ""849_isOwner"";
""849_allocateToken"" -> ""849_safeMult"";
}
"
0x65375171f109e90b9ea3e22f4734621857f13ea4.sol,Ownable,"contract Ownable { address private _owner; event OwnershipTransferred( address indexed previousOwner, address indexed newOwner ); constructor() internal { _owner = msg.sender; emit OwnershipTransferred(address(0), _owner); }",0,"subgraph cluster_234_Ownable {
label=""Ownable"";
""234__transferOwnership"" [label=""_transferOwnership""];
""234_owner"" [label=""owner""];
""234_isOwner"" [label=""isOwner""];
""234_transferOwnership"" [label=""transferOwnership""];
""234_renounceOwnership"" [label=""renounceOwnership""];
""234_constructor"" [label=""constructor""];
""234_transferOwnership"" -> ""234_onlyOwner"";
""234_renounceOwnership"" -> ""234_onlyOwner"";
""234_transferOwnership"" -> ""234__transferOwnership"";
}
"
0x6552b02716bc7400fd97e5cab13e43607b5e63c3.sol,WorldEthereumSupremeToken,contract WorldEthereumSupremeToken { modifier onlyBagholders { require(myTokens() > 0); _; },0,"subgraph cluster_1180_WorldEthereumSupremeToken {
label=""WorldEthereumSupremeToken"";
""1180_sellPrice"" [label=""sellPrice""];
""1180_balanceOf"" [label=""balanceOf""];
""1180_exit"" [label=""exit""];
""1180_myDividends"" [label=""myDividends""];
""1180_dividendsOf"" [label=""dividendsOf""];
""1180_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1180_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1180_sqrt"" [label=""sqrt""];
""1180_transfer"" [label=""transfer""];
""1180_purchaseTokens"" [label=""purchaseTokens""];
""1180_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1180_sell"" [label=""sell""];
""1180_buy"" [label=""buy""];
""1180_totalSupply"" [label=""totalSupply""];
""1180_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1180_myTokens"" [label=""myTokens""];
""1180_fallback"" [label=""fallback""];
""1180_withdraw"" [label=""withdraw""];
""1180_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1180_buyPrice"" [label=""buyPrice""];
""1180_reinvest"" [label=""reinvest""];
""1180_myDividends"" -> ""1180_dividendsOf"";
""1180_calculateTokensReceived"" -> ""1180_ethereumToTokens_"";
""1180_transfer"" -> ""1180_myDividends"";
""1180_exit"" -> ""1180_withdraw"";
""1180_reinvest"" -> ""1180_myDividends"";
""1180_purchaseTokens"" -> ""1180_buyPrice"";
""1180_exit"" -> ""1180_sell"";
""1180_reinvest"" -> ""1180_purchaseTokens"";
""1180_sell"" -> ""1180_tokensToEthereum_"";
""1180_purchaseTokens"" -> ""1180_ethereumToTokens_"";
""1180_transfer"" -> ""1180_tokensToEthereum_"";
""1180_transfer"" -> ""1180_withdraw"";
""1180_sell"" -> ""1180_buyPrice"";
""1180_buyPrice"" -> ""1180_tokensToEthereum_"";
""1180_withdraw"" -> ""1180_myDividends"";
""1180_withdraw"" -> ""1180_onlyStronghands"";
""1180_transfer"" -> ""1180_onlyBagholders"";
""1180_myTokens"" -> ""1180_balanceOf"";
""1180_sell"" -> ""1180_onlyBagholders"";
""1180_ethereumToTokens_"" -> ""1180_sqrt"";
""1180_buy"" -> ""1180_purchaseTokens"";
""1180_calculateEthereumReceived"" -> ""1180_tokensToEthereum_"";
""1180_fallback"" -> ""1180_purchaseTokens"";
""1180_sellPrice"" -> ""1180_tokensToEthereum_"";
""1180_reinvest"" -> ""1180_onlyStronghands"";
}
"
0x201ec0bcc05d43c44a05836c6d5ce42e93cceccc.sol,OwnerContract,contract OwnerContract is Ownable { iContract public ownedContract; address origOwner; function setContract(address _contract) public onlyOwner { require(_contract != address(0)); ownedContract = iContract(_contract); origOwner = ownedContract.owner(); },0,"subgraph cluster_223_OwnerContract {
label=""OwnerContract"";
""223_transferOwnershipBack"" [label=""transferOwnershipBack""];
""223_setContract"" [label=""setContract""];
""223_transferOwnershipBack"" -> ""223_onlyOwner"";
""223_setContract"" -> ""223_onlyOwner"";
}
"
0xd84f5e007af2343fec41b4bf23941f84eafd595d.sol,AcuteEthereumCloudMiningunion,"contract AcuteEthereumCloudMiningunion is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function AcuteEthereumCloudMiningunion() public { symbol = ; name = ; decimals = 0; _totalSupply = 180000000; balances[0x0C6C200F76d41fF91772513EcA292e2c7bD98aA2] = _totalSupply; Transfer(address(0), 0x0C6C200F76d41fF91772513EcA292e2c7bD98aA2, _totalSupply); }",0,"subgraph cluster_543_AcuteEthereumCloudMiningunion {
label=""AcuteEthereumCloudMiningunion"";
""543_AcuteEthereumCloudMiningunion"" [label=""AcuteEthereumCloudMiningunion""];
""543_transferFrom"" [label=""transferFrom""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transfer"" [label=""transfer""];
""543_balanceOf"" [label=""balanceOf""];
""543_fallback"" [label=""fallback""];
""543_totalSupply"" [label=""totalSupply""];
""543_approve"" [label=""approve""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
}
"
0x7328b31825ac9b46dff6bfc092391156cfb6e1f2.sol,BitWich,"contract BitWich is Pausable { using SafeMath for uint; using SafeERC20 for ERC20; event LogBought(address indexed buyer, uint buyCost, uint amount); event LogSold(address indexed seller, uint sellValue, uint amount); event LogPriceChanged(uint newBuyCost, uint newSellValue); ERC20 public erc20Contract; uint public netAmountBought; uint public buyCost; uint public sellValue; constructor(uint _buyCost, uint _sellValue, address _erc20ContractAddress) public { require(_buyCost > 0); require(_sellValue > 0); buyCost = _buyCost; sellValue = _sellValue; erc20Contract = NamedToken(_erc20ContractAddress); }",0,"subgraph cluster_896_BitWichLoom {
label=""BitWichLoom"";
""896_constructor"" [label=""constructor""];
""896_constructor"" -> ""896_constructor"";
}
"
0x6543cde961213e82001594bf4c34706579ce34ec.sol,ClinicAllCrowdsale,"contract ClinicAllCrowdsale is Crowdsale, FinalizableCrowdsale, MintedCrowdsale, ManagedWhitelist, Limited { constructor ( uint256 _tokenLimitSupply, uint256 _rate, address _wallet, address _privateSaleWallet, ERC20 _token, uint256 _openingTime, uint256 _closingTime, uint256 _discountTokenAmount, uint256 _discountTokenPercent, uint256 _preSaleClosingTime, uint256 _softCapLimit, ClinicAllRefundEscrow _vault, uint256 _buyLimitSupplyMin, uint256 _buyLimitSupplyMax, uint256 _kycLimitEliminator ) Crowdsale(_rate, _wallet, _token) TimedCrowdsale(_openingTime, _closingTime) public { privateSaleWallet = _privateSaleWallet; tokenSupplyLimit = _tokenLimitSupply; discountTokenAmount = _discountTokenAmount; discountTokenPercent = _discountTokenPercent; preSaleClosingTime = _preSaleClosingTime; softCapLimit = _softCapLimit; vault = _vault; buyLimitSupplyMin = _buyLimitSupplyMin; buyLimitSupplyMax = _buyLimitSupplyMax; kycLimitEliminator = _kycLimitEliminator; }",0,"subgraph cluster_4170_ClinicAllCrowdsale {
label=""ClinicAllCrowdsale"";
""4170_getRate"" [label=""getRate""];
""4170_getTokenAmount"" [label=""getTokenAmount""];
""4170_hasClosed"" [label=""hasClosed""];
""4170__preValidatePurchase"" [label=""_preValidatePurchase""];
""4170_beneficiaryWithdrawChunk"" [label=""beneficiaryWithdrawChunk""];
""4170_transferToPrivateInvestor"" [label=""transferToPrivateInvestor""];
""4170_beneficiaryWithdrawAll"" [label=""beneficiaryWithdrawAll""];
""4170_claimRefund"" [label=""claimRefund""];
""4170__getDiscountRate"" [label=""_getDiscountRate""];
""4170_manualRefund"" [label=""manualRefund""];
""4170_constructor"" [label=""constructor""];
""4170_goalReached"" [label=""goalReached""];
""4170_transferOff"" [label=""transferOff""];
""4170_allocatePrivateSaleFunds"" [label=""allocatePrivateSaleFunds""];
""4170_updateRate"" [label=""updateRate""];
""4170__getDiscountTokenAmount"" [label=""_getDiscountTokenAmount""];
""4170_redeemPrivateSaleFunds"" [label=""redeemPrivateSaleFunds""];
""4170_claimRefundChunk"" [label=""claimRefundChunk""];
""4170__getTokenAmount"" [label=""_getTokenAmount""];
""4170_updateKycLimitEliminator"" [label=""updateKycLimitEliminator""];
""4170__forwardFunds"" [label=""_forwardFunds""];
""4170_transferOn"" [label=""transferOn""];
""4170_supplyRest"" [label=""supplyRest""];
""4170_finalization"" [label=""finalization""];
""4170__processPurchase"" [label=""_processPurchase""];
""4170_isDiscount"" [label=""isDiscount""];
""4170_updateBuyLimitRange"" [label=""updateBuyLimitRange""];
""4170_transferTokensToReserve"" [label=""transferTokensToReserve""];
""4170_refundeesListLength"" [label=""refundeesListLength""];
""4170__getTokensWithDiscount"" [label=""_getTokensWithDiscount""];
""4170__getTokensWithDiscount"" -> ""4170__getDiscountRate"";
""4170__preValidatePurchase"" -> ""4170_isLimited"";
""4170_finalization"" -> ""4170_transferTokensToReserve"";
""4170_transferOn"" -> ""4170_onlyOwner"";
""4170_claimRefundChunk"" -> ""4170_onlyOwner"";
""4170_allocatePrivateSaleFunds"" -> ""4170__deliverTokens"";
""4170__forwardFunds"" -> ""4170__forwardFunds"";
""4170_transferTokensToReserve"" -> ""4170__deliverTokens"";
""4170_beneficiaryWithdrawAll"" -> ""4170_onlyOwner"";
""4170_claimRefund"" -> ""4170_goalReached"";
""4170_claimRefundChunk"" -> ""4170_goalReached"";
""4170__processPurchase"" -> ""4170_doesNotExceedLimit"";
""4170__preValidatePurchase"" -> ""4170_onlyIfWhitelisted"";
""4170_beneficiaryWithdrawChunk"" -> ""4170_onlyOwner"";
""4170__processPurchase"" -> ""4170__processPurchase"";
""4170_manualRefund"" -> ""4170_onlyOwner"";
""4170_updateRate"" -> ""4170_onlyManager"";
""4170__getTokenAmount"" -> ""4170_isDiscount"";
""4170_finalization"" -> ""4170_goalReached"";
""4170_refundeesListLength"" -> ""4170_onlyOwner"";
""4170_getTokenAmount"" -> ""4170__getTokenAmount"";
""4170__getDiscountTokenAmount"" -> ""4170__getDiscountRate"";
""4170_getRate"" -> ""4170__getDiscountRate"";
""4170_transferToPrivateInvestor"" -> ""4170_onlyPrivateSaleWallet"";
""4170_redeemPrivateSaleFunds"" -> ""4170_onlyPrivateSaleWallet"";
""4170__preValidatePurchase"" -> ""4170__getTokenAmount"";
""4170__getDiscountRate"" -> ""4170_isDiscount"";
""4170_constructor"" -> ""4170_constructor"";
""4170__getTokenAmount"" -> ""4170__getTokensWithDiscount"";
""4170_getRate"" -> ""4170_isDiscount"";
""4170__getTokensWithDiscount"" -> ""4170__getDiscountTokenAmount"";
""4170_finalization"" -> ""4170_finalization"";
""4170_transferOff"" -> ""4170_onlyOwner"";
""4170_updateKycLimitEliminator"" -> ""4170_onlyOwner"";
""4170__preValidatePurchase"" -> ""4170__preValidatePurchase"";
""4170_updateBuyLimitRange"" -> ""4170_onlyOwner"";
""4170_transferToPrivateInvestor"" -> ""4170_onlyIfWhitelisted"";
""4170_allocatePrivateSaleFunds"" -> ""4170_onlyOwner"";
}
"
0xf3434f37ee2b6c08dde54fd346002be037dc2a82.sol,TkoWhitelist,"contract TkoWhitelist is Ownable{ using SafeMath for uint256; address public admin; mapping(address => uint256) internal totalIndividualWeiAmount; mapping(address => bool) internal whitelist; event AdminChanged(address indexed previousAdmin, address indexed newAdmin); function TkoWhitelist (address _admin) public { require(_admin != address(0)); admin = _admin; }",0,"subgraph cluster_1415_TkoWhitelist {
label=""TkoWhitelist"";
""1415_removeFromWhitelist"" [label=""removeFromWhitelist""];
""1415_addManyToWhitelist"" [label=""addManyToWhitelist""];
""1415_TkoWhitelist"" [label=""TkoWhitelist""];
""1415_isWhitelisted"" [label=""isWhitelisted""];
""1415_addTotalIndividualWeiAmount"" [label=""addTotalIndividualWeiAmount""];
""1415_addToWhitelist"" [label=""addToWhitelist""];
""1415_getTotalIndividualWeiAmount"" [label=""getTotalIndividualWeiAmount""];
""1415_changeAdmin"" [label=""changeAdmin""];
""1415_setTotalIndividualWeiAmount"" [label=""setTotalIndividualWeiAmount""];
""1415_getTotalIndividualWeiAmount"" -> ""1415_onlyOwnerOrAdmin"";
""1415_removeFromWhitelist"" -> ""1415_onlyOwnerOrAdmin"";
""1415_changeAdmin"" -> ""1415_onlyOwner"";
""1415_isWhitelisted"" -> ""1415_onlyOwnerOrAdmin"";
""1415_addManyToWhitelist"" -> ""1415_onlyOwnerOrAdmin"";
""1415_addTotalIndividualWeiAmount"" -> ""1415_onlyOwner"";
""1415_addToWhitelist"" -> ""1415_onlyOwnerOrAdmin"";
""1415_setTotalIndividualWeiAmount"" -> ""1415_onlyOwner"";
}
"
0xdae049562763d6a4236af188a05f4f29603b41cc.sol,ItemToken,"contract ItemToken { using SafeMath for uint256; event Bought (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Sold (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Transfer(address indexed _from, address indexed _to, uint256 _tokenId); event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId); address private owner; mapping (address => bool) private admins; IItemRegistry private itemRegistry; bool private erc721Enabled = false; uint256 private increaseLimit1 = 0.02 ether; uint256 private increaseLimit2 = 0.5 ether; uint256 private increaseLimit3 = 2.0 ether; uint256 private increaseLimit4 = 5.0 ether; uint256[] private listedItems; mapping (uint256 => address) private ownerOfItem; mapping (uint256 => uint256) private startingPriceOfItem; mapping (uint256 => uint256) private priceOfItem; mapping (uint256 => address) private approvedOfItem; function ItemToken () public { owner = msg.sender; admins[owner] = true; }",0,"subgraph cluster_1272_ItemToken {
label=""ItemToken"";
""1272_isContract"" [label=""isContract""];
""1272_approve"" [label=""approve""];
""1272_isAdmin"" [label=""isAdmin""];
""1272_populateFromItemRegistry"" [label=""populateFromItemRegistry""];
""1272_setItemRegistry"" [label=""setItemRegistry""];
""1272_setOwner"" [label=""setOwner""];
""1272__transfer"" [label=""_transfer""];
""1272_startingPriceOf"" [label=""startingPriceOf""];
""1272_approvedFor"" [label=""approvedFor""];
""1272_listItem"" [label=""listItem""];
""1272_balanceOf"" [label=""balanceOf""];
""1272_nextPriceOf"" [label=""nextPriceOf""];
""1272_tokensOf"" [label=""tokensOf""];
""1272_priceOf"" [label=""priceOf""];
""1272_allOf"" [label=""allOf""];
""1272_listMultipleItems"" [label=""listMultipleItems""];
""1272_withdrawAll"" [label=""withdrawAll""];
""1272_ItemToken"" [label=""ItemToken""];
""1272_symbol"" [label=""symbol""];
""1272_withdrawAmount"" [label=""withdrawAmount""];
""1272_totalSupply"" [label=""totalSupply""];
""1272_removeAdmin"" [label=""removeAdmin""];
""1272_enableERC721"" [label=""enableERC721""];
""1272_listItemFromRegistry"" [label=""listItemFromRegistry""];
""1272_tokenExists"" [label=""tokenExists""];
""1272_itemsForSaleLimit"" [label=""itemsForSaleLimit""];
""1272_implementsERC721"" [label=""implementsERC721""];
""1272_buy"" [label=""buy""];
""1272_addAdmin"" [label=""addAdmin""];
""1272_transferFrom"" [label=""transferFrom""];
""1272_ownerOf"" [label=""ownerOf""];
""1272_name"" [label=""name""];
""1272_transfer"" [label=""transfer""];
""1272_calculateNextPrice"" [label=""calculateNextPrice""];
""1272_calculateDevCut"" [label=""calculateDevCut""];
""1272_withdrawAmount"" -> ""1272_onlyOwner"";
""1272_transfer"" -> ""1272__transfer"";
""1272_transfer"" -> ""1272_ownerOf"";
""1272_buy"" -> ""1272_ownerOf"";
""1272_allOf"" -> ""1272_priceOf"";
""1272__transfer"" -> ""1272_ownerOf"";
""1272__transfer"" -> ""1272_tokenExists"";
""1272_setItemRegistry"" -> ""1272_onlyOwner"";
""1272_tokenExists"" -> ""1272_priceOf"";
""1272_allOf"" -> ""1272_nextPriceOf"";
""1272_buy"" -> ""1272_priceOf"";
""1272_listMultipleItems"" -> ""1272_listItem"";
""1272_populateFromItemRegistry"" -> ""1272_onlyOwner"";
""1272_addAdmin"" -> ""1272_onlyOwner"";
""1272_approve"" -> ""1272_tokenExists"";
""1272_listMultipleItems"" -> ""1272_onlyAdmins"";
""1272_buy"" -> ""1272_calculateDevCut"";
""1272_nextPriceOf"" -> ""1272_priceOf"";
""1272_nextPriceOf"" -> ""1272_calculateNextPrice"";
""1272_enableERC721"" -> ""1272_onlyOwner"";
""1272_approve"" -> ""1272_ownerOf"";
""1272_balanceOf"" -> ""1272_ownerOf"";
""1272_listItem"" -> ""1272_onlyAdmins"";
""1272_setOwner"" -> ""1272_onlyOwner"";
""1272_tokensOf"" -> ""1272_balanceOf"";
""1272_transferFrom"" -> ""1272__transfer"";
""1272_listItemFromRegistry"" -> ""1272_listItem"";
""1272_buy"" -> ""1272_isContract"";
""1272_listItemFromRegistry"" -> ""1272_onlyOwner"";
""1272_buy"" -> ""1272_nextPriceOf"";
""1272_transferFrom"" -> ""1272_approvedFor"";
""1272_tokensOf"" -> ""1272_ownerOf"";
""1272_allOf"" -> ""1272_ownerOf"";
""1272_withdrawAll"" -> ""1272_onlyOwner"";
""1272_populateFromItemRegistry"" -> ""1272_listItemFromRegistry"";
""1272_transfer"" -> ""1272_onlyERC721"";
""1272_removeAdmin"" -> ""1272_onlyOwner"";
""1272_approve"" -> ""1272_onlyERC721"";
""1272_buy"" -> ""1272__transfer"";
""1272_transferFrom"" -> ""1272_onlyERC721"";
""1272_allOf"" -> ""1272_startingPriceOf"";
}
"
0x40c836982788dca47d11024b1fa3e01fd4661766.sol,BNXToken,"contract BNXToken is DetailedERC20, PausableToken, BurnableToken { uint8 constant DECIMALS = 18; constructor(uint256 _initialSupply) DetailedERC20(, , DECIMALS) public { totalSupply_ = _initialSupply * 10 ** uint256(DECIMALS); balances[msg.sender] = totalSupply_; emit Transfer(this, msg.sender, totalSupply_); }",0,"subgraph cluster_881_BNXToken {
label=""BNXToken"";
""881_constructor"" [label=""constructor""];
""881_constructor"" -> ""881_constructor"";
}
"
0x3a4087fc4309dcbf04770506ea45788bb0bfda65.sol,Aries_ZodiacToken,contract Aries_ZodiacToken { address owner = msg.sender; bool public purchasingAllowed = true; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; uint256 public totalContribution = 0; uint256 public totalBonusTokensIssued = 0; uint public MINfinney = 0; uint public AIRDROPBounce = 50000000; uint public ICORatio = 144000; uint256 public totalSupply = 0; function name() constant returns (string) { return ; },0,"subgraph cluster_790_Aries_ZodiacToken {
label=""Aries_ZodiacToken"";
""790_name"" [label=""name""];
""790_disablePurchasing"" [label=""disablePurchasing""];
""790_setICORatio"" [label=""setICORatio""];
""790_getStats"" [label=""getStats""];
""790_setMINfinney"" [label=""setMINfinney""];
""790_withdraw"" [label=""withdraw""];
""790_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""790_approve"" [label=""approve""];
""790_burn"" [label=""burn""];
""790_decimals"" [label=""decimals""];
""790_balanceOf"" [label=""balanceOf""];
""790_fallback"" [label=""fallback""];
""790_symbol"" [label=""symbol""];
""790_transfer"" [label=""transfer""];
""790_setAIRDROPBounce"" [label=""setAIRDROPBounce""];
""790_transferFrom"" [label=""transferFrom""];
""790_enablePurchasing"" [label=""enablePurchasing""];
""790_sub"" [label=""sub""];
""790_allowance"" [label=""allowance""];
}
"
0x5acbe8b82bec243f420214b35ed5b6cad2055f07.sol,MultiSigWallet,"contract MultiSigWallet { event Confirmation(address indexed sender, uint indexed transactionId); event Revocation(address indexed sender, uint indexed transactionId); event Submission(uint indexed transactionId); event Execution(uint indexed transactionId); event ExecutionFailure(uint indexed transactionId); event Deposit(address indexed sender, uint value); event OwnerAddition(address indexed owner); event OwnerRemoval(address indexed owner); event RequirementChange(uint required); uint constant public MAX_OWNER_COUNT = 50; mapping (uint => Transaction) public transactions; mapping (uint => mapping (address => bool)) public confirmations; mapping (address => bool) public isOwner; address[] public owners; uint public required; uint public transactionCount; struct Transaction { address destination; uint value; bytes data; bool executed; }",0,"subgraph cluster_1059_MultiSigWallet {
label=""MultiSigWallet"";
""1059_isConfirmed"" [label=""isConfirmed""];
""1059_getOwners"" [label=""getOwners""];
""1059_replaceOwner"" [label=""replaceOwner""];
""1059_submitTransaction"" [label=""submitTransaction""];
""1059_MultiSigWallet"" [label=""MultiSigWallet""];
""1059_confirmTransaction"" [label=""confirmTransaction""];
""1059_getTransactionCount"" [label=""getTransactionCount""];
""1059_getTransactionIds"" [label=""getTransactionIds""];
""1059_changeRequirement"" [label=""changeRequirement""];
""1059_executeTransaction"" [label=""executeTransaction""];
""1059_removeOwner"" [label=""removeOwner""];
""1059_revokeConfirmation"" [label=""revokeConfirmation""];
""1059_getConfirmationCount"" [label=""getConfirmationCount""];
""1059_addOwner"" [label=""addOwner""];
""1059_getConfirmations"" [label=""getConfirmations""];
""1059_addTransaction"" [label=""addTransaction""];
""1059_external_call"" [label=""external_call""];
""1059_fallback"" [label=""fallback""];
""1059_confirmTransaction"" -> ""1059_ownerExists"";
""1059_executeTransaction"" -> ""1059_isConfirmed"";
""1059_executeTransaction"" -> ""1059_confirmed"";
""1059_revokeConfirmation"" -> ""1059_confirmed"";
""1059_revokeConfirmation"" -> ""1059_notExecuted"";
""1059_executeTransaction"" -> ""1059_ownerExists"";
""1059_addOwner"" -> ""1059_onlyWallet"";
""1059_removeOwner"" -> ""1059_changeRequirement"";
""1059_MultiSigWallet"" -> ""1059_validRequirement"";
""1059_executeTransaction"" -> ""1059_notExecuted"";
""1059_confirmTransaction"" -> ""1059_executeTransaction"";
""1059_executeTransaction"" -> ""1059_external_call"";
""1059_submitTransaction"" -> ""1059_confirmTransaction"";
""1059_addOwner"" -> ""1059_validRequirement"";
""1059_addOwner"" -> ""1059_notNull"";
""1059_submitTransaction"" -> ""1059_addTransaction"";
""1059_addOwner"" -> ""1059_ownerDoesNotExist"";
""1059_changeRequirement"" -> ""1059_onlyWallet"";
""1059_changeRequirement"" -> ""1059_validRequirement"";
""1059_replaceOwner"" -> ""1059_ownerExists"";
""1059_revokeConfirmation"" -> ""1059_ownerExists"";
""1059_replaceOwner"" -> ""1059_ownerDoesNotExist"";
""1059_addTransaction"" -> ""1059_notNull"";
""1059_replaceOwner"" -> ""1059_onlyWallet"";
""1059_confirmTransaction"" -> ""1059_notConfirmed"";
""1059_removeOwner"" -> ""1059_onlyWallet"";
""1059_removeOwner"" -> ""1059_ownerExists"";
""1059_confirmTransaction"" -> ""1059_transactionExists"";
}
"
0xeb1b869781fe0960d00cc0826ff609d4f3e2fe1a.sol,CustomToken,"contract CustomToken is BaseToken, ICOToken { function CustomToken() public { totalSupply = 210000000000000000000000000; balanceOf[0xf588d792fa8a634162760482a7b61dd1ab99b1f1] = totalSupply; name = ; symbol = ; decimals = 18; icoRatio = 88888; icoEndtime = 1519812000; icoSender = 0xf588d792fa8a634162760482a7b61dd1ab99b1f1; icoHolder = 0xf043ae16a61ece2107eb2ba48dcc7ad1c8f9f2dc; }",0,"subgraph cluster_357_CustomToken {
label=""CustomToken"";
""357_CustomToken"" [label=""CustomToken""];
}
"
0x9311f7ee5f48a807d598cdd68f43cd4e73ffa747.sol,GTO,contract GTO is ERC20Interface { uint8 public constant decimals = 5; string public constant symbol = ; string public constant name = ; bool public _selling = false; uint256 public _totalSupply = 10 ** 14; uint256 public _originalBuyPrice = 45 * 10**7; address public owner; mapping(address => uint256) private balances; mapping(address => mapping (address => uint256)) private allowed; mapping(address => bool) private approvedInvestorList; mapping(address => uint256) private deposit; address[] private buyers; uint8 public _icoPercent = 10; uint256 public _icoSupply = _totalSupply * _icoPercent / 100; uint256 public _minimumBuy = 3 * 10 ** 17; uint256 public _maximumBuy = 30 * 10 ** 18; modifier onlyOwner() { require(msg.sender == owner); _; },0,"subgraph cluster_778_GTO {
label=""GTO"";
""778_totalSupply"" [label=""totalSupply""];
""778_setMaximumBuy"" [label=""setMaximumBuy""];
""778_setIcoPercent"" [label=""setIcoPercent""];
""778_turnOnSale"" [label=""turnOnSale""];
""778_allowance"" [label=""allowance""];
""778_withdraw"" [label=""withdraw""];
""778_balanceOf"" [label=""balanceOf""];
""778_fallback"" [label=""fallback""];
""778_transfer"" [label=""transfer""];
""778_getBuyers"" [label=""getBuyers""];
""778_removeInvestorList"" [label=""removeInvestorList""];
""778_buyGifto"" [label=""buyGifto""];
""778_approve"" [label=""approve""];
""778_turnOffSale"" [label=""turnOffSale""];
""778_deliveryToken"" [label=""deliveryToken""];
""778_setBuyPrice"" [label=""setBuyPrice""];
""778_getDeposit"" [label=""getDeposit""];
""778_transferFrom"" [label=""transferFrom""];
""778_isApprovedInvestor"" [label=""isApprovedInvestor""];
""778_addInvestorList"" [label=""addInvestorList""];
""778_GTO"" [label=""GTO""];
""778_fallback"" -> ""778_buyGifto"";
""778_setIcoPercent"" -> ""778_onlyOwner"";
""778_buyGifto"" -> ""778_onSale"";
""778_addInvestorList"" -> ""778_onlyOwner"";
""778_deliveryToken"" -> ""778_onlyOwner"";
""778_removeInvestorList"" -> ""778_onlyOwner"";
""778_withdraw"" -> ""778_onlyOwner"";
""778_setBuyPrice"" -> ""778_onlyOwner"";
""778_deliveryToken"" -> ""778_validRange"";
""778_turnOffSale"" -> ""778_onlyOwner"";
""778_setMaximumBuy"" -> ""778_onlyOwner"";
""778_buyGifto"" -> ""778_validValue"";
""778_turnOnSale"" -> ""778_onlyOwner"";
""778_buyGifto"" -> ""778_validInvestor"";
}
"
0x24626fd95ad815bab2136d6f91ca10562161cda3.sol,DaoStorage,"contract DaoStorage is DaoWhitelistingCommon, BytesIteratorStorage { using DoublyLinkedList for DoublyLinkedList.Bytes; using DaoStructs for DaoStructs.Voting; using DaoStructs for DaoStructs.Proposal; using DaoStructs for DaoStructs.ProposalVersion; DoublyLinkedList.Bytes allProposals; mapping (bytes32 => DaoStructs.Proposal) proposalsById; mapping (bytes32 => DoublyLinkedList.Bytes) proposalsByState; constructor(address _resolver) public { require(init(CONTRACT_STORAGE_DAO, _resolver)); }",0,"subgraph cluster_6932_DaoStorage {
label=""DaoStorage"";
""6932_getNextProposalInState"" [label=""getNextProposalInState""];
""6932_readProposalVersion"" [label=""readProposalVersion""];
""6932_setProposalPass"" [label=""setProposalPass""];
""6932_readProposalFunding"" [label=""readProposalFunding""];
""6932_updateProposalPRL"" [label=""updateProposalPRL""];
""6932_archiveProposal"" [label=""archiveProposal""];
""6932_closeProposal"" [label=""closeProposal""];
""6932_setProposalCollateralAmount"" [label=""setProposalCollateralAmount""];
""6932_updateProposalEndorse"" [label=""updateProposalEndorse""];
""6932_getNextProposalVersion"" [label=""getNextProposalVersion""];
""6932_finalizeProposal"" [label=""finalizeProposal""];
""6932_readProposalDraftVotingResult"" [label=""readProposalDraftVotingResult""];
""6932_readDraftVotingCount"" [label=""readDraftVotingCount""];
""6932_addProposal"" [label=""addProposal""];
""6932_readVote"" [label=""readVote""];
""6932_revealVote"" [label=""revealVote""];
""6932_readProposal"" [label=""readProposal""];
""6932_changeFundings"" [label=""changeFundings""];
""6932_readComittedVote"" [label=""readComittedVote""];
""6932_readProposalDraftVotingTime"" [label=""readProposalDraftVotingTime""];
""6932_readVotingRoundVotes"" [label=""readVotingRoundVotes""];
""6932_getNextProposal"" [label=""getNextProposal""];
""6932_editProposal"" [label=""editProposal""];
""6932_getPreviousProposal"" [label=""getPreviousProposal""];
""6932_readPrlAction"" [label=""readPrlAction""];
""6932_closeProposalInternal"" [label=""closeProposalInternal""];
""6932_setProposalCollateralStatus"" [label=""setProposalCollateralStatus""];
""6932_getFirstProposal"" [label=""getFirstProposal""];
""6932_getFirstProposalVersion"" [label=""getFirstProposalVersion""];
""6932_setProposalDraftPass"" [label=""setProposalDraftPass""];
""6932_getLastProposalInState"" [label=""getLastProposalInState""];
""6932_readProposalMilestone"" [label=""readProposalMilestone""];
""6932_readProposalProposer"" [label=""readProposalProposer""];
""6932_setProposalDraftVotingTime"" [label=""setProposalDraftVotingTime""];
""6932_isClaimed"" [label=""isClaimed""];
""6932_getFirstProposalInState"" [label=""getFirstProposalInState""];
""6932_setDraftVotingClaim"" [label=""setDraftVotingClaim""];
""6932_getLastProposalVersion"" [label=""getLastProposalVersion""];
""6932_readVotingCount"" [label=""readVotingCount""];
""6932_readTotalPrlActions"" [label=""readTotalPrlActions""];
""6932_addProposalDoc"" [label=""addProposalDoc""];
""6932_readProposalVotingTime"" [label=""readProposalVotingTime""];
""6932_setMilestoneFunded"" [label=""setMilestoneFunded""];
""6932_readIfMilestoneFunded"" [label=""readIfMilestoneFunded""];
""6932_readProposalCollateralAmount"" [label=""readProposalCollateralAmount""];
""6932_addDraftVote"" [label=""addDraftVote""];
""6932_isDraftClaimed"" [label=""isDraftClaimed""];
""6932_getPreviousProposalVersion"" [label=""getPreviousProposalVersion""];
""6932_constructor"" [label=""constructor""];
""6932_getLastProposal"" [label=""getLastProposal""];
""6932_commitVote"" [label=""commitVote""];
""6932_getPreviousProposalInState"" [label=""getPreviousProposalInState""];
""6932_readProposalCollateralStatus"" [label=""readProposalCollateralStatus""];
""6932_readProposalVotingResult"" [label=""readProposalVotingResult""];
""6932_setVotingClaim"" [label=""setVotingClaim""];
""6932_setProposalVotingTime"" [label=""setProposalVotingTime""];
""6932_readProposalDocs"" [label=""readProposalDocs""];
""6932_readDraftVote"" [label=""readDraftVote""];
""6932_editProposal"" -> ""6932_sender_is"";
""6932_constructor"" -> ""6932_init"";
""6932_readVotingCount"" -> ""6932_senderIsAllowedToRead"";
""6932_getLastProposalInState"" -> ""6932_read_last_from_bytesarray"";
""6932_readProposalDraftVotingResult"" -> ""6932_senderIsAllowedToRead"";
""6932_readComittedVote"" -> ""6932_senderIsAllowedToRead"";
""6932_getNextProposal"" -> ""6932_read_next_from_bytesarray"";
""6932_setProposalPass"" -> ""6932_closeProposalInternal"";
""6932_readDraftVotingCount"" -> ""6932_senderIsAllowedToRead"";
""6932_readProposal"" -> ""6932_senderIsAllowedToRead"";
""6932_readProposalDraftVotingTime"" -> ""6932_senderIsAllowedToRead"";
""6932_setProposalCollateralAmount"" -> ""6932_sender_is"";
""6932_readProposalCollateralStatus"" -> ""6932_senderIsAllowedToRead"";
""6932_setProposalVotingTime"" -> ""6932_sender_is_from"";
""6932_finalizeProposal"" -> ""6932_getLastProposalVersion"";
""6932_readDraftVote"" -> ""6932_senderIsAllowedToRead"";
""6932_readVotingRoundVotes"" -> ""6932_senderIsAllowedToRead"";
""6932_getPreviousProposalInState"" -> ""6932_read_previous_from_bytesarray"";
""6932_readProposalMilestone"" -> ""6932_senderIsAllowedToRead"";
""6932_addProposalDoc"" -> ""6932_sender_is"";
""6932_setMilestoneFunded"" -> ""6932_sender_is"";
""6932_closeProposal"" -> ""6932_closeProposalInternal"";
""6932_readProposalVotingResult"" -> ""6932_senderIsAllowedToRead"";
""6932_getLastProposalInState"" -> ""6932_senderIsAllowedToRead"";
""6932_setProposalCollateralStatus"" -> ""6932_sender_is_from"";
""6932_commitVote"" -> ""6932_sender_is"";
""6932_revealVote"" -> ""6932_sender_is"";
""6932_finalizeProposal"" -> ""6932_sender_is"";
""6932_setVotingClaim"" -> ""6932_sender_is"";
""6932_setProposalDraftPass"" -> ""6932_sender_is"";
""6932_getPreviousProposal"" -> ""6932_read_previous_from_bytesarray"";
""6932_readProposalFunding"" -> ""6932_senderIsAllowedToRead"";
""6932_getNextProposalVersion"" -> ""6932_read_next_from_bytesarray"";
""6932_archiveProposal"" -> ""6932_sender_is"";
""6932_setProposalDraftVotingTime"" -> ""6932_sender_is"";
""6932_readProposal"" -> ""6932_read_last_from_bytesarray"";
""6932_getNextProposalInState"" -> ""6932_read_next_from_bytesarray"";
""6932_getPreviousProposalInState"" -> ""6932_senderIsAllowedToRead"";
""6932_getLastProposalVersion"" -> ""6932_read_last_from_bytesarray"";
""6932_getFirstProposalInState"" -> ""6932_read_first_from_bytesarray"";
""6932_getLastProposal"" -> ""6932_read_last_from_bytesarray"";
""6932_updateProposalPRL"" -> ""6932_sender_is"";
""6932_getPreviousProposalVersion"" -> ""6932_read_previous_from_bytesarray"";
""6932_getFirstProposalVersion"" -> ""6932_read_first_from_bytesarray"";
""6932_updateProposalEndorse"" -> ""6932_sender_is"";
""6932_addDraftVote"" -> ""6932_sender_is"";
""6932_updateProposalPRL"" -> ""6932_closeProposalInternal"";
""6932_setDraftVotingClaim"" -> ""6932_sender_is"";
""6932_changeFundings"" -> ""6932_sender_is"";
""6932_readProposal"" -> ""6932_read_total_bytesarray"";
""6932_setProposalPass"" -> ""6932_sender_is"";
""6932_getFirstProposal"" -> ""6932_read_first_from_bytesarray"";
""6932_getNextProposalInState"" -> ""6932_senderIsAllowedToRead"";
""6932_closeProposal"" -> ""6932_sender_is"";
""6932_getFirstProposalInState"" -> ""6932_senderIsAllowedToRead"";
""6932_readVote"" -> ""6932_senderIsAllowedToRead"";
""6932_readIfMilestoneFunded"" -> ""6932_senderIsAllowedToRead"";
""6932_readProposalVotingTime"" -> ""6932_senderIsAllowedToRead"";
""6932_addProposal"" -> ""6932_sender_is"";
""6932_setProposalDraftPass"" -> ""6932_closeProposalInternal"";
}
"
0x32e996a5a0b6d93c457bfa70917b08622ccdb3f4.sol,Digitelcoin,"contract Digitelcoin is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function Digitelcoin() public { symbol = ; name = ; decimals = 8; _totalSupply = 30000000000000000; balances[ 0x7107996D02d4027bA082f2C3Aa6679c14Ec13894] = _totalSupply; Transfer(address(0), 0x7107996D02d4027bA082f2C3Aa6679c14Ec13894, _totalSupply); }",0,"subgraph cluster_543_Digitelcoin {
label=""Digitelcoin"";
""543_balanceOf"" [label=""balanceOf""];
""543_transfer"" [label=""transfer""];
""543_allowance"" [label=""allowance""];
""543_approve"" [label=""approve""];
""543_transferFrom"" [label=""transferFrom""];
""543_Digitelcoin"" [label=""Digitelcoin""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_fallback"" [label=""fallback""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
}
"
0x18bbc8d1ec4ee0414e24eceed8b6a0e1b509b5c4.sol,MetToken,"contract MetToken is Z_StandardToken, Z_Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 internal constant _totalTokenAmount = 1000 * (10 ** 9) * (10 ** 18); uint256 internal constant WEI_PER_ETHER= 1000000000000000000; uint256 internal constant NUM_OF_SALE_STAGES= 5; enum Sale_Status { Initialized_STATUS, Stage0_Sale_Started_STATUS, Stage0_Sale_Stopped_STATUS, Stage1_Sale_Started_STATUS, Stage1_Sale_Stopped_STATUS, Stage2_Sale_Started_STATUS, Stage2_Sale_Stopped_STATUS, Stage3_Sale_Started_STATUS, Stage3_Sale_Stopped_STATUS, Stage4_Sale_Started_STATUS, Stage4_Sale_Stopped_STATUS, Public_Allowed_To_Trade_STATUS, Stage0_Allowed_To_Trade_STATUS, Closed_STATUS }",0,"subgraph cluster_2808_MetToken {
label=""MetToken"";
""2808_stop_StageN_Sale"" [label=""stop_StageN_Sale""];
""2808_start_Public_Trade"" [label=""start_Public_Trade""];
""2808_z_admin_next_status"" [label=""z_admin_next_status""];
""2808_constructor"" [label=""constructor""];
""2808_ContractEtherBalance"" [label=""ContractEtherBalance""];
""2808_list_history_of_token_transfer"" [label=""list_history_of_token_transfer""];
""2808_z_admin_set_sale_price"" [label=""z_admin_set_sale_price""];
""2808_list_history_of_token_transfer_filtered_by_addr"" [label=""list_history_of_token_transfer_filtered_by_addr""];
""2808_list_frozen_accounts"" [label=""list_frozen_accounts""];
""2808_z_admin_unfreeze"" [label=""z_admin_unfreeze""];
""2808_z_admin_remove_admin"" [label=""z_admin_remove_admin""];
""2808_buy"" [label=""buy""];
""2808_z_admin_add_admin"" [label=""z_admin_add_admin""];
""2808_closeContract"" [label=""closeContract""];
""2808_z_admin_withdraw_ether"" [label=""z_admin_withdraw_ether""];
""2808_z_admin_freeze"" [label=""z_admin_freeze""];
""2808_CurrentSalePrice"" [label=""CurrentSalePrice""];
""2808_start_Stage0_Trade"" [label=""start_Stage0_Trade""];
""2808_start_StageN_Sale"" [label=""start_StageN_Sale""];
""2808_z_admin_add_exchange"" [label=""z_admin_add_exchange""];
""2808_list_active_holders_and_balances"" [label=""list_active_holders_and_balances""];
""2808_fallback"" [label=""fallback""];
""2808_transferFrom"" [label=""transferFrom""];
""2808_transfer"" [label=""transfer""];
""2808_transfer"" -> ""2808_validTransaction"";
""2808_buy"" -> ""2808_isAdmin"";
""2808_z_admin_freeze"" -> ""2808_onlyAdmin"";
""2808_transferFrom"" -> ""2808_validTransaction"";
""2808_transfer"" -> ""2808_transfer"";
""2808_z_admin_remove_admin"" -> ""2808_onlyOwner"";
""2808_start_Stage0_Trade"" -> ""2808_onlyAdmin"";
""2808_transferFrom"" -> ""2808_transferFrom"";
""2808_z_admin_next_status"" -> ""2808_onlyAdmin"";
""2808_z_admin_next_status"" -> ""2808_stop_StageN_Sale"";
""2808_z_admin_add_exchange"" -> ""2808_onlyAdmin"";
""2808_start_Public_Trade"" -> ""2808_onlyAdmin"";
""2808_transferFrom"" -> ""2808_transferFromByAdmin"";
""2808_z_admin_add_admin"" -> ""2808_onlyOwner"";
""2808_z_admin_next_status"" -> ""2808_start_StageN_Sale"";
""2808_transferFrom"" -> ""2808_isAdmin"";
""2808_z_admin_withdraw_ether"" -> ""2808_onlyAdmin"";
""2808_z_admin_unfreeze"" -> ""2808_onlyAdmin"";
""2808_z_admin_next_status"" -> ""2808_start_Public_Trade"";
""2808_fallback"" -> ""2808_buy"";
""2808_start_Public_Trade"" -> ""2808_stop_StageN_Sale"";
""2808_z_admin_set_sale_price"" -> ""2808_onlyAdmin"";
""2808_closeContract"" -> ""2808_onlyAdmin"";
""2808_buy"" -> ""2808_stop_StageN_Sale"";
""2808_z_admin_next_status"" -> ""2808_closeContract"";
""2808_z_admin_next_status"" -> ""2808_start_Stage0_Trade"";
""2808_buy"" -> ""2808_transferFromByAdmin"";
}
"
0x128fa9cc962448d2b438047cdcec1197f63b0ef4.sol,Moon,contract Moon is usingOraclize{ using Strings for string; struct Ticket { uint amount; },0,"subgraph cluster_6657_Moon {
label=""Moon"";
""6657_getRandomNumber"" [label=""getRandomNumber""];
""6657_myEarnings"" [label=""myEarnings""];
""6657_getNumElements"" [label=""getNumElements""];
""6657_endGame"" [label=""endGame""];
""6657_getMyStake"" [label=""getMyStake""];
""6657_getTotalAmount"" [label=""getTotalAmount""];
""6657_getGameEnd"" [label=""getGameEnd""];
""6657___callback"" [label=""__callback""];
""6657_getGameNumber"" [label=""getGameNumber""];
""6657_withdraw"" [label=""withdraw""];
""6657_getNumberOfPlayers"" [label=""getNumberOfPlayers""];
""6657_chooseRandomNumber"" [label=""chooseRandomNumber""];
""6657_getAllGameAmount"" [label=""getAllGameAmount""];
""6657_getNumSums"" [label=""getNumSums""];
""6657_getGameAddresses"" [label=""getGameAddresses""];
""6657_getGameSums"" [label=""getGameSums""];
""6657_insertSums"" [label=""insertSums""];
""6657_clearSums"" [label=""clearSums""];
""6657_buyTicket"" [label=""buyTicket""];
""6657_clearAddresses"" [label=""clearAddresses""];
""6657_getWinnerAddress"" [label=""getWinnerAddress""];
""6657_Moon"" [label=""Moon""];
""6657_insertAddress"" [label=""insertAddress""];
""6657_getGameBegin"" [label=""getGameBegin""];
""6657_chooseRandomNumber"" -> ""6657_oraclize_query"";
""6657_chooseRandomNumber"" -> ""6657_uint2str"";
""6657_endGame"" -> ""6657_clearAddresses"";
""6657_chooseRandomNumber"" -> ""6657_strConcat"";
""6657___callback"" -> ""6657_parseInt"";
""6657_buyTicket"" -> ""6657_insertAddress"";
""6657_endGame"" -> ""6657_clearSums"";
""6657___callback"" -> ""6657_oraclize_cbAddress"";
""6657_buyTicket"" -> ""6657_insertSums"";
}
"
0x72c17126e2ff24b5d76a75ed4b3f031c70b05eac.sol,StringMover,"contract StringMover { function stringToBytes32(string s) public constant returns(bytes32){ bytes32 out; assembly { out := mload(add(s, 32)) }",0,"subgraph cluster_440_StringMover {
label=""StringMover"";
""440_stringToBytes32"" [label=""stringToBytes32""];
""440_bytes32ToString"" [label=""bytes32ToString""];
""440_bytes64ToString"" [label=""bytes64ToString""];
""440_stringToBytes64"" [label=""stringToBytes64""];
}
"
0x87cdabc87128476d84462eb9c5a67a7acfa7889e.sol,USDPrice,contract USDPrice is Ownable { using SafeMath for uint256; uint256 public ETHUSD; uint256 public updatedTime; mapping (uint256 => uint256) public priceHistory; event PriceUpdated(uint256 price); constructor() public { },0,"subgraph cluster_1382_USDPrice {
label=""USDPrice"";
""1382_updatePrice"" [label=""updatePrice""];
""1382_constructor"" [label=""constructor""];
""1382_getHistoricPrice"" [label=""getHistoricPrice""];
""1382_getPrice"" [label=""getPrice""];
""1382_updatePrice"" -> ""1382_onlyOwner"";
}
"
0xf24c63438ae11cb3facb84006f4cfa75458126ed.sol,ClockAuction,"contract ClockAuction is Pausable, ClockAuctionBase { bytes4 constant InterfaceSignature_ERC721 = bytes4(0x9a20483d); function ClockAuction(address _nftAddress, uint256 _cut) public { require(_cut <= 10000); ownerCut = _cut; ERC721 candidateContract = ERC721(_nftAddress); require(candidateContract.supportsInterface(InterfaceSignature_ERC721)); nonFungibleContract = candidateContract; }",0,"subgraph cluster_3079_SaleClockAuction {
label=""SaleClockAuction"";
""3079_createAuction"" [label=""createAuction""];
""3079_isSaleClockAuction"" [label=""isSaleClockAuction""];
""3079_SaleClockAuction"" [label=""SaleClockAuction""];
""3079_averageGen0SalePrice"" [label=""averageGen0SalePrice""];
""3079_bid"" [label=""bid""];
""3079_createAuction"" -> ""3079__addAuction"";
""3079_SaleClockAuction"" -> ""3079_ClockAuction"";
""3079_createAuction"" -> ""3079__escrow"";
""3079_bid"" -> ""3079__bid"";
""3079_bid"" -> ""3079__transfer"";
}
"
0x5438b0938fb88a979032f45b87d2d1aeffe5cc28.sol,Gifto,contract Gifto is ERC20Interface { uint public constant decimals = 5; string public constant symbol = ; string public constant name = ; bool public _selling = false; uint public _totalSupply = 10 ** 14; uint public _originalBuyPrice = 10 ** 10; address public owner; mapping(address => uint256) balances; mapping(address => bool) approvedInvestorList; mapping(address => uint256) deposit; address[] buyers; uint _icoPercent = 10; uint public _icoSupply = _totalSupply * _icoPercent / 100; uint public _minimumBuy = 10 ** 17; uint public _maximumBuy = 30 * 10 ** 18; modifier onlyOwner() { require(msg.sender == owner); _; },0,"subgraph cluster_865_Gifto {
label=""Gifto"";
""865_isSellingNow"" [label=""isSellingNow""];
""865_filterBuyers"" [label=""filterBuyers""];
""865_returnETHforNormalBuyers"" [label=""returnETHforNormalBuyers""];
""865_getTotalDeposit"" [label=""getTotalDeposit""];
""865_withdraw"" [label=""withdraw""];
""865_isApprovedInvestor"" [label=""isApprovedInvestor""];
""865_getInvestorBuyers"" [label=""getInvestorBuyers""];
""865_removeInvestorList"" [label=""removeInvestorList""];
""865_turnOnSale"" [label=""turnOnSale""];
""865_setIcoPercent"" [label=""setIcoPercent""];
""865_setMaximumBuy"" [label=""setMaximumBuy""];
""865_transfer"" [label=""transfer""];
""865_getNormalBuyers"" [label=""getNormalBuyers""];
""865_totalSupply"" [label=""totalSupply""];
""865_buy"" [label=""buy""];
""865_setMinimumBuy"" [label=""setMinimumBuy""];
""865_deliveryToken"" [label=""deliveryToken""];
""865_fallback"" [label=""fallback""];
""865_getDeposit"" [label=""getDeposit""];
""865_turnOffSale"" [label=""turnOffSale""];
""865_addInvestorList"" [label=""addInvestorList""];
""865_balanceOf"" [label=""balanceOf""];
""865_setBuyPrice"" [label=""setBuyPrice""];
""865_Gifto"" [label=""Gifto""];
""865_fallback"" -> ""865_validValue"";
""865_turnOnSale"" -> ""865_onlyOwner"";
""865_returnETHforNormalBuyers"" -> ""865_onlyOwner"";
""865_setBuyPrice"" -> ""865_onlyOwner"";
""865_withdraw"" -> ""865_onlyOwner"";
""865_setMinimumBuy"" -> ""865_onlyOwner"";
""865_buy"" -> ""865_validOriginalBuyPrice"";
""865_buy"" -> ""865_onSale"";
""865_buy"" -> ""865_onlyNotOwner"";
""865_getNormalBuyers"" -> ""865_filterBuyers"";
""865_setIcoPercent"" -> ""865_onlyOwner"";
""865_removeInvestorList"" -> ""865_onlyOwner"";
""865_getInvestorBuyers"" -> ""865_filterBuyers"";
""865_deliveryToken"" -> ""865_onlyOwner"";
""865_turnOffSale"" -> ""865_onlyOwner"";
""865_addInvestorList"" -> ""865_onlyOwner"";
""865_buy"" -> ""865_validInvestor"";
""865_setMaximumBuy"" -> ""865_onlyOwner"";
""865_deliveryToken"" -> ""865_validOriginalBuyPrice"";
}
"
0x708400c5b44cd5b3517f0cdde21c62bef5a7eb18.sol,Burnable,"contract Burnable is StandardToken { using SafeMath for uint; event Burn(address indexed from, uint value); function burn(uint _value) public returns (bool success) { require(_value > 0 && balances[msg.sender] >= _value); balances[msg.sender] = balances[msg.sender].sub(_value); totalSupply_ = totalSupply_.sub(_value); emit Burn(msg.sender, _value); return true; }",0,"subgraph cluster_840_Burnable {
label=""Burnable"";
""840_transferFrom"" [label=""transferFrom""];
""840_burn"" [label=""burn""];
""840_transfer"" [label=""transfer""];
""840_burnFrom"" [label=""burnFrom""];
""840_transferFrom"" -> ""840_transferFrom"";
""840_transfer"" -> ""840_transfer"";
}
"
0x0cf55facee33ed2827d78ad2d113efe0aa80a92b.sol,BITTOToken,"contract BITTOToken is ERC20,PoSTokenStandard,Ownable { using SafeMath for uint256; string public name = ; string public symbol = ; uint public decimals = 18; uint public chainStartTime; uint public chainStartBlockNumber; uint public stakeStartTime; uint public stakeMinAge = 15 days; uint public stakeMaxAge = 90 days; uint constant REWARDS_PER_AGE = 622665006227000; uint public totalSupply; uint public maxTotalSupply; uint public totalInitialSupply; mapping(address => bool) public noPOSRewards; struct transferInStruct { uint128 amount; uint64 time; }",0,"subgraph cluster_1337_BITTOToken {
label=""BITTOToken"";
""1337_approve"" [label=""approve""];
""1337_totalSupply"" [label=""totalSupply""];
""1337_ownerBurnToken"" [label=""ownerBurnToken""];
""1337_batchTransfer"" [label=""batchTransfer""];
""1337_disablePOSReward"" [label=""disablePOSReward""];
""1337_transferFrom"" [label=""transferFrom""];
""1337_getCoinAge"" [label=""getCoinAge""];
""1337_annualInterest"" [label=""annualInterest""];
""1337_balanceOf"" [label=""balanceOf""];
""1337_allowance"" [label=""allowance""];
""1337_coinAge"" [label=""coinAge""];
""1337_transfer"" [label=""transfer""];
""1337_mint"" [label=""mint""];
""1337_ownerSetStakeStartTime"" [label=""ownerSetStakeStartTime""];
""1337_burn"" [label=""burn""];
""1337_getProofOfStakeReward"" [label=""getProofOfStakeReward""];
""1337_getBlockNumber"" [label=""getBlockNumber""];
""1337_BITTOToken"" [label=""BITTOToken""];
""1337_transfer"" -> ""1337_mint"";
""1337_ownerSetStakeStartTime"" -> ""1337_onlyOwner"";
""1337_ownerBurnToken"" -> ""1337_onlyOwner"";
""1337_mint"" -> ""1337_getProofOfStakeReward"";
""1337_transferFrom"" -> ""1337_onlyPayloadSize"";
""1337_disablePOSReward"" -> ""1337_onlyOwner"";
""1337_transfer"" -> ""1337_onlyPayloadSize"";
""1337_coinAge"" -> ""1337_getCoinAge"";
""1337_batchTransfer"" -> ""1337_onlyOwner"";
""1337_mint"" -> ""1337_canPoSMint"";
""1337_getProofOfStakeReward"" -> ""1337_getCoinAge"";
}
"
0x29632c10d76bd1aed6b1524bf5bde4c992610670.sol,ApplicationEntity,"contract ApplicationEntity { bytes32 sourceCodeUrl; bool public _initialized = false; bool public _locked = false; uint8 public CurrentEntityState; mapping (bytes32 => uint8) public EntityStates; address public GatewayInterfaceAddress; ABIGatewayInterface GatewayInterfaceEntity; ABIProposals public ProposalsEntity; ABIFunding public FundingEntity; ABIMilestones public MilestonesEntity; ABIMeetings public MeetingsEntity; ABIBountyManager public BountyManagerEntity; ABITokenManager public TokenManagerEntity; ABIListingContract public ListingContractEntity; ABIFundingManager public FundingManagerEntity; ABINewsContract public NewsContractEntity; mapping (bytes32 => address) public AssetCollection; mapping (uint8 => bytes32) public AssetCollectionIdToName; uint8 public AssetCollectionNum = 0; event EventAppEntityReady ( address indexed _address ); event EventAppEntityCodeUpgradeProposal ( address indexed _address, bytes32 indexed _sourceCodeUrl ); event EventAppEntityInitAsset ( bytes32 indexed _name, address indexed _address ); event EventAppEntityInitAssetsToThis ( uint8 indexed _assetNum ); event EventAppEntityAssetsToNewApplication ( address indexed _address ); event EventAppEntityLocked ( address indexed _address ); address public deployerAddress; function ApplicationEntity() public { deployerAddress = msg.sender; setEntityStates(); CurrentEntityState = getEntityState(); }",0,"subgraph cluster_236_ApplicationEntityABI {
label=""ApplicationEntityABI"";
""236_extendedAnyAssetHasChanges"" [label=""extendedAnyAssetHasChanges""];
""236_getBylawBytes32"" [label=""getBylawBytes32""];
""236_getTimestamp"" [label=""getTimestamp""];
""236_setUpgradeState"" [label=""setUpgradeState""];
""236_createCodeUpgradeProposal"" [label=""createCodeUpgradeProposal""];
""236_addAssetBountyManager"" [label=""addAssetBountyManager""];
""236_setBylawUint256"" [label=""setBylawUint256""];
""236_getEntityState"" [label=""getEntityState""];
""236_addAssetMeetings"" [label=""addAssetMeetings""];
""236_lock"" [label=""lock""];
""236_ApplicationEntity"" [label=""ApplicationEntity""];
""236_hasRequiredStateChanges"" [label=""hasRequiredStateChanges""];
""236_addAssetFundingManager"" [label=""addAssetFundingManager""];
""236_linkToGateway"" [label=""linkToGateway""];
""236_getAssetAddressByName"" [label=""getAssetAddressByName""];
""236_doStateChanges"" [label=""doStateChanges""];
""236_anyAssetHasChanges"" [label=""anyAssetHasChanges""];
""236_initializeAssetsToThisApplication"" [label=""initializeAssetsToThisApplication""];
""236_addAssetProposals"" [label=""addAssetProposals""];
""236_setBylawBytes32"" [label=""setBylawBytes32""];
""236_acceptCodeUpgradeProposal"" [label=""acceptCodeUpgradeProposal""];
""236_addAssetTokenManager"" [label=""addAssetTokenManager""];
""236_getRequiredStateChanges"" [label=""getRequiredStateChanges""];
""236_initialize"" [label=""initialize""];
""236_getParentAddress"" [label=""getParentAddress""];
""236_transferAssetsToNewApplication"" [label=""transferAssetsToNewApplication""];
""236_addAssetListingContract"" [label=""addAssetListingContract""];
""236_addAssetFunding"" [label=""addAssetFunding""];
""236_canInitiateCodeUpgrade"" [label=""canInitiateCodeUpgrade""];
""236_addAssetMilestones"" [label=""addAssetMilestones""];
""236_addAssetNewsContract"" [label=""addAssetNewsContract""];
""236_getBylawUint256"" [label=""getBylawUint256""];
}
"
0xc07e7c1acc5c61a54e24b2af564bdb1e256f72d5.sol,CryptoflipCar,contract CryptoflipCar { string version = ; address ownerAddress = 0x3177Abbe93422c9525652b5d4e1101a248A99776; address foundTeamAddress = 0x30A38029bEd78159B0342FF9722C3B56479328D8; struct WhaleCard { address ownerAddress; uint256 curPrice; },0,"subgraph cluster_2171_CryptoflipCar {
label=""CryptoflipCar"";
""2171_getCompany"" [label=""getCompany""];
""2171_purchaseMakeCard"" [label=""purchaseMakeCard""];
""2171_getCar"" [label=""getCar""];
""2171_getCarCount"" [label=""getCarCount""];
""2171_purchaseWhaleCard"" [label=""purchaseWhaleCard""];
""2171_purchaseCarCard"" [label=""purchaseCarCard""];
""2171_purchaseCarAdv"" [label=""purchaseCarAdv""];
""2171_purchaseCompanyCard"" [label=""purchaseCompanyCard""];
""2171_getMake"" [label=""getMake""];
""2171_GetIsPauded"" [label=""GetIsPauded""];
""2171_purchaseMakeAdv"" [label=""purchaseMakeAdv""];
""2171_playGame"" [label=""playGame""];
""2171_addCar"" [label=""addCar""];
""2171_getWhaleCard"" [label=""getWhaleCard""];
""2171_div"" [label=""div""];
""2171_InitiateWhaleCard"" [label=""InitiateWhaleCard""];
""2171_purchaseCompanyAdv"" [label=""purchaseCompanyAdv""];
""2171_InitiateCompanies"" [label=""InitiateCompanies""];
""2171_setReleaseMake"" [label=""setReleaseMake""];
""2171_pauseGame"" [label=""pauseGame""];
""2171_mul"" [label=""mul""];
""2171_getMakeCount"" [label=""getMakeCount""];
""2171_InitiateMakes"" [label=""InitiateMakes""];
""2171_setReleaseCar"" [label=""setReleaseCar""];
""2171_InitiateCars"" [label=""InitiateCars""];
""2171_getCompanyCount"" [label=""getCompanyCount""];
""2171_setReleaseCompany"" [label=""setReleaseCompany""];
""2171_addCompany"" [label=""addCompany""];
""2171_addMake"" [label=""addMake""];
""2171_setReleaseMake"" -> ""2171_onlyOwner"";
""2171_InitiateWhaleCard"" -> ""2171_onlyOwner"";
""2171_purchaseCompanyCard"" -> ""2171_div"";
""2171_purchaseCarAdv"" -> ""2171_div"";
""2171_purchaseCompanyCard"" -> ""2171_mul"";
""2171_InitiateCompanies"" -> ""2171_addCompany"";
""2171_playGame"" -> ""2171_onlyOwner"";
""2171_purchaseMakeAdv"" -> ""2171_mul"";
""2171_InitiateCars"" -> ""2171_addCar"";
""2171_InitiateMakes"" -> ""2171_onlyOwner"";
""2171_InitiateCompanies"" -> ""2171_onlyOwner"";
""2171_purchaseWhaleCard"" -> ""2171_div"";
""2171_purchaseMakeCard"" -> ""2171_mul"";
""2171_addCompany"" -> ""2171_onlyOwner"";
""2171_purchaseCarCard"" -> ""2171_div"";
""2171_InitiateMakes"" -> ""2171_addMake"";
""2171_purchaseCarAdv"" -> ""2171_mul"";
""2171_pauseGame"" -> ""2171_onlyOwner"";
""2171_purchaseWhaleCard"" -> ""2171_mul"";
""2171_setReleaseCompany"" -> ""2171_onlyOwner"";
""2171_InitiateCars"" -> ""2171_onlyOwner"";
""2171_purchaseMakeCard"" -> ""2171_div"";
""2171_purchaseMakeAdv"" -> ""2171_div"";
""2171_purchaseCompanyAdv"" -> ""2171_mul"";
""2171_purchaseCompanyAdv"" -> ""2171_div"";
""2171_addCar"" -> ""2171_onlyOwner"";
""2171_setReleaseCar"" -> ""2171_onlyOwner"";
""2171_addMake"" -> ""2171_onlyOwner"";
""2171_purchaseCarCard"" -> ""2171_mul"";
}
"
0xdc0a2185031ecf89f091a39c63c2857a7d5c301a.sol,Arbitrator,"contract Arbitrator is Owned { Realitio public realitio; mapping(bytes32 => uint256) public arbitration_bounties; uint256 dispute_fee; mapping(bytes32 => uint256) custom_dispute_fees; string public metadata; event LogRequestArbitration( bytes32 indexed question_id, uint256 fee_paid, address requester, uint256 remaining ); event LogSetRealitio( address realitio ); event LogSetQuestionFee( uint256 fee ); event LogSetDisputeFee( uint256 fee ); event LogSetCustomDisputeFee( bytes32 indexed question_id, uint256 fee ); constructor() public { owner = msg.sender; }",0,"subgraph cluster_2520_Arbitrator {
label=""Arbitrator"";
""2520_setRealitio"" [label=""setRealitio""];
""2520_setQuestionFee"" [label=""setQuestionFee""];
""2520_submitAnswerByArbitrator"" [label=""submitAnswerByArbitrator""];
""2520_realitycheck"" [label=""realitycheck""];
""2520_constructor"" [label=""constructor""];
""2520_setCustomDisputeFee"" [label=""setCustomDisputeFee""];
""2520_setDisputeFee"" [label=""setDisputeFee""];
""2520_requestArbitration"" [label=""requestArbitration""];
""2520_fallback"" [label=""fallback""];
""2520_setMetaData"" [label=""setMetaData""];
""2520_callWithdraw"" [label=""callWithdraw""];
""2520_getDisputeFee"" [label=""getDisputeFee""];
""2520_withdraw"" [label=""withdraw""];
""2520_submitAnswerByArbitrator"" -> ""2520_onlyOwner"";
""2520_setRealitio"" -> ""2520_onlyOwner"";
""2520_withdraw"" -> ""2520_onlyOwner"";
""2520_setDisputeFee"" -> ""2520_onlyOwner"";
""2520_setCustomDisputeFee"" -> ""2520_onlyOwner"";
""2520_callWithdraw"" -> ""2520_onlyOwner"";
""2520_requestArbitration"" -> ""2520_getDisputeFee"";
""2520_setQuestionFee"" -> ""2520_onlyOwner"";
""2520_setMetaData"" -> ""2520_onlyOwner"";
}
"
0x5819f24d478e4630930bd97d640dd2fdabd0a4ff.sol,BulkToken,contract BulkToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 1000000000 * (10**18); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; function BulkToken () { owner = msg.sender; },0,"subgraph cluster_756_BulkToken {
label=""BulkToken"";
""756_transfer"" [label=""transfer""];
""756_BulkToken"" [label=""BulkToken""];
""756_createTokens"" [label=""createTokens""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_refundTokens"" [label=""refundTokens""];
""756_setOwner"" [label=""setOwner""];
""756_totalSupply"" [label=""totalSupply""];
""756_transferFrom"" [label=""transferFrom""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_approve"" [label=""approve""];
""756_transfer"" -> ""756_transfer"";
""756_createTokens"" -> ""756_safeAdd"";
""756_transferFrom"" -> ""756_transferFrom"";
""756_approve"" -> ""756_allowance"";
""756_approve"" -> ""756_approve"";
""756_createTokens"" -> ""756_safeSub"";
}
"
0xdd1d5ce9f8e26a3f768b1c1e5c68db10a05d5fc0.sol,WeBetCrypto,"contract WeBetCrypto { string public name = ; string public symbol = ; address public selfAddress; address public admin; address[] private users; uint8 public decimals = 7; uint256 public relativeDateSave; uint256 public totalFunds; uint256 public totalSupply = 300000000000000; uint256 public pricePerEther; uint256 private amountInCirculation; uint256 private currentProfits; uint256 private currentIteration; uint256 private actualProfitSplit; bool public DAppReady; bool public isFrozen; bool public splitInService = true; bool private hasICORun; bool private running; bool[4] private devApprovals; mapping(address => uint256) balances; mapping(address => uint256) monthlyLimit; mapping(address => bool) isAdded; mapping(address => bool) freezeUser; mapping (address => mapping (address => uint256)) allowed; mapping (address => mapping (address => uint256)) cooldown; event Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event CurrentTLSNProof(address indexed _from, string _proof); modifier isAdmin() { require(msg.sender == admin); _; }",0,"subgraph cluster_1864_WeBetCrypto {
label=""WeBetCrypto"";
""1864_emergencySplitToggle"" [label=""emergencySplitToggle""];
""1864_name"" [label=""name""];
""1864_setPriceOfEther"" [label=""setPriceOfEther""];
""1864_claimTokens"" [label=""claimTokens""];
""1864_checkSplitEnd"" [label=""checkSplitEnd""];
""1864_approve"" [label=""approve""];
""1864_fallback"" [label=""fallback""];
""1864_symbol"" [label=""symbol""];
""1864_loginUser"" [label=""loginUser""];
""1864_assetThaw"" [label=""assetThaw""];
""1864_addUser"" [label=""addUser""];
""1864_WeBetCrypto"" [label=""WeBetCrypto""];
""1864_ICOSplit"" [label=""ICOSplit""];
""1864_transferToContract"" [label=""transferToContract""];
""1864_buyTokensForSelf"" [label=""buyTokensForSelf""];
""1864_transferFrom"" [label=""transferFrom""];
""1864_getPricePerToken"" [label=""getPricePerToken""];
""1864_assureDAppIsReady"" [label=""assureDAppIsReady""];
""1864_emergencyThaw"" [label=""emergencyThaw""];
""1864_emergencyFreeze"" [label=""emergencyFreeze""];
""1864_isDAppReady"" [label=""isDAppReady""];
""1864_calculateTokenAmount"" [label=""calculateTokenAmount""];
""1864_totalSupply"" [label=""totalSupply""];
""1864_alterBankBalance"" [label=""alterBankBalance""];
""1864_buyTokensForAddress"" [label=""buyTokensForAddress""];
""1864_tokenFallback"" [label=""tokenFallback""];
""1864_isContract"" [label=""isContract""];
""1864_allowance"" [label=""allowance""];
""1864_transferToSelf"" [label=""transferToSelf""];
""1864_splitProfits"" [label=""splitProfits""];
""1864_assetFreeze"" [label=""assetFreeze""];
""1864_transfer"" [label=""transfer""];
""1864_safeSub"" [label=""safeSub""];
""1864_decimals"" [label=""decimals""];
""1864_checkMonthlyLimit"" [label=""checkMonthlyLimit""];
""1864_transferToAddress"" [label=""transferToAddress""];
""1864_balanceOf"" [label=""balanceOf""];
""1864_logoutUser"" [label=""logoutUser""];
""1864_checkCooldown"" [label=""checkCooldown""];
""1864_ICOSplit"" -> ""1864_isAdmin"";
""1864_ICOSplit"" -> ""1864_safeSub"";
""1864_calculateTokenAmount"" -> ""1864_getPricePerToken"";
""1864_buyTokensForSelf"" -> ""1864_calculateTokenAmount"";
""1864_alterBankBalance"" -> ""1864_DAppOnline"";
""1864_logoutUser"" -> ""1864_isAdmin"";
""1864_ICOSplit"" -> ""1864_assetFreeze"";
""1864_transfer"" -> ""1864_isRunning"";
""1864_loginUser"" -> ""1864_DAppOnline"";
""1864_transferToAddress"" -> ""1864_addUser"";
""1864_transfer"" -> ""1864_transferToSelf"";
""1864_buyTokensForAddress"" -> ""1864_addUser"";
""1864_emergencyFreeze"" -> ""1864_isAdmin"";
""1864_loginUser"" -> ""1864_isAdmin"";
""1864_transferFrom"" -> ""1864_requireThaw"";
""1864_isDAppReady"" -> ""1864_isAdmin"";
""1864_splitProfits"" -> ""1864_assetFreeze"";
""1864_checkSplitEnd"" -> ""1864_assetThaw"";
""1864_buyTokensForAddress"" -> ""1864_calculateTokenAmount"";
""1864_emergencyThaw"" -> ""1864_isAdmin"";
""1864_transfer"" -> ""1864_transferToContract"";
""1864_transferFrom"" -> ""1864_safeSub"";
""1864_transferFrom"" -> ""1864_userNotPlaying"";
""1864_transferToContract"" -> ""1864_safeSub"";
""1864_transferToAddress"" -> ""1864_safeSub"";
""1864_splitProfits"" -> ""1864_safeSub"";
""1864_logoutUser"" -> ""1864_DAppOnline"";
""1864_setPriceOfEther"" -> ""1864_isAdmin"";
""1864_transfer"" -> ""1864_isContract"";
""1864_transferFrom"" -> ""1864_addUser"";
""1864_buyTokensForSelf"" -> ""1864_addUser"";
""1864_claimTokens"" -> ""1864_isAdmin"";
""1864_transfer"" -> ""1864_requireThaw"";
""1864_transferToSelf"" -> ""1864_safeSub"";
""1864_alterBankBalance"" -> ""1864_isAdmin"";
""1864_splitProfits"" -> ""1864_checkSplitEnd"";
""1864_transferToContract"" -> ""1864_addUser"";
""1864_transfer"" -> ""1864_transferToAddress"";
""1864_ICOSplit"" -> ""1864_assetThaw"";
""1864_alterBankBalance"" -> ""1864_safeSub"";
""1864_WeBetCrypto"" -> ""1864_addUser"";
""1864_ICOSplit"" -> ""1864_oneTime"";
}
"
0x533ec971484b1014215422010978e892eacac430.sol,MortifyAsset,"contract MortifyAsset is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public deadline = now + 100 * 1 days; uint public round2 = now + 95 * 1 days; uint public round1 = now + 70 * 1 days; uint256 public totalSupply = 25000000000000e18; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 100000000000e18; uint public target0drop = 1; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_1253_MortifyAsset {
label=""MortifyAsset"";
""1253_withdraw"" [label=""withdraw""];
""1253_transfer"" [label=""transfer""];
""1253_transferFrom"" [label=""transferFrom""];
""1253_getTokens"" [label=""getTokens""];
""1253_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1253_balanceOf"" [label=""balanceOf""];
""1253_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1253_constructor"" [label=""constructor""];
""1253_fallback"" [label=""fallback""];
""1253_burn"" [label=""burn""];
""1253_allowance"" [label=""allowance""];
""1253_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1253_finishDistribution"" [label=""finishDistribution""];
""1253_Distribute"" [label=""Distribute""];
""1253_transferOwnership"" [label=""transferOwnership""];
""1253_add"" [label=""add""];
""1253_withdrawAll"" [label=""withdrawAll""];
""1253_approve"" [label=""approve""];
""1253_getTokenBalance"" [label=""getTokenBalance""];
""1253_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1253_distr"" [label=""distr""];
""1253_transferOwnership"" -> ""1253_onlyOwner"";
""1253_transfer"" -> ""1253_onlyPayloadSize"";
""1253_constructor"" -> ""1253_distr"";
""1253_fallback"" -> ""1253_getTokens"";
""1253_add"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_onlyOwner"";
""1253_transferFrom"" -> ""1253_onlyPayloadSize"";
""1253_finishDistribution"" -> ""1253_canDistr"";
""1253_finishDistribution"" -> ""1253_onlyOwner"";
""1253_Distribute"" -> ""1253_onlyOwner"";
""1253_withdraw"" -> ""1253_onlyOwner"";
""1253_updateTokensPerEth"" -> ""1253_onlyOwner"";
""1253_distr"" -> ""1253_canDistr"";
""1253_DistributeAirdropMultiple"" -> ""1253_Distribute"";
""1253_getTokens"" -> ""1253_canDistr"";
""1253_withdrawForeignTokens"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_Distribute"";
""1253_getTokens"" -> ""1253_distr"";
""1253_burn"" -> ""1253_onlyOwner"";
""1253_withdrawAll"" -> ""1253_onlyOwner"";
""1253_DistributeAirdropMultiple"" -> ""1253_onlyOwner"";
}
"
0x4b5bc97407898339eca79b541cee9b8b79ccda40.sol,IdaToken,"contract IdaToken is Ownable, RBAC, StandardToken { using AddressUtils for address; using SafeMath for uint256; string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public constant INITIAL_SUPPLY = 10000000000; uint256 public constant FOOTSTONE_ROUND_AMOUNT = 396000000; uint256 public constant PRIVATE_SALE_AMOUNT = 1200000000; uint256 public constant OWNER_LOCKED_IN_COMMON = 5000000000; uint256 public constant COMMON_PURPOSE_AMOUNT = 7204000000; uint256 public constant TEAM_RESERVED_AMOUNT1 = 120000000; uint256 public constant TEAM_RESERVED_AMOUNT2 = 360000000; uint256 public constant TEAM_RESERVED_AMOUNT3 = 360000000; uint256 public constant TEAM_RESERVED_AMOUNT4 = 360000000; uint256 public constant EXCHANGE_RATE_IN_PRIVATE_SALE = 10000; uint256 public constant TIMESTAMP_OF_20181001000001 = 1538352001; uint256 public constant TIMESTAMP_OF_20181002000001 = 1538438401; uint256 public constant TIMESTAMP_OF_20181101000001 = 1541030401; uint256 public constant TIMESTAMP_OF_20190201000001 = 1548979201; uint256 public constant TIMESTAMP_OF_20190501000001 = 1556668801; uint256 public constant TIMESTAMP_OF_20190801000001 = 1564617601; uint256 public constant TIMESTAMP_OF_20191101000001 = 1572566401; uint256 public constant TIMESTAMP_OF_20201101000001 = 1604188801; uint256 public constant TIMESTAMP_OF_20211101000001 = 1635724801; string public constant ROLE_PARTNERWHITELIST = ; string public constant ROLE_PRIVATESALEWHITELIST = ; uint256 public totalOwnerReleased; uint256 public totalPartnersReleased; uint256 public totalPrivateSalesReleased; uint256 public totalCommonReleased; uint256 public totalTeamReleased1; uint256 public totalTeamReleased2; uint256 public totalTeamReleased3; uint256 public totalTeamReleased4; address[] private partners; mapping (address => uint256) private partnersIndex; address[] private privateSaleAgents; mapping (address => uint256) private privateSaleAgentsIndex; mapping (address => uint256) private partnersAmountLimit; mapping (address => uint256) private partnersWithdrawed; mapping (address => uint256) private privateSalesReleased; address ownerWallet; event TransferLog(address from, address to, bytes32 functionName, uint256 value); constructor(address _ownerWallet) public { ownerWallet = _ownerWallet; totalSupply_ = INITIAL_SUPPLY * (10 ** uint256(decimals)); balances[msg.sender] = totalSupply_; }",0,"subgraph cluster_2219_IdaToken {
label=""IdaToken"";
""2219_addAddressToPrivateWhiteList"" [label=""addAddressToPrivateWhiteList""];
""2219_addAddressToPartnerWhiteList"" [label=""addAddressToPartnerWhiteList""];
""2219_getPartnerAddresses"" [label=""getPartnerAddresses""];
""2219_constructor"" [label=""constructor""];
""2219_withdrawRemainPrivateCoin"" [label=""withdrawRemainPrivateCoin""];
""2219_fallback"" [label=""fallback""];
""2219_withdrawToPartner"" [label=""withdrawToPartner""];
""2219__permittedPartnerTranferValue"" [label=""_permittedPartnerTranferValue""];
""2219_withdrawPrivateCoinByMan"" [label=""withdrawPrivateCoinByMan""];
""2219_transfer"" [label=""transfer""];
""2219_withdrawToTeamStep4"" [label=""withdrawToTeamStep4""];
""2219_transferFrom"" [label=""transferFrom""];
""2219_withdrawToTeamStep3"" [label=""withdrawToTeamStep3""];
""2219_withdrawToTeamStep2"" [label=""withdrawToTeamStep2""];
""2219_withdrawFunds"" [label=""withdrawFunds""];
""2219_changeOwnerWallet"" [label=""changeOwnerWallet""];
""2219_getPrivateSaleAgentAddresses"" [label=""getPrivateSaleAgentAddresses""];
""2219_privateSale"" [label=""privateSale""];
""2219__privateSaleTransferFromOwner"" [label=""_privateSaleTransferFromOwner""];
""2219_withdrawCommonCoin"" [label=""withdrawCommonCoin""];
""2219__ownerReleaseLimit"" [label=""_ownerReleaseLimit""];
""2219_removeAddressFromPrivateWhiteList"" [label=""removeAddressFromPrivateWhiteList""];
""2219_privateSaleReleased"" [label=""privateSaleReleased""];
""2219_removeAddressFromPartnerWhiteList"" [label=""removeAddressFromPartnerWhiteList""];
""2219_partnerWithdrawed"" [label=""partnerWithdrawed""];
""2219_withdrawToTeamStep1"" [label=""withdrawToTeamStep1""];
""2219_partnerAmountLimit"" [label=""partnerAmountLimit""];
""2219_withdrawToTeamStep4"" -> ""2219_onlyOwner"";
""2219_fallback"" -> ""2219_privateSale"";
""2219_privateSale"" -> ""2219_onlyRole"";
""2219__privateSaleTransferFromOwner"" -> ""2219_transferFrom"";
""2219_withdrawToPartner"" -> ""2219_hasRole"";
""2219_removeAddressFromPartnerWhiteList"" -> ""2219_onlyOwner"";
""2219_withdrawFunds"" -> ""2219_onlyOwner"";
""2219_addAddressToPrivateWhiteList"" -> ""2219_approve"";
""2219_transferFrom"" -> ""2219_transferFrom"";
""2219_withdrawCommonCoin"" -> ""2219_transfer"";
""2219_transfer"" -> ""2219_hasRole"";
""2219_addAddressToPrivateWhiteList"" -> ""2219_hasRole"";
""2219_withdrawPrivateCoinByMan"" -> ""2219_transferFrom"";
""2219_addAddressToPrivateWhiteList"" -> ""2219_onlyOwner"";
""2219_withdrawToTeamStep1"" -> ""2219_onlyOwner"";
""2219_addAddressToPartnerWhiteList"" -> ""2219_hasRole"";
""2219_addAddressToPartnerWhiteList"" -> ""2219_addRole"";
""2219_withdrawRemainPrivateCoin"" -> ""2219_onlyOwner"";
""2219_withdrawToPartner"" -> ""2219_transfer"";
""2219_transfer"" -> ""2219_transfer"";
""2219_withdrawToTeamStep1"" -> ""2219_transfer"";
""2219_transferFrom"" -> ""2219__privateSaleTransferFromOwner"";
""2219_removeAddressFromPartnerWhiteList"" -> ""2219_removeRole"";
""2219_addAddressToPrivateWhiteList"" -> ""2219_addRole"";
""2219_removeAddressFromPrivateWhiteList"" -> ""2219_approve"";
""2219_withdrawCommonCoin"" -> ""2219_onlyOwner"";
""2219_addAddressToPartnerWhiteList"" -> ""2219_onlyOwner"";
""2219_transferFrom"" -> ""2219_hasRole"";
""2219_withdrawToPartner"" -> ""2219_onlyOwner"";
""2219_changeOwnerWallet"" -> ""2219_onlyOwner"";
""2219_removeAddressFromPrivateWhiteList"" -> ""2219_onlyOwner"";
""2219_getPrivateSaleAgentAddresses"" -> ""2219_onlyOwner"";
""2219_withdrawToTeamStep3"" -> ""2219_transfer"";
""2219_withdrawRemainPrivateCoin"" -> ""2219_transfer"";
""2219_transfer"" -> ""2219__ownerReleaseLimit"";
""2219_privateSale"" -> ""2219_transferFrom"";
""2219__permittedPartnerTranferValue"" -> ""2219_balanceOf"";
""2219_withdrawToTeamStep3"" -> ""2219_onlyOwner"";
""2219_removeAddressFromPartnerWhiteList"" -> ""2219_hasRole"";
""2219_removeAddressFromPrivateWhiteList"" -> ""2219_hasRole"";
""2219_withdrawPrivateCoinByMan"" -> ""2219_onlyRole"";
""2219_withdrawToPartner"" -> ""2219_balanceOf"";
""2219_withdrawToTeamStep2"" -> ""2219_transfer"";
""2219_withdrawToTeamStep2"" -> ""2219_onlyOwner"";
""2219_removeAddressFromPrivateWhiteList"" -> ""2219_removeRole"";
""2219_getPartnerAddresses"" -> ""2219_onlyOwner"";
""2219_withdrawToTeamStep4"" -> ""2219_transfer"";
""2219_transfer"" -> ""2219__permittedPartnerTranferValue"";
}
"
0x1919255865512fb1f5a432bad5d8c84a1e406a07.sol,Vixelabs,"contract Vixelabs is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 10000000000e8; uint256 public totalDistributed = 0; uint256 public tokensPerEth = 20000000e8; uint256 public constant minContribution = 1 ether / 100; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_950_Vixelabs {
label=""Vixelabs"";
""950_withdrawAltcoinTokens"" [label=""withdrawAltcoinTokens""];
""950_approve"" [label=""approve""];
""950_Vixelabs"" [label=""Vixelabs""];
""950_getTokens"" [label=""getTokens""];
""950_transferOwnership"" [label=""transferOwnership""];
""950_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""950_transfer"" [label=""transfer""];
""950_distr"" [label=""distr""];
""950_updateTokensPerEth"" [label=""updateTokensPerEth""];
""950_withdraw"" [label=""withdraw""];
""950_getTokenBalance"" [label=""getTokenBalance""];
""950_doAirdrop"" [label=""doAirdrop""];
""950_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""950_burn"" [label=""burn""];
""950_balanceOf"" [label=""balanceOf""];
""950_finishDistribution"" [label=""finishDistribution""];
""950_fallback"" [label=""fallback""];
""950_allowance"" [label=""allowance""];
""950_transferFrom"" [label=""transferFrom""];
""950_getTokens"" -> ""950_distr"";
""950_withdraw"" -> ""950_onlyOwner"";
""950_finishDistribution"" -> ""950_canDistr"";
""950_Vixelabs"" -> ""950_distr"";
""950_adminClaimAirdropMultiple"" -> ""950_onlyOwner"";
""950_burn"" -> ""950_onlyOwner"";
""950_updateTokensPerEth"" -> ""950_onlyOwner"";
""950_fallback"" -> ""950_getTokens"";
""950_transferFrom"" -> ""950_onlyPayloadSize"";
""950_finishDistribution"" -> ""950_onlyOwner"";
""950_getTokens"" -> ""950_canDistr"";
""950_adminClaimAirdrop"" -> ""950_doAirdrop"";
""950_adminClaimAirdrop"" -> ""950_onlyOwner"";
""950_distr"" -> ""950_canDistr"";
""950_transfer"" -> ""950_onlyPayloadSize"";
""950_transferOwnership"" -> ""950_onlyOwner"";
""950_withdrawAltcoinTokens"" -> ""950_onlyOwner"";
""950_adminClaimAirdropMultiple"" -> ""950_doAirdrop"";
}
"
0xa28b5854df048bcd5eec522fada1c6b7ea006aae.sol,usingNRE,contract usingNRE { niguezRandomityEngine internal nre = niguezRandomityEngine(0x031eaE8a8105217ab64359D4361022d0947f4572); function ra() internal view returns (uint256) { return nre.ra(); },0,"subgraph cluster_368_usingNRE {
label=""usingNRE"";
""368_ra"" [label=""ra""];
""368_rm"" [label=""rm""];
""368_rs"" [label=""rs""];
""368_rp"" [label=""rp""];
""368_ru"" [label=""ru""];
""368_rw"" [label=""rw""];
""368_rd"" [label=""rd""];
""368_ri"" [label=""ri""];
""368_rf"" [label=""rf""];
""368_rx"" [label=""rx""];
""368_rl"" [label=""rl""];
""368_rb"" [label=""rb""];
""368_rc"" [label=""rc""];
""368_rk"" [label=""rk""];
""368_rn"" [label=""rn""];
""368_rt"" [label=""rt""];
""368_rg"" [label=""rg""];
""368_re"" [label=""re""];
""368_rq"" [label=""rq""];
""368_rh"" [label=""rh""];
""368_ro"" [label=""ro""];
""368_rv"" [label=""rv""];
""368_rj"" [label=""rj""];
""368_rr"" [label=""rr""];
}
"
0x37238583c041a2f51964f23fde2710c4fbd29e9e.sol,BATMO,"contract BATMO is FOMOEvents { using SafeMath for *; using NameFilter for string; using KeysCalc for uint256; PlayerBookInterface private PlayerBook; OBOK public ObokContract; address private admin = msg.sender; address private admin2; string constant public name = ; string constant public symbol = ; uint256 private rndExtra_ = 1 minutes; uint256 private rndGap_ = 1 minutes; uint256 constant private rndInit_ = 2 hours; uint256 constant private rndInc_ = 10 seconds; uint256 constant private rndMax_ = 2 hours; uint256 public rID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => BATMODatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => BATMODatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => BATMODatasets.Round) public round_; mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping (uint256 => BATMODatasets.TeamFee) public fees_; mapping (uint256 => BATMODatasets.PotSplit) public potSplit_; constructor(address otherAdmin, address token, address playerbook) public { admin2 = otherAdmin; ObokContract = OBOK(token); PlayerBook = PlayerBookInterface(playerbook); fees_[0] = BATMODatasets.TeamFee(47,10); potSplit_[0] = BATMODatasets.PotSplit(15,10); }",0,"subgraph cluster_3778_BATMO {
label=""BATMO"";
""3778_withdrawEarnings"" [label=""withdrawEarnings""];
""3778_buyXname"" [label=""buyXname""];
""3778_fallback"" [label=""fallback""];
""3778_updateTimer"" [label=""updateTimer""];
""3778_activate"" [label=""activate""];
""3778_reLoadXid"" [label=""reLoadXid""];
""3778_withdraw"" [label=""withdraw""];
""3778_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""3778_endTx"" [label=""endTx""];
""3778_constructor"" [label=""constructor""];
""3778_receivePlayerNameList"" [label=""receivePlayerNameList""];
""3778_registerNameXID"" [label=""registerNameXID""];
""3778_updateMasks"" [label=""updateMasks""];
""3778_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""3778_registerNameXaddr"" [label=""registerNameXaddr""];
""3778_updateGenVault"" [label=""updateGenVault""];
""3778_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""3778_calcKeysReceived"" [label=""calcKeysReceived""];
""3778_buyXid"" [label=""buyXid""];
""3778_endRound"" [label=""endRound""];
""3778_determinePID"" [label=""determinePID""];
""3778_getPlayerVaults"" [label=""getPlayerVaults""];
""3778_receivePlayerInfo"" [label=""receivePlayerInfo""];
""3778_reLoadXaddr"" [label=""reLoadXaddr""];
""3778_core"" [label=""core""];
""3778_getTimeLeft"" [label=""getTimeLeft""];
""3778_registerNameXname"" [label=""registerNameXname""];
""3778_distributeExternal"" [label=""distributeExternal""];
""3778_reLoadXname"" [label=""reLoadXname""];
""3778_buyXaddr"" [label=""buyXaddr""];
""3778_reLoadCore"" [label=""reLoadCore""];
""3778_iWantXKeys"" [label=""iWantXKeys""];
""3778_buyCore"" [label=""buyCore""];
""3778_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""3778_getBuyPrice"" [label=""getBuyPrice""];
""3778_managePlayer"" [label=""managePlayer""];
""3778_distributeInternal"" [label=""distributeInternal""];
""3778_reLoadXname"" -> ""3778_isWithinLimits"";
""3778_buyXid"" -> ""3778_isWithinLimits"";
""3778_updateGenVault"" -> ""3778_calcUnMaskedEarnings"";
""3778_buyXname"" -> ""3778_isHuman"";
""3778_registerNameXID"" -> ""3778_isHuman"";
""3778_withdraw"" -> ""3778_isActivated"";
""3778_core"" -> ""3778_distributeExternal"";
""3778_reLoadXaddr"" -> ""3778_isActivated"";
""3778_buyXid"" -> ""3778_isHuman"";
""3778_fallback"" -> ""3778_buyCore"";
""3778_buyCore"" -> ""3778_endRound"";
""3778_reLoadXname"" -> ""3778_reLoadCore"";
""3778_reLoadCore"" -> ""3778_endRound"";
""3778_buyXname"" -> ""3778_buyCore"";
""3778_reLoadCore"" -> ""3778_core"";
""3778_fallback"" -> ""3778_isWithinLimits"";
""3778_core"" -> ""3778_managePlayer"";
""3778_buyXaddr"" -> ""3778_isActivated"";
""3778_getPlayerInfoByAddress"" -> ""3778_calcUnMaskedEarnings"";
""3778_fallback"" -> ""3778_isHuman"";
""3778_buyCore"" -> ""3778_core"";
""3778_core"" -> ""3778_endTx"";
""3778_buyXname"" -> ""3778_isActivated"";
""3778_buyXaddr"" -> ""3778_isHuman"";
""3778_getPlayerVaults"" -> ""3778_calcUnMaskedEarnings"";
""3778_withdrawEarnings"" -> ""3778_updateGenVault"";
""3778_fallback"" -> ""3778_isActivated"";
""3778_buyXaddr"" -> ""3778_isWithinLimits"";
""3778_reLoadXid"" -> ""3778_reLoadCore"";
""3778_reLoadCore"" -> ""3778_withdrawEarnings"";
""3778_reLoadXaddr"" -> ""3778_isWithinLimits"";
""3778_core"" -> ""3778_updateTimer"";
""3778_reLoadXid"" -> ""3778_isActivated"";
""3778_distributeInternal"" -> ""3778_updateMasks"";
""3778_buyXid"" -> ""3778_buyCore"";
""3778_buyXaddr"" -> ""3778_determinePID"";
""3778_getPlayerVaults"" -> ""3778_getPlayerVaultsHelper"";
""3778_buyXid"" -> ""3778_isActivated"";
""3778_core"" -> ""3778_distributeInternal"";
""3778_reLoadXaddr"" -> ""3778_isHuman"";
""3778_buyXid"" -> ""3778_determinePID"";
""3778_reLoadXid"" -> ""3778_isHuman"";
""3778_registerNameXaddr"" -> ""3778_isHuman"";
""3778_managePlayer"" -> ""3778_updateGenVault"";
""3778_reLoadXid"" -> ""3778_isWithinLimits"";
""3778_fallback"" -> ""3778_determinePID"";
""3778_reLoadXaddr"" -> ""3778_reLoadCore"";
""3778_withdraw"" -> ""3778_isHuman"";
""3778_withdraw"" -> ""3778_withdrawEarnings"";
""3778_buyXname"" -> ""3778_isWithinLimits"";
""3778_reLoadXname"" -> ""3778_isActivated"";
""3778_reLoadXname"" -> ""3778_isHuman"";
""3778_registerNameXname"" -> ""3778_isHuman"";
""3778_withdraw"" -> ""3778_endRound"";
""3778_buyXname"" -> ""3778_determinePID"";
""3778_buyXaddr"" -> ""3778_buyCore"";
}
"
0x33cf13763ffe1606783b0f63d9e0dff3d7b80bbc.sol,ChargeNetwork,"contract ChargeNetwork is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 20000000000e8; uint256 public totalDistributed = 0; uint256 public constant MIN_CONTRIBUTION = 1 ether / 100; uint256 public tokensPerEth = 20000000e8; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_944_ChargeNetwork {
label=""ChargeNetwork"";
""944_distr"" [label=""distr""];
""944_fallback"" [label=""fallback""];
""944_withdraw"" [label=""withdraw""];
""944_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""944_approve"" [label=""approve""];
""944_transferOwnership"" [label=""transferOwnership""];
""944_updateTokensPerEth"" [label=""updateTokensPerEth""];
""944_doAirdrop"" [label=""doAirdrop""];
""944_burn"" [label=""burn""];
""944_transfer"" [label=""transfer""];
""944_ChargeNetwork"" [label=""ChargeNetwork""];
""944_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""944_allowance"" [label=""allowance""];
""944_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""944_getTokenBalance"" [label=""getTokenBalance""];
""944_balanceOf"" [label=""balanceOf""];
""944_transferFrom"" [label=""transferFrom""];
""944_finishDistribution"" [label=""finishDistribution""];
""944_getTokens"" [label=""getTokens""];
""944_adminClaimAirdropMultiple"" -> ""944_doAirdrop"";
""944_updateTokensPerEth"" -> ""944_onlyOwner"";
""944_burn"" -> ""944_onlyOwner"";
""944_ChargeNetwork"" -> ""944_distr"";
""944_adminClaimAirdrop"" -> ""944_doAirdrop"";
""944_transfer"" -> ""944_onlyPayloadSize"";
""944_getTokens"" -> ""944_distr"";
""944_fallback"" -> ""944_getTokens"";
""944_finishDistribution"" -> ""944_canDistr"";
""944_getTokens"" -> ""944_canDistr"";
""944_adminClaimAirdropMultiple"" -> ""944_onlyOwner"";
""944_adminClaimAirdrop"" -> ""944_onlyOwner"";
""944_withdrawForeignTokens"" -> ""944_onlyOwner"";
""944_finishDistribution"" -> ""944_onlyOwner"";
""944_transferFrom"" -> ""944_onlyPayloadSize"";
""944_distr"" -> ""944_canDistr"";
""944_withdraw"" -> ""944_onlyOwner"";
""944_transferOwnership"" -> ""944_onlyOwner"";
}
"
0x70d0907b064ab5c86849d391124f62ce9bcbf597.sol,Fastbitcoin,"contract Fastbitcoin is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 99 * 1 days; uint public round2 = now + 15 * 1 days; uint public round1 = now + 5 * 1 days; uint256 public totalSupply = 100000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 10000; uint256 public tokensPerEth = 2500000e8; uint public target0drop = 4000; uint public progress0drop = 0; address multisig = 0x25CB79CB502E58697C47e8cD29411fc4250879a6; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_1261_Fastbitcoin {
label=""Fastbitcoin"";
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_constructor"" [label=""constructor""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_approve"" [label=""approve""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_allowance"" [label=""allowance""];
""1261_distr"" [label=""distr""];
""1261_Distribute"" [label=""Distribute""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_getTokens"" [label=""getTokens""];
""1261_add"" [label=""add""];
""1261_fallback"" [label=""fallback""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_withdraw"" [label=""withdraw""];
""1261_transfer"" [label=""transfer""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_burn"" [label=""burn""];
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_distr"" -> ""1261_canDistr"";
}
"
0x6abf810730a342add1374e11f3e97500ee774d1f.sol,BCFBuyMarket,contract BCFBuyMarket is BCFData { address public buyingEscrowAddress; bool public isBCFBuyMarket = true; function setBuyingEscrowAddress(address _address) external onlyOwner { buyingEscrowAddress = _address; },0,"subgraph cluster_1081_BCFBuyMarket {
label=""BCFBuyMarket"";
""1081_createCardForAcquiredPlayers"" [label=""createCardForAcquiredPlayers""];
""1081_createCardForAcquiredPlayer"" [label=""createCardForAcquiredPlayer""];
""1081_setBuyingEscrowAddress"" [label=""setBuyingEscrowAddress""];
""1081_setBuyingEscrowAddress"" -> ""1081_onlyOwner"";
""1081_createCardForAcquiredPlayers"" -> ""1081_whenNotPaused"";
""1081_createCardForAcquiredPlayer"" -> ""1081_createPlayerCard"";
""1081_createCardForAcquiredPlayer"" -> ""1081_whenNotPaused"";
""1081_createCardForAcquiredPlayers"" -> ""1081_createPlayerCard"";
}
"
0x533bafa16aa76218ec4a365ad71bf8816cf21bbb.sol,ERC721_custom,"contract ERC721_custom is ERC165, IERC721 { using SafeMath for uint256; using Address for address; bytes4 private constant _ERC721_RECEIVED = 0x150b7a02; mapping (uint256 => address) private _tokenOwner; mapping (uint256 => address) private _tokenApprovals; mapping (address => uint256) private _ownedTokensCount; mapping (address => mapping (address => bool)) private _operatorApprovals; bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd; constructor() public { _registerInterface(_InterfaceId_ERC721); }",0,"subgraph cluster_814_ERC721_custom {
label=""ERC721_custom"";
""814__exists"" [label=""_exists""];
""814_isApprovedForAll"" [label=""isApprovedForAll""];
""814_getApproved"" [label=""getApproved""];
""814_internal_transferFrom"" [label=""internal_transferFrom""];
""814_ownerOf"" [label=""ownerOf""];
""814__burn"" [label=""_burn""];
""814__isApprovedOrOwner"" [label=""_isApprovedOrOwner""];
""814__clearApproval"" [label=""_clearApproval""];
""814_approve"" [label=""approve""];
""814_setApprovalForAll"" [label=""setApprovalForAll""];
""814_transferFrom"" [label=""transferFrom""];
""814__mint"" [label=""_mint""];
""814_constructor"" [label=""constructor""];
""814_balanceOf"" [label=""balanceOf""];
""814__addTokenTo"" [label=""_addTokenTo""];
""814__checkOnERC721Received"" [label=""_checkOnERC721Received""];
""814__removeTokenFrom"" [label=""_removeTokenFrom""];
""814__isApprovedOrOwner"" -> ""814_getApproved"";
""814_transferFrom"" -> ""814__addTokenTo"";
""814__burn"" -> ""814__removeTokenFrom"";
""814__isApprovedOrOwner"" -> ""814_isApprovedForAll"";
""814_internal_transferFrom"" -> ""814__addTokenTo"";
""814__burn"" -> ""814__clearApproval"";
""814_transferFrom"" -> ""814__removeTokenFrom"";
""814_approve"" -> ""814_ownerOf"";
""814_getApproved"" -> ""814__exists"";
""814_approve"" -> ""814_isApprovedForAll"";
""814_constructor"" -> ""814__registerInterface"";
""814_transferFrom"" -> ""814__isApprovedOrOwner"";
""814__clearApproval"" -> ""814_ownerOf"";
""814__isApprovedOrOwner"" -> ""814_ownerOf"";
""814__removeTokenFrom"" -> ""814_ownerOf"";
""814_transferFrom"" -> ""814__clearApproval"";
""814__mint"" -> ""814__addTokenTo"";
}
"
0x32ec2e6967687825123c5c0f30c18e2c47708df1.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },0,"subgraph cluster_1312_MiniMeToken {
label=""MiniMeToken"";
""1312_approve"" [label=""approve""];
""1312_createCloneToken"" [label=""createCloneToken""];
""1312_isContract"" [label=""isContract""];
""1312_enableTransfers"" [label=""enableTransfers""];
""1312_allowance"" [label=""allowance""];
""1312_generateTokens"" [label=""generateTokens""];
""1312_min"" [label=""min""];
""1312_destroyTokens"" [label=""destroyTokens""];
""1312_getValueAt"" [label=""getValueAt""];
""1312_transferFrom"" [label=""transferFrom""];
""1312_updateValueAtNow"" [label=""updateValueAtNow""];
""1312_totalSupply"" [label=""totalSupply""];
""1312_approveAndCall"" [label=""approveAndCall""];
""1312_MiniMeToken"" [label=""MiniMeToken""];
""1312_balanceOfAt"" [label=""balanceOfAt""];
""1312_balanceOf"" [label=""balanceOf""];
""1312_fallback"" [label=""fallback""];
""1312_totalSupplyAt"" [label=""totalSupplyAt""];
""1312_claimTokens"" [label=""claimTokens""];
""1312_transfer"" [label=""transfer""];
""1312_doTransfer"" [label=""doTransfer""];
""1312_balanceOf"" -> ""1312_balanceOfAt"";
""1312_balanceOfAt"" -> ""1312_getValueAt"";
""1312_destroyTokens"" -> ""1312_totalSupply"";
""1312_fallback"" -> ""1312_isContract"";
""1312_generateTokens"" -> ""1312_onlyController"";
""1312_approveAndCall"" -> ""1312_approve"";
""1312_totalSupply"" -> ""1312_totalSupplyAt"";
""1312_generateTokens"" -> ""1312_balanceOf"";
""1312_enableTransfers"" -> ""1312_onlyController"";
""1312_totalSupplyAt"" -> ""1312_getValueAt"";
""1312_doTransfer"" -> ""1312_updateValueAtNow"";
""1312_destroyTokens"" -> ""1312_updateValueAtNow"";
""1312_doTransfer"" -> ""1312_balanceOfAt"";
""1312_approve"" -> ""1312_isContract"";
""1312_doTransfer"" -> ""1312_isContract"";
""1312_destroyTokens"" -> ""1312_balanceOf"";
""1312_generateTokens"" -> ""1312_totalSupply"";
""1312_balanceOfAt"" -> ""1312_min"";
""1312_transferFrom"" -> ""1312_doTransfer"";
""1312_generateTokens"" -> ""1312_updateValueAtNow"";
""1312_transfer"" -> ""1312_doTransfer"";
""1312_claimTokens"" -> ""1312_onlyController"";
""1312_totalSupplyAt"" -> ""1312_min"";
""1312_destroyTokens"" -> ""1312_onlyController"";
}
"
0xf4b3802619e5946a1ccff4a29aff079274bfcdbe.sol,StandardToken,"contract StandardToken is ERC20, BasicToken { mapping (address => mapping (address => uint256)) internal allowed; function transferFrom(address _from, address _to, uint256 _value) public returns (bool) { require(_to != address(0)); require(_value <= balances[_from]); require(_value <= allowed[_from][msg.sender]); balances[_from] = balances[_from].sub(_value); balances[_to] = balances[_to].add(_value); allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); Transfer(_from, _to, _value); return true; }",0,"subgraph cluster_607_StandardToken {
label=""StandardToken"";
""607_increaseApproval"" [label=""increaseApproval""];
""607_transferFrom"" [label=""transferFrom""];
""607_approve"" [label=""approve""];
""607_allowance"" [label=""allowance""];
""607_decreaseApproval"" [label=""decreaseApproval""];
}
"
0x0689418b68122149a737a7cc7a49b2ad7c3049cc.sol,Academy,contract Academy { struct Deposit { uint depSum; uint depDate; uint depPayDate; },0,"subgraph cluster_195_Academy {
label=""Academy"";
""195_pay"" [label=""pay""];
""195_take"" [label=""take""];
""195_fallback"" [label=""fallback""];
""195_constructor"" [label=""constructor""];
""195_fallback"" -> ""195_take"";
""195_fallback"" -> ""195_pay"";
}
"
0x29789c9abebc185f1876af10c38ee47ee0c6ed48.sol,Crafting,contract Crafting { Clans clans = Clans(0x0); Inventory constant inventory = Inventory(0xb545507080b0f63df02ff9bd9302c2bb2447b826); Material constant clothMaterial = Material(0x8a6014227138556a259e7b2bf1dce668f9bdfd06); Material constant woodMaterial = Material(0x6804bbb708b8af0851e2980c8a5e9abb42adb179); Material constant metalMaterial = Material(0xb334f68bf47c1f1c1556e7034954d389d7fbbf07); address owner; mapping(uint256 => Recipe) public recipeList; mapping(address => bool) operator; struct Recipe { uint256 id; uint256 itemId; uint256 clothRequired; uint256 woodRequired; uint256 metalRequired; },0,"subgraph cluster_239_Crafting {
label=""Crafting"";
""239_setClans"" [label=""setClans""];
""239_setOperator"" [label=""setOperator""];
""239_addRecipe"" [label=""addRecipe""];
""239_craftItem"" [label=""craftItem""];
""239_constructor"" [label=""constructor""];
}
"
0x6d6db51e3e4838369676508ce25db64f4ca7e5e4.sol,EtherX,contract EtherX { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1327_EtherX {
label=""EtherX"";
""1327_withdraw"" [label=""withdraw""];
""1327_setSymbol"" [label=""setSymbol""];
""1327_sellPrice"" [label=""sellPrice""];
""1327_setAdministrator"" [label=""setAdministrator""];
""1327_sqrt"" [label=""sqrt""];
""1327_dividendsOf"" [label=""dividendsOf""];
""1327_reinvest"" [label=""reinvest""];
""1327_fallback"" [label=""fallback""];
""1327_totalSupply"" [label=""totalSupply""];
""1327_myTokens"" [label=""myTokens""];
""1327_EtherX"" [label=""EtherX""];
""1327_transfer"" [label=""transfer""];
""1327_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1327_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1327_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1327_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1327_buyPrice"" [label=""buyPrice""];
""1327_myDividends"" [label=""myDividends""];
""1327_setStakingRequirement"" [label=""setStakingRequirement""];
""1327_sell"" [label=""sell""];
""1327_balanceOf"" [label=""balanceOf""];
""1327_buy"" [label=""buy""];
""1327_disableInitialStage"" [label=""disableInitialStage""];
""1327_setName"" [label=""setName""];
""1327_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1327_exit"" [label=""exit""];
""1327_purchaseTokens"" [label=""purchaseTokens""];
""1327_withdraw"" -> ""1327_onlyStronghands"";
""1327_sellPrice"" -> ""1327_tokensToEthereum_"";
""1327_setSymbol"" -> ""1327_onlyAdministrator"";
""1327_exit"" -> ""1327_sell"";
""1327_purchaseTokens"" -> ""1327_ethereumToTokens_"";
""1327_buy"" -> ""1327_purchaseTokens"";
""1327_purchaseTokens"" -> ""1327_antiEarlyWhale"";
""1327_transfer"" -> ""1327_onlyBagholders"";
""1327_setName"" -> ""1327_onlyAdministrator"";
""1327_reinvest"" -> ""1327_purchaseTokens"";
""1327_reinvest"" -> ""1327_onlyStronghands"";
""1327_sell"" -> ""1327_tokensToEthereum_"";
""1327_calculateEthereumReceived"" -> ""1327_tokensToEthereum_"";
""1327_transfer"" -> ""1327_tokensToEthereum_"";
""1327_setAdministrator"" -> ""1327_onlyAdministrator"";
""1327_calculateTokensReceived"" -> ""1327_ethereumToTokens_"";
""1327_sell"" -> ""1327_onlyBagholders"";
""1327_myDividends"" -> ""1327_dividendsOf"";
""1327_withdraw"" -> ""1327_myDividends"";
""1327_transfer"" -> ""1327_myDividends"";
""1327_buyPrice"" -> ""1327_tokensToEthereum_"";
""1327_disableInitialStage"" -> ""1327_onlyAdministrator"";
""1327_reinvest"" -> ""1327_myDividends"";
""1327_ethereumToTokens_"" -> ""1327_sqrt"";
""1327_setStakingRequirement"" -> ""1327_onlyAdministrator"";
""1327_transfer"" -> ""1327_withdraw"";
""1327_myTokens"" -> ""1327_balanceOf"";
""1327_exit"" -> ""1327_withdraw"";
""1327_fallback"" -> ""1327_purchaseTokens"";
}
"
0x6b31a2ef5986d283332e4a3a608adb3c09ffdd13.sol,ERC721,"contract ERC721 is ERC165, IERC721 { using SafeMath for uint256; using Address for address; bytes4 private constant _ERC721_RECEIVED = 0x150b7a02; mapping (uint256 => address) private _tokenOwner; mapping (uint256 => address) private _tokenApprovals; mapping (address => uint256) private _ownedTokensCount; mapping (address => mapping (address => bool)) private _operatorApprovals; bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd; constructor () public { _registerInterface(_InterfaceId_ERC721); }",0,"subgraph cluster_1665_ERC721 {
label=""ERC721"";
""1665__exists"" [label=""_exists""];
""1665__checkOnERC721Received"" [label=""_checkOnERC721Received""];
""1665__mint"" [label=""_mint""];
""1665_getApproved"" [label=""getApproved""];
""1665__clearApproval"" [label=""_clearApproval""];
""1665__removeTokenFrom"" [label=""_removeTokenFrom""];
""1665_balanceOf"" [label=""balanceOf""];
""1665_approve"" [label=""approve""];
""1665_ownerOf"" [label=""ownerOf""];
""1665__addTokenTo"" [label=""_addTokenTo""];
""1665_transferFrom"" [label=""transferFrom""];
""1665__isApprovedOrOwner"" [label=""_isApprovedOrOwner""];
""1665_setApprovalForAll"" [label=""setApprovalForAll""];
""1665_constructor"" [label=""constructor""];
""1665__burn"" [label=""_burn""];
""1665_isApprovedForAll"" [label=""isApprovedForAll""];
""1665_safeTransferFrom"" [label=""safeTransferFrom""];
""1665__burn"" -> ""1665__removeTokenFrom"";
""1665_getApproved"" -> ""1665__exists"";
""1665_safeTransferFrom"" -> ""1665__checkOnERC721Received"";
""1665_constructor"" -> ""1665__registerInterface"";
""1665__clearApproval"" -> ""1665_ownerOf"";
""1665__isApprovedOrOwner"" -> ""1665_ownerOf"";
""1665__isApprovedOrOwner"" -> ""1665_isApprovedForAll"";
""1665_approve"" -> ""1665_isApprovedForAll"";
""1665_safeTransferFrom"" -> ""1665_safeTransferFrom"";
""1665_transferFrom"" -> ""1665__clearApproval"";
""1665__burn"" -> ""1665__clearApproval"";
""1665_transferFrom"" -> ""1665__removeTokenFrom"";
""1665__mint"" -> ""1665__addTokenTo"";
""1665_transferFrom"" -> ""1665__addTokenTo"";
""1665_transferFrom"" -> ""1665__isApprovedOrOwner"";
""1665__removeTokenFrom"" -> ""1665_ownerOf"";
""1665_safeTransferFrom"" -> ""1665_transferFrom"";
""1665_approve"" -> ""1665_ownerOf"";
""1665__isApprovedOrOwner"" -> ""1665_getApproved"";
}
"
0x27d16a670bec2e2db9e0ca367aaee6758d2cb3c7.sol,QCSSToken,"contract QCSSToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_380_QCSSToken {
label=""QCSSToken"";
""380_approveAndCall"" [label=""approveAndCall""];
""380_transfer"" [label=""transfer""];
""380_burn"" [label=""burn""];
""380_approve"" [label=""approve""];
""380__transfer"" [label=""_transfer""];
""380_burnFrom"" [label=""burnFrom""];
""380_transferFrom"" [label=""transferFrom""];
""380_constructor"" [label=""constructor""];
""380_approveAndCall"" -> ""380_approve"";
""380_transfer"" -> ""380__transfer"";
""380_transferFrom"" -> ""380__transfer"";
}
"
0x286a090b31462890cd9bf9f167b610ed8aa8bd1a.sol,AutomatedExchange,contract AutomatedExchange is ApproveAndCallFallBack{ uint256 PSN=100000000000000; uint256 PSNH=50000000000000; address tokenAddress=0x841D34aF2018D9487199678eDd47Dd46B140690B; ERC20Interface tokenContract=ERC20Interface(tokenAddress); function AutomatedExchange() public{ },0,"subgraph cluster_300_AutomatedExchange {
label=""AutomatedExchange"";
""300_min"" [label=""min""];
""300_AutomatedExchange"" [label=""AutomatedExchange""];
""300_calculateTrade"" [label=""calculateTrade""];
""300_receiveApproval"" [label=""receiveApproval""];
""300_getBalance"" [label=""getBalance""];
""300_calculateTokenBuy"" [label=""calculateTokenBuy""];
""300_buyTokens"" [label=""buyTokens""];
""300_calculateTokenBuySimple"" [label=""calculateTokenBuySimple""];
""300_calculateTokenSell"" [label=""calculateTokenSell""];
""300_getTokenBalance"" [label=""getTokenBalance""];
""300_fallback"" [label=""fallback""];
""300_receiveApproval"" -> ""300_calculateTokenSell"";
""300_calculateTokenBuySimple"" -> ""300_calculateTokenBuy"";
""300_calculateTokenSell"" -> ""300_calculateTrade"";
""300_buyTokens"" -> ""300_calculateTokenBuy"";
""300_calculateTokenBuy"" -> ""300_calculateTrade"";
}
"
0xedac0e5bedf702accc3a9b2b4b44b4ba0806e882.sol,DSMath,"contract DSMath { function add(uint256 x, uint256 y) constant internal returns (uint256 z) { assert((z = x + y) >= x); }",0,"subgraph cluster_807_DSMath {
label=""DSMath"";
""807_cast"" [label=""cast""];
""807_wdiv"" [label=""wdiv""];
""807_hmin"" [label=""hmin""];
""807_wmax"" [label=""wmax""];
""807_hmax"" [label=""hmax""];
""807_rsub"" [label=""rsub""];
""807_hmul"" [label=""hmul""];
""807_div"" [label=""div""];
""807_wadd"" [label=""wadd""];
""807_rmax"" [label=""rmax""];
""807_hadd"" [label=""hadd""];
""807_rpow"" [label=""rpow""];
""807_min"" [label=""min""];
""807_imax"" [label=""imax""];
""807_add"" [label=""add""];
""807_wmin"" [label=""wmin""];
""807_mul"" [label=""mul""];
""807_hdiv"" [label=""hdiv""];
""807_rmin"" [label=""rmin""];
""807_hsub"" [label=""hsub""];
""807_max"" [label=""max""];
""807_wmul"" [label=""wmul""];
""807_radd"" [label=""radd""];
""807_wsub"" [label=""wsub""];
""807_rmul"" [label=""rmul""];
""807_imin"" [label=""imin""];
""807_rdiv"" [label=""rdiv""];
""807_sub"" [label=""sub""];
""807_wmul"" -> ""807_cast"";
""807_wmax"" -> ""807_hmax"";
""807_rpow"" -> ""807_rmul"";
""807_wadd"" -> ""807_hadd"";
""807_rsub"" -> ""807_hsub"";
""807_wsub"" -> ""807_hsub"";
""807_wdiv"" -> ""807_cast"";
""807_rmin"" -> ""807_hmin"";
""807_rmul"" -> ""807_cast"";
""807_hadd"" -> ""807_assert"";
""807_rmax"" -> ""807_hmax"";
""807_wmin"" -> ""807_hmin"";
""807_radd"" -> ""807_hadd"";
""807_rdiv"" -> ""807_cast"";
}
"
0x308cd1ebece7d99a360698ef47dd30269c7e2623.sol,AceWins,"contract AceWins is Ownable { uint256 public totalSupply; mapping(address => uint256) startBalances; mapping(address => mapping(address => uint256)) allowed; mapping(address => uint256) startBlocks; string public constant name = ; string public constant symbol = ; uint32 public constant decimals = 10; uint256 public calc = 951839; function AceWins() public { totalSupply = 12500000 * 10**uint256(decimals); startBalances[owner] = totalSupply; startBlocks[owner] = block.number; Transfer(address(0), owner, totalSupply); }",0,"subgraph cluster_374_AceWins {
label=""AceWins"";
""374_fracExp"" [label=""fracExp""];
""374_allowance"" [label=""allowance""];
""374_compoundInterest"" [label=""compoundInterest""];
""374_transfer"" [label=""transfer""];
""374_AceWins"" [label=""AceWins""];
""374_setCalc"" [label=""setCalc""];
""374_balanceOf"" [label=""balanceOf""];
""374_updateBalance"" [label=""updateBalance""];
""374_transfer"" -> ""374_updateBalance"";
""374_balanceOf"" -> ""374_compoundInterest"";
""374_compoundInterest"" -> ""374_fracExp"";
""374_updateBalance"" -> ""374_compoundInterest"";
}
"
0x26ce1a8d663de65b40e00ac8cd8664905846586f.sol,TechnoBit,"contract TechnoBit is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 10000000000e8; uint256 public totalDistributed = 1000000000e8; uint256 public constant MIN_CONTRIBUTION = 1 ether / 100; uint256 public tokensPerEth = 20000000e8; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_944_TechnoBit {
label=""TechnoBit"";
""944_approve"" [label=""approve""];
""944_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""944_withdraw"" [label=""withdraw""];
""944_getTokens"" [label=""getTokens""];
""944_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""944_distr"" [label=""distr""];
""944_transfer"" [label=""transfer""];
""944_allowance"" [label=""allowance""];
""944_finishDistribution"" [label=""finishDistribution""];
""944_balanceOf"" [label=""balanceOf""];
""944_doAirdrop"" [label=""doAirdrop""];
""944_getTokenBalance"" [label=""getTokenBalance""];
""944_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""944_transferFrom"" [label=""transferFrom""];
""944_TechnoBit"" [label=""TechnoBit""];
""944_burn"" [label=""burn""];
""944_transferOwnership"" [label=""transferOwnership""];
""944_updateTokensPerEth"" [label=""updateTokensPerEth""];
""944_fallback"" [label=""fallback""];
""944_adminClaimAirdrop"" -> ""944_onlyOwner"";
""944_withdraw"" -> ""944_onlyOwner"";
""944_adminClaimAirdrop"" -> ""944_doAirdrop"";
""944_transferFrom"" -> ""944_onlyPayloadSize"";
""944_getTokens"" -> ""944_distr"";
""944_TechnoBit"" -> ""944_distr"";
""944_adminClaimAirdropMultiple"" -> ""944_doAirdrop"";
""944_withdrawForeignTokens"" -> ""944_onlyOwner"";
""944_updateTokensPerEth"" -> ""944_onlyOwner"";
""944_adminClaimAirdropMultiple"" -> ""944_onlyOwner"";
""944_fallback"" -> ""944_getTokens"";
""944_transfer"" -> ""944_onlyPayloadSize"";
""944_transferOwnership"" -> ""944_onlyOwner"";
""944_distr"" -> ""944_canDistr"";
""944_burn"" -> ""944_onlyOwner"";
""944_finishDistribution"" -> ""944_canDistr"";
""944_finishDistribution"" -> ""944_onlyOwner"";
""944_getTokens"" -> ""944_canDistr"";
}
"
0xee610919f8c9f2e29464ceceb3176ae1f1922ec4.sol,SingleSourceIdentity,"contract SingleSourceIdentity is SafeMath { event IdentityApproval(address indexed authority, address indexed walletAddress, uint verifiedAttributes); event IdentityRevoke(address indexed authority, address indexed walletAddress); struct KYC { bool verified; address verifiedBy; uint verifiedAt; uint verifiedAttributes; }",0,"subgraph cluster_741_SingleSourceIdentity {
label=""SingleSourceIdentity"";
""741_approve"" [label=""approve""];
""741_withdrawFee"" [label=""withdrawFee""];
""741_SingleSourceIdentity"" [label=""SingleSourceIdentity""];
""741_hasVerifiedAttributeValue"" [label=""hasVerifiedAttributeValue""];
""741_setPaymentContractAddress"" [label=""setPaymentContractAddress""];
""741_setAuthorityContractAddress"" [label=""setAuthorityContractAddress""];
""741_hasValidProfile"" [label=""hasValidProfile""];
""741_setFee"" [label=""setFee""];
""741_changeOwner"" [label=""changeOwner""];
""741_claim"" [label=""claim""];
""741_chargeVerificationFee"" [label=""chargeVerificationFee""];
""741_revoke"" [label=""revoke""];
""741_hasVerifiedAttributeIndex"" [label=""hasVerifiedAttributeIndex""];
""741_isValidAuthority"" [label=""isValidAuthority""];
""741_verifiedAttributes"" [label=""verifiedAttributes""];
""741_claim"" -> ""741_chargeVerificationFee"";
""741_revoke"" -> ""741_onlyAuthoritativeAuthority"";
""741_claim"" -> ""741_onlyAuthoritativeAuthority"";
""741_setAuthorityContractAddress"" -> ""741_onlyOwner"";
""741_claim"" -> ""741_onlyValidAuthority"";
""741_approve"" -> ""741_onlyValidAuthority"";
""741_approve"" -> ""741_onlyAuthoritativeAuthority"";
""741_revoke"" -> ""741_onlyValidAuthority"";
""741_withdrawFee"" -> ""741_onlyValidAuthority"";
""741_chargeVerificationFee"" -> ""741_safeAdd"";
""741_setPaymentContractAddress"" -> ""741_onlyOwner"";
""741_setFee"" -> ""741_onlyOwner"";
""741_changeOwner"" -> ""741_onlyOwner"";
}
"
0x2021526a4a62a70f52c0340b0f67740a08b94e01.sol,Bcxss,"contract Bcxss { address public owner; string public name; string public symbol; uint public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); bool lock = false; constructor( uint256 initialSupply, string tokenName, string tokenSymbol, uint decimalUnits ) public { owner = msg.sender; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; }",0,"subgraph cluster_498_Bcxss {
label=""Bcxss"";
""498_approve"" [label=""approve""];
""498_transferFrom"" [label=""transferFrom""];
""498_burn"" [label=""burn""];
""498_constructor"" [label=""constructor""];
""498_transfer"" [label=""transfer""];
""498_mintToken"" [label=""mintToken""];
""498_transferOwnership"" [label=""transferOwnership""];
""498_burnFrom"" [label=""burnFrom""];
""498__transfer"" [label=""_transfer""];
""498_setLock"" [label=""setLock""];
""498_transferBatch"" [label=""transferBatch""];
""498_freezeAccount"" [label=""freezeAccount""];
""498_burn"" -> ""498_onlyOwner"";
""498_transfer"" -> ""498__transfer"";
""498_burnFrom"" -> ""498_onlyOwner"";
""498_setLock"" -> ""498_onlyOwner"";
""498_mintToken"" -> ""498_onlyOwner"";
""498_transferFrom"" -> ""498__transfer"";
""498_freezeAccount"" -> ""498_onlyOwner"";
""498_transferBatch"" -> ""498__transfer"";
""498_transferOwnership"" -> ""498_onlyOwner"";
""498__transfer"" -> ""498_isLock"";
}
"
0x8754770d7dd5e51794bd575d247e158881696c7c.sol,Token,contract Token is MintableToken { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 6; function Token() public { mintLimit = 100000000 * (10 ** 6); },0,"subgraph cluster_710_MintableToken {
label=""MintableToken"";
""710_mint"" [label=""mint""];
""710_setSaleAgent"" [label=""setSaleAgent""];
""710_finishMinting"" [label=""finishMinting""];
""710_finishMinting"" -> ""710_onlyOwner"";
""710_setSaleAgent"" -> ""710_onlyOwner"";
""710_mint"" -> ""710_onlySaleAgent"";
""710_finishMinting"" -> ""710_canMint"";
""710_mint"" -> ""710_canMint"";
}
"
0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol,HZ,"contract HZ is SafeMath{ string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; address public owner; mapping (address => uint256) public balanceOf; mapping (address => uint256) public freezeOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event Freeze(address indexed from, uint256 value); event Unfreeze(address indexed from, uint256 value); function HZ() { balanceOf[msg.sender] = 50000000000; totalSupply = 50000000000; name = ; symbol = ; decimals = 4; owner = msg.sender; }",0,"subgraph cluster_595_HZ {
label=""HZ"";
""595_HZ"" [label=""HZ""];
""595_withdrawEther"" [label=""withdrawEther""];
""595_approve"" [label=""approve""];
""595_transfer"" [label=""transfer""];
""595_burn"" [label=""burn""];
""595_fallback"" [label=""fallback""];
""595_freeze"" [label=""freeze""];
""595_transferFrom"" [label=""transferFrom""];
""595_unfreeze"" [label=""unfreeze""];
""595_freeze"" -> ""595_safeSub"";
""595_unfreeze"" -> ""595_safeSub"";
""595_transferFrom"" -> ""595_safeSub"";
""595_transferFrom"" -> ""595_safeAdd"";
""595_unfreeze"" -> ""595_safeAdd"";
""595_burn"" -> ""595_safeSub"";
""595_transfer"" -> ""595_safeAdd"";
""595_freeze"" -> ""595_safeAdd"";
""595_transfer"" -> ""595_safeSub"";
}
"
0xed61627b7af399ea7a11f55a03c557cd745c35ba.sol,BTCCToken,"contract BTCCToken is Ownable,StandardToken { uint public totalSupply = 3*10**27; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; function BTCCToken() { balances[msg.sender] = totalSupply; Transfer(address(0), msg.sender, totalSupply); }",0,"subgraph cluster_504_BTCCToken {
label=""BTCCToken"";
""504_getStopTransfer"" [label=""getStopTransfer""];
""504_BTCCToken"" [label=""BTCCToken""];
""504_setStopTransfer"" [label=""setStopTransfer""];
""504_transfer"" [label=""transfer""];
""504_setStopTransfer"" -> ""504_onlyOwner"";
""504_transfer"" -> ""504_transfer"";
}
"
0x3798b1c6e7bad3f0720c0e9ddcdb018857e13a4c.sol,RareCards,"contract RareCards is AccessAdmin, ERC721 { using SafeMath for SafeMath; event eCreateRare(uint256 tokenId, uint256 price, address owner); event Transfer(address indexed _from, address indexed _to, uint256 _tokenId); event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId); event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved); struct RareCard { uint256 rareId; uint256 rareClass; uint256 cardId; uint256 rareValue; }",0,"subgraph cluster_1405_RareCards {
label=""RareCards"";
""1405_setRarePrice"" [label=""setRarePrice""];
""1405_isApprovedForAll"" [label=""isApprovedForAll""];
""1405_approve"" [label=""approve""];
""1405_getApproved"" [label=""getApproved""];
""1405__transfer"" [label=""_transfer""];
""1405_tokensOfOwner"" [label=""tokensOfOwner""];
""1405_RareCards"" [label=""RareCards""];
""1405_ownerOf"" [label=""ownerOf""];
""1405_totalSupply"" [label=""totalSupply""];
""1405_safeTransferFrom"" [label=""safeTransferFrom""];
""1405_tokenOfOwnerByIndex"" [label=""tokenOfOwnerByIndex""];
""1405_getRarePLATInfo"" [label=""getRarePLATInfo""];
""1405_getRareInfo"" [label=""getRareInfo""];
""1405_transferToken"" [label=""transferToken""];
""1405_getRareItemsOwner"" [label=""getRareItemsOwner""];
""1405_transferFrom"" [label=""transferFrom""];
""1405_createRareCard"" [label=""createRareCard""];
""1405_tokenByIndex"" [label=""tokenByIndex""];
""1405_getRareItemsPrice"" [label=""getRareItemsPrice""];
""1405__createRareCard"" [label=""_createRareCard""];
""1405_balanceOf"" [label=""balanceOf""];
""1405_getRareItemsPLATPrice"" [label=""getRareItemsPLATPrice""];
""1405_transferTokenByContract"" [label=""transferTokenByContract""];
""1405__safeTransferFrom"" [label=""_safeTransferFrom""];
""1405_rareStartPrice"" [label=""rareStartPrice""];
""1405_getRareItemInfo"" [label=""getRareItemInfo""];
""1405_setApprovalForAll"" [label=""setApprovalForAll""];
""1405_setRarePrice"" -> ""1405_onlyAccess"";
""1405_approve"" -> ""1405_isValidToken"";
""1405_transferFrom"" -> ""1405__transfer"";
""1405_transferToken"" -> ""1405_onlyAccess"";
""1405_transferTokenByContract"" -> ""1405__transfer"";
""1405_createRareCard"" -> ""1405__createRareCard"";
""1405__safeTransferFrom"" -> ""1405_isValidToken"";
""1405__safeTransferFrom"" -> ""1405__transfer"";
""1405_approve"" -> ""1405_onlyOwnerOf"";
""1405__createRareCard"" -> ""1405__transfer"";
""1405_transferFrom"" -> ""1405_isValidToken"";
""1405_safeTransferFrom"" -> ""1405__safeTransferFrom"";
""1405__safeTransferFrom"" -> ""1405_onlyOwnerOf"";
""1405_transferFrom"" -> ""1405_onlyOwnerOf"";
""1405_getApproved"" -> ""1405_isValidToken"";
""1405_transferTokenByContract"" -> ""1405_onlyAccess"";
""1405_RareCards"" -> ""1405_setAdminContract"";
""1405_createRareCard"" -> ""1405_onlyOwner"";
""1405_RareCards"" -> ""1405_setActionContract"";
""1405_transferToken"" -> ""1405__transfer"";
}
"
0x03a897c8d7d21688ae0a49ea087836b2667c2cc8.sol,StrayCrowdsale,"contract StrayCrowdsale is FinalizableCrowdsale { using SafeMath for uint256; uint256 public softCapInToken; uint256 public hardCapInToken; uint256 public soldToken = 0; uint256 public bonusClosingTime0; uint256 public bonusClosingTime1; uint256 public bonusRateInPercent0 = 33; uint256 public bonusRateInPercent1 = 20; uint256 public mininumContributeUSD = 100; uint256 public decimalsETHToUSD; uint256 public exchangeRateETHToUSD; uint256 public mininumPurchaseTokenQuantity; uint256 public mininumContributeWei; uint256 public exchangeRateUSDToToken = 100; StrayToken public strayToken; RefundVault public vault; event RateUpdated(uint256 rate, uint256 mininumContributeWei); constructor(uint256 _softCapInUSD , uint256 _hardCapInUSD , address _fund , ERC20 _token , uint256 _openingTime , uint256 _closingTime , uint256 _bonusClosingTime0 , uint256 _bonusClosingTime1 ) Crowdsale(1, _fund, _token) TimedCrowdsale(_openingTime, _closingTime) public { require(_bonusClosingTime0 >= _openingTime); require(_bonusClosingTime1 >= _bonusClosingTime0); require(_closingTime >= _bonusClosingTime1); bonusClosingTime0 = _bonusClosingTime0; bonusClosingTime1 = _bonusClosingTime1; strayToken = StrayToken(token); require(_softCapInUSD > 0 && _softCapInUSD <= _hardCapInUSD); softCapInToken = _softCapInUSD * exchangeRateUSDToToken * (10 ** uint256(strayToken.decimals())); hardCapInToken = _hardCapInUSD * exchangeRateUSDToToken * (10 ** uint256(strayToken.decimals())); require(strayToken.balanceOf(owner) >= hardCapInToken); vault = new RefundVault(_fund); mininumPurchaseTokenQuantity = exchangeRateUSDToToken * mininumContributeUSD * (10 ** (uint256(strayToken.decimals()))); setExchangeRateETHToUSD(40000, 2); }",0,"subgraph cluster_1965_StrayCrowdsale {
label=""StrayCrowdsale"";
""1965_isInStage1"" [label=""isInStage1""];
""1965__addBonus"" [label=""_addBonus""];
""1965_isInStage2"" [label=""isInStage2""];
""1965_claimRefund"" [label=""claimRefund""];
""1965__processPurchase"" [label=""_processPurchase""];
""1965_softCapReached"" [label=""softCapReached""];
""1965_constructor"" [label=""constructor""];
""1965_finalization"" [label=""finalization""];
""1965__preValidatePurchase"" [label=""_preValidatePurchase""];
""1965_setExchangeRateETHToUSD"" [label=""setExchangeRateETHToUSD""];
""1965_hasStarted"" [label=""hasStarted""];
""1965__forwardFunds"" [label=""_forwardFunds""];
""1965__processPurchase"" -> ""1965__addBonus"";
""1965_constructor"" -> ""1965_constructor"";
""1965__preValidatePurchase"" -> ""1965__preValidatePurchase"";
""1965_constructor"" -> ""1965_setExchangeRateETHToUSD"";
""1965_finalization"" -> ""1965_softCapReached"";
""1965__processPurchase"" -> ""1965__processPurchase"";
""1965_claimRefund"" -> ""1965_softCapReached"";
""1965_setExchangeRateETHToUSD"" -> ""1965_onlyOwner"";
""1965_finalization"" -> ""1965_finalization"";
}
"
0x47bef29a73f5af37ed666f9bda9aae1c554fc163.sol,BurnableToken,"contract BurnableToken is BasicToken, Ownable { string internal constant INVALID_TOKEN_VALUES = ; string internal constant NOT_ENOUGH_TOKENS = ; event Burn(address indexed burner, uint256 amount); event Mint(address indexed minter, uint256 amount); event AddressBurn(address burner, uint256 amount); function burn(uint256 _value) onlyOwner public { balances[msg.sender] = balances[msg.sender].sub(_value); _totalSupply = _totalSupply.sub(_value); emit Burn(msg.sender, _value); emit Transfer(msg.sender, address(0), _value); }",0,"subgraph cluster_770_BurnableToken {
label=""BurnableToken"";
""770_mint"" [label=""mint""];
""770_addressburn"" [label=""addressburn""];
""770_burn"" [label=""burn""];
""770_addressburn"" -> ""770_onlyOwner"";
""770_mint"" -> ""770_onlyOwner"";
""770_burn"" -> ""770_onlyOwner"";
}
"
0xed0f41abc9fdb3052ebd5391c80e1ee792ec4f42.sol,I_Pricer,contract I_Pricer { uint128 public lastPrice; I_minter public mint; string public sURL; mapping (bytes32 => uint) RevTransaction; function setMinter(address _newAddress) {},0,"subgraph cluster_556_I_Pricer {
label=""I_Pricer"";
""556_fallback"" [label=""fallback""];
""556_requestPrice"" [label=""requestPrice""];
""556___callback"" [label=""__callback""];
""556_setMinter"" [label=""setMinter""];
""556_collectFee"" [label=""collectFee""];
""556_QuickPrice"" [label=""QuickPrice""];
""556_queryCost"" [label=""queryCost""];
}
"
0xb4b55084f5910d80aee29b3923ee64773571b9f7.sol,MainContract,contract MainContract { address owner; address advertisingAddress; uint private constant minInvest = 5 finney; using Calc for uint; using PercentCalc for PercentCalc.percent; using Zero for *; using compileLibrary for *; struct User { uint idx; uint value; uint bonus; bool invested10Eth; uint payTime; },0,"subgraph cluster_643_MainContract {
label=""MainContract"";
""643_sendDividends"" [label=""sendDividends""];
""643_sendValueToAdv"" [label=""sendValueToAdv""];
""643_setUserBonus"" [label=""setUserBonus""];
""643_updatePayTime"" [label=""updatePayTime""];
""643_fallback"" [label=""fallback""];
""643_setAdvertisingAddress"" [label=""setAdvertisingAddress""];
""643_fetchDividends"" [label=""fetchDividends""];
""643_sendDividendsWithBonus"" [label=""sendDividendsWithBonus""];
""643_sendValueToOwner"" [label=""sendValueToOwner""];
""643_findInvestorByAddress"" [label=""findInvestorByAddress""];
""643_constructor"" [label=""constructor""];
""643_fallback"" -> ""643_fetchDividends"";
""643_sendDividendsWithBonus"" -> ""643_updatePayTime"";
""643_fetchDividends"" -> ""643_sendDividendsWithBonus"";
""643_fetchDividends"" -> ""643_sendDividends"";
""643_setAdvertisingAddress"" -> ""643_onlyOwner"";
""643_fallback"" -> ""643_setUserBonus"";
""643_sendDividends"" -> ""643_updatePayTime"";
""643_fallback"" -> ""643_sendValueToOwner"";
""643_setUserBonus"" -> ""643_sendValueToAdv"";
""643_fetchDividends"" -> ""643_findInvestorByAddress"";
""643_fallback"" -> ""643_sendValueToAdv"";
}
"
0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol,Ethernational,"contract Ethernational is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; uint public startDate; uint public bonus1Ends; uint public bonus2Ends; uint public bonus3Ends; uint public endDate; uint public ETHinvested; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function Ethernational() public { symbol = ; name = ; decimals = 18; bonus1Ends = now + 1 weeks; bonus2Ends = now + 2 weeks; bonus3Ends = now + 4 weeks; endDate = now + 8 weeks; }",0,"subgraph cluster_909_Ethernational {
label=""Ethernational"";
""909_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""909_ICOTimer"" [label=""ICOTimer""];
""909_Ethernational"" [label=""Ethernational""];
""909_transferFrom"" [label=""transferFrom""];
""909_allowance"" [label=""allowance""];
""909_buyEIT"" [label=""buyEIT""];
""909_invested"" [label=""invested""];
""909_fallback"" [label=""fallback""];
""909_endDate"" [label=""endDate""];
""909_transfer"" [label=""transfer""];
""909_approve"" [label=""approve""];
""909_balanceOf"" [label=""balanceOf""];
""909_totalSupply"" [label=""totalSupply""];
""909_bonusInfo"" [label=""bonusInfo""];
""909_approveAndCall"" [label=""approveAndCall""];
""909_transfer"" -> ""909_safeSub"";
""909_fallback"" -> ""909_safeAdd"";
""909_transferAnyERC20Token"" -> ""909_onlyOwner"";
""909_buyEIT"" -> ""909_safeAdd"";
""909_transfer"" -> ""909_safeAdd"";
""909_transferFrom"" -> ""909_safeSub"";
""909_transferFrom"" -> ""909_safeAdd"";
}
"
0x05215fce25902366480696f38c3093e31dbce69a.sol,REV1,contract REV1 { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1447_REV1 {
label=""REV1"";
""1447_balanceOf"" [label=""balanceOf""];
""1447_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1447_totalSupply"" [label=""totalSupply""];
""1447_buyPrice"" [label=""buyPrice""];
""1447_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1447_setName"" [label=""setName""];
""1447_setSymbol"" [label=""setSymbol""];
""1447_excludeAmbassadors"" [label=""excludeAmbassadors""];
""1447_fallback"" [label=""fallback""];
""1447_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1447_sell"" [label=""sell""];
""1447_disableWhitelist"" [label=""disableWhitelist""];
""1447_myTokens"" [label=""myTokens""];
""1447_exit"" [label=""exit""];
""1447_setAdministrator"" [label=""setAdministrator""];
""1447_sqrt"" [label=""sqrt""];
""1447_buy"" [label=""buy""];
""1447_purchaseTokens"" [label=""purchaseTokens""];
""1447_reinvest"" [label=""reinvest""];
""1447_sellPrice"" [label=""sellPrice""];
""1447_withdraw"" [label=""withdraw""];
""1447_transfer"" [label=""transfer""];
""1447_constructor"" [label=""constructor""];
""1447_myDividends"" [label=""myDividends""];
""1447_setStakingRequirement"" [label=""setStakingRequirement""];
""1447_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1447_dividendsOf"" [label=""dividendsOf""];
""1447_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1447_exit"" -> ""1447_sell"";
""1447_sell"" -> ""1447_onlyBagholders"";
""1447_purchaseTokens"" -> ""1447_limitBuy"";
""1447_ethereumToTokens_"" -> ""1447_sqrt"";
""1447_calculateEthereumReceived"" -> ""1447_tokensToEthereum_"";
""1447_transfer"" -> ""1447_myDividends"";
""1447_sellPrice"" -> ""1447_tokensToEthereum_"";
""1447_buyPrice"" -> ""1447_tokensToEthereum_"";
""1447_buy"" -> ""1447_excludeAmbassadors"";
""1447_transfer"" -> ""1447_onlyBagholders"";
""1447_withdraw"" -> ""1447_onlyStronghands"";
""1447_setStakingRequirement"" -> ""1447_onlyAdministrator"";
""1447_excludeAmbassadors"" -> ""1447_purchaseTokens"";
""1447_setAdministrator"" -> ""1447_onlyAdministrator"";
""1447_myTokens"" -> ""1447_balanceOf"";
""1447_calculateTokensReceived"" -> ""1447_ethereumToTokens_"";
""1447_transfer"" -> ""1447_withdraw"";
""1447_setName"" -> ""1447_onlyAdministrator"";
""1447_fallback"" -> ""1447_excludeAmbassadors"";
""1447_withdraw"" -> ""1447_myDividends"";
""1447_purchaseTokens"" -> ""1447_ethereumToTokens_"";
""1447_reinvest"" -> ""1447_purchaseTokens"";
""1447_sell"" -> ""1447_tokensToEthereum_"";
""1447_myDividends"" -> ""1447_dividendsOf"";
""1447_setSymbol"" -> ""1447_onlyAdministrator"";
""1447_reinvest"" -> ""1447_onlyStronghands"";
""1447_exit"" -> ""1447_withdraw"";
""1447_reinvest"" -> ""1447_myDividends"";
}
"
0x0288c13f98d85c817191710be24e96ec75bd9914.sol,MultiTokenNetwork,"contract MultiTokenNetwork is Pausable { address[] private _multitokens; AbstractDeployer[] private _deployers; event NewMultitoken(address indexed mtkn); event NewDeployer(uint256 indexed index, address indexed oldDeployer, address indexed newDeployer); function multitokensCount() public view returns(uint256) { return _multitokens.length; }",0,"subgraph cluster_754_MultiTokenNetwork {
label=""MultiTokenNetwork"";
""754_deploy"" [label=""deploy""];
""754_multitokensCount"" [label=""multitokensCount""];
""754_multitokens"" [label=""multitokens""];
""754_enableBundlingMultitoken"" [label=""enableBundlingMultitoken""];
""754_disableBundlingMultitoken"" [label=""disableBundlingMultitoken""];
""754_disableChangesMultitoken"" [label=""disableChangesMultitoken""];
""754_setDeployer"" [label=""setDeployer""];
""754_deployers"" [label=""deployers""];
""754_deleteDeployer"" [label=""deleteDeployer""];
""754_allMultitokens"" [label=""allMultitokens""];
""754_deployersCount"" [label=""deployersCount""];
""754_makeCall"" [label=""makeCall""];
""754_allWalletBalances"" [label=""allWalletBalances""];
""754_addDeployer"" [label=""addDeployer""];
""754_deleteMultitoken"" [label=""deleteMultitoken""];
""754_setDeployer"" -> ""754_onlyOwner"";
""754_disableChangesMultitoken"" -> ""754_onlyOwner"";
""754_addDeployer"" -> ""754_onlyOwner"";
""754_deleteDeployer"" -> ""754_onlyOwner"";
""754_deploy"" -> ""754_whenNotPaused"";
""754_deleteMultitoken"" -> ""754_onlyOwner"";
""754_addDeployer"" -> ""754_whenNotPaused"";
""754_enableBundlingMultitoken"" -> ""754_onlyOwner"";
""754_setDeployer"" -> ""754_whenNotPaused"";
""754_makeCall"" -> ""754_onlyOwner"";
""754_disableBundlingMultitoken"" -> ""754_onlyOwner"";
}
"
0xe1291032766b81488dc565479503a103489f78d7.sol,x32323,"contract x32323 is owned{ mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; mapping (address => bool) public frozenAccount; mapping (address => bool) initialized; event FrozenFunds(address target, bool frozen); event Transfer(address indexed from, address indexed to, uint256 value); function freezeAccount(address target, bool freeze) onlyOwner { frozenAccount[target] = freeze; FrozenFunds(target, freeze); }",0,"subgraph cluster_638_x32323 {
label=""x32323"";
""638_approve"" [label=""approve""];
""638_sell"" [label=""sell""];
""638_approveAndCall"" [label=""approveAndCall""];
""638_initialize"" [label=""initialize""];
""638_TokenERC20"" [label=""TokenERC20""];
""638__transfer"" [label=""_transfer""];
""638_buy"" [label=""buy""];
""638_freezeAccount"" [label=""freezeAccount""];
""638_transferFrom"" [label=""transferFrom""];
""638_reward"" [label=""reward""];
""638_transfer"" [label=""transfer""];
""638_setMinBalance"" [label=""setMinBalance""];
""638_setPrices"" [label=""setPrices""];
""638_setMinBalance"" -> ""638_onlyOwner"";
""638_approveAndCall"" -> ""638_approve"";
""638_transfer"" -> ""638__transfer"";
""638_transfer"" -> ""638_sell"";
""638__transfer"" -> ""638_reward"";
""638_setPrices"" -> ""638_onlyOwner"";
""638_transferFrom"" -> ""638__transfer"";
""638_freezeAccount"" -> ""638_onlyOwner"";
""638__transfer"" -> ""638_initialize"";
}
"
0x0dae5dc78cc470a5e2f7c7c6b63ae7298e65853f.sol,PlatinumToken,"contract PlatinumToken is Ownable, ERC20 { using SafeMath for uint256; string public version = ; string public name; string public symbol; uint256 public decimals; address public platinum; mapping (address => mapping (address => uint256)) allowed; mapping(address => uint256) balances; uint256 public totalSupply; uint256 public fee = 10; function PlatinumToken( uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol ) { balances[msg.sender] = initialSupply; totalSupply = initialSupply; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; }",0,"subgraph cluster_2966_PlatinumToken {
label=""PlatinumToken"";
""2966_balanceOf"" [label=""balanceOf""];
""2966_setFee"" [label=""setFee""];
""2966_allowance"" [label=""allowance""];
""2966_transfer"" [label=""transfer""];
""2966_produce"" [label=""produce""];
""2966_fee"" [label=""fee""];
""2966_PlatinumToken"" [label=""PlatinumToken""];
""2966_reduce"" [label=""reduce""];
""2966_approve"" [label=""approve""];
""2966_setPlatinumAddress"" [label=""setPlatinumAddress""];
""2966_owner"" [label=""owner""];
""2966_transferFrom"" [label=""transferFrom""];
""2966_transferFrom"" -> ""2966_isOwnerOrPlatinumContract"";
""2966_reduce"" -> ""2966_isPlatinumContract"";
""2966_setPlatinumAddress"" -> ""2966_onlyOwner"";
""2966_setFee"" -> ""2966_onlyOwner"";
""2966_transfer"" -> ""2966_onlyOwner"";
""2966_produce"" -> ""2966_isPlatinumContract"";
}
"
0x35d76c3db8e826907d2a977500b54b3914ecc020.sol,RefundableCrowdsale,contract RefundableCrowdsale is FinalizableCrowdsale { using SafeMath for uint256; uint256 public goal; RefundVault public vault; function RefundableCrowdsale(uint256 _goal) public { require(_goal > 0); vault = new RefundVault(wallet); goal = _goal; },0,"subgraph cluster_888_RefundableCrowdsale {
label=""RefundableCrowdsale"";
""888_goalReached"" [label=""goalReached""];
""888_claimRefund"" [label=""claimRefund""];
""888_finalization"" [label=""finalization""];
""888__forwardFunds"" [label=""_forwardFunds""];
""888_RefundableCrowdsale"" [label=""RefundableCrowdsale""];
""888_finalization"" -> ""888_finalization"";
""888_claimRefund"" -> ""888_goalReached"";
""888_finalization"" -> ""888_goalReached"";
}
"
0xedf19b437d1a67e18b15dd4a859dd52f9cfa012f.sol,CommunityLock,"contract CommunityLock is ERC777TokensRecipient, ERC820Implementer, TokenRecoverable { ERC777Token public token; constructor(address _token) public { setInterfaceImplementation(, this); address tokenAddress = interfaceAddr(_token, ); require(tokenAddress != address(0)); token = ERC777Token(tokenAddress); }",0,"subgraph cluster_691_CommunityLock {
label=""CommunityLock"";
""691_tokensReceived"" [label=""tokensReceived""];
""691_burn"" [label=""burn""];
""691_constructor"" [label=""constructor""];
""691_burn"" -> ""691_onlyOwner"";
""691_constructor"" -> ""691_setInterfaceImplementation"";
""691_constructor"" -> ""691_interfaceAddr"";
}
"
0x00571808479ced690a6948992e32b1f3e69df557.sol,SafeMath,"contract SafeMath { function safeMul(uint256 a, uint256 b) internal pure returns (uint256) { if (a == 0) { return 0; }",0,"subgraph cluster_97_SafeMath {
label=""SafeMath"";
""97_safeSub"" [label=""safeSub""];
""97_safeDiv"" [label=""safeDiv""];
""97_safeMul"" [label=""safeMul""];
""97_safeAdd"" [label=""safeAdd""];
}
"
0x77fa1d1ded3f4bed737e9ae870a6f3605445df9c.sol,CryptoPokemon,contract CryptoPokemon { using SafeMath for uint256; mapping (address => bool) private admins; mapping (uint => uint256) public levels; mapping (uint => bool) private lock; address contractCreator; address devFeeAddress; address tournamentPrizeAddress; function CryptoPokemon () public { contractCreator = msg.sender; devFeeAddress = 0xFb2D26b0caa4C331bd0e101460ec9dbE0A4783A4; tournamentPrizeAddress = 0xC6784e712229087fC91E0c77fcCb6b2F1fDE2Dc2; admins[contractCreator] = true; },0,"subgraph cluster_675_CryptoPokemon {
label=""CryptoPokemon"";
""675_removeLock"" [label=""removeLock""];
""675_getPokemonCurrentPrice"" [label=""getPokemonCurrentPrice""];
""675_deletePokemon"" [label=""deletePokemon""];
""675_GetGamestatus"" [label=""GetGamestatus""];
""675_getPokemonLevel"" [label=""getPokemonLevel""];
""675_getPokemonDetails"" [label=""getPokemonDetails""];
""675_settournamentPrizeAddress"" [label=""settournamentPrizeAddress""];
""675_addPokemon"" [label=""addPokemon""];
""675_removeAdmin"" [label=""removeAdmin""];
""675_pauseGame"" [label=""pauseGame""];
""675_getPokemonOwner"" [label=""getPokemonOwner""];
""675_totalSupply"" [label=""totalSupply""];
""675_unPauseGame"" [label=""unPauseGame""];
""675_addAdmin"" [label=""addAdmin""];
""675_purchasePokemon"" [label=""purchasePokemon""];
""675_setOwner"" [label=""setOwner""];
""675_setdevFeeAddress"" [label=""setdevFeeAddress""];
""675_CryptoPokemon"" [label=""CryptoPokemon""];
""675_setPokemon"" [label=""setPokemon""];
""675_addLock"" [label=""addLock""];
""675_getPokemonLock"" [label=""getPokemonLock""];
""675_addAdmin"" -> ""675_onlyContractCreator"";
""675_settournamentPrizeAddress"" -> ""675_onlyContractCreator"";
""675_removeAdmin"" -> ""675_onlyContractCreator"";
""675_addPokemon"" -> ""675_onlyAdmins"";
""675_setdevFeeAddress"" -> ""675_onlyContractCreator"";
""675_deletePokemon"" -> ""675_onlyContractCreator"";
""675_unPauseGame"" -> ""675_onlyContractCreator"";
""675_setOwner"" -> ""675_onlyContractCreator"";
""675_pauseGame"" -> ""675_onlyContractCreator"";
""675_removeLock"" -> ""675_onlyContractCreator"";
""675_setPokemon"" -> ""675_onlyContractCreator"";
""675_addLock"" -> ""675_onlyContractCreator"";
}
"
0xec11958f705ab1185c539f293eaf6718c1702adf.sol,WhitelistedCrowdsale,"contract WhitelistedCrowdsale is Crowdsale, Ownable { mapping (address => bool) private whitelist; event WhitelistedAddressAdded(address indexed _address); event WhitelistedAddressRemoved(address indexed _address); modifier onlyIfWhitelisted(address _buyer) { require(whitelist[_buyer]); _; }",0,"subgraph cluster_2708_WhitelistedCrowdsale {
label=""WhitelistedCrowdsale"";
""2708_addAddressesToWhitelist"" [label=""addAddressesToWhitelist""];
""2708_isWhitelisted"" [label=""isWhitelisted""];
""2708__preValidatePurchase"" [label=""_preValidatePurchase""];
""2708_addAddressToWhitelist"" [label=""addAddressToWhitelist""];
""2708_removeAddressFromWhitelist"" [label=""removeAddressFromWhitelist""];
""2708_removeAddressesFromWhitelist"" [label=""removeAddressesFromWhitelist""];
""2708_removeAddressesFromWhitelist"" -> ""2708_onlyOwner"";
""2708_removeAddressFromWhitelist"" -> ""2708_onlyOwner"";
""2708__preValidatePurchase"" -> ""2708_onlyIfWhitelisted"";
""2708__preValidatePurchase"" -> ""2708__preValidatePurchase"";
""2708_addAddressesToWhitelist"" -> ""2708_onlyOwner"";
""2708_addAddressToWhitelist"" -> ""2708_onlyOwner"";
}
"
0x25d14913c49b7e7808453044f7e2f12b89693dda.sol,CXE,"contract CXE is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 2800000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 500000e8; uint public target0drop = 10000; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event DistrRestarted(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_1274_CXE {
label=""CXE"";
""1274_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1274_getTokens"" [label=""getTokens""];
""1274_balanceOf"" [label=""balanceOf""];
""1274_constructor"" [label=""constructor""];
""1274_transferOwnership"" [label=""transferOwnership""];
""1274_transferFrom"" [label=""transferFrom""];
""1274_withdrawAll"" [label=""withdrawAll""];
""1274_getTokenBalance"" [label=""getTokenBalance""];
""1274_burn"" [label=""burn""];
""1274_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1274_add"" [label=""add""];
""1274_allowance"" [label=""allowance""];
""1274_withdraw"" [label=""withdraw""];
""1274_approve"" [label=""approve""];
""1274_reDistribution"" [label=""reDistribution""];
""1274_Distribute"" [label=""Distribute""];
""1274_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1274_transfer"" [label=""transfer""];
""1274_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1274_finishDistribution"" [label=""finishDistribution""];
""1274_fallback"" [label=""fallback""];
""1274_distr"" [label=""distr""];
""1274_withdraw"" -> ""1274_onlyOwner"";
""1274_getTokens"" -> ""1274_canDistr"";
""1274_DistributeAirdrop"" -> ""1274_onlyOwner"";
""1274_reDistribution"" -> ""1274_canDistr"";
""1274_Distribute"" -> ""1274_onlyOwner"";
""1274_transferOwnership"" -> ""1274_onlyOwner"";
""1274_transferFrom"" -> ""1274_onlyPayloadSize"";
""1274_DistributeAirdropMultiple"" -> ""1274_onlyOwner"";
""1274_constructor"" -> ""1274_distr"";
""1274_transfer"" -> ""1274_onlyPayloadSize"";
""1274_finishDistribution"" -> ""1274_canDistr"";
""1274_getTokens"" -> ""1274_distr"";
""1274_DistributeAirdrop"" -> ""1274_Distribute"";
""1274_withdrawForeignTokens"" -> ""1274_onlyOwner"";
""1274_finishDistribution"" -> ""1274_onlyOwner"";
""1274_distr"" -> ""1274_canDistr"";
""1274_updateTokensPerEth"" -> ""1274_onlyOwner"";
""1274_add"" -> ""1274_onlyOwner"";
""1274_DistributeAirdropMultiple"" -> ""1274_Distribute"";
""1274_burn"" -> ""1274_onlyOwner"";
""1274_fallback"" -> ""1274_getTokens"";
""1274_withdrawAll"" -> ""1274_onlyOwner"";
""1274_reDistribution"" -> ""1274_onlyOwner"";
}
"
0x41c0542f41251d6d81526ed2dbc8f0008b13fe48.sol,MultiEther,contract MultiEther { struct Deposit { address depositor; uint deposit; uint payout; },0,"subgraph cluster_334_MultiEther {
label=""MultiEther"";
""334_getQueueLength"" [label=""getQueueLength""];
""334_calcMultiplier"" [label=""calcMultiplier""];
""334_pay"" [label=""pay""];
""334_calcMaxDeposit"" [label=""calcMaxDeposit""];
""334_fallback"" [label=""fallback""];
""334_pay"" -> ""334_calcMultiplier"";
""334_fallback"" -> ""334_calcMaxDeposit"";
""334_fallback"" -> ""334_pay"";
}
"
0xda11e959bcaaba5f88dbf4d866e270c78bc84b76.sol,EBP,"contract EBP is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 20000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 15000000e8; uint public target0drop = 2000; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_1253_EBP {
label=""EBP"";
""1253_withdrawAll"" [label=""withdrawAll""];
""1253_Distribute"" [label=""Distribute""];
""1253_getTokenBalance"" [label=""getTokenBalance""];
""1253_add"" [label=""add""];
""1253_getTokens"" [label=""getTokens""];
""1253_constructor"" [label=""constructor""];
""1253_finishDistribution"" [label=""finishDistribution""];
""1253_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1253_transfer"" [label=""transfer""];
""1253_approve"" [label=""approve""];
""1253_fallback"" [label=""fallback""];
""1253_burn"" [label=""burn""];
""1253_allowance"" [label=""allowance""];
""1253_balanceOf"" [label=""balanceOf""];
""1253_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1253_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1253_transferOwnership"" [label=""transferOwnership""];
""1253_transferFrom"" [label=""transferFrom""];
""1253_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1253_distr"" [label=""distr""];
""1253_withdraw"" [label=""withdraw""];
""1253_getTokens"" -> ""1253_canDistr"";
""1253_add"" -> ""1253_onlyOwner"";
""1253_constructor"" -> ""1253_distr"";
""1253_DistributeAirdropMultiple"" -> ""1253_onlyOwner"";
""1253_withdraw"" -> ""1253_onlyOwner"";
""1253_withdrawAll"" -> ""1253_onlyOwner"";
""1253_withdrawForeignTokens"" -> ""1253_onlyOwner"";
""1253_finishDistribution"" -> ""1253_canDistr"";
""1253_finishDistribution"" -> ""1253_onlyOwner"";
""1253_distr"" -> ""1253_canDistr"";
""1253_DistributeAirdrop"" -> ""1253_Distribute"";
""1253_transfer"" -> ""1253_onlyPayloadSize"";
""1253_transferFrom"" -> ""1253_onlyPayloadSize"";
""1253_DistributeAirdropMultiple"" -> ""1253_Distribute"";
""1253_DistributeAirdrop"" -> ""1253_onlyOwner"";
""1253_transferOwnership"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_distr"";
""1253_Distribute"" -> ""1253_onlyOwner"";
""1253_fallback"" -> ""1253_getTokens"";
""1253_burn"" -> ""1253_onlyOwner"";
""1253_updateTokensPerEth"" -> ""1253_onlyOwner"";
}
"
0x4d49849dcc51ea1675140cb007d9f6897ae53260.sol,CrowdsaleExt,contract CrowdsaleExt is Haltable { uint public MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE = 5; using SafeMathLibExt for uint; FractionalERC20Ext public token; PricingStrategy public pricingStrategy; FinalizeAgent public finalizeAgent; string public name; address public multisigWallet; uint public minimumFundingGoal; uint public startsAt; uint public endsAt; uint public tokensSold = 0; uint public weiRaised = 0; uint public investorCount = 0; bool public finalized; bool public isWhiteListed; address[] public joinedCrowdsales; uint8 public joinedCrowdsalesLen = 0; uint8 public joinedCrowdsalesLenMax = 50; struct JoinedCrowdsaleStatus { bool isJoined; uint8 position; },0,"subgraph cluster_2004_CrowdsaleExt {
label=""CrowdsaleExt"";
""2004_isTierJoined"" [label=""isTierJoined""];
""2004_isCrowdsale"" [label=""isCrowdsale""];
""2004_finalized"" [label=""finalized""];
""2004_assignTokens"" [label=""assignTokens""];
""2004_endsAt"" [label=""endsAt""];
""2004_areReservedTokensDistributed"" [label=""areReservedTokensDistributed""];
""2004_isFinalizerSane"" [label=""isFinalizerSane""];
""2004_getTierPosition"" [label=""getTierPosition""];
""2004_getLastTier"" [label=""getLastTier""];
""2004_setJoinedCrowdsales"" [label=""setJoinedCrowdsales""];
""2004_updateJoinedCrowdsalesMultiple"" [label=""updateJoinedCrowdsalesMultiple""];
""2004_fallback"" [label=""fallback""];
""2004_joinedCrowdsales"" [label=""joinedCrowdsales""];
""2004_tokensSold"" [label=""tokensSold""];
""2004_isBreakingCap"" [label=""isBreakingCap""];
""2004_finalize"" [label=""finalize""];
""2004_setPricingStrategy"" [label=""setPricingStrategy""];
""2004_canDistributeReservedTokens"" [label=""canDistributeReservedTokens""];
""2004_joinedCrowdsalesLen"" [label=""joinedCrowdsalesLen""];
""2004_invest"" [label=""invest""];
""2004_setFinalizeAgent"" [label=""setFinalizeAgent""];
""2004_setEarlyParticipantWhitelistMultiple"" [label=""setEarlyParticipantWhitelistMultiple""];
""2004_setStartsAt"" [label=""setStartsAt""];
""2004_whitelistedParticipantsLength"" [label=""whitelistedParticipantsLength""];
""2004_updateInheritedEarlyParticipantWhitelist"" [label=""updateInheritedEarlyParticipantWhitelist""];
""2004_setMultisig"" [label=""setMultisig""];
""2004_isPricingSane"" [label=""isPricingSane""];
""2004_setEndsAt"" [label=""setEndsAt""];
""2004_startsAt"" [label=""startsAt""];
""2004_investInternal"" [label=""investInternal""];
""2004_isCrowdsaleFull"" [label=""isCrowdsaleFull""];
""2004_CrowdsaleExt"" [label=""CrowdsaleExt""];
""2004_distributeReservedTokens"" [label=""distributeReservedTokens""];
""2004_isAddressWhitelisted"" [label=""isAddressWhitelisted""];
""2004_halted"" [label=""halted""];
""2004_isMinimumGoalReached"" [label=""isMinimumGoalReached""];
""2004_setEarlyParticipantWhitelist"" [label=""setEarlyParticipantWhitelist""];
""2004_getState"" [label=""getState""];
""2004_isBreakingInvestorCap"" [label=""isBreakingInvestorCap""];
""2004_buy"" [label=""buy""];
""2004_updateEarlyParticipantWhitelist"" [label=""updateEarlyParticipantWhitelist""];
""2004_setEarlyParticipantWhitelist"" -> ""2004_onlyOwner"";
""2004_setJoinedCrowdsales"" -> ""2004_onlyOwner"";
""2004_finalize"" -> ""2004_stopInEmergency"";
""2004_investInternal"" -> ""2004_stopInEmergency"";
""2004_setEndsAt"" -> ""2004_getTierPosition"";
""2004_setEndsAt"" -> ""2004_onlyOwner"";
""2004_setStartsAt"" -> ""2004_getLastTier"";
""2004_investInternal"" -> ""2004_isBreakingCap"";
""2004_canDistributeReservedTokens"" -> ""2004_getLastTier"";
""2004_distributeReservedTokens"" -> ""2004_onlyOwner"";
""2004_distributeReservedTokens"" -> ""2004_stopInEmergency"";
""2004_finalize"" -> ""2004_inState"";
""2004_getState"" -> ""2004_isMinimumGoalReached"";
""2004_updateInheritedEarlyParticipantWhitelist"" -> ""2004_getTierPosition"";
""2004_setPricingStrategy"" -> ""2004_onlyOwner"";
""2004_updateJoinedCrowdsalesMultiple"" -> ""2004_onlyOwner"";
""2004_distributeReservedTokens"" -> ""2004_inState"";
""2004_setEndsAt"" -> ""2004_getLastTier"";
""2004_setStartsAt"" -> ""2004_getTierPosition"";
""2004_investInternal"" -> ""2004_updateInheritedEarlyParticipantWhitelist"";
""2004_setMultisig"" -> ""2004_onlyOwner"";
""2004_setJoinedCrowdsales"" -> ""2004_isTierJoined"";
""2004_setFinalizeAgent"" -> ""2004_onlyOwner"";
""2004_investInternal"" -> ""2004_getState"";
""2004_updateJoinedCrowdsalesMultiple"" -> ""2004_setJoinedCrowdsales"";
""2004_finalize"" -> ""2004_onlyOwner"";
""2004_investInternal"" -> ""2004_isBreakingInvestorCap"";
""2004_invest"" -> ""2004_investInternal"";
""2004_updateEarlyParticipantWhitelist"" -> ""2004_isTierJoined"";
""2004_getState"" -> ""2004_isCrowdsaleFull"";
""2004_setEarlyParticipantWhitelistMultiple"" -> ""2004_setEarlyParticipantWhitelist"";
""2004_setEarlyParticipantWhitelist"" -> ""2004_isAddressWhitelisted"";
""2004_setEarlyParticipantWhitelistMultiple"" -> ""2004_onlyOwner"";
""2004_buy"" -> ""2004_invest"";
""2004_setStartsAt"" -> ""2004_onlyOwner"";
""2004_CrowdsaleExt"" -> ""2004_setPricingStrategy"";
""2004_investInternal"" -> ""2004_assignTokens"";
}
"
0xef8c1338d35251f16777d42d559284fef8351aaa.sol,RTCoin,"contract RTCoin { using SafeMath for uint256; address public owner; address public saleAgent; uint256 public totalSupply; string public name; uint8 public decimals; string public symbol; bool private allowEmission = true; mapping (address => uint256) balances; function RTCoin(string _name, string _symbol, uint8 _decimals) public { decimals = _decimals; name = _name; symbol = _symbol; owner = msg.sender; }",0,"subgraph cluster_415_RTCoin {
label=""RTCoin"";
""415_balanceOf"" [label=""balanceOf""];
""415_burn"" [label=""burn""];
""415_close"" [label=""close""];
""415_RTCoin"" [label=""RTCoin""];
""415_transferOwnership"" [label=""transferOwnership""];
""415_emission"" [label=""emission""];
""415_decimals"" [label=""decimals""];
""415_changeSaleAgent"" [label=""changeSaleAgent""];
""415_transfer"" [label=""transfer""];
""415_changeSaleAgent"" -> ""415_onlyOwner"";
""415_close"" -> ""415_onlyOwner"";
""415_transferOwnership"" -> ""415_onlyOwner"";
""415_emission"" -> ""415_onlyOwner"";
}
"
0x344bd3872f67d37757b48155ba4666e780fc47b5.sol,DragonFarmer,contract DragonFarmer { address public superPowerFulDragonOwner; uint256 lastPrice = 200000000000000000; uint public hatchingSpeed = 100; uint256 public snatchedOn; bool public isEnabled = false; function enableSuperDragon(bool enable) public { require(msg.sender == ceoAddress); isEnabled = enable; superPowerFulDragonOwner = ceoAddress; snatchedOn = now; },0,"subgraph cluster_1004_DragonFarmer {
label=""DragonFarmer"";
""1004_getMyEggs"" [label=""getMyEggs""];
""1004_sellEggs"" [label=""sellEggs""];
""1004_calculateEggBuySimple"" [label=""calculateEggBuySimple""];
""1004_withDrawMoney"" [label=""withDrawMoney""];
""1004_getDragonPrice"" [label=""getDragonPrice""];
""1004_getEggsSinceLastHatch"" [label=""getEggsSinceLastHatch""];
""1004_calculateEggBuy"" [label=""calculateEggBuy""];
""1004_getDragonPriceNo"" [label=""getDragonPriceNo""];
""1004_constructor"" [label=""constructor""];
""1004_getMyNormalDragons"" [label=""getMyNormalDragons""];
""1004_pay"" [label=""pay""];
""1004_buySuperDragon"" [label=""buySuperDragon""];
""1004_getEggsToHatchDragon"" [label=""getEggsToHatchDragon""];
""1004_seedMarket"" [label=""seedMarket""];
""1004_buyIceDrangon"" [label=""buyIceDrangon""];
""1004_enableSuperDragon"" [label=""enableSuperDragon""];
""1004_calculatePercentage"" [label=""calculatePercentage""];
""1004_buyDrangon"" [label=""buyDrangon""];
""1004_setUserHatchRate"" [label=""setUserHatchRate""];
""1004_getMyIceDragon"" [label=""getMyIceDragon""];
""1004_getBalance"" [label=""getBalance""];
""1004_claimSuperDragonEggs"" [label=""claimSuperDragonEggs""];
""1004_calculateEggSell"" [label=""calculateEggSell""];
""1004_getFreeDragon"" [label=""getFreeDragon""];
""1004_calculateTrade"" [label=""calculateTrade""];
""1004_hatchEggs"" [label=""hatchEggs""];
""1004_hatchEggs"" -> ""1004_getMyEggs"";
""1004_sellEggs"" -> ""1004_calculatePercentage"";
""1004_buyIceDrangon"" -> ""1004_calculatePercentage"";
""1004_getDragonPriceNo"" -> ""1004_getEggsToHatchDragon"";
""1004_getDragonPrice"" -> ""1004_calculateEggSell"";
""1004_getDragonPrice"" -> ""1004_calculatePercentage"";
""1004_calculateEggBuy"" -> ""1004_calculateTrade"";
""1004_getDragonPriceNo"" -> ""1004_getDragonPrice"";
""1004_sellEggs"" -> ""1004_calculateEggSell"";
""1004_getMyEggs"" -> ""1004_getEggsSinceLastHatch"";
""1004_setUserHatchRate"" -> ""1004_getEggsToHatchDragon"";
""1004_calculateEggSell"" -> ""1004_calculateTrade"";
""1004_buySuperDragon"" -> ""1004_calculatePercentage"";
""1004_buyDrangon"" -> ""1004_calculatePercentage"";
""1004_getFreeDragon"" -> ""1004_setUserHatchRate"";
""1004_calculateEggBuySimple"" -> ""1004_calculateEggBuy"";
""1004_buyDrangon"" -> ""1004_getDragonPrice"";
""1004_sellEggs"" -> ""1004_getMyEggs"";
""1004_buyIceDrangon"" -> ""1004_getDragonPrice"";
}
"
0x4018fb49905d86c0d8bbdefe51fa96e5287aead4.sol,TokenBasic,contract TokenBasic is ERC20 { using SafeMath for uint256; mapping (address => uint256) private _balances; mapping (address => mapping (address => uint256)) private _allowed; uint256 private _totalSupply; function totalSupply() public view returns (uint256) { return _totalSupply; },0,"subgraph cluster_652_TokenBasic {
label=""TokenBasic"";
""652__burnFrom"" [label=""_burnFrom""];
""652__transfer"" [label=""_transfer""];
""652_decreaseAllowance"" [label=""decreaseAllowance""];
""652_balanceOf"" [label=""balanceOf""];
""652_increaseAllowance"" [label=""increaseAllowance""];
""652_approve"" [label=""approve""];
""652_transfer"" [label=""transfer""];
""652__burn"" [label=""_burn""];
""652__mint"" [label=""_mint""];
""652_totalSupply"" [label=""totalSupply""];
""652_allowance"" [label=""allowance""];
""652__burnFrom"" -> ""652__burn"";
""652_transfer"" -> ""652__transfer"";
}
"
0x39f968b4b8b367ce20f5aefc852591f7eada4b3e.sol,Administration,"contract Administration is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function Administration() public { symbol = ; name = ; decimals = 18; _totalSupply = 210000000000000000000000000; balances[0xFe905C1CC0395240317F4e5A6ff22823f9B1DD3c] = _totalSupply; Transfer(address(0), 0xFe905C1CC0395240317F4e5A6ff22823f9B1DD3c, _totalSupply); }",0,"subgraph cluster_543_Administration {
label=""Administration"";
""543_transferFrom"" [label=""transferFrom""];
""543_transfer"" [label=""transfer""];
""543_totalSupply"" [label=""totalSupply""];
""543_fallback"" [label=""fallback""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_allowance"" [label=""allowance""];
""543_balanceOf"" [label=""balanceOf""];
""543_approve"" [label=""approve""];
""543_Administration"" [label=""Administration""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0x5b15a638d1defbf055dc2d7653d5ff1bd5a9494c.sol,CHEMCHINA_PFIII_III_883,"contract CHEMCHINA_PFIII_III_883 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 960045161637506000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",0,"subgraph cluster_189_CHEMCHINA_PFIII_III_883 {
label=""CHEMCHINA_PFIII_III_883"";
""189_transferFrom"" [label=""transferFrom""];
""189_transfer"" [label=""transfer""];
""189_approve"" [label=""approve""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
}
"
0xee91e81927bb047ea0f4b24e43dd5dc0684827a0.sol,BINGToken,contract BINGToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 1000000000 * (10**18); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; function BINGToken () { owner = msg.sender; },0,"subgraph cluster_756_BINGToken {
label=""BINGToken"";
""756_setOwner"" [label=""setOwner""];
""756_totalSupply"" [label=""totalSupply""];
""756_BINGToken"" [label=""BINGToken""];
""756_createTokens"" [label=""createTokens""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_transfer"" [label=""transfer""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_approve"" [label=""approve""];
""756_transferFrom"" [label=""transferFrom""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_refundTokens"" [label=""refundTokens""];
""756_transferFrom"" -> ""756_transferFrom"";
""756_approve"" -> ""756_allowance"";
""756_createTokens"" -> ""756_safeAdd"";
""756_approve"" -> ""756_approve"";
""756_transfer"" -> ""756_transfer"";
""756_createTokens"" -> ""756_safeSub"";
}
"
0xa3f5411cfc9eee0dd108bf0d07433b6dd99037f1.sol,Avatar,"contract Avatar is Ownable { bytes32 public orgName; DAOToken public nativeToken; Reputation public nativeReputation; event GenericAction(address indexed _action, bytes32[] _params); event SendEther(uint _amountInWei, address indexed _to); event ExternalTokenTransfer(address indexed _externalToken, address indexed _to, uint _value); event ExternalTokenTransferFrom(address indexed _externalToken, address _from, address _to, uint _value); event ExternalTokenIncreaseApproval(StandardToken indexed _externalToken, address _spender, uint _addedValue); event ExternalTokenDecreaseApproval(StandardToken indexed _externalToken, address _spender, uint _subtractedValue); event ReceiveEther(address indexed _sender, uint _value); constructor(bytes32 _orgName, DAOToken _nativeToken, Reputation _nativeReputation) public { orgName = _orgName; nativeToken = _nativeToken; nativeReputation = _nativeReputation; }",0,"subgraph cluster_1457_Avatar {
label=""Avatar"";
""1457_constructor"" [label=""constructor""];
""1457_externalTokenTransfer"" [label=""externalTokenTransfer""];
""1457_externalTokenTransferFrom"" [label=""externalTokenTransferFrom""];
""1457_externalTokenDecreaseApproval"" [label=""externalTokenDecreaseApproval""];
""1457_sendEther"" [label=""sendEther""];
""1457_externalTokenIncreaseApproval"" [label=""externalTokenIncreaseApproval""];
""1457_genericCall"" [label=""genericCall""];
""1457_fallback"" [label=""fallback""];
""1457_sendEther"" -> ""1457_onlyOwner"";
""1457_genericCall"" -> ""1457_onlyOwner"";
""1457_externalTokenIncreaseApproval"" -> ""1457_onlyOwner"";
""1457_externalTokenTransfer"" -> ""1457_onlyOwner"";
""1457_externalTokenDecreaseApproval"" -> ""1457_onlyOwner"";
""1457_externalTokenTransferFrom"" -> ""1457_onlyOwner"";
}
"
0x5b6696ed1e4e74c2a73a3f27186ab315f4fa55d8.sol,TkoWhitelist,"contract TkoWhitelist is Ownable{ using SafeMath for uint256; address public admin; mapping(address => uint256) internal totalIndividualWeiAmount; mapping(address => bool) internal whitelist; event AdminChanged(address indexed previousAdmin, address indexed newAdmin); function TkoWhitelist (address _admin) public { require(_admin != address(0)); admin = _admin; }",0,"subgraph cluster_355_TkoWhitelist {
label=""TkoWhitelist"";
""355_changeAdmin"" [label=""changeAdmin""];
""355_isWhitelisted"" [label=""isWhitelisted""];
""355_removeFromWhitelist"" [label=""removeFromWhitelist""];
""355_addTotalIndividualWeiAmount"" [label=""addTotalIndividualWeiAmount""];
""355_addManyToWhitelist"" [label=""addManyToWhitelist""];
""355_getTotalIndividualWeiAmount"" [label=""getTotalIndividualWeiAmount""];
""355_TkoWhitelist"" [label=""TkoWhitelist""];
""355_setTotalIndividualWeiAmount"" [label=""setTotalIndividualWeiAmount""];
""355_addToWhitelist"" [label=""addToWhitelist""];
""355_setTotalIndividualWeiAmount"" -> ""355_onlyOwner"";
""355_addManyToWhitelist"" -> ""355_onlyOwnerOrAdmin"";
""355_removeFromWhitelist"" -> ""355_onlyOwnerOrAdmin"";
""355_isWhitelisted"" -> ""355_onlyOwnerOrAdmin"";
""355_addToWhitelist"" -> ""355_onlyOwnerOrAdmin"";
""355_addTotalIndividualWeiAmount"" -> ""355_onlyOwner"";
""355_getTotalIndividualWeiAmount"" -> ""355_onlyOwnerOrAdmin"";
""355_changeAdmin"" -> ""355_onlyOwner"";
}
"
0x209132061047ff4d2ad395691005d3266e48b673.sol,IdGameCoin,contract IdGameCoin is StandardToken { string public name; uint8 public decimals; string public symbol; string public version = ; uint256 public unitsOneEthCanBuy; uint256 public totalEthInWei; address public owner; uint256 public endIco; uint256 public bonusEnds; uint256 public startPreIco; uint256 public startIco; function IdGameCoin() public { balances[msg.sender] = 30000000000000000000000000; totalSupply = 30000000000000000000000000; name = ; decimals = 18; symbol = ; unitsOneEthCanBuy = 1000; owner = msg.sender; startPreIco = now; startIco = 1556748000; bonusEnds = 1546293600; endIco = 1568062800; },0,"subgraph cluster_566_IdGameCoin {
label=""IdGameCoin"";
""566_burn"" [label=""burn""];
""566_fallback"" [label=""fallback""];
""566_mint"" [label=""mint""];
""566_IdGameCoin"" [label=""IdGameCoin""];
""566_approveAndCall"" [label=""approveAndCall""];
}
"
0x00ab698bbb34ce1ac75ec1398fbeba8db82a5c63.sol,Socialife,"contract Socialife is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 10000000000e8; uint256 public totalDistributed = 0; uint256 public constant MIN_CONTRIBUTION = 1 ether / 100; uint256 public tokensPerEth = 18000000e8; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_943_Socialife {
label=""Socialife"";
""943_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""943_finishDistribution"" [label=""finishDistribution""];
""943_allowance"" [label=""allowance""];
""943_getTokens"" [label=""getTokens""];
""943_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""943_transfer"" [label=""transfer""];
""943_Socialife"" [label=""Socialife""];
""943_doAirdrop"" [label=""doAirdrop""];
""943_withdraw"" [label=""withdraw""];
""943_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""943_balanceOf"" [label=""balanceOf""];
""943_transferOwnership"" [label=""transferOwnership""];
""943_fallback"" [label=""fallback""];
""943_distr"" [label=""distr""];
""943_approve"" [label=""approve""];
""943_getTokenBalance"" [label=""getTokenBalance""];
""943_updateTokensPerEth"" [label=""updateTokensPerEth""];
""943_burn"" [label=""burn""];
""943_transferFrom"" [label=""transferFrom""];
""943_getTokens"" -> ""943_canDistr"";
""943_transfer"" -> ""943_onlyPayloadSize"";
""943_adminClaimAirdrop"" -> ""943_doAirdrop"";
""943_finishDistribution"" -> ""943_onlyOwner"";
""943_burn"" -> ""943_onlyOwner"";
""943_updateTokensPerEth"" -> ""943_onlyOwner"";
""943_adminClaimAirdropMultiple"" -> ""943_doAirdrop"";
""943_transferFrom"" -> ""943_onlyPayloadSize"";
""943_adminClaimAirdrop"" -> ""943_onlyOwner"";
""943_distr"" -> ""943_canDistr"";
""943_withdrawForeignTokens"" -> ""943_onlyOwner"";
""943_getTokens"" -> ""943_distr"";
""943_adminClaimAirdropMultiple"" -> ""943_onlyOwner"";
""943_finishDistribution"" -> ""943_canDistr"";
""943_Socialife"" -> ""943_distr"";
""943_transferOwnership"" -> ""943_onlyOwner"";
""943_fallback"" -> ""943_getTokens"";
""943_withdraw"" -> ""943_onlyOwner"";
}
"
0x20e569eca4737c4b12be2e5dcdbfdf0d829ba1c8.sol,ldoh,"contract ldoh is EthereumSmartContract { event onCashbackCode (address indexed hodler, address cashbackcode); event onAffiliateBonus (address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime); event onClaimTokens (address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime); event onHodlTokens (address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime); event onClaimCashBack (address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime); event onAddContractAddress( address indexed contracthodler, bool contractstatus, uint256 _maxcontribution, string _ContractSymbol, uint256 _PercentPermonth, uint256 _HodlingTime ); event onUnlockedTokens(uint256 returned); address public DefaultToken; struct Safe { uint256 id; uint256 amount; uint256 endtime; address user; address tokenAddress; string tokenSymbol; uint256 amountbalance; uint256 cashbackbalance; uint256 lasttime; uint256 percentage; uint256 percentagereceive; uint256 tokenreceive; uint256 lastwithdraw; address referrer; bool cashbackstatus; }",0,"subgraph cluster_2311_ldoh {
label=""ldoh"";
""2311_GetTotalAffiliate"" [label=""GetTotalAffiliate""];
""2311_SendUnlockedTokens"" [label=""SendUnlockedTokens""];
""2311_constructor"" [label=""constructor""];
""2311_mul"" [label=""mul""];
""2311_EthereumNodesFees"" [label=""EthereumNodesFees""];
""2311_WithdrawAffiliate"" [label=""WithdrawAffiliate""];
""2311_ClaimTokens"" [label=""ClaimTokens""];
""2311_GetSafe"" [label=""GetSafe""];
""2311_GetContractBalance"" [label=""GetContractBalance""];
""2311_HodlTokens"" [label=""HodlTokens""];
""2311_WithdrawEth"" [label=""WithdrawEth""];
""2311_PayToken"" [label=""PayToken""];
""2311_Recontribute"" [label=""Recontribute""];
""2311_ReturnAllTokens"" [label=""ReturnAllTokens""];
""2311_HodlTokens3"" [label=""HodlTokens3""];
""2311_fallback"" [label=""fallback""];
""2311_UnlockToken3"" [label=""UnlockToken3""];
""2311_add"" [label=""add""];
""2311_CashbackCode"" [label=""CashbackCode""];
""2311_HodlTokens2"" [label=""HodlTokens2""];
""2311_AddContractAddress"" [label=""AddContractAddress""];
""2311_ClaimCashback"" [label=""ClaimCashback""];
""2311_GetHodlTokensBalance"" [label=""GetHodlTokensBalance""];
""2311_GetUserSafesLength"" [label=""GetUserSafesLength""];
""2311_UnlockToken1"" [label=""UnlockToken1""];
""2311_sub"" [label=""sub""];
""2311_UnlockToken2"" [label=""UnlockToken2""];
""2311_TokenPrice"" [label=""TokenPrice""];
""2311_div"" [label=""div""];
""2311_GetTokenReserve"" [label=""GetTokenReserve""];
""2311_HodlTokens2"" -> ""2311_sub"";
""2311_AddContractAddress"" -> ""2311_restricted"";
""2311_ClaimTokens"" -> ""2311_UnlockToken1"";
""2311_ReturnAllTokens"" -> ""2311_PayToken"";
""2311_HodlTokens"" -> ""2311_add"";
""2311_EthereumNodesFees"" -> ""2311_sub"";
""2311_UnlockToken1"" -> ""2311_mul"";
""2311_UnlockToken2"" -> ""2311_mul"";
""2311_PayToken"" -> ""2311_sub"";
""2311_ReturnAllTokens"" -> ""2311_sub"";
""2311_UnlockToken1"" -> ""2311_PayToken"";
""2311_HodlTokens3"" -> ""2311_add"";
""2311_UnlockToken1"" -> ""2311_add"";
""2311_HodlTokens2"" -> ""2311_add"";
""2311_WithdrawAffiliate"" -> ""2311_sub"";
""2311_SendUnlockedTokens"" -> ""2311_WithdrawAffiliate"";
""2311_HodlTokens2"" -> ""2311_mul"";
""2311_UnlockToken3"" -> ""2311_sub"";
""2311_HodlTokens2"" -> ""2311_div"";
""2311_UnlockToken3"" -> ""2311_mul"";
""2311_fallback"" -> ""2311_add"";
""2311_HodlTokens2"" -> ""2311_HodlTokens3"";
""2311_TokenPrice"" -> ""2311_restricted"";
""2311_UnlockToken2"" -> ""2311_div"";
""2311_UnlockToken1"" -> ""2311_div"";
""2311_UnlockToken2"" -> ""2311_sub"";
""2311_SendUnlockedTokens"" -> ""2311_restricted"";
""2311_ReturnAllTokens"" -> ""2311_restricted"";
""2311_WithdrawEth"" -> ""2311_restricted"";
""2311_ClaimCashback"" -> ""2311_PayToken"";
""2311_UnlockToken3"" -> ""2311_PayToken"";
""2311_ReturnAllTokens"" -> ""2311_div"";
""2311_Recontribute"" -> ""2311_HodlTokens2"";
""2311_HodlTokens"" -> ""2311_HodlTokens2"";
""2311_UnlockToken1"" -> ""2311_UnlockToken2"";
""2311_SendUnlockedTokens"" -> ""2311_UnlockToken2"";
""2311_EthereumNodesFees"" -> ""2311_restricted"";
""2311_UnlockToken3"" -> ""2311_div"";
""2311_UnlockToken2"" -> ""2311_UnlockToken3"";
""2311_AddContractAddress"" -> ""2311_div"";
""2311_ReturnAllTokens"" -> ""2311_mul"";
""2311_AddContractAddress"" -> ""2311_mul"";
""2311_PayToken"" -> ""2311_add"";
""2311_WithdrawAffiliate"" -> ""2311_add"";
}
"
0x28fd414804a3fabf0740cd4ad22691d61163f20a.sol,MintableToken,"contract MintableToken is StandardToken { address public minter; bool public mintingDisabled = false; event MintingDisabled(); modifier canMint() { require(!mintingDisabled, ); _; }",0,"subgraph cluster_1028_StandardMintableToken {
label=""StandardMintableToken"";
""1028_constructor"" [label=""constructor""];
""1028_constructor"" -> ""1028_constructor"";
}
"
0x789109d185f5f4205d58c533eb831fdefb0d10b8.sol,BlockchainofBeautifulandHealthyEcosystem,"contract BlockchainofBeautifulandHealthyEcosystem { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function BlockchainofBeautifulandHealthyEcosystem( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_361_BlockchainofBeautifulandHealthyEcosystem {
label=""BlockchainofBeautifulandHealthyEcosystem"";
""361_burnFrom"" [label=""burnFrom""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_transfer"" [label=""transfer""];
""361_BlockchainofBeautifulandHealthyEcosystem"" [label=""BlockchainofBeautifulandHealthyEcosystem""];
""361_approve"" [label=""approve""];
""361_burn"" [label=""burn""];
""361__transfer"" [label=""_transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0x26cd1f0943d5877f7de475571172f957c337d4e4.sol,GoldenBit,"contract GoldenBit is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 960000000000000000000000000; balances[0xaa251d79d41ECaD6C0d183Ac1b7D67fEe28805EB] = _totalSupply; emit Transfer(address(0), 0xaa251d79d41ECaD6C0d183Ac1b7D67fEe28805EB, _totalSupply); }",0,"subgraph cluster_540_GoldenBit {
label=""GoldenBit"";
""540_totalSupply"" [label=""totalSupply""];
""540_constructor"" [label=""constructor""];
""540_balanceOf"" [label=""balanceOf""];
""540_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""540_transfer"" [label=""transfer""];
""540_approve"" [label=""approve""];
""540_transferFrom"" [label=""transferFrom""];
""540_fallback"" [label=""fallback""];
""540_approveAndCall"" [label=""approveAndCall""];
""540_allowance"" [label=""allowance""];
""540_transfer"" -> ""540_safeAdd"";
""540_transferAnyERC20Token"" -> ""540_onlyOwner"";
""540_transfer"" -> ""540_safeSub"";
""540_transferFrom"" -> ""540_safeSub"";
""540_transferFrom"" -> ""540_safeAdd"";
}
"
0x17ac7de614fbdc988b693f7175cc14d7301210a1.sol,GemmyCoin,"contract GemmyCoin is ERC20Interface, OwnerHelper { using SafeMath for uint; string public name; uint public decimals; string public symbol; address public wallet; uint public totalSupply; uint constant public saleSupply = 3500000000 * E18; uint constant public rewardPoolSupply = 2200000000 * E18; uint constant public foundationSupply = 500000000 * E18; uint constant public gemmyMusicSupply = 1200000000 * E18; uint constant public advisorSupply = 700000000 * E18; uint constant public mktSupply = 1600000000 * E18; uint constant public etcSupply = 300000000 * E18; uint constant public maxSupply = 10000000000 * E18; uint public coinIssuedSale = 0; uint public coinIssuedRewardPool = 0; uint public coinIssuedFoundation = 0; uint public coinIssuedGemmyMusic = 0; uint public coinIssuedAdvisor = 0; uint public coinIssuedMkt = 0; uint public coinIssuedEtc = 0; uint public coinIssuedTotal = 0; uint public coinIssuedBurn = 0; uint public saleEtherReceived = 0; uint constant private E18 = 1000000000000000000; uint public firstPreSaleDate1 = 1529247600; uint public firstPreSaleEndDate1 = 1530198000; uint public firstPreSaleDate2 = 1530457200; uint public firstPreSaleEndDate2 = 1532617200; uint public secondPreSaleDate = 1532876400; uint public secondPreSaleEndDate = 1534431600; uint public thirdPreSaleDate = 1534690800; uint public thirdPreSaleEndDate = 1536246000; uint public mainSaleDate = 1536505200; uint public mainSaleEndDate = 1540911600; bool public totalCoinLock; uint public gemmyMusicLockTime; uint public advisorFirstLockTime; uint public advisorSecondLockTime; mapping (address => uint) internal balances; mapping (address => mapping ( address => uint )) internal approvals; mapping (address => bool) internal personalLocks; mapping (address => bool) internal gemmyMusicLocks; mapping (address => uint) internal advisorFirstLockBalances; mapping (address => uint) internal advisorSecondLockBalances; mapping (address => uint) internal icoEtherContributeds; event CoinIssuedSale(address indexed _who, uint _coins, uint _balances, uint _ether, uint _saleTime); event RemoveTotalCoinLock(); event SetAdvisorLockTime(uint _first, uint _second); event RemovePersonalLock(address _who); event RemoveGemmyMusicLock(address _who); event RemoveAdvisorFirstLock(address _who); event RemoveAdvisorSecondLock(address _who); event WithdrawRewardPool(address _who, uint _value); event WithdrawFoundation(address _who, uint _value); event WithdrawGemmyMusic(address _who, uint _value); event WithdrawAdvisor(address _who, uint _value); event WithdrawMkt(address _who, uint _value); event WithdrawEtc(address _who, uint _value); event ChangeWallet(address _who); event BurnCoin(uint _value); event RefundCoin(address _who, uint _value); constructor() public { name = ; decimals = 18; symbol = ; totalSupply = 0; owner = msg.sender; wallet = msg.sender; require(maxSupply == saleSupply + rewardPoolSupply + foundationSupply + gemmyMusicSupply + advisorSupply + mktSupply + etcSupply); totalCoinLock = true; gemmyMusicLockTime = firstPreSaleDate1 + (365 * 24 * 60 * 60); advisorFirstLockTime = gemmyMusicLockTime; advisorSecondLockTime = gemmyMusicLockTime; }",0,"subgraph cluster_2119_GemmyCoin {
label=""GemmyCoin"";
""2119_transferMultiple"" [label=""transferMultiple""];
""2119_refundCoin"" [label=""refundCoin""];
""2119_buyCoin"" [label=""buyCoin""];
""2119_isTransferLock"" [label=""isTransferLock""];
""2119_isPersonalLock"" [label=""isPersonalLock""];
""2119_removePersonalLockMultiple"" [label=""removePersonalLockMultiple""];
""2119_atNow"" [label=""atNow""];
""2119_removeGemmyMusicLock"" [label=""removeGemmyMusicLock""];
""2119_removeFirstAdvisorLock"" [label=""removeFirstAdvisorLock""];
""2119_removeSecondAdvisorLock"" [label=""removeSecondAdvisorLock""];
""2119_withdrawFoundation"" [label=""withdrawFoundation""];
""2119_withdrawAdvisor"" [label=""withdrawAdvisor""];
""2119_withdrawEtc"" [label=""withdrawEtc""];
""2119_withdrawGemmyMusic"" [label=""withdrawGemmyMusic""];
""2119_transferFrom"" [label=""transferFrom""];
""2119_withdrawRewardPool"" [label=""withdrawRewardPool""];
""2119_transfer"" [label=""transfer""];
""2119_constructor"" [label=""constructor""];
""2119_balanceOf"" [label=""balanceOf""];
""2119_burnCoin"" [label=""burnCoin""];
""2119_allowance"" [label=""allowance""];
""2119_approve"" [label=""approve""];
""2119_removePersonalLock"" [label=""removePersonalLock""];
""2119_totalSupply"" [label=""totalSupply""];
""2119_withdrawMkt"" [label=""withdrawMkt""];
""2119_removeTotalCoinLock"" [label=""removeTotalCoinLock""];
""2119_changeWallet"" [label=""changeWallet""];
""2119_fallback"" [label=""fallback""];
""2119_removeSecondAdvisorLock"" -> ""2119_onlyOwner"";
""2119_removeFirstAdvisorLock"" -> ""2119_atNow"";
""2119_removePersonalLockMultiple"" -> ""2119_onlyOwner"";
""2119_removeGemmyMusicLock"" -> ""2119_atNow"";
""2119_removeTotalCoinLock"" -> ""2119_onlyOwner"";
""2119_transfer"" -> ""2119_isTransferLock"";
""2119_burnCoin"" -> ""2119_atNow"";
""2119_removeGemmyMusicLock"" -> ""2119_onlyOwner"";
""2119_approve"" -> ""2119_isTransferLock"";
""2119_withdrawAdvisor"" -> ""2119_onlyOwner"";
""2119_withdrawEtc"" -> ""2119_onlyOwner"";
""2119_transferMultiple"" -> ""2119_onlyOwner"";
""2119_withdrawGemmyMusic"" -> ""2119_onlyOwner"";
""2119_refundCoin"" -> ""2119_onlyOwner"";
""2119_removePersonalLock"" -> ""2119_onlyOwner"";
""2119_withdrawMkt"" -> ""2119_onlyOwner"";
""2119_transferFrom"" -> ""2119_isTransferLock"";
""2119_removeSecondAdvisorLock"" -> ""2119_atNow"";
""2119_removeFirstAdvisorLock"" -> ""2119_onlyOwner"";
""2119_burnCoin"" -> ""2119_onlyOwner"";
""2119_removeTotalCoinLock"" -> ""2119_atNow"";
""2119_fallback"" -> ""2119_buyCoin"";
""2119_withdrawFoundation"" -> ""2119_onlyOwner"";
""2119_changeWallet"" -> ""2119_onlyOwner"";
""2119_buyCoin"" -> ""2119_atNow"";
""2119_transferMultiple"" -> ""2119_isTransferLock"";
""2119_withdrawRewardPool"" -> ""2119_onlyOwner"";
}
"
0x72268385b3620157f0b051e876c801841a716b8e.sol,KT,"contract KT is KTfactory, erc721 { using safemath for uint256; mapping (uint => address) KTApprovals; modifier decomposeAllowed(uint token_id){ require(KTs[token_id].level > 1); _; }",0,"subgraph cluster_296_KTaccess {
label=""KTaccess"";
""296_setO1"" [label=""setO1""];
""296_setO3"" [label=""setO3""];
""296_setO2"" [label=""setO2""];
""296_setO2"" -> ""296_onlyOLevel"";
""296_setO1"" -> ""296_onlyOLevel"";
""296_setO3"" -> ""296_onlyOLevel"";
}
"
0x3a4b527dcd618ccea50adb32b3369117e5442a2f.sol,ZUR,contract ZUR is MintableToken { using SafeMath for uint; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 0; address public admin; uint public totalEthReleased = 0; mapping(address => uint) public ethReleased; address[] public trackedTokens; mapping(address => bool) public isTokenTracked; mapping(address => uint) public totalTokensReleased; mapping(address => mapping(address => uint)) public tokensReleased; constructor() public { owner = this; admin = msg.sender; },0,"subgraph cluster_1441_ZUR {
label=""ZUR"";
""1441_transferChecks"" [label=""transferChecks""];
""1441_fallback"" [label=""fallback""];
""1441_trackToken"" [label=""trackToken""];
""1441_claimMyTokens"" [label=""claimMyTokens""];
""1441_constructor"" [label=""constructor""];
""1441_transfer"" [label=""transfer""];
""1441_claimEth"" [label=""claimEth""];
""1441_claimTokensFor"" [label=""claimTokensFor""];
""1441_transferFrom"" [label=""transferFrom""];
""1441_claimEthFor"" [label=""claimEthFor""];
""1441_unTrackToken"" [label=""unTrackToken""];
""1441_claimToken"" [label=""claimToken""];
""1441_addPayees"" [label=""addPayees""];
""1441_getUnclaimedTokenAmount"" [label=""getUnclaimedTokenAmount""];
""1441_finishedLoading"" [label=""finishedLoading""];
""1441_addPayee"" [label=""addPayee""];
""1441_changeAdmin"" [label=""changeAdmin""];
""1441_transfer"" -> ""1441_transfer"";
""1441_addPayee"" -> ""1441_canMint"";
""1441_finishedLoading"" -> ""1441_canMint"";
""1441_transfer"" -> ""1441_transferChecks"";
""1441_claimTokensFor"" -> ""1441_claimToken"";
""1441_addPayee"" -> ""1441_onlyAdmin"";
""1441_claimEth"" -> ""1441_claimEthFor"";
""1441_addPayees"" -> ""1441_addPayee"";
""1441_addPayees"" -> ""1441_onlyAdmin"";
""1441_transferFrom"" -> ""1441_transferChecks"";
""1441_unTrackToken"" -> ""1441_onlyAdmin"";
""1441_finishedLoading"" -> ""1441_onlyAdmin"";
""1441_transferFrom"" -> ""1441_transferFrom"";
""1441_changeAdmin"" -> ""1441_onlyAdmin"";
""1441_claimToken"" -> ""1441_getUnclaimedTokenAmount"";
""1441_trackToken"" -> ""1441_onlyAdmin"";
""1441_claimMyTokens"" -> ""1441_claimTokensFor"";
}
"
0x271a0b465d5b453bb835afd2d671c76b2b76900e.sol,ClockAuction,"contract ClockAuction is ClockAuctionBase { bytes4 constant InterfaceSignature_ERC721 = bytes4(0x9a20483d); bool public isSaleClockAuction = true; constructor(uint256 _ownerCut, uint256 _authorShare) public { require(_ownerCut <= 10000); require(_authorShare <= 10000); ownerCut = _ownerCut; authorShare = _authorShare; }",0,"subgraph cluster_1034_ClockAuctionBase {
label=""ClockAuctionBase"";
""1034__escrow"" [label=""_escrow""];
""1034__addAuction"" [label=""_addAuction""];
""1034__computeCurrentPrice"" [label=""_computeCurrentPrice""];
""1034__interfaceByAddress"" [label=""_interfaceByAddress""];
""1034__currentPrice"" [label=""_currentPrice""];
""1034__isAddressSupportedContract"" [label=""_isAddressSupportedContract""];
""1034__owns"" [label=""_owns""];
""1034__transfer"" [label=""_transfer""];
""1034__cancelAuction"" [label=""_cancelAuction""];
""1034__bid"" [label=""_bid""];
""1034__removeAuction"" [label=""_removeAuction""];
""1034_addToonContract"" [label=""addToonContract""];
""1034__computeCut"" [label=""_computeCut""];
""1034__isOnAuction"" [label=""_isOnAuction""];
""1034_addToonContract"" -> ""1034_onlyOwner"";
""1034__bid"" -> ""1034__computeCut"";
""1034__cancelAuction"" -> ""1034__removeAuction"";
""1034__bid"" -> ""1034_addPendingWithdrawal"";
""1034__bid"" -> ""1034__isOnAuction"";
""1034__escrow"" -> ""1034__interfaceByAddress"";
""1034__bid"" -> ""1034__removeAuction"";
""1034__bid"" -> ""1034__interfaceByAddress"";
""1034__currentPrice"" -> ""1034__computeCurrentPrice"";
""1034__addAuction"" -> ""1034__isAddressSupportedContract"";
""1034__transfer"" -> ""1034__interfaceByAddress"";
""1034__cancelAuction"" -> ""1034__transfer"";
""1034__owns"" -> ""1034__interfaceByAddress"";
""1034__bid"" -> ""1034__currentPrice"";
}
"
0xbc86727e770de68b1060c91f6bb6945c73e10388.sol,InkProtocolCore,"contract InkProtocolCore is InkProtocolInterface, StandardToken { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 private constant gasLimitForExpiryCall = 1000000; uint256 private constant gasLimitForMediatorCall = 4000000; enum Expiry { Transaction, Fulfillment, Escalation, Mediation }",0,"subgraph cluster_2860_InkProtocolCore {
label=""InkProtocolCore"";
""2860_transferFrom"" [label=""transferFrom""];
""2860__settleTransaction"" [label=""_settleTransaction""];
""2860_confirmTransactionByMediator"" [label=""confirmTransactionByMediator""];
""2860__refundTransaction"" [label=""_refundTransaction""];
""2860_refundTransaction"" [label=""refundTransaction""];
""2860_settleTransactionByMediator"" [label=""settleTransactionByMediator""];
""2860_confirmTransactionAfterExpiry"" [label=""confirmTransactionAfterExpiry""];
""2860__completeTransaction"" [label=""_completeTransaction""];
""2860_disputeTransaction"" [label=""disputeTransaction""];
""2860__refundTransactionByMediator"" [label=""_refundTransactionByMediator""];
""2860__confirmTransaction"" [label=""_confirmTransaction""];
""2860__settleTransactionByMediator"" [label=""_settleTransactionByMediator""];
""2860__revokeTransaction"" [label=""_revokeTransaction""];
""2860_transfer"" [label=""transfer""];
""2860__findTransactionForBuyer"" [label=""_findTransactionForBuyer""];
""2860__acceptTransaction"" [label=""_acceptTransaction""];
""2860__resolveOwner"" [label=""_resolveOwner""];
""2860__updateTransactionState"" [label=""_updateTransactionState""];
""2860_revokeTransaction"" [label=""revokeTransaction""];
""2860__createTransaction"" [label=""_createTransaction""];
""2860__transferFrom"" [label=""_transferFrom""];
""2860_InkProtocolCore"" [label=""InkProtocolCore""];
""2860_refundTransactionByMediator"" [label=""refundTransactionByMediator""];
""2860__findTransactionForMediator"" [label=""_findTransactionForMediator""];
""2860__confirmTransactionByMediator"" [label=""_confirmTransactionByMediator""];
""2860__findTransactionForSeller"" [label=""_findTransactionForSeller""];
""2860__transferFromEscrow"" [label=""_transferFromEscrow""];
""2860__fetchExpiry"" [label=""_fetchExpiry""];
""2860_escalateDisputeToMediator"" [label=""escalateDisputeToMediator""];
""2860__findTransactionForParty"" [label=""_findTransactionForParty""];
""2860__disputeTransaction"" [label=""_disputeTransaction""];
""2860_provideTransactionFeedback"" [label=""provideTransactionFeedback""];
""2860_createTransaction"" [label=""createTransaction""];
""2860__confirmTransactionAfterExpiry"" [label=""_confirmTransactionAfterExpiry""];
""2860_link"" [label=""link""];
""2860__cleanupTransaction"" [label=""_cleanupTransaction""];
""2860__resolveMediator"" [label=""_resolveMediator""];
""2860_confirmTransaction"" [label=""confirmTransaction""];
""2860_refundTransactionAfterExpiry"" [label=""refundTransactionAfterExpiry""];
""2860__escalateDisputeToMediator"" [label=""_escalateDisputeToMediator""];
""2860__fetchMediatorFee"" [label=""_fetchMediatorFee""];
""2860__findTransaction"" [label=""_findTransaction""];
""2860__provideTransactionFeedback"" [label=""_provideTransactionFeedback""];
""2860_settleTransaction"" [label=""settleTransaction""];
""2860_acceptTransaction"" [label=""acceptTransaction""];
""2860__refundTransactionAfterExpiry"" [label=""_refundTransactionAfterExpiry""];
""2860__afterExpiry"" [label=""_afterExpiry""];
""2860__transferFromEscrow"" -> ""2860__transferFrom"";
""2860__createTransaction"" -> ""2860__resolveMediator"";
""2860__settleTransactionByMediator"" -> ""2860__transferFromEscrow"";
""2860_escalateDisputeToMediator"" -> ""2860__escalateDisputeToMediator"";
""2860__acceptTransaction"" -> ""2860__completeTransaction"";
""2860__confirmTransactionByMediator"" -> ""2860__completeTransaction"";
""2860_confirmTransaction"" -> ""2860__findTransactionForBuyer"";
""2860__settleTransaction"" -> ""2860__cleanupTransaction"";
""2860__settleTransaction"" -> ""2860__fetchExpiry"";
""2860_refundTransactionByMediator"" -> ""2860__refundTransactionByMediator"";
""2860__confirmTransaction"" -> ""2860__completeTransaction"";
""2860_disputeTransaction"" -> ""2860__disputeTransaction"";
""2860__revokeTransaction"" -> ""2860__transferFromEscrow"";
""2860_transfer"" -> ""2860_transfer"";
""2860_confirmTransactionByMediator"" -> ""2860__confirmTransactionByMediator"";
""2860_provideTransactionFeedback"" -> ""2860__findTransactionForBuyer"";
""2860_createTransaction"" -> ""2860__createTransaction"";
""2860__refundTransactionByMediator"" -> ""2860__completeTransaction"";
""2860_acceptTransaction"" -> ""2860__acceptTransaction"";
""2860__acceptTransaction"" -> ""2860__updateTransactionState"";
""2860__refundTransactionAfterExpiry"" -> ""2860__fetchExpiry"";
""2860__confirmTransactionAfterExpiry"" -> ""2860__fetchExpiry"";
""2860_settleTransaction"" -> ""2860__findTransactionForParty"";
""2860__findTransactionForSeller"" -> ""2860__findTransaction"";
""2860_acceptTransaction"" -> ""2860__findTransactionForSeller"";
""2860_disputeTransaction"" -> ""2860__findTransactionForBuyer"";
""2860__confirmTransaction"" -> ""2860__afterExpiry"";
""2860_settleTransactionByMediator"" -> ""2860__settleTransactionByMediator"";
""2860_refundTransactionByMediator"" -> ""2860__findTransactionForMediator"";
""2860__completeTransaction"" -> ""2860__cleanupTransaction"";
""2860_confirmTransactionByMediator"" -> ""2860__findTransactionForMediator"";
""2860_refundTransactionAfterExpiry"" -> ""2860__findTransactionForBuyer"";
""2860_escalateDisputeToMediator"" -> ""2860__findTransactionForSeller"";
""2860__settleTransaction"" -> ""2860__transferFromEscrow"";
""2860__confirmTransactionAfterExpiry"" -> ""2860__afterExpiry"";
""2860_confirmTransactionAfterExpiry"" -> ""2860__findTransactionForSeller"";
""2860__disputeTransaction"" -> ""2860__afterExpiry"";
""2860_provideTransactionFeedback"" -> ""2860__provideTransactionFeedback"";
""2860_confirmTransactionAfterExpiry"" -> ""2860__confirmTransactionAfterExpiry"";
""2860_revokeTransaction"" -> ""2860__findTransactionForBuyer"";
""2860__refundTransactionAfterExpiry"" -> ""2860__afterExpiry"";
""2860__revokeTransaction"" -> ""2860__cleanupTransaction"";
""2860__findTransactionForParty"" -> ""2860__findTransaction"";
""2860__refundTransaction"" -> ""2860__fetchExpiry"";
""2860_settleTransactionByMediator"" -> ""2860__findTransactionForMediator"";
""2860__refundTransactionAfterExpiry"" -> ""2860__completeTransaction"";
""2860__findTransactionForBuyer"" -> ""2860__findTransaction"";
""2860__confirmTransactionAfterExpiry"" -> ""2860__completeTransaction"";
""2860_confirmTransaction"" -> ""2860__confirmTransaction"";
""2860__refundTransaction"" -> ""2860__afterExpiry"";
""2860_refundTransaction"" -> ""2860__findTransactionForSeller"";
""2860__refundTransaction"" -> ""2860__completeTransaction"";
""2860__completeTransaction"" -> ""2860__transferFromEscrow"";
""2860_refundTransactionAfterExpiry"" -> ""2860__refundTransactionAfterExpiry"";
""2860_refundTransaction"" -> ""2860__refundTransaction"";
""2860_revokeTransaction"" -> ""2860__revokeTransaction"";
""2860__settleTransaction"" -> ""2860__afterExpiry"";
""2860__settleTransactionByMediator"" -> ""2860__cleanupTransaction"";
""2860__completeTransaction"" -> ""2860__fetchMediatorFee"";
""2860__createTransaction"" -> ""2860__resolveOwner"";
""2860__escalateDisputeToMediator"" -> ""2860__updateTransactionState"";
""2860_transferFrom"" -> ""2860_transferFrom"";
""2860__confirmTransaction"" -> ""2860__fetchExpiry"";
""2860_settleTransaction"" -> ""2860__settleTransaction"";
""2860__findTransactionForMediator"" -> ""2860__findTransaction"";
""2860__createTransaction"" -> ""2860__transferFrom"";
""2860__disputeTransaction"" -> ""2860__fetchExpiry"";
""2860__disputeTransaction"" -> ""2860__updateTransactionState"";
}
"
0x3364fb62274ad4659bc5162a9ba4b84c73784f58.sol,CappedToken,contract CappedToken is MintableToken { uint256 public cap; function CappedToken(uint256 _cap) public { require(_cap > 0); cap = _cap; },0,"subgraph cluster_696_CappedToken {
label=""CappedToken"";
""696_mint"" [label=""mint""];
""696_CappedToken"" [label=""CappedToken""];
""696_mint"" -> ""696_onlyOwner"";
""696_mint"" -> ""696_canMint"";
""696_mint"" -> ""696_mint"";
}
"
0x5cb99e1919e7ca8d48bce2cde4eb8e0ac94fa546.sol,RYCToken,"contract RYCToken is StandardBurnableToken { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; address public owner; string public website = ; uint256 public constant INITIAL_SUPPLY = 5000000000 * (10 ** uint256(decimals)); uint256 public constant CROWDSALE_ALLOWANCE = 4000000000 * (10 ** uint256(decimals)); uint256 public constant ADMIN_ALLOWANCE = 1000000000 * (10 ** uint256(decimals)); uint256 public crowdSaleAllowance; uint256 public adminAllowance; address public crowdSaleAddr; address public adminAddr; event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); modifier validDestination(address _to) { require(_to != address(0x0)); require(_to != address(this)); require(_to != owner); _; }",0,"subgraph cluster_919_RYCToken {
label=""RYCToken"";
""919_burn"" [label=""burn""];
""919_constructor"" [label=""constructor""];
""919_transferOwnership"" [label=""transferOwnership""];
""919_burnFromAdmin"" [label=""burnFromAdmin""];
""919_changeWebsite"" [label=""changeWebsite""];
""919_transfer"" [label=""transfer""];
""919_setCrowdsale"" [label=""setCrowdsale""];
""919_changeWebsite"" -> ""919_onlyOwner"";
""919_burnFromAdmin"" -> ""919_onlyOwner"";
""919_setCrowdsale"" -> ""919_onlyOwner"";
""919_burnFromAdmin"" -> ""919__burn"";
""919_burn"" -> ""919__burn"";
""919_transfer"" -> ""919_transfer"";
""919_constructor"" -> ""919_approve"";
""919_transfer"" -> ""919_validDestination"";
""919_transferOwnership"" -> ""919_onlyOwner"";
""919_setCrowdsale"" -> ""919_approve"";
}
"
0xa20f317e3b6fe80ff76ee908860ecdb3edea4893.sol,TwelveHourFastTrain,contract TwelveHourFastTrain { address public owner; address public twelveHourTokenAddress; TwelveHourTokenInterface public TwelveHourToken; uint256 constant private THT_TOKEN_OWNERS = 10; address constant private PROMO = 0xC63eA85CC823c440319013d4B30E19b66466642d; uint constant public PROMO_PERCENT = 1; uint constant public MULTIPLIER = 120; uint constant public MAX_DEPOSIT = 1 ether; uint constant public MIN_DEPOSIT = 0.05 ether; uint256 constant public VERIFY_REFERRAL_PRICE = 0.01 ether; uint256 constant public REFERRAL = 3; uint constant public LAST_DEPOSIT_PERCENT = 10; LastDeposit public last; mapping(address => bool) public referrals; struct Deposit { address depositor; uint128 deposit; uint128 expect; },0,"subgraph cluster_686_TwelveHourFastTrain {
label=""TwelveHourFastTrain"";
""686_calEthSendToTHT"" [label=""calEthSendToTHT""];
""686_getDeposit"" [label=""getDeposit""];
""686_exitTHT"" [label=""exitTHT""];
""686_fallback"" [label=""fallback""];
""686_setTwelveHourToken"" [label=""setTwelveHourToken""];
""686_getDepositByAddress"" [label=""getDepositByAddress""];
""686_invest"" [label=""invest""];
""686_buyTHT"" [label=""buyTHT""];
""686_totalEthereumBalance"" [label=""totalEthereumBalance""];
""686_verifyReferrals"" [label=""verifyReferrals""];
""686_sendProfitTHT"" [label=""sendProfitTHT""];
""686_constructor"" [label=""constructor""];
""686_getData"" [label=""getData""];
""686_pay"" [label=""pay""];
""686_sendProfitTHT"" -> ""686_calEthSendToTHT"";
""686_setTwelveHourToken"" -> ""686_onlyOwner"";
""686_sendProfitTHT"" -> ""686_exitTHT"";
""686_verifyReferrals"" -> ""686_disableContract"";
""686_sendProfitTHT"" -> ""686_buyTHT"";
""686_invest"" -> ""686_disableContract"";
""686_fallback"" -> ""686_invest"";
""686_invest"" -> ""686_pay"";
""686_invest"" -> ""686_sendProfitTHT"";
}
"
0xdfc22ea50ec87f2a0041f8d6aef347a98879e870.sol,AffiliateManager,"contract AffiliateManager is Pausable { using SafeMath for uint256; AffiliateTreeStore public affiliateTree; MavinToken public token; uint256 public endTime; uint256 public cap; address public vault; uint256 public mvnpereth; uint256 public weiRaised; uint256 public minAmountWei; address creator; function AffiliateManager( address _token, address _treestore ) public { creator = msg.sender; token = MavinToken(_token); endTime = 1536969600; vault = 0xD0b40D3bfd8DFa6ecC0b357555039C3ee1C11202; mvnpereth = 100; minAmountWei = 0.01 ether; cap = 32000 ether; affiliateTree = AffiliateTreeStore(_treestore); }",0,"subgraph cluster_1977_AffiliateManager {
label=""AffiliateManager"";
""1977_finalizeCrowdsale"" [label=""finalizeCrowdsale""];
""1977_updateMinAmountWei"" [label=""updateMinAmountWei""];
""1977_balanceOf"" [label=""balanceOf""];
""1977_buyTokens"" [label=""buyTokens""];
""1977_initAffiliate"" [label=""initAffiliate""];
""1977_joinManual"" [label=""joinManual""];
""1977_fallback"" [label=""fallback""];
""1977_validPurchase"" [label=""validPurchase""];
""1977_updateMVNRate"" [label=""updateMVNRate""];
""1977_join"" [label=""join""];
""1977_AffiliateManager"" [label=""AffiliateManager""];
""1977_presaleMint"" [label=""presaleMint""];
""1977_join"" -> ""1977_buyTokens"";
""1977_joinManual"" -> ""1977_whenNotPaused"";
""1977_presaleMint"" -> ""1977_onlyOwner"";
""1977_updateMinAmountWei"" -> ""1977_onlyOwner"";
""1977_join"" -> ""1977_onlyDiffAdr"";
""1977_finalizeCrowdsale"" -> ""1977_onlyOwner"";
""1977_updateMVNRate"" -> ""1977_onlyOwner"";
""1977_join"" -> ""1977_whenNotPaused"";
""1977_joinManual"" -> ""1977_onlyDiffAdr"";
""1977_initAffiliate"" -> ""1977_onlyOwner"";
""1977_finalizeCrowdsale"" -> ""1977_pause"";
""1977_join"" -> ""1977_validPurchase"";
""1977_joinManual"" -> ""1977_join"";
}
"
0x409e1820aba80fd6bc0f7573528f56cd3ccbfafb.sol,Linamyd,contract Linamyd { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1313_Linamyd {
label=""Linamyd"";
""1313_fallback"" [label=""fallback""];
""1313_exit"" [label=""exit""];
""1313_transfer"" [label=""transfer""];
""1313_buyPrice"" [label=""buyPrice""];
""1313_withdraw"" [label=""withdraw""];
""1313_reinvest"" [label=""reinvest""];
""1313_Linamyd"" [label=""Linamyd""];
""1313_totalSupply"" [label=""totalSupply""];
""1313_setSymbol"" [label=""setSymbol""];
""1313_setStakingRequirement"" [label=""setStakingRequirement""];
""1313_sell"" [label=""sell""];
""1313_buy"" [label=""buy""];
""1313_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1313_setName"" [label=""setName""];
""1313_dividendsOf"" [label=""dividendsOf""];
""1313_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1313_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1313_setAdministrator"" [label=""setAdministrator""];
""1313_sellPrice"" [label=""sellPrice""];
""1313_disableInitialStage"" [label=""disableInitialStage""];
""1313_myDividends"" [label=""myDividends""];
""1313_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1313_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1313_myTokens"" [label=""myTokens""];
""1313_balanceOf"" [label=""balanceOf""];
""1313_purchaseTokens"" [label=""purchaseTokens""];
""1313_sqrt"" [label=""sqrt""];
""1313_buy"" -> ""1313_purchaseTokens"";
""1313_sell"" -> ""1313_onlyBagholders"";
""1313_myDividends"" -> ""1313_dividendsOf"";
""1313_setName"" -> ""1313_onlyAdministrator"";
""1313_setAdministrator"" -> ""1313_onlyAdministrator"";
""1313_myTokens"" -> ""1313_balanceOf"";
""1313_sellPrice"" -> ""1313_tokensToEthereum_"";
""1313_buyPrice"" -> ""1313_tokensToEthereum_"";
""1313_withdraw"" -> ""1313_myDividends"";
""1313_withdraw"" -> ""1313_onlyStronghands"";
""1313_reinvest"" -> ""1313_onlyStronghands"";
""1313_exit"" -> ""1313_sell"";
""1313_reinvest"" -> ""1313_myDividends"";
""1313_fallback"" -> ""1313_purchaseTokens"";
""1313_purchaseTokens"" -> ""1313_antiEarlyWhale"";
""1313_calculateEthereumReceived"" -> ""1313_tokensToEthereum_"";
""1313_transfer"" -> ""1313_myDividends"";
""1313_calculateTokensReceived"" -> ""1313_ethereumToTokens_"";
""1313_exit"" -> ""1313_withdraw"";
""1313_sell"" -> ""1313_tokensToEthereum_"";
""1313_transfer"" -> ""1313_onlyBagholders"";
""1313_purchaseTokens"" -> ""1313_ethereumToTokens_"";
""1313_setStakingRequirement"" -> ""1313_onlyAdministrator"";
""1313_transfer"" -> ""1313_tokensToEthereum_"";
""1313_disableInitialStage"" -> ""1313_onlyAdministrator"";
""1313_setSymbol"" -> ""1313_onlyAdministrator"";
""1313_reinvest"" -> ""1313_purchaseTokens"";
""1313_transfer"" -> ""1313_withdraw"";
""1313_ethereumToTokens_"" -> ""1313_sqrt"";
}
"
0x1d7b14967d103df9dbc16d408616da18c4ae83eb.sol,Ellobitz,"contract Ellobitz is TokenERC20, Owned, Whitelisted { uint256 public mineCount; uint256 public minMineSize; uint256 public maxMineSize; uint256 public chipSize; uint256 public firstChipBonus; uint public chipSpeed; uint256 internal activeMine; uint256 internal mineSize; bool internal firstChip; mapping(address => uint) public lastChipTime; event MineFound(address indexed chipper, uint256 activeMine); event MineChipped(address indexed chipper, uint256 indexed activeMine, uint256 amount); event MineExausted(address indexed chipper, uint256 activeMine); modifier validMineParameters ( uint256 _mineCount, uint256 _minMineSize, uint256 _maxMineSize, uint256 _chipSize, uint256 _firstChipBonus, uint _chipSpeed ) { require(_minMineSize <= _maxMineSize, ); require(_chipSize + _firstChipBonus <= _minMineSize, ); _; }",0,"subgraph cluster_833_Ellobitz {
label=""Ellobitz"";
""833_setParameters"" [label=""setParameters""];
""833_mintToken"" [label=""mintToken""];
""833_constructor"" [label=""constructor""];
""833__resetMine"" [label=""_resetMine""];
""833_chip"" [label=""chip""];
""833_random"" [label=""random""];
""833_chip"" -> ""833__resetMine"";
""833_constructor"" -> ""833_constructor"";
""833_setParameters"" -> ""833_validMineParameters"";
""833__resetMine"" -> ""833_random"";
""833_chip"" -> ""833_mintToken"";
""833_chip"" -> ""833_whitelisted"";
""833_setParameters"" -> ""833_onlyOwner"";
""833_constructor"" -> ""833_validMineParameters"";
}
"
0xcf5dfe6e2fa63af41e9c01df75e79d3fda69b5f3.sol,MUSystem,contract MUSystem { using SafeMath for uint; string public constant name = ; string public constant symbol = ; uint public constant decimals = 15; uint public totalSupply; address private creatorOwner; address private userAddr; mapping (address => uint) balances; struct UserWhoBuy { uint UserAmt; uint UserTokenObtain; uint UserBuyDate; uint UserBuyFirstDate; uint UserBuyTokenPackNum; uint UserFirstAmt; uint UserContinued; uint UserTotalAmtDepositCurrentPack; },0,"subgraph cluster_2243_MUSystem {
label=""MUSystem"";
""2243_aboutCurrentPack"" [label=""aboutCurrentPack""];
""2243_withdraw"" [label=""withdraw""];
""2243_mint"" [label=""mint""];
""2243_addUserWhoBuy"" [label=""addUserWhoBuy""];
""2243_transfer"" [label=""transfer""];
""2243_packSettings"" [label=""packSettings""];
""2243_balanceOf"" [label=""balanceOf""];
""2243_transferFee"" [label=""transferFee""];
""2243_deposit"" [label=""deposit""];
""2243_addUserWhoSell"" [label=""addUserWhoSell""];
""2243_nextPack"" [label=""nextPack""];
""2243_constructor"" [label=""constructor""];
""2243_restart"" [label=""restart""];
""2243_nextPack"" -> ""2243_mint"";
""2243_deposit"" -> ""2243_transfer"";
""2243_nextPack"" -> ""2243_packSettings"";
""2243_nextPack"" -> ""2243_transferFee"";
""2243_constructor"" -> ""2243_mint"";
""2243_deposit"" -> ""2243_nextPack"";
""2243_withdraw"" -> ""2243_addUserWhoSell"";
""2243_constructor"" -> ""2243_packSettings"";
""2243_restart"" -> ""2243_nextPack"";
""2243_withdraw"" -> ""2243_transfer"";
""2243_withdraw"" -> ""2243_restart"";
""2243_deposit"" -> ""2243_restart"";
""2243_deposit"" -> ""2243_addUserWhoBuy"";
}
"
0xd342c20428de073c6da0cd3b249b16b3f2ae80fe.sol,DildoToken,"contract DildoToken { string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply; uint256 public supplyMultiplier = 6900000000; uint256 public buyPrice = 69000000; address public creator; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event FundTransfer(address backer, uint amount, bool isContribution); function DildoToken() public { totalSupply = supplyMultiplier * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; creator = msg.sender; }",0,"subgraph cluster_207_DildoToken {
label=""DildoToken"";
""207_fallback"" [label=""fallback""];
""207_DildoToken"" [label=""DildoToken""];
""207_transfer"" [label=""transfer""];
""207__transfer"" [label=""_transfer""];
""207_transfer"" -> ""207__transfer"";
}
"
0xb619e84adddd3e336c5dda1e1b40719c846d9030.sol,WorldByEth,contract WorldByEth { using SafeMath for *; using NameFilter for string; string constant public name = ; string constant public symbol = ; uint256 public rID_; uint256 public pID_; uint256 public com_; address public comaddr = 0x9ca974f2c49d68bd5958978e81151e6831290f57; mapping(uint256 => uint256) public pot_; mapping(uint256 => mapping(uint256 => Ctry)) public ctry_; uint public ctynum = 0; uint public gap = 1 hours; uint public timeleft; address public lastplayer = 0x9ca974f2c49d68bd5958978e81151e6831290f57; address public lastwinner; uint[] public validplayers; struct Ctry { uint256 id; uint256 price; bytes32 name; bytes32 mem; address owner; },0,"subgraph cluster_458_WorldByEth {
label=""WorldByEth"";
""458_withcom"" [label=""withcom""];
""458_getvalid"" [label=""getvalid""];
""458_constructor"" [label=""constructor""];
""458_buy"" [label=""buy""];
""458_fallback"" [label=""fallback""];
""458_update"" [label=""update""];
""458_buy"" -> ""458_update"";
""458_buy"" -> ""458_isHuman"";
}
"
0x26eb39228eb4bb98c84ad821bb51464121b2276d.sol,NAUTokenCoin,contract NAUTokenCoin is Ownable { string public constant name = ; string public constant symbol = ; uint32 public constant decimals = 4; uint public constant INITIAL_SUPPLY = 12850000000000; uint public totalSupply = 0; mapping (address => uint) balances; mapping (address => mapping(address => uint)) allowed; function NAUTokenCoin () public { totalSupply = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; },0,"subgraph cluster_274_NAUTokenCoin {
label=""NAUTokenCoin"";
""274_balanceOf"" [label=""balanceOf""];
""274_transfer"" [label=""transfer""];
""274_allowance"" [label=""allowance""];
""274_NAUTokenCoin"" [label=""NAUTokenCoin""];
""274_transferFrom"" [label=""transferFrom""];
""274_approve"" [label=""approve""];
}
"
0x1f9e3a06574cb24a0c447b07a0a2c84988a16a10.sol,ldoh,"contract ldoh is EthereumSmartContract { event onAffiliateBonus( address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime ); event onClaimTokens( address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime ); event onHodlTokens( address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime ); event onAddContractAddress( address indexed contracthodler, bool contractstatus, uint256 _maxcontribution, string _ContractSymbol, uint256 _PercentPermonth, uint256 _HodlingTime ); event onCashbackCode( address indexed hodler, address cashbackcode ); event onUnlockedTokens( uint256 returned ); event onReturnAll( uint256 returned ); address internal DefaultToken; struct Safe { uint256 id; uint256 amount; uint256 endtime; address user; address tokenAddress; string tokenSymbol; uint256 amountbalance; uint256 cashbackbalance; uint256 lasttime; uint256 percentage; uint256 percentagereceive; uint256 tokenreceive; uint256 lastwithdraw; address referrer; }",0,"subgraph cluster_2324_ldoh {
label=""ldoh"";
""2324_UpdateUserData1"" [label=""UpdateUserData1""];
""2324_ClaimTokens"" [label=""ClaimTokens""];
""2324_GetTokenReserve"" [label=""GetTokenReserve""];
""2324_WithdrawEth"" [label=""WithdrawEth""];
""2324_SendUnlockedTokens"" [label=""SendUnlockedTokens""];
""2324_add"" [label=""add""];
""2324_HodlTokens"" [label=""HodlTokens""];
""2324_UnlockToken"" [label=""UnlockToken""];
""2324_Send0ETH_Setting"" [label=""Send0ETH_Setting""];
""2324_AddSpeedDistribution"" [label=""AddSpeedDistribution""];
""2324_GetUserSafesLength"" [label=""GetUserSafesLength""];
""2324_HodlTokens3"" [label=""HodlTokens3""];
""2324_ReturnAllTokens"" [label=""ReturnAllTokens""];
""2324_Send0ETH_Withdraw"" [label=""Send0ETH_Withdraw""];
""2324_AddMaxContribution"" [label=""AddMaxContribution""];
""2324_GetSafe"" [label=""GetSafe""];
""2324_GetContractBalance"" [label=""GetContractBalance""];
""2324_constructor"" [label=""constructor""];
""2324_div"" [label=""div""];
""2324_sub"" [label=""sub""];
""2324_Send0ETH_Deposit"" [label=""Send0ETH_Deposit""];
""2324_GetHodlTokensBalance"" [label=""GetHodlTokensBalance""];
""2324_UpdateUserData2"" [label=""UpdateUserData2""];
""2324_HodlTokens2"" [label=""HodlTokens2""];
""2324_WithdrawAffiliate"" [label=""WithdrawAffiliate""];
""2324_GetTotalAffiliate"" [label=""GetTotalAffiliate""];
""2324_CashbackCode"" [label=""CashbackCode""];
""2324_PayToken"" [label=""PayToken""];
""2324_EthereumNodesFees"" [label=""EthereumNodesFees""];
""2324_AddContractAddress"" [label=""AddContractAddress""];
""2324_mul"" [label=""mul""];
""2324_fallback"" [label=""fallback""];
""2324_SendUnlockedTokens"" -> ""2324_restricted"";
""2324_fallback"" -> ""2324_add"";
""2324_ReturnAllTokens"" -> ""2324_div"";
""2324_SendUnlockedTokens"" -> ""2324_UpdateUserData1"";
""2324_UpdateUserData1"" -> ""2324_UpdateUserData2"";
""2324_HodlTokens2"" -> ""2324_div"";
""2324_HodlTokens3"" -> ""2324_add"";
""2324_UpdateUserData1"" -> ""2324_div"";
""2324_Send0ETH_Setting"" -> ""2324_restricted"";
""2324_UnlockToken"" -> ""2324_UpdateUserData1"";
""2324_UpdateUserData1"" -> ""2324_mul"";
""2324_HodlTokens2"" -> ""2324_add"";
""2324_UpdateUserData2"" -> ""2324_add"";
""2324_AddMaxContribution"" -> ""2324_restricted"";
""2324_UpdateUserData2"" -> ""2324_PayToken"";
""2324_HodlTokens2"" -> ""2324_sub"";
""2324_SendUnlockedTokens"" -> ""2324_WithdrawAffiliate"";
""2324_ReturnAllTokens"" -> ""2324_PayToken"";
""2324_UnlockToken"" -> ""2324_sub"";
""2324_ReturnAllTokens"" -> ""2324_sub"";
""2324_AddSpeedDistribution"" -> ""2324_div"";
""2324_ReturnAllTokens"" -> ""2324_restricted"";
""2324_UnlockToken"" -> ""2324_div"";
""2324_AddContractAddress"" -> ""2324_restricted"";
""2324_PayToken"" -> ""2324_add"";
""2324_UnlockToken"" -> ""2324_mul"";
""2324_WithdrawAffiliate"" -> ""2324_sub"";
""2324_ClaimTokens"" -> ""2324_UnlockToken"";
""2324_ReturnAllTokens"" -> ""2324_mul"";
""2324_HodlTokens2"" -> ""2324_HodlTokens3"";
""2324_UpdateUserData2"" -> ""2324_div"";
""2324_Send0ETH_Withdraw"" -> ""2324_restricted"";
""2324_HodlTokens2"" -> ""2324_mul"";
""2324_UpdateUserData2"" -> ""2324_sub"";
""2324_WithdrawAffiliate"" -> ""2324_add"";
""2324_AddSpeedDistribution"" -> ""2324_restricted"";
""2324_UpdateUserData1"" -> ""2324_sub"";
""2324_EthereumNodesFees"" -> ""2324_sub"";
""2324_HodlTokens"" -> ""2324_HodlTokens2"";
""2324_EthereumNodesFees"" -> ""2324_restricted"";
""2324_Send0ETH_Deposit"" -> ""2324_add"";
""2324_UpdateUserData1"" -> ""2324_add"";
""2324_WithdrawEth"" -> ""2324_restricted"";
""2324_AddSpeedDistribution"" -> ""2324_mul"";
""2324_Send0ETH_Deposit"" -> ""2324_restricted"";
""2324_UnlockToken"" -> ""2324_PayToken"";
""2324_fallback"" -> ""2324_sub"";
""2324_UpdateUserData2"" -> ""2324_mul"";
}
"
0xed0577d074be9f605f0967fe6a8b3174d92e5e36.sol,DexBrokerage,"contract DexBrokerage is Ownable { using SafeMath for uint256; address public feeAccount; uint256 public makerFee; uint256 public takerFee; uint256 public inactivityReleasePeriod; mapping (address => bool) public approvedCurrencyTokens; mapping (address => uint256) public invalidOrder; mapping (address => mapping (address => uint256)) public tokens; mapping (address => bool) public admins; mapping (address => uint256) public lastActiveTransaction; mapping (bytes32 => uint256) public orderFills; mapping (bytes32 => bool) public withdrawn; event Trade(address tokenBuy, uint256 amountBuy, address tokenSell, uint256 amountSell, address maker, address taker); event Deposit(address token, address user, uint256 amount, uint256 balance); event Withdraw(address token, address user, uint256 amount, uint256 balance); event MakerFeeUpdated(uint256 oldFee, uint256 newFee); event TakerFeeUpdated(uint256 oldFee, uint256 newFee); modifier onlyAdmin { require(msg.sender == owner || admins[msg.sender]); _; }",0,"subgraph cluster_2113_DexBrokerage {
label=""DexBrokerage"";
""2113_trade"" [label=""trade""];
""2113_withdraw"" [label=""withdraw""];
""2113_invalidateOrdersBefore"" [label=""invalidateOrdersBefore""];
""2113_receiveTokenDeposit"" [label=""receiveTokenDeposit""];
""2113_setMakerFee"" [label=""setMakerFee""];
""2113_setAdmin"" [label=""setAdmin""];
""2113_approveCurrencyTokenAddress"" [label=""approveCurrencyTokenAddress""];
""2113_setInactivityReleasePeriod"" [label=""setInactivityReleasePeriod""];
""2113_balanceOf"" [label=""balanceOf""];
""2113_constructor"" [label=""constructor""];
""2113_setTakerFee"" [label=""setTakerFee""];
""2113_depositToken"" [label=""depositToken""];
""2113_adminWithdraw"" [label=""adminWithdraw""];
""2113_deposit"" [label=""deposit""];
""2113_setTakerFee"" -> ""2113_onlyAdmin"";
""2113_setAdmin"" -> ""2113_onlyOwner"";
""2113_adminWithdraw"" -> ""2113_onlyAdmin"";
""2113_invalidateOrdersBefore"" -> ""2113_onlyAdmin"";
""2113_setInactivityReleasePeriod"" -> ""2113_onlyAdmin"";
""2113_approveCurrencyTokenAddress"" -> ""2113_onlyAdmin"";
""2113_setMakerFee"" -> ""2113_onlyAdmin"";
""2113_depositToken"" -> ""2113_receiveTokenDeposit"";
""2113_trade"" -> ""2113_onlyAdmin"";
}
"
0x41e50bb0dfd21cd201b16a3d2f945920675a4408.sol,ERC20Impl,contract ERC20Impl is CustodianUpgradeable { struct PendingPrint { address receiver; uint256 value; },0,"subgraph cluster_1550_ERC20Impl {
label=""ERC20Impl"";
""1550_allowance"" [label=""allowance""];
""1550_enableSweep"" [label=""enableSweep""];
""1550_ERC20Impl"" [label=""ERC20Impl""];
""1550_requestPrint"" [label=""requestPrint""];
""1550_approveWithSender"" [label=""approveWithSender""];
""1550_confirmPrint"" [label=""confirmPrint""];
""1550_totalSupply"" [label=""totalSupply""];
""1550_burn"" [label=""burn""];
""1550_transferFromWithSender"" [label=""transferFromWithSender""];
""1550_decreaseApprovalWithSender"" [label=""decreaseApprovalWithSender""];
""1550_transferWithSender"" [label=""transferWithSender""];
""1550_balanceOf"" [label=""balanceOf""];
""1550_replaySweep"" [label=""replaySweep""];
""1550_increaseApprovalWithSender"" [label=""increaseApprovalWithSender""];
""1550_batchTransfer"" [label=""batchTransfer""];
""1550_transferWithSender"" -> ""1550_onlyProxy"";
""1550_enableSweep"" -> ""1550_onlySweeper"";
""1550_increaseApprovalWithSender"" -> ""1550_onlyProxy"";
""1550_ERC20Impl"" -> ""1550_CustodianUpgradeable"";
""1550_requestPrint"" -> ""1550_generateLockId"";
""1550_confirmPrint"" -> ""1550_onlyCustodian"";
""1550_approveWithSender"" -> ""1550_onlyProxy"";
""1550_decreaseApprovalWithSender"" -> ""1550_onlyProxy"";
""1550_replaySweep"" -> ""1550_onlySweeper"";
""1550_transferFromWithSender"" -> ""1550_onlyProxy"";
}
"
0x26b5bf54e03bb6d42c27ef4364f72a2bf1eff3d2.sol,CryptoBeauty,"contract CryptoBeauty is AccessControl, ERC721 { event Creation(uint256 tokenId, string name, address owner); event Purchase(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address owner, uint256 charityId); event PriceChange(uint256 tokenId, uint256 price); event Charity(uint256 charityId, address charity); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.005 ether; uint256 private increaseLimit1 = 0.5 ether; uint256 private increaseLimit2 = 50.0 ether; uint256 private increaseLimit3 = 100.0 ether; bool charityEnabled; struct Beauty { string name; uint256 price; uint256 maxPrice; }",0,"subgraph cluster_1100_CryptoBeauty {
label=""CryptoBeauty"";
""1100_balanceOf"" [label=""balanceOf""];
""1100_implementsERC721"" [label=""implementsERC721""];
""1100_CryptoBeauty"" [label=""CryptoBeauty""];
""1100_purchase"" [label=""purchase""];
""1100_newBeauty"" [label=""newBeauty""];
""1100_disableCharity"" [label=""disableCharity""];
""1100_ownerOf"" [label=""ownerOf""];
""1100_transferFrom"" [label=""transferFrom""];
""1100_withdrawAll"" [label=""withdrawAll""];
""1100_deleteCharity"" [label=""deleteCharity""];
""1100_name"" [label=""name""];
""1100_symbol"" [label=""symbol""];
""1100_totalSupply"" [label=""totalSupply""];
""1100_addCharity"" [label=""addCharity""];
""1100_getBeauty"" [label=""getBeauty""];
""1100_changePrice"" [label=""changePrice""];
""1100_priceOfBeauty"" [label=""priceOfBeauty""];
""1100_getCharity"" [label=""getCharity""];
""1100_tokensOfOwner"" [label=""tokensOfOwner""];
""1100_enableCharity"" [label=""enableCharity""];
""1100_createBeauty"" [label=""createBeauty""];
""1100_transfer"" [label=""transfer""];
""1100__transfer"" [label=""_transfer""];
""1100_approve"" [label=""approve""];
""1100_withdrawAmount"" [label=""withdrawAmount""];
""1100_purchase"" -> ""1100__transfer"";
""1100_createBeauty"" -> ""1100__transfer"";
""1100_transfer"" -> ""1100__transfer"";
""1100_transferFrom"" -> ""1100__transfer"";
""1100_withdrawAll"" -> ""1100_onlyAdmins"";
""1100_tokensOfOwner"" -> ""1100_balanceOf"";
""1100_newBeauty"" -> ""1100_createBeauty"";
""1100_enableCharity"" -> ""1100_onlyOwner"";
""1100_addCharity"" -> ""1100_onlyAdmins"";
""1100_disableCharity"" -> ""1100_onlyOwner"";
""1100_withdrawAmount"" -> ""1100_onlyAdmins"";
""1100_tokensOfOwner"" -> ""1100_totalSupply"";
""1100_newBeauty"" -> ""1100_onlyAdmins"";
""1100_createBeauty"" -> ""1100_onlyAdmins"";
""1100_deleteCharity"" -> ""1100_onlyAdmins"";
}
"
0x72b32b45cd1f59d3d6d2fbe9241055525497004a.sol,DailyDivs,contract DailyDivs { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_40_AcceptsDailyDivs {
label=""AcceptsDailyDivs"";
""40_AcceptsDailyDivs"" [label=""AcceptsDailyDivs""];
""40_tokenFallback"" [label=""tokenFallback""];
}
"
0x74d13225bc488397212e63dc38b497f6aa7a7a69.sol,CoinStacks,"contract CoinStacks { address private admin; uint256 private constant BOTTOM_LAYER_BET = 0.005 ether; uint16 private constant INITIAL_UNLOCKED_COLUMNS = 10; uint256 private maintenanceFeePercent; uint private NUM_COINS_TO_HIT_JACKPOT = 30; uint private MIN_AVG_HEIGHT = 5; uint256 private constant JACKPOT_PRIZE = 2 * BOTTOM_LAYER_BET; mapping(uint32 => address) public coordinatesToAddresses; uint32[] public coinCoordinates; uint256 public reserveForJackpot; mapping(address => uint256) public balances; event coinPlacedEvent ( uint32 _coord, address indexed _coinOwner ); function CoinStacks() public { admin = msg.sender; maintenanceFeePercent = 1; reserveForJackpot = 0; coordinatesToAddresses[uint32(0)] = admin; coinCoordinates.push(uint32(0)); coinPlacedEvent(uint32(0),admin); }",0,"subgraph cluster_393_CoinStacks {
label=""CoinStacks"";
""393_placeCoin"" [label=""placeCoin""];
""393_getAllCoins"" [label=""getAllCoins""];
""393_setFeePercent"" [label=""setFeePercent""];
""393_withdrawBalance"" [label=""withdrawBalance""];
""393_fallback"" [label=""fallback""];
""393_CoinStacks"" [label=""CoinStacks""];
""393_transferOwnership"" [label=""transferOwnership""];
""393_isThereACoinAtCoordinates"" [label=""isThereACoinAtCoordinates""];
""393_getNumCoins"" [label=""getNumCoins""];
""393_placeCoin"" -> ""393_isThereACoinAtCoordinates"";
}
"
0x0c12caccab54c41b2b9fb5e80546aa1b758fabc4.sol,LTC,contract LTC { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 8; uint public _totalSupply = 30011000000000000000; uint256 public RATE = 1; bool public isMinting = false; string public constant generatedBy = ; using SafeMath for uint256; address public owner; modifier onlyOwner() { if (msg.sender != owner) { throw; },0,"subgraph cluster_516_LTC {
label=""LTC"";
""516_constructor"" [label=""constructor""];
""516_approve"" [label=""approve""];
""516_transfer"" [label=""transfer""];
""516_allowance"" [label=""allowance""];
""516_endCrowdsale"" [label=""endCrowdsale""];
""516_changeCrowdsaleRate"" [label=""changeCrowdsaleRate""];
""516_fallback"" [label=""fallback""];
""516_totalSupply"" [label=""totalSupply""];
""516_transferFrom"" [label=""transferFrom""];
""516_createTokens"" [label=""createTokens""];
""516_burnTokens"" [label=""burnTokens""];
""516_balanceOf"" [label=""balanceOf""];
""516_burnTokens"" -> ""516_onlyOwner"";
""516_endCrowdsale"" -> ""516_onlyOwner"";
""516_fallback"" -> ""516_createTokens"";
""516_changeCrowdsaleRate"" -> ""516_onlyOwner"";
}
"
0x55c20c9c18142926c50e9f0292d636fa35ec5497.sol,FLEX,"contract FLEX is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 8; _totalSupply = 20000000000000000; balances[0x2beFc145fC3D038c61e7Ee70fD669E0C8dD8df39] = _totalSupply; emit Transfer(address(0), 0x2beFc145fC3D038c61e7Ee70fD669E0C8dD8df39, _totalSupply); }",0,"subgraph cluster_543_FLEX {
label=""FLEX"";
""543_transferFrom"" [label=""transferFrom""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transfer"" [label=""transfer""];
""543_approve"" [label=""approve""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_balanceOf"" [label=""balanceOf""];
""543_fallback"" [label=""fallback""];
""543_constructor"" [label=""constructor""];
""543_allowance"" [label=""allowance""];
""543_totalSupply"" [label=""totalSupply""];
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0x7fdea95f7d95afae2f0e13982d8c32acd6e5a154.sol,Propethy,contract Propethy { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 4; uint public _totalSupply = 100000000000000; uint256 public RATE = 1; bool public isMinting = true; bool public isExchangeListed = true; string public constant generatedBy = ; using SafeMath for uint256; address public owner; modifier onlyOwner() { if (msg.sender != owner) { throw; },0,"subgraph cluster_541_Propethy {
label=""Propethy"";
""541_allowance"" [label=""allowance""];
""541_burnTokens"" [label=""burnTokens""];
""541_endCrowdsale"" [label=""endCrowdsale""];
""541_changeCrowdsaleRate"" [label=""changeCrowdsaleRate""];
""541_transferFrom"" [label=""transferFrom""];
""541_fallback"" [label=""fallback""];
""541_approve"" [label=""approve""];
""541_transfer"" [label=""transfer""];
""541_balanceOf"" [label=""balanceOf""];
""541_constructor"" [label=""constructor""];
""541_createTokens"" [label=""createTokens""];
""541_totalSupply"" [label=""totalSupply""];
""541_burnTokens"" -> ""541_onlyOwner"";
""541_fallback"" -> ""541_createTokens"";
""541_changeCrowdsaleRate"" -> ""541_onlyOwner"";
""541_endCrowdsale"" -> ""541_onlyOwner"";
}
"
0x1e403f8ce554f2ffa6e5560d3db112dfc0ed24d2.sol,Controlled,contract Controlled is Ownable{ constructor() public { setExclude(msg.sender); },0,"subgraph cluster_885_Controlled {
label=""Controlled"";
""885_addLock"" [label=""addLock""];
""885_removeLock"" [label=""removeLock""];
""885_setExclude"" [label=""setExclude""];
""885_enableLockFlag"" [label=""enableLockFlag""];
""885_constructor"" [label=""constructor""];
""885_enableTransfer"" [label=""enableTransfer""];
""885_constructor"" -> ""885_setExclude"";
""885_addLock"" -> ""885_onlyOwner"";
""885_removeLock"" -> ""885_onlyOwner"";
""885_enableTransfer"" -> ""885_onlyOwner"";
""885_setExclude"" -> ""885_onlyOwner"";
""885_enableLockFlag"" -> ""885_onlyOwner"";
}
"
0x574fb6d9d090042a04d0d12a4e87217f8303a5ca.sol,SafeMath,"contract SafeMath { function safeMul(uint a, uint b) internal returns (uint) { uint c = a * b; assert(a == 0 || c / a == b); return c; }",0,"subgraph cluster_366_SafeMath {
label=""SafeMath"";
""366_min256"" [label=""min256""];
""366_max256"" [label=""max256""];
""366_safeDiv"" [label=""safeDiv""];
""366_safeSub"" [label=""safeSub""];
""366_max64"" [label=""max64""];
""366_safeAdd"" [label=""safeAdd""];
""366_safeMul"" [label=""safeMul""];
""366_min64"" [label=""min64""];
}
"
0x6ec2e2e2bd43d4deaa883533f80ea61682236073.sol,HACHIKO,"contract HACHIKO is Ownable { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); constructor() public { totalSupply = 10000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",0,"subgraph cluster_400_HACHIKO {
label=""HACHIKO"";
""400_approveAndCall"" [label=""approveAndCall""];
""400_constructor"" [label=""constructor""];
""400_burn"" [label=""burn""];
""400__transfer"" [label=""_transfer""];
""400_transferFrom"" [label=""transferFrom""];
""400_approve"" [label=""approve""];
""400_burnFrom"" [label=""burnFrom""];
""400_transfer"" [label=""transfer""];
""400_approveAndCall"" -> ""400_approve"";
""400_transfer"" -> ""400__transfer"";
""400_transferFrom"" -> ""400__transfer"";
}
"
0x5b6c4eb6e7f90b2ce53176c779c072d95f2535c2.sol,RBACERC223TokenFinalization,"contract RBACERC223TokenFinalization is ERC223Mixin, RBACMixin { event Finalize(); bool public finalized; modifier isFinalized() { require(finalized); _; }",0,"subgraph cluster_1300_RBACERC223TokenFinalization {
label=""RBACERC223TokenFinalization"";
""1300_transfer"" [label=""transfer""];
""1300_decreaseApproval"" [label=""decreaseApproval""];
""1300_increaseApproval"" [label=""increaseApproval""];
""1300_finalize"" [label=""finalize""];
""1300_transferFrom"" [label=""transferFrom""];
""1300_approve"" [label=""approve""];
""1300_decreaseApproval"" -> ""1300_decreaseApproval"";
""1300_increaseApproval"" -> ""1300_increaseApproval"";
""1300_approve"" -> ""1300_approve"";
""1300_finalize"" -> ""1300_notFinalized"";
""1300_decreaseApproval"" -> ""1300_isFinalized"";
""1300_finalize"" -> ""1300_onlyOwner"";
""1300_increaseApproval"" -> ""1300_isFinalized"";
""1300_transferFrom"" -> ""1300_isFinalized"";
""1300_transfer"" -> ""1300_isFinalized"";
""1300_approve"" -> ""1300_isFinalized"";
""1300_transferFrom"" -> ""1300_transferFrom"";
""1300_transfer"" -> ""1300_transfer"";
}
"
0x0381e7c68a576403988336e8c6ad25409f883138.sol,BMGame,contract BMGame is BMEvents { using SafeMath for *; using BMKeysCalcLong for uint256; address public Banker_Address; uint256 private rndExtra_ = 30; uint256 private rndGap_ = 30; uint256 constant private rndInit_ = 24 hours; uint256 constant private rndInc_ = 30 seconds; uint256 constant private rndMax_ = 24 hours; uint256 public airDropPot_; uint256 public airDropTracker_ = 0; uint256 public pID_ = 0; mapping(address => uint256) public pIDxAddr_; mapping(uint256 => BMDatasets.Player) public plyr_; mapping(uint256 => mapping(uint256 => BMDatasets.PlayerRounds)) public plyrRnds_; uint256 public rID_; mapping(uint256 => BMDatasets.Round) public round_; mapping(uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping(uint256 => BMDatasets.TeamFee) public fees_; mapping(uint256 => BMDatasets.PotSplit) public potSplit_; address public owner; constructor() public { owner = msg.sender; fees_[0] = BMDatasets.TeamFee(70); fees_[1] = BMDatasets.TeamFee(55); fees_[2] = BMDatasets.TeamFee(40); fees_[3] = BMDatasets.TeamFee(30); potSplit_[0] = BMDatasets.PotSplit(50); potSplit_[1] = BMDatasets.PotSplit(40); potSplit_[2] = BMDatasets.PotSplit(25); potSplit_[3] = BMDatasets.PotSplit(10); },0,"subgraph cluster_3398_BMGame {
label=""BMGame"";
""3398_activate"" [label=""activate""];
""3398_withdraw"" [label=""withdraw""];
""3398_getTimeLeft"" [label=""getTimeLeft""];
""3398_transferBanker"" [label=""transferBanker""];
""3398_endRound"" [label=""endRound""];
""3398_managePlayer"" [label=""managePlayer""];
""3398_distribute"" [label=""distribute""];
""3398_withdrawEarnings"" [label=""withdrawEarnings""];
""3398_reLoadKey"" [label=""reLoadKey""];
""3398_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""3398_getBuyPrice"" [label=""getBuyPrice""];
""3398_buyKey"" [label=""buyKey""];
""3398_updateMasks"" [label=""updateMasks""];
""3398_updateGenVault"" [label=""updateGenVault""];
""3398_determinePID"" [label=""determinePID""];
""3398_transferOwnership"" [label=""transferOwnership""];
""3398_getPlayerVaults"" [label=""getPlayerVaults""];
""3398_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""3398_airdrop"" [label=""airdrop""];
""3398_calcKeysReceived"" [label=""calcKeysReceived""];
""3398_endTx"" [label=""endTx""];
""3398_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""3398_reLoadCore"" [label=""reLoadCore""];
""3398_updateTimer"" [label=""updateTimer""];
""3398_buyCore"" [label=""buyCore""];
""3398_core"" [label=""core""];
""3398_iWantXKeys"" [label=""iWantXKeys""];
""3398_fallback"" [label=""fallback""];
""3398_constructor"" [label=""constructor""];
""3398_verifyTeam"" [label=""verifyTeam""];
""3398_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""3398_fallback"" -> ""3398_isWithinLimits"";
""3398_reLoadKey"" -> ""3398_isHuman"";
""3398_buyKey"" -> ""3398_isHuman"";
""3398_fallback"" -> ""3398_isActivated"";
""3398_core"" -> ""3398_managePlayer"";
""3398_fallback"" -> ""3398_buyCore"";
""3398_core"" -> ""3398_updateTimer"";
""3398_updateGenVault"" -> ""3398_calcUnMaskedEarnings"";
""3398_distribute"" -> ""3398_updateMasks"";
""3398_reLoadCore"" -> ""3398_withdrawEarnings"";
""3398_buyCore"" -> ""3398_core"";
""3398_buyKey"" -> ""3398_isActivated"";
""3398_getPlayerVaults"" -> ""3398_calcUnMaskedEarnings"";
""3398_buyKey"" -> ""3398_verifyTeam"";
""3398_buyKey"" -> ""3398_determinePID"";
""3398_getPlayerVaults"" -> ""3398_getPlayerVaultsHelper"";
""3398_core"" -> ""3398_airdrop"";
""3398_withdraw"" -> ""3398_endRound"";
""3398_reLoadKey"" -> ""3398_isWithinLimits"";
""3398_reLoadKey"" -> ""3398_isActivated"";
""3398_core"" -> ""3398_distribute"";
""3398_core"" -> ""3398_endTx"";
""3398_withdrawEarnings"" -> ""3398_updateGenVault"";
""3398_withdraw"" -> ""3398_isActivated"";
""3398_buyKey"" -> ""3398_isWithinLimits"";
""3398_fallback"" -> ""3398_determinePID"";
""3398_reLoadKey"" -> ""3398_verifyTeam"";
""3398_buyKey"" -> ""3398_buyCore"";
""3398_managePlayer"" -> ""3398_updateGenVault"";
""3398_buyCore"" -> ""3398_endRound"";
""3398_withdraw"" -> ""3398_withdrawEarnings"";
""3398_getPlayerInfoByAddress"" -> ""3398_calcUnMaskedEarnings"";
""3398_withdraw"" -> ""3398_isHuman"";
""3398_reLoadCore"" -> ""3398_endRound"";
""3398_reLoadCore"" -> ""3398_core"";
""3398_reLoadKey"" -> ""3398_reLoadCore"";
""3398_fallback"" -> ""3398_isHuman"";
}
"
0x26f4fb84b53dff7e148a8196f09bc492e55f2889.sol,Ownable,"contract Ownable { address public owner; event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); constructor() public { owner = msg.sender; }",0,"subgraph cluster_882_Ownable {
label=""Ownable"";
""882_constructor"" [label=""constructor""];
""882_transferOwnership"" [label=""transferOwnership""];
""882_transferOwnership"" -> ""882_onlyOwner"";
}
"
0xd52d09ce4c0118b227bd9496d973ed0bf98f8d5a.sol,Synthetix,"contract Synthetix is ExternStateToken { Synth[] public availableSynths; mapping(bytes4 => Synth) public synths; IFeePool public feePool; ISynthetixEscrow public escrow; ISynthetixEscrow public rewardEscrow; ExchangeRates public exchangeRates; SynthetixState public synthetixState; SupplySchedule public supplySchedule; bool private protectionCircuit = false; string constant TOKEN_NAME = ; string constant TOKEN_SYMBOL = ; uint8 constant DECIMALS = 18; bool public exchangeEnabled = true; constructor(address _proxy, TokenState _tokenState, SynthetixState _synthetixState, address _owner, ExchangeRates _exchangeRates, IFeePool _feePool, SupplySchedule _supplySchedule, ISynthetixEscrow _rewardEscrow, ISynthetixEscrow _escrow, uint _totalSupply ) ExternStateToken(_proxy, _tokenState, TOKEN_NAME, TOKEN_SYMBOL, _totalSupply, DECIMALS, _owner) public { synthetixState = _synthetixState; exchangeRates = _exchangeRates; feePool = _feePool; supplySchedule = _supplySchedule; rewardEscrow = _rewardEscrow; escrow = _escrow; }",0,"subgraph cluster_3497_SynthetixState {
label=""SynthetixState"";
""3497_setIssuanceRatio"" [label=""setIssuanceRatio""];
""3497_incrementTotalIssuerCount"" [label=""incrementTotalIssuerCount""];
""3497_lastDebtLedgerEntry"" [label=""lastDebtLedgerEntry""];
""3497_preferredCurrency"" [label=""preferredCurrency""];
""3497_appendDebtLedgerValue"" [label=""appendDebtLedgerValue""];
""3497_setPreferredCurrency"" [label=""setPreferredCurrency""];
""3497__addToDebtRegister"" [label=""_addToDebtRegister""];
""3497_issuanceData"" [label=""issuanceData""];
""3497_hasIssued"" [label=""hasIssued""];
""3497_setCurrentIssuanceData"" [label=""setCurrentIssuanceData""];
""3497_decrementTotalIssuerCount"" [label=""decrementTotalIssuerCount""];
""3497_issuanceRatio"" [label=""issuanceRatio""];
""3497_debtLedgerLength"" [label=""debtLedgerLength""];
""3497_constructor"" [label=""constructor""];
""3497_clearIssuanceData"" [label=""clearIssuanceData""];
""3497_importIssuerData"" [label=""importIssuerData""];
""3497_debtLedger"" [label=""debtLedger""];
""3497_importIssuerData"" -> ""3497__addToDebtRegister"";
""3497_importIssuerData"" -> ""3497_onlyOwner"";
""3497_appendDebtLedgerValue"" -> ""3497_onlyAssociatedContract"";
""3497_constructor"" -> ""3497_constructor"";
""3497_setCurrentIssuanceData"" -> ""3497_onlyAssociatedContract"";
""3497_incrementTotalIssuerCount"" -> ""3497_onlyAssociatedContract"";
""3497_setPreferredCurrency"" -> ""3497_onlyAssociatedContract"";
""3497_decrementTotalIssuerCount"" -> ""3497_onlyAssociatedContract"";
""3497_clearIssuanceData"" -> ""3497_onlyAssociatedContract"";
""3497_setIssuanceRatio"" -> ""3497_onlyOwner"";
""3497_importIssuerData"" -> ""3497_onlyDuringSetup"";
}
"
0x702392282255f8c0993dbbbb148d80d2ef6795b1.sol,PoWTF,contract PoWTF { modifier onlyBagholders { require(myTokens() > 0); _; },0,"subgraph cluster_1180_PoWTF {
label=""PoWTF"";
""1180_dividendsOf"" [label=""dividendsOf""];
""1180_myDividends"" [label=""myDividends""];
""1180_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1180_reinvest"" [label=""reinvest""];
""1180_transfer"" [label=""transfer""];
""1180_sellPrice"" [label=""sellPrice""];
""1180_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1180_sell"" [label=""sell""];
""1180_sqrt"" [label=""sqrt""];
""1180_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1180_purchaseTokens"" [label=""purchaseTokens""];
""1180_exit"" [label=""exit""];
""1180_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1180_balanceOf"" [label=""balanceOf""];
""1180_myTokens"" [label=""myTokens""];
""1180_withdraw"" [label=""withdraw""];
""1180_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1180_buyPrice"" [label=""buyPrice""];
""1180_buy"" [label=""buy""];
""1180_fallback"" [label=""fallback""];
""1180_totalSupply"" [label=""totalSupply""];
""1180_purchaseTokens"" -> ""1180_buyPrice"";
""1180_reinvest"" -> ""1180_myDividends"";
""1180_buy"" -> ""1180_purchaseTokens"";
""1180_purchaseTokens"" -> ""1180_ethereumToTokens_"";
""1180_sell"" -> ""1180_buyPrice"";
""1180_exit"" -> ""1180_sell"";
""1180_fallback"" -> ""1180_purchaseTokens"";
""1180_transfer"" -> ""1180_tokensToEthereum_"";
""1180_sell"" -> ""1180_tokensToEthereum_"";
""1180_sell"" -> ""1180_onlyBagholders"";
""1180_withdraw"" -> ""1180_myDividends"";
""1180_transfer"" -> ""1180_onlyBagholders"";
""1180_transfer"" -> ""1180_withdraw"";
""1180_buyPrice"" -> ""1180_tokensToEthereum_"";
""1180_withdraw"" -> ""1180_onlyStronghands"";
""1180_myDividends"" -> ""1180_dividendsOf"";
""1180_calculateTokensReceived"" -> ""1180_ethereumToTokens_"";
""1180_sellPrice"" -> ""1180_tokensToEthereum_"";
""1180_exit"" -> ""1180_withdraw"";
""1180_calculateEthereumReceived"" -> ""1180_tokensToEthereum_"";
""1180_myTokens"" -> ""1180_balanceOf"";
""1180_reinvest"" -> ""1180_onlyStronghands"";
""1180_ethereumToTokens_"" -> ""1180_sqrt"";
""1180_reinvest"" -> ""1180_purchaseTokens"";
""1180_transfer"" -> ""1180_myDividends"";
}
"
0x84f147cb25e1234c074567f0c17af45f5539601d.sol,PPJC,"contract PPJC is StandardToken { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant INITIAL_SUPPLY = 1000000 * (10 ** uint256(decimals)); constructor() public { _mint(msg.sender, INITIAL_SUPPLY); }",0,"subgraph cluster_685_PPJC {
label=""PPJC"";
""685_constructor"" [label=""constructor""];
""685_constructor"" -> ""685__mint"";
}
"
0xedeab579e57a7d66297d0a67302647bb109db7a8.sol,BreakTheBank,contract BreakTheBank { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1576_BreakTheBank {
label=""BreakTheBank"";
""1576_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1576_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1576_setSymbol"" [label=""setSymbol""];
""1576_withdraw"" [label=""withdraw""];
""1576_redistribution"" [label=""redistribution""];
""1576_transfer"" [label=""transfer""];
""1576_setName"" [label=""setName""];
""1576_sellPrice"" [label=""sellPrice""];
""1576_reinvest"" [label=""reinvest""];
""1576_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1576_fallback"" [label=""fallback""];
""1576_buyPrice"" [label=""buyPrice""];
""1576_sell"" [label=""sell""];
""1576_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1576_sqrt"" [label=""sqrt""];
""1576_constructor"" [label=""constructor""];
""1576_setStakingRequirement"" [label=""setStakingRequirement""];
""1576_balanceOf"" [label=""balanceOf""];
""1576_totalSupply"" [label=""totalSupply""];
""1576_setAdministrator"" [label=""setAdministrator""];
""1576_dividendsOf"" [label=""dividendsOf""];
""1576_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1576_myTokens"" [label=""myTokens""];
""1576_buy"" [label=""buy""];
""1576_disableWhitelist"" [label=""disableWhitelist""];
""1576_purchaseTokens"" [label=""purchaseTokens""];
""1576_myDividends"" [label=""myDividends""];
""1576_exit"" [label=""exit""];
""1576_calculateTokensReceived"" -> ""1576_ethereumToTokens_"";
""1576_withdraw"" -> ""1576_myDividends"";
""1576_exit"" -> ""1576_withdraw"";
""1576_buy"" -> ""1576_purchaseTokens"";
""1576_exit"" -> ""1576_sell"";
""1576_setName"" -> ""1576_onlyAdministrator"";
""1576_sellPrice"" -> ""1576_tokensToEthereum_"";
""1576_buyPrice"" -> ""1576_tokensToEthereum_"";
""1576_transfer"" -> ""1576_withdraw"";
""1576_withdraw"" -> ""1576_onlyStronghands"";
""1576_setAdministrator"" -> ""1576_onlyAdministrator"";
""1576_reinvest"" -> ""1576_purchaseTokens"";
""1576_purchaseTokens"" -> ""1576_limitBuy"";
""1576_transfer"" -> ""1576_myDividends"";
""1576_reinvest"" -> ""1576_myDividends"";
""1576_purchaseTokens"" -> ""1576_ethereumToTokens_"";
""1576_calculateEthereumReceived"" -> ""1576_tokensToEthereum_"";
""1576_setStakingRequirement"" -> ""1576_onlyAdministrator"";
""1576_disableWhitelist"" -> ""1576_onlyAdministrator"";
""1576_sell"" -> ""1576_tokensToEthereum_"";
""1576_myTokens"" -> ""1576_balanceOf"";
""1576_setSymbol"" -> ""1576_onlyAdministrator"";
""1576_fallback"" -> ""1576_purchaseTokens"";
""1576_transfer"" -> ""1576_onlyBagholders"";
""1576_myDividends"" -> ""1576_dividendsOf"";
""1576_sell"" -> ""1576_onlyBagholders"";
""1576_ethereumToTokens_"" -> ""1576_sqrt"";
""1576_reinvest"" -> ""1576_onlyStronghands"";
}
"
0x51fb3da8a67861361281ac56fe2ad8c3b4539ffa.sol,InsurChainCoin,"contract InsurChainCoin is BasicToken { string public name; string public symbol; uint8 public decimals; constructor() public { name = ; symbol = ; decimals = 18; totalSupply_ = 2e28; balances[msg.sender]=totalSupply_; emit Transfer(address(0), msg.sender, totalSupply_); }",0,"subgraph cluster_381_InsurChainCoin {
label=""InsurChainCoin"";
""381_constructor"" [label=""constructor""];
}
"
0x0ce95ef378059f38c5fa21e6d81a5895c0d9911b.sol,Game,contract Game { using GlobalTypes for GlobalTypes.Global; using MarketTypes for MarketTypes.MarketListing; using MissionParametersTypes for MissionParametersTypes.MissionParameters; using GameCommon for GameCommon.LaunchRocketStackFrame; address public m_Owner; AbstractDatabase public m_Database; AbstractGameHidden public m_GameHidden; bool public m_Paused; uint256 constant GlobalCategory = 0; uint256 constant RocketCategory = 1; uint256 constant OwnershipCategory = 2; uint256 constant InventoryCategory = 3; uint256 constant MarketCategory = 4; uint256 constant ProfitFundsCategory = 5; uint256 constant CompetitionFundsCategory = 6; uint256 constant MissionParametersCategory = 7; uint256 constant CompetitionScoresCategory = 8; uint256 constant WithdrawalFundsCategory = 9; uint256 constant ReferralCategory = 10; uint256 constant RocketStockCategory = 11; uint256 constant RocketStockInitializedCategory = 12; address constant NullAddress = 0; uint256 constant MaxCompetitionScores = 10; mapping(uint32 => RocketTypes.StockRocket) m_InitialRockets; modifier OnlyOwner() { require(msg.sender == m_Owner); _; },0,"subgraph cluster_4077_GameCommon {
label=""GameCommon"";
""4077_DeserializeRaw1"" [label=""DeserializeRaw1""];
""4077_DeserializeRaw2"" [label=""DeserializeRaw2""];
""4077_SerializeRaw3"" [label=""SerializeRaw3""];
""4077_DeserializeLaunchRocketStackFrame"" [label=""DeserializeLaunchRocketStackFrame""];
""4077_SerializeRaw1"" [label=""SerializeRaw1""];
""4077_SerializeRaw0"" [label=""SerializeRaw0""];
""4077_SerializeLaunchRocketStackFrame"" [label=""SerializeLaunchRocketStackFrame""];
""4077_DeserializeRaw0"" [label=""DeserializeRaw0""];
""4077_SerializeRaw2"" [label=""SerializeRaw2""];
""4077_DeserializeRaw3"" [label=""DeserializeRaw3""];
""4077_DeserializeLaunchRocketStackFrame"" -> ""4077_DeserializeRaw0"";
""4077_SerializeLaunchRocketStackFrame"" -> ""4077_SerializeRaw0"";
""4077_SerializeLaunchRocketStackFrame"" -> ""4077_SerializeRaw3"";
""4077_DeserializeLaunchRocketStackFrame"" -> ""4077_DeserializeRaw1"";
""4077_DeserializeLaunchRocketStackFrame"" -> ""4077_DeserializeRaw3"";
""4077_DeserializeLaunchRocketStackFrame"" -> ""4077_DeserializeRaw2"";
""4077_SerializeLaunchRocketStackFrame"" -> ""4077_SerializeRaw2"";
""4077_SerializeLaunchRocketStackFrame"" -> ""4077_SerializeRaw1"";
}
"
0x3664be8ec8a66e8dab9dfa48e5092f576edab746.sol,FoMo3Dshort,"contract FoMo3Dshort is modularShort { using SafeMath for *; using NameFilter for string; using F3DKeysCalcShort for uint256; PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0x454b6ee7e3847d51456b4146f7ae2664dbc35af4); address private admin = msg.sender; string constant public name = ; string constant public symbol = ; uint256 private rndExtra_ = 1 seconds; uint256 private rndGap_ = 1 seconds; uint256 constant private rndInit_ = 2400 hours; uint256 constant private rndInc_ = 10 seconds; uint256 constant private rndMax_ = 2400 hours; uint256 public airDropPot_; uint256 public airDropTracker_ = 0; uint256 public rID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => F3Ddatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => F3Ddatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => F3Ddatasets.Round) public round_; mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping (uint256 => F3Ddatasets.TeamFee) public fees_; mapping (uint256 => F3Ddatasets.PotSplit) public potSplit_; constructor() public { fees_[0] = F3Ddatasets.TeamFee(30,6); fees_[1] = F3Ddatasets.TeamFee(43,0); fees_[2] = F3Ddatasets.TeamFee(56,10); fees_[3] = F3Ddatasets.TeamFee(43,8); potSplit_[0] = F3Ddatasets.PotSplit(15,10); potSplit_[1] = F3Ddatasets.PotSplit(25,0); potSplit_[2] = F3Ddatasets.PotSplit(20,20); potSplit_[3] = F3Ddatasets.PotSplit(30,10); }",0,"subgraph cluster_4126_FoMo3Dshort {
label=""FoMo3Dshort"";
""4126_calcKeysReceived"" [label=""calcKeysReceived""];
""4126_getPlayerVaults"" [label=""getPlayerVaults""];
""4126_reLoadXaddr"" [label=""reLoadXaddr""];
""4126_registerNameXaddr"" [label=""registerNameXaddr""];
""4126_getTimeLeft"" [label=""getTimeLeft""];
""4126_airdrop"" [label=""airdrop""];
""4126_distributeExternal"" [label=""distributeExternal""];
""4126_constructor"" [label=""constructor""];
""4126_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""4126_buyCore"" [label=""buyCore""];
""4126_potSwap"" [label=""potSwap""];
""4126_verifyTeam"" [label=""verifyTeam""];
""4126_determinePID"" [label=""determinePID""];
""4126_reLoadCore"" [label=""reLoadCore""];
""4126_fallback"" [label=""fallback""];
""4126_endTx"" [label=""endTx""];
""4126_reLoadXid"" [label=""reLoadXid""];
""4126_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""4126_endRound"" [label=""endRound""];
""4126_iWantXKeys"" [label=""iWantXKeys""];
""4126_updateMasks"" [label=""updateMasks""];
""4126_buyXaddr"" [label=""buyXaddr""];
""4126_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""4126_getBuyPrice"" [label=""getBuyPrice""];
""4126_withdraw"" [label=""withdraw""];
""4126_registerNameXname"" [label=""registerNameXname""];
""4126_receivePlayerNameList"" [label=""receivePlayerNameList""];
""4126_registerNameXID"" [label=""registerNameXID""];
""4126_withdrawEarnings"" [label=""withdrawEarnings""];
""4126_buyXid"" [label=""buyXid""];
""4126_core"" [label=""core""];
""4126_updateTimer"" [label=""updateTimer""];
""4126_activate"" [label=""activate""];
""4126_updateGenVault"" [label=""updateGenVault""];
""4126_distributeInternal"" [label=""distributeInternal""];
""4126_buyXname"" [label=""buyXname""];
""4126_receivePlayerInfo"" [label=""receivePlayerInfo""];
""4126_managePlayer"" [label=""managePlayer""];
""4126_reLoadXname"" [label=""reLoadXname""];
""4126_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""4126_core"" -> ""4126_endTx"";
""4126_reLoadXname"" -> ""4126_isWithinLimits"";
""4126_fallback"" -> ""4126_determinePID"";
""4126_buyXaddr"" -> ""4126_determinePID"";
""4126_buyCore"" -> ""4126_endRound"";
""4126_fallback"" -> ""4126_buyCore"";
""4126_buyXid"" -> ""4126_isHuman"";
""4126_withdraw"" -> ""4126_isActivated"";
""4126_fallback"" -> ""4126_isWithinLimits"";
""4126_reLoadXaddr"" -> ""4126_reLoadCore"";
""4126_buyXname"" -> ""4126_isWithinLimits"";
""4126_reLoadXid"" -> ""4126_isActivated"";
""4126_buyXid"" -> ""4126_determinePID"";
""4126_registerNameXaddr"" -> ""4126_isHuman"";
""4126_core"" -> ""4126_distributeInternal"";
""4126_getPlayerVaults"" -> ""4126_getPlayerVaultsHelper"";
""4126_registerNameXID"" -> ""4126_isHuman"";
""4126_buyXaddr"" -> ""4126_isWithinLimits"";
""4126_withdraw"" -> ""4126_withdrawEarnings"";
""4126_core"" -> ""4126_airdrop"";
""4126_reLoadXid"" -> ""4126_isWithinLimits"";
""4126_reLoadXid"" -> ""4126_reLoadCore"";
""4126_getPlayerInfoByAddress"" -> ""4126_calcUnMaskedEarnings"";
""4126_withdraw"" -> ""4126_isHuman"";
""4126_reLoadXid"" -> ""4126_isHuman"";
""4126_reLoadXaddr"" -> ""4126_isActivated"";
""4126_buyXaddr"" -> ""4126_isActivated"";
""4126_updateGenVault"" -> ""4126_calcUnMaskedEarnings"";
""4126_core"" -> ""4126_managePlayer"";
""4126_buyXaddr"" -> ""4126_isHuman"";
""4126_buyXaddr"" -> ""4126_verifyTeam"";
""4126_reLoadCore"" -> ""4126_withdrawEarnings"";
""4126_buyXname"" -> ""4126_isActivated"";
""4126_reLoadXid"" -> ""4126_verifyTeam"";
""4126_distributeInternal"" -> ""4126_updateMasks"";
""4126_buyXid"" -> ""4126_isWithinLimits"";
""4126_core"" -> ""4126_updateTimer"";
""4126_withdrawEarnings"" -> ""4126_updateGenVault"";
""4126_reLoadXaddr"" -> ""4126_isHuman"";
""4126_reLoadXaddr"" -> ""4126_isWithinLimits"";
""4126_reLoadXname"" -> ""4126_verifyTeam"";
""4126_reLoadXname"" -> ""4126_isActivated"";
""4126_fallback"" -> ""4126_isHuman"";
""4126_fallback"" -> ""4126_isActivated"";
""4126_buyXname"" -> ""4126_determinePID"";
""4126_buyXname"" -> ""4126_buyCore"";
""4126_buyXid"" -> ""4126_isActivated"";
""4126_buyXid"" -> ""4126_buyCore"";
""4126_buyXname"" -> ""4126_verifyTeam"";
""4126_getPlayerVaults"" -> ""4126_calcUnMaskedEarnings"";
""4126_buyCore"" -> ""4126_core"";
""4126_reLoadXname"" -> ""4126_isHuman"";
""4126_buyXname"" -> ""4126_isHuman"";
""4126_reLoadXaddr"" -> ""4126_verifyTeam"";
""4126_withdraw"" -> ""4126_endRound"";
""4126_reLoadCore"" -> ""4126_endRound"";
""4126_managePlayer"" -> ""4126_updateGenVault"";
""4126_registerNameXname"" -> ""4126_isHuman"";
""4126_buyXaddr"" -> ""4126_buyCore"";
""4126_buyXid"" -> ""4126_verifyTeam"";
""4126_reLoadCore"" -> ""4126_core"";
""4126_reLoadXname"" -> ""4126_reLoadCore"";
""4126_core"" -> ""4126_distributeExternal"";
}
"
0xa5c9ecf54790334b73e5dfa1ff5668eb425dc474.sol,SecretRegistry,"contract SecretRegistry { string constant public contract_version = ; mapping(bytes32 => uint256) private secrethash_to_block; event SecretRevealed(bytes32 indexed secrethash, bytes32 secret); function registerSecret(bytes32 secret) public returns (bool) { bytes32 secrethash = keccak256(abi.encodePacked(secret)); if (secret == bytes32(0x0) || secrethash_to_block[secrethash] > 0) { return false; }",0,"subgraph cluster_271_SecretRegistry {
label=""SecretRegistry"";
""271_getSecretRevealBlockHeight"" [label=""getSecretRevealBlockHeight""];
""271_registerSecretBatch"" [label=""registerSecretBatch""];
""271_registerSecret"" [label=""registerSecret""];
""271_registerSecretBatch"" -> ""271_registerSecret"";
}
"
0x5162a13e4b2adf708878c71f2cad69525770601f.sol,AcuteAngleCoin,contract AcuteAngleCoin is ERC20Interface { uint256 public constant decimals = 5; string public constant symbol = ; string public constant name = ; bool public _selling = true; uint256 public _totalSupply = 10 ** 14; uint256 public _originalBuyPrice = 39 * 10**7; address public owner; mapping(address => uint256) private balances; mapping(address => mapping (address => uint256)) private allowed; mapping(address => bool) private approvedInvestorList; mapping(address => uint256) private deposit; uint256 public totalTokenSold = 0; bool public tradable = false; modifier onlyOwner() { require(msg.sender == owner); _; },0,"subgraph cluster_593_AcuteAngleCoin {
label=""AcuteAngleCoin"";
""593_buyAAC"" [label=""buyAAC""];
""593_fallback"" [label=""fallback""];
""593_totalSupply"" [label=""totalSupply""];
""593_turnOnTradable"" [label=""turnOnTradable""];
""593_transfer"" [label=""transfer""];
""593_transferFrom"" [label=""transferFrom""];
""593_AAC"" [label=""AAC""];
""593_addInvestorList"" [label=""addInvestorList""];
""593_turnOnSale"" [label=""turnOnSale""];
""593_getDeposit"" [label=""getDeposit""];
""593_turnOffSale"" [label=""turnOffSale""];
""593_allowance"" [label=""allowance""];
""593_isApprovedInvestor"" [label=""isApprovedInvestor""];
""593_withdraw"" [label=""withdraw""];
""593_approve"" [label=""approve""];
""593_balanceOf"" [label=""balanceOf""];
""593_removeInvestorList"" [label=""removeInvestorList""];
""593_buyAAC"" -> ""593_onSale"";
""593_turnOffSale"" -> ""593_onlyOwner"";
""593_turnOnSale"" -> ""593_onlyOwner"";
""593_fallback"" -> ""593_buyAAC"";
""593_transfer"" -> ""593_isTradable"";
""593_buyAAC"" -> ""593_validInvestor"";
""593_removeInvestorList"" -> ""593_onlyOwner"";
""593_addInvestorList"" -> ""593_onlyOwner"";
""593_withdraw"" -> ""593_onlyOwner"";
""593_turnOnTradable"" -> ""593_onlyOwner"";
""593_transferFrom"" -> ""593_isTradable"";
""593_approve"" -> ""593_isTradable"";
}
"
0x2828d5ae572a3e87febad75323af24ec0a4f2eef.sol,CryptoPlanets,contract CryptoPlanets { address ceoAddress = 0x8e6DBF31540d2299a674b8240596ae85ebD21314; modifier onlyCeo() { require (msg.sender == ceoAddress); _; },0,"subgraph cluster_476_CryptoPlanets {
label=""CryptoPlanets"";
""476_purchaseDefense"" [label=""purchaseDefense""];
""476_purchasePlanet"" [label=""purchasePlanet""];
""476_StealResources"" [label=""StealResources""];
""476_getPlanet"" [label=""getPlanet""];
""476_createPlanet"" [label=""createPlanet""];
""476_getUserDetails"" [label=""getUserDetails""];
""476_InitiatePlanets"" [label=""InitiatePlanets""];
""476_purchaseAttack"" [label=""purchaseAttack""];
""476_InitiatePlanets"" -> ""476_onlyCeo"";
""476_InitiatePlanets"" -> ""476_createPlanet"";
""476_createPlanet"" -> ""476_onlyCeo"";
}
"
0x3a9c0090e0d8d26f5eb83cacbc6361c2d305a500.sol,Crowdsale,"contract Crowdsale is Ownable { using SafeMath for uint256; uint softcap; uint256 hardcapPreICO; uint256 hardcapMainSale; TRND public token; mapping(address => uint) public balances; uint256 public startIcoPreICO; uint256 public startIcoMainSale; uint256 public endIcoPreICO; uint256 public endIcoMainSale; uint256 public totalSoldTokens; uint256 minPurchasePreICO; uint256 public rateIcoPreICO; uint256 public rateIcoMainSale; uint256 public unconfirmedSum; mapping(address => uint) public unconfirmedSumAddr; address public wallet; event TokenProcurement(address indexed contributor, address indexed beneficiary, uint256 value, uint256 amount); function Crowdsale() public { token = createTokenContract(); softcap = 20000000 * 1 ether; hardcapPreICO = 5000000 * 1 ether; hardcapMainSale = 75000000 * 1 ether; minPurchasePreICO = 100000000000000000; startIcoPreICO = 1527843600; endIcoPreICO = 1530435600; startIcoMainSale = 1530435600; endIcoMainSale = 1533891600; rateIcoPreICO = 5600; rateIcoMainSale = 2800; wallet = 0xca5EdAE100d4D262DC3Ec2dE96FD9943Ea659d04; }",0,"subgraph cluster_1928_Crowdsale {
label=""Crowdsale"";
""1928_SetPermissionsList"" [label=""SetPermissionsList""];
""1928_setRateIcoPreICO"" [label=""setRateIcoPreICO""];
""1928_GetPermissionsList"" [label=""GetPermissionsList""];
""1928_refund"" [label=""refund""];
""1928_procureTokens"" [label=""procureTokens""];
""1928_setRateIcoMainSale"" [label=""setRateIcoMainSale""];
""1928_refundUnconfirmed"" [label=""refundUnconfirmed""];
""1928_transferEthToMultisig"" [label=""transferEthToMultisig""];
""1928_Crowdsale"" [label=""Crowdsale""];
""1928_unpause"" [label=""unpause""];
""1928_createTokenContract"" [label=""createTokenContract""];
""1928_pause"" [label=""pause""];
""1928_fallback"" [label=""fallback""];
""1928_getRateIcoWithBonus"" [label=""getRateIcoWithBonus""];
""1928_setStartIcoPreICO"" [label=""setStartIcoPreICO""];
""1928_transferEthToMultisig"" -> ""1928_onlyOwner"";
""1928_GetPermissionsList"" -> ""1928_onlyOwner"";
""1928_fallback"" -> ""1928_procureTokens"";
""1928_setRateIcoMainSale"" -> ""1928_onlyOwner"";
""1928_Crowdsale"" -> ""1928_createTokenContract"";
""1928_setRateIcoPreICO"" -> ""1928_onlyOwner"";
""1928_unpause"" -> ""1928_onlyOwner"";
""1928_procureTokens"" -> ""1928_getRateIcoWithBonus"";
""1928_pause"" -> ""1928_onlyOwner"";
""1928_setStartIcoPreICO"" -> ""1928_onlyOwner"";
""1928_SetPermissionsList"" -> ""1928_onlyOwner"";
}
"
0x6f5e7f39f96b882490643228a725a179f04feba5.sol,PreSale,contract PreSale { uint256 public maxMintable; uint256 public totalMinted; uint256 public exchangeRate; bool public isFunding; ERC20 public Token; address public ETHWallet; bool private configSet; address public creator; function PreSale(address _wallet) { maxMintable = 30000000000000000000000000; ETHWallet = _wallet; creator = msg.sender; isFunding = false; exchangeRate = 3125; },0,"subgraph cluster_274_PreSale {
label=""PreSale"";
""274_setup"" [label=""setup""];
""274_closeSale"" [label=""closeSale""];
""274_fallback"" [label=""fallback""];
""274_contribute"" [label=""contribute""];
""274_PreSale"" [label=""PreSale""];
""274_updateRate"" [label=""updateRate""];
}
"
0x331655585e8893961f8e8e427f5f8dedf6e7f0af.sol,SDT_token,"contract SDT_token { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function SDTToken( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_361_SDT_token {
label=""SDT_token"";
""361_approve"" [label=""approve""];
""361_approveAndCall"" [label=""approveAndCall""];
""361__transfer"" [label=""_transfer""];
""361_transfer"" [label=""transfer""];
""361_burn"" [label=""burn""];
""361_SDTToken"" [label=""SDTToken""];
""361_burnFrom"" [label=""burnFrom""];
""361_transferFrom"" [label=""transferFrom""];
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0xeb5518602c22154970fd43447939b1dfef053b9e.sol,CommonBsPresale,"contract CommonBsPresale is SafeMath, Ownable, Pausable { enum Currency { BTC, LTC, ZEC, DASH, WAVES, USD, EUR }",0,"subgraph cluster_1951_CommonBsPresale {
label=""CommonBsPresale"";
""1951__tokensByTx"" [label=""_tokensByTx""];
""1951_setNotifier"" [label=""setNotifier""];
""1951_setBeneficiary"" [label=""setBeneficiary""];
""1951_btcId"" [label=""btcId""];
""1951_finalize"" [label=""finalize""];
""1951_tokensByLtcTx"" [label=""tokensByLtcTx""];
""1951_tokensByWavesTx"" [label=""tokensByWavesTx""];
""1951_ltcId"" [label=""ltcId""];
""1951_zecId"" [label=""zecId""];
""1951_fallback"" [label=""fallback""];
""1951_CommonBsPresale"" [label=""CommonBsPresale""];
""1951_tokensByUsdTx"" [label=""tokensByUsdTx""];
""1951_eurId"" [label=""eurId""];
""1951_usdId"" [label=""usdId""];
""1951_weiToTokensAtTime"" [label=""weiToTokensAtTime""];
""1951_externalSales"" [label=""externalSales""];
""1951_sellTokensForEth"" [label=""sellTokensForEth""];
""1951__externalSaleSha3"" [label=""_externalSaleSha3""];
""1951_isSaleOn"" [label=""isSaleOn""];
""1951_tokensByEurTx"" [label=""tokensByEurTx""];
""1951_tokensByBtcTx"" [label=""tokensByBtcTx""];
""1951_setSaleEnabled"" [label=""setSaleEnabled""];
""1951_dashId"" [label=""dashId""];
""1951_totalSales"" [label=""totalSales""];
""1951_isMaxCapReached"" [label=""isMaxCapReached""];
""1951_tokensByTx"" [label=""tokensByTx""];
""1951_weiToTokens"" [label=""weiToTokens""];
""1951_isFinalized"" [label=""isFinalized""];
""1951_wavesId"" [label=""wavesId""];
""1951_tokensByZecTx"" [label=""tokensByZecTx""];
""1951_isSaleOver"" [label=""isSaleOver""];
""1951_getNow"" [label=""getNow""];
""1951_tokensByDashTx"" [label=""tokensByDashTx""];
""1951_weiToTokens"" -> ""1951_weiToTokensAtTime"";
""1951_finalize"" -> ""1951_isMaxCapReached"";
""1951_setBeneficiary"" -> ""1951_onlyOwner"";
""1951_sellTokensForEth"" -> ""1951_weiToTokens"";
""1951_finalize"" -> ""1951_onlyOwner"";
""1951_setSaleEnabled"" -> ""1951_onlyOwner"";
""1951_isSaleOver"" -> ""1951_getNow"";
""1951_finalize"" -> ""1951_getNow"";
""1951_finalize"" -> ""1951_isSaleOver"";
""1951_weiToTokens"" -> ""1951_getNow"";
""1951_tokensByUsdTx"" -> ""1951__tokensByTx"";
""1951__externalSaleSha3"" -> ""1951_safeAdd"";
""1951_weiToTokensAtTime"" -> ""1951_safeMul"";
""1951_externalSales"" -> ""1951_ifNotPaused"";
""1951_sellTokensForEth"" -> ""1951_ifNotPaused"";
""1951_setNotifier"" -> ""1951_onlyOwner"";
""1951_externalSales"" -> ""1951_canNotify"";
""1951_tokensByWavesTx"" -> ""1951__tokensByTx"";
""1951_isSaleOn"" -> ""1951_getNow"";
""1951_tokensByZecTx"" -> ""1951__tokensByTx"";
""1951_tokensByEurTx"" -> ""1951__tokensByTx"";
""1951_tokensByLtcTx"" -> ""1951__tokensByTx"";
""1951_tokensByBtcTx"" -> ""1951__tokensByTx"";
""1951_fallback"" -> ""1951_sellTokensForEth"";
""1951_totalSales"" -> ""1951_safeAdd"";
""1951_tokensByDashTx"" -> ""1951__tokensByTx"";
""1951_externalSales"" -> ""1951__externalSaleSha3"";
""1951_sellTokensForEth"" -> ""1951_respectTimeFrame"";
""1951_sellTokensForEth"" -> ""1951_safeAdd"";
""1951__tokensByTx"" -> ""1951_tokensByTx"";
}
"
0x047a68fc8aaa9109346c726c696986f4b5792658.sol,BitrngDice,contract BitrngDice { address public owner; address private nextOwner; address public secretSigner; uint constant MIN_AMOUNT = 0.01 ether; uint constant MAX_AMOUNT_BIG_SMALL = 1 ether; uint constant MAX_AMOUNT_SAME = 0.05 ether; uint constant MAX_AMOUNT_NUMBER = 0.1 ether; uint constant BET_EXPIRATION_BLOCKS = 250; uint8 constant MAX_BET = 5; uint8 constant BET_MASK_COUNT = 22; uint24 constant BET_BIG = uint24(1 << 21); uint24 constant BET_SMALL = uint24(1 << 20); uint24 constant BET_SAME_1 = uint24(1 << 19); uint24 constant BET_SAME_2 = uint24(1 << 18); uint24 constant BET_SAME_3 = uint24(1 << 17); uint24 constant BET_SAME_4 = uint24(1 << 16); uint24 constant BET_SAME_5 = uint24(1 << 15); uint24 constant BET_SAME_6 = uint24(1 << 14); uint24 constant BET_4 = uint24(1 << 13); uint24 constant BET_5 = uint24(1 << 12); uint24 constant BET_6 = uint24(1 << 11); uint24 constant BET_7 = uint24(1 << 10); uint24 constant BET_8 = uint24(1 << 9); uint24 constant BET_9 = uint24(1 << 8); uint24 constant BET_10 = uint24(1 << 7); uint24 constant BET_11 = uint24(1 << 6); uint24 constant BET_12 = uint24(1 << 5); uint24 constant BET_13 = uint24(1 << 4); uint24 constant BET_14 = uint24(1 << 3); uint24 constant BET_15 = uint24(1 << 2); uint24 constant BET_16 = uint24(1 << 1); uint24 constant BET_17 = uint24(1); uint public lockedInBets; bool public enabled = true; address constant DUMMY_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; struct Game{ address gambler; uint40 placeBlockNumber; uint bet1Amount; uint bet2Amount; uint bet3Amount; uint bet4Amount; uint bet5Amount; uint24 mask; },0,"subgraph cluster_1927_BitrngDice {
label=""BitrngDice"";
""1927__max"" [label=""_max""];
""1927_acceptNextOwner"" [label=""acceptNextOwner""];
""1927__getWinAmount"" [label=""_getWinAmount""];
""1927_settleGame"" [label=""settleGame""];
""1927_withdrawFunds"" [label=""withdrawFunds""];
""1927__lockOrUnlockAmount"" [label=""_lockOrUnlockAmount""];
""1927_fallback"" [label=""fallback""];
""1927_refundBet"" [label=""refundBet""];
""1927_setSecretSigner"" [label=""setSecretSigner""];
""1927__nextAmount"" [label=""_nextAmount""];
""1927_enable"" [label=""enable""];
""1927_clearStorage"" [label=""clearStorage""];
""1927_placeGame"" [label=""placeGame""];
""1927_approveNextOwner"" [label=""approveNextOwner""];
""1927_clearProcessedBet"" [label=""clearProcessedBet""];
""1927_sendFunds"" [label=""sendFunds""];
""1927_kill"" [label=""kill""];
""1927_constructor"" [label=""constructor""];
""1927__assertAmount"" [label=""_assertAmount""];
""1927_clearStorage"" -> ""1927_clearProcessedBet"";
""1927_kill"" -> ""1927_onlyOwner"";
""1927_withdrawFunds"" -> ""1927_sendFunds"";
""1927_settleGame"" -> ""1927_sendFunds"";
""1927__lockOrUnlockAmount"" -> ""1927__assertAmount"";
""1927_refundBet"" -> ""1927__lockOrUnlockAmount"";
""1927__assertAmount"" -> ""1927__max"";
""1927_refundBet"" -> ""1927_sendFunds"";
""1927_settleGame"" -> ""1927_clearProcessedBet"";
""1927_approveNextOwner"" -> ""1927_onlyOwner"";
""1927_enable"" -> ""1927_onlyOwner"";
""1927_setSecretSigner"" -> ""1927_onlyOwner"";
""1927__getWinAmount"" -> ""1927__nextAmount"";
""1927_withdrawFunds"" -> ""1927_onlyOwner"";
""1927_settleGame"" -> ""1927__lockOrUnlockAmount"";
""1927_settleGame"" -> ""1927__getWinAmount"";
""1927_placeGame"" -> ""1927__lockOrUnlockAmount"";
}
"
0x174bb5d84b78e9e2248e7aa2c789aeba82f72f68.sol,LuckyTree,"contract LuckyTree is Owned, SafeMath{ uint public leafPrice; uint public gameStart; uint public gameDuration; uint public tokenLockDuration; uint public totalParticipationAmount; uint public totalLockedAmount; uint public numberOfLeafs; uint public participantIndex; bool public fundsTransfered; address public winner; mapping(uint => address) public participants; mapping(uint => uint) public participationAmount; mapping(address => bool) public hasParticipated; mapping(address => bool) public hasWithdrawn; mapping(address => uint) public participantIndexes; mapping(uint => address) public leafOwners; event GameWinner(address winner); event GameEnded(uint block); event GameStarted(uint block); event GameFailed(uint block); event GameLocked(uint block); event GameUnlocked(uint block); enum state{ pending, running, paused, finished, closed, claimed }",0,"subgraph cluster_1043_LuckyTree {
label=""LuckyTree"";
""1043_random"" [label=""random""];
""1043_lockFunds"" [label=""lockFunds""];
""1043_processTransaction"" [label=""processTransaction""];
""1043_closeGame"" [label=""closeGame""];
""1043_pickWinner"" [label=""pickWinner""];
""1043_manuallyProcessTransaction"" [label=""manuallyProcessTransaction""];
""1043_unlockFunds"" [label=""unlockFunds""];
""1043_setCreditGameAddress"" [label=""setCreditGameAddress""];
""1043_checkInternalBalance"" [label=""checkInternalBalance""];
""1043_salvageTokensFromContract"" [label=""salvageTokensFromContract""];
""1043_setTokenAddress"" [label=""setTokenAddress""];
""1043_receiveApproval"" [label=""receiveApproval""];
""1043_LuckyTree"" [label=""LuckyTree""];
""1043_getVariablesForDapp"" [label=""getVariablesForDapp""];
""1043_manualLockFunds"" [label=""manualLockFunds""];
""1043_killContract"" [label=""killContract""];
""1043_salvageTokensFromContract"" -> ""1043_onlyOwner"";
""1043_manuallyProcessTransaction"" -> ""1043_onlyOwner"";
""1043_manualLockFunds"" -> ""1043_onlyOwner"";
""1043_setCreditGameAddress"" -> ""1043_onlyOwner"";
""1043_setTokenAddress"" -> ""1043_onlyOwner"";
""1043_pickWinner"" -> ""1043_random"";
""1043_closeGame"" -> ""1043_onlyOwner"";
""1043_killContract"" -> ""1043_onlyOwner"";
""1043_receiveApproval"" -> ""1043_processTransaction"";
""1043_manualLockFunds"" -> ""1043_pickWinner"";
""1043_pickWinner"" -> ""1043_lockFunds"";
""1043_processTransaction"" -> ""1043_pickWinner"";
""1043_manuallyProcessTransaction"" -> ""1043_processTransaction"";
}
"
0x2706165b57e8d91f0282a4fa919b810e8103ab86.sol,Babylon,"contract Babylon is Pausable { using SafeMath for uint256; using SafeERC20 for BabyloniaToken; event TokenExchangeCreated(address indexed recipient, uint amount, uint releasedAt); event TokenExchangeReleased(address indexed recipient); BabyloniaToken private babyloniaToken; StandardToken private helbizToken; EthPriceOracleI private ethPriceOracle; uint public INITIAL_CIRCULATION_BBY = 80000000; uint public MIN_EXCHANGE_BBY = SafeMath.mul(1000, 10**18); uint public exchangeRate; uint8 public usdCentsExchangeRate; uint32 public exchangeLockTime; uint public babyloniaTokensLocked; bool public ethExchangeEnabled; struct TokenExchange { address recipient; uint amountHBZ; uint amountBBY; uint amountWei; uint createdAt; uint releasedAt; }",0,"subgraph cluster_1651_Babylon {
label=""Babylon"";
""1651_getActiveTokenExchangeById"" [label=""getActiveTokenExchangeById""];
""1651_constructor"" [label=""constructor""];
""1651_setUSDCentsExchangeRate"" [label=""setUSDCentsExchangeRate""];
""1651_fallback"" [label=""fallback""];
""1651_claimTokens"" [label=""claimTokens""];
""1651_withdrawETH"" [label=""withdrawETH""];
""1651_burnRemainderBBY"" [label=""burnRemainderBBY""];
""1651__createExchangeRecord"" [label=""_createExchangeRecord""];
""1651_getTokenAddress"" [label=""getTokenAddress""];
""1651_withdrawBBY"" [label=""withdrawBBY""];
""1651_setExchangeRate"" [label=""setExchangeRate""];
""1651_getActiveTokenExchangeId"" [label=""getActiveTokenExchangeId""];
""1651_getTokenExchangesCount"" [label=""getTokenExchangesCount""];
""1651_withdrawHBZ"" [label=""withdrawHBZ""];
""1651_setExchangeLockTime"" [label=""setExchangeLockTime""];
""1651_setEthExchangeEnabled"" [label=""setEthExchangeEnabled""];
""1651_exchangeEth"" [label=""exchangeEth""];
""1651_exchangeTokens"" [label=""exchangeTokens""];
""1651_claimTokens"" -> ""1651_whenNotPaused"";
""1651_withdrawBBY"" -> ""1651_onlyOwner"";
""1651_getActiveTokenExchangeId"" -> ""1651_activeTokenExchange"";
""1651_setExchangeRate"" -> ""1651_onlyOwner"";
""1651_getTokenExchangesCount"" -> ""1651_onlyOwner"";
""1651_burnRemainderBBY"" -> ""1651_onlyOwner"";
""1651_withdrawETH"" -> ""1651_onlyOwner"";
""1651_exchangeEth"" -> ""1651__createExchangeRecord"";
""1651_setUSDCentsExchangeRate"" -> ""1651_onlyOwner"";
""1651_withdrawHBZ"" -> ""1651_onlyOwner"";
""1651_exchangeEth"" -> ""1651_whenNotPaused"";
""1651_exchangeTokens"" -> ""1651_whenNotPaused"";
""1651_exchangeEth"" -> ""1651_whenEthEnabled"";
""1651_exchangeTokens"" -> ""1651_noActiveTokenExchange"";
""1651_setExchangeLockTime"" -> ""1651_onlyOwner"";
""1651_claimTokens"" -> ""1651_activeTokenExchange"";
""1651_setEthExchangeEnabled"" -> ""1651_onlyOwner"";
""1651_exchangeEth"" -> ""1651_noActiveTokenExchange"";
""1651_exchangeTokens"" -> ""1651__createExchangeRecord"";
}
"
0xc090e4fe2e098207e1b8695161c3c6a9e20b4802.sol,TaxManFarmer,contract TaxManFarmer { using SafeMath for uint256; bool private reentrancy_lock = false; address public shop = 0x2dadfF9Fc12bcd339B68692622C3438A5B46EA53; address public object = 0xB3EfD0FA677822203BB69623F3DB2Cdc3377d5f2; address public taxMan = 0xd5048F05Ed7185821C999e3e077A3d1baed0952c; mapping(address => uint256) public workDone; modifier nonReentrant() { require(!reentrancy_lock); reentrancy_lock = true; _; reentrancy_lock = false; },0,"subgraph cluster_253_TaxManFarmer {
label=""TaxManFarmer"";
""253_reapFarm"" [label=""reapFarm""];
""253_pepFarm"" [label=""pepFarm""];
""253_reapFarm"" -> ""253_nonReentrant"";
""253_pepFarm"" -> ""253_nonReentrant"";
}
"
0x2a98c6dcac6d759695b09cdf6b26cf4a13370a57.sol,DOGEToken,"contract DOGEToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function DOGEToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0xdF74B93C1Fa5515E3D5199fce19b9DB57A98e8B8] = _totalSupply; Transfer(address(0), 0xdF74B93C1Fa5515E3D5199fce19b9DB57A98e8B8, _totalSupply); }",0,"subgraph cluster_536_DOGEToken {
label=""DOGEToken"";
""536_totalSupply"" [label=""totalSupply""];
""536_transferFrom"" [label=""transferFrom""];
""536_allowance"" [label=""allowance""];
""536_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""536_approve"" [label=""approve""];
""536_DOGEToken"" [label=""DOGEToken""];
""536_transfer"" [label=""transfer""];
""536_balanceOf"" [label=""balanceOf""];
""536_approveAndCall"" [label=""approveAndCall""];
""536_transferFrom"" -> ""536_safeSub"";
""536_transfer"" -> ""536_safeSub"";
""536_transfer"" -> ""536_safeAdd"";
""536_transferAnyERC20Token"" -> ""536_onlyOwner"";
""536_transferFrom"" -> ""536_safeAdd"";
}
"
0xd0ffe3496101fd676b646ade429653d7df12edd2.sol,ContractEFT,contract ContractEFT is ERC20Interface { uint256 public constant decimals = 5; string public constant symbol = ; string public constant name = ; uint256 public _totalSupply = formatDecimals(500000000000); address public owner; mapping(address => uint256) private balances; mapping(address => mapping (address => uint256)) private allowed; mapping(address => bool) private approvedInvestorList; mapping(address => uint256) private deposit; uint256 public totalTokenSold = 0; function formatDecimals(uint256 _value) internal pure returns (uint256 ) { return _value * 10 ** decimals; },0,"subgraph cluster_391_ContractEFT {
label=""ContractEFT"";
""391_isApprovedInvestor"" [label=""isApprovedInvestor""];
""391_allowance"" [label=""allowance""];
""391_transfer"" [label=""transfer""];
""391_getDeposit"" [label=""getDeposit""];
""391_transferFrom"" [label=""transferFrom""];
""391_approve"" [label=""approve""];
""391_ContractEFT"" [label=""ContractEFT""];
""391_fallback"" [label=""fallback""];
""391_balanceOf"" [label=""balanceOf""];
""391_totalSupply"" [label=""totalSupply""];
""391_formatDecimals"" [label=""formatDecimals""];
}
"
0x4c4bcb4ffa0d7eab9287d1df294c8391e3b8096f.sol,PDVBO,"contract PDVBO { bytes32 public name; bytes6 public symbol; uint8 public decimals = 4; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function PDVBO( ) public { totalSupply = 1000000000000; balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",0,"subgraph cluster_349_PDVBO {
label=""PDVBO"";
""349_approve"" [label=""approve""];
""349_transferFrom"" [label=""transferFrom""];
""349_approveAndCall"" [label=""approveAndCall""];
""349__transfer"" [label=""_transfer""];
""349_transfer"" [label=""transfer""];
""349_burn"" [label=""burn""];
""349_burnFrom"" [label=""burnFrom""];
""349_PDVBO"" [label=""PDVBO""];
""349_transfer"" -> ""349__transfer"";
""349_approveAndCall"" -> ""349_approve"";
""349_transferFrom"" -> ""349__transfer"";
}
"
0x53ef8e6cb3a7c96d7aecf39b2d4d09c166269c34.sol,AUX1418,"contract AUX1418 is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 7; _totalSupply = 1000000000; balances[0x1C200fD1A330c1548e3e867e583ed2CD2fa6EA16] = _totalSupply; emit Transfer(address(0), 0x1C200fD1A330c1548e3e867e583ed2CD2fa6EA16, _totalSupply); }",0,"subgraph cluster_543_AUX1418 {
label=""AUX1418"";
""543_fallback"" [label=""fallback""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approve"" [label=""approve""];
""543_transferFrom"" [label=""transferFrom""];
""543_constructor"" [label=""constructor""];
""543_balanceOf"" [label=""balanceOf""];
""543_allowance"" [label=""allowance""];
""543_transfer"" [label=""transfer""];
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0xf310d06a54eda5d5ae204b0aa9b5e207972d80b9.sol,MicoinToken,"contract MicoinToken is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function MicoinToken( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",0,"subgraph cluster_619_MicoinToken {
label=""MicoinToken"";
""619_setPrices"" [label=""setPrices""];
""619_MicoinToken"" [label=""MicoinToken""];
""619_sell"" [label=""sell""];
""619_buy"" [label=""buy""];
""619_freezeAccount"" [label=""freezeAccount""];
""619_mintToken"" [label=""mintToken""];
""619__transfer"" [label=""_transfer""];
""619_mintToken"" -> ""619_onlyOwner"";
""619_setPrices"" -> ""619_onlyOwner"";
""619_MicoinToken"" -> ""619_TokenERC20"";
""619_freezeAccount"" -> ""619_onlyOwner"";
""619_buy"" -> ""619__transfer"";
""619_sell"" -> ""619__transfer"";
}
"
0x333c86f84343058cbf7762c5043c90e41129fc5b.sol,Power,contract Power { string public version = ; uint256 private constant ONE = 1; uint32 private constant MAX_WEIGHT = 1000000; uint8 private constant MIN_PRECISION = 32; uint8 private constant MAX_PRECISION = 127; uint256 private constant FIXED_1 = 0x080000000000000000000000000000000; uint256 private constant FIXED_2 = 0x100000000000000000000000000000000; uint256 private constant MAX_NUM = 0x1ffffffffffffffffffffffffffffffff; uint256 private constant LN2_MANTISSA = 0x2c5c85fdf473de6af278ece600fcbda; uint8 private constant LN2_EXPONENT = 122; uint256[128] private maxExpArray; constructor() public { maxExpArray[ 32] = 0x1c35fedd14ffffffffffffffffffffffff; maxExpArray[ 33] = 0x1b0ce43b323fffffffffffffffffffffff; maxExpArray[ 34] = 0x19f0028ec1ffffffffffffffffffffffff; maxExpArray[ 35] = 0x18ded91f0e7fffffffffffffffffffffff; maxExpArray[ 36] = 0x17d8ec7f0417ffffffffffffffffffffff; maxExpArray[ 37] = 0x16ddc6556cdbffffffffffffffffffffff; maxExpArray[ 38] = 0x15ecf52776a1ffffffffffffffffffffff; maxExpArray[ 39] = 0x15060c256cb2ffffffffffffffffffffff; maxExpArray[ 40] = 0x1428a2f98d72ffffffffffffffffffffff; maxExpArray[ 41] = 0x13545598e5c23fffffffffffffffffffff; maxExpArray[ 42] = 0x1288c4161ce1dfffffffffffffffffffff; maxExpArray[ 43] = 0x11c592761c666fffffffffffffffffffff; maxExpArray[ 44] = 0x110a688680a757ffffffffffffffffffff; maxExpArray[ 45] = 0x1056f1b5bedf77ffffffffffffffffffff; maxExpArray[ 46] = 0x0faadceceeff8bffffffffffffffffffff; maxExpArray[ 47] = 0x0f05dc6b27edadffffffffffffffffffff; maxExpArray[ 48] = 0x0e67a5a25da4107fffffffffffffffffff; maxExpArray[ 49] = 0x0dcff115b14eedffffffffffffffffffff; maxExpArray[ 50] = 0x0d3e7a392431239fffffffffffffffffff; maxExpArray[ 51] = 0x0cb2ff529eb71e4fffffffffffffffffff; maxExpArray[ 52] = 0x0c2d415c3db974afffffffffffffffffff; maxExpArray[ 53] = 0x0bad03e7d883f69bffffffffffffffffff; maxExpArray[ 54] = 0x0b320d03b2c343d5ffffffffffffffffff; maxExpArray[ 55] = 0x0abc25204e02828dffffffffffffffffff; maxExpArray[ 56] = 0x0a4b16f74ee4bb207fffffffffffffffff; maxExpArray[ 57] = 0x09deaf736ac1f569ffffffffffffffffff; maxExpArray[ 58] = 0x0976bd9952c7aa957fffffffffffffffff; maxExpArray[ 59] = 0x09131271922eaa606fffffffffffffffff; maxExpArray[ 60] = 0x08b380f3558668c46fffffffffffffffff; maxExpArray[ 61] = 0x0857ddf0117efa215bffffffffffffffff; maxExpArray[ 62] = 0x07ffffffffffffffffffffffffffffffff; maxExpArray[ 63] = 0x07abbf6f6abb9d087fffffffffffffffff; maxExpArray[ 64] = 0x075af62cbac95f7dfa7fffffffffffffff; maxExpArray[ 65] = 0x070d7fb7452e187ac13fffffffffffffff; maxExpArray[ 66] = 0x06c3390ecc8af379295fffffffffffffff; maxExpArray[ 67] = 0x067c00a3b07ffc01fd6fffffffffffffff; maxExpArray[ 68] = 0x0637b647c39cbb9d3d27ffffffffffffff; maxExpArray[ 69] = 0x05f63b1fc104dbd39587ffffffffffffff; maxExpArray[ 70] = 0x05b771955b36e12f7235ffffffffffffff; maxExpArray[ 71] = 0x057b3d49dda84556d6f6ffffffffffffff; maxExpArray[ 72] = 0x054183095b2c8ececf30ffffffffffffff; maxExpArray[ 73] = 0x050a28be635ca2b888f77fffffffffffff; maxExpArray[ 74] = 0x04d5156639708c9db33c3fffffffffffff; maxExpArray[ 75] = 0x04a23105873875bd52dfdfffffffffffff; maxExpArray[ 76] = 0x0471649d87199aa990756fffffffffffff; maxExpArray[ 77] = 0x04429a21a029d4c1457cfbffffffffffff; maxExpArray[ 78] = 0x0415bc6d6fb7dd71af2cb3ffffffffffff; maxExpArray[ 79] = 0x03eab73b3bbfe282243ce1ffffffffffff; maxExpArray[ 80] = 0x03c1771ac9fb6b4c18e229ffffffffffff; maxExpArray[ 81] = 0x0399e96897690418f785257fffffffffff; maxExpArray[ 82] = 0x0373fc456c53bb779bf0ea9fffffffffff; maxExpArray[ 83] = 0x034f9e8e490c48e67e6ab8bfffffffffff; maxExpArray[ 84] = 0x032cbfd4a7adc790560b3337ffffffffff; maxExpArray[ 85] = 0x030b50570f6e5d2acca94613ffffffffff; maxExpArray[ 86] = 0x02eb40f9f620fda6b56c2861ffffffffff; maxExpArray[ 87] = 0x02cc8340ecb0d0f520a6af58ffffffffff; maxExpArray[ 88] = 0x02af09481380a0a35cf1ba02ffffffffff; maxExpArray[ 89] = 0x0292c5bdd3b92ec810287b1b3fffffffff; maxExpArray[ 90] = 0x0277abdcdab07d5a77ac6d6b9fffffffff; maxExpArray[ 91] = 0x025daf6654b1eaa55fd64df5efffffffff; maxExpArray[ 92] = 0x0244c49c648baa98192dce88b7ffffffff; maxExpArray[ 93] = 0x022ce03cd5619a311b2471268bffffffff; maxExpArray[ 94] = 0x0215f77c045fbe885654a44a0fffffffff; maxExpArray[ 95] = 0x01ffffffffffffffffffffffffffffffff; maxExpArray[ 96] = 0x01eaefdbdaaee7421fc4d3ede5ffffffff; maxExpArray[ 97] = 0x01d6bd8b2eb257df7e8ca57b09bfffffff; maxExpArray[ 98] = 0x01c35fedd14b861eb0443f7f133fffffff; maxExpArray[ 99] = 0x01b0ce43b322bcde4a56e8ada5afffffff; maxExpArray[100] = 0x019f0028ec1fff007f5a195a39dfffffff; maxExpArray[101] = 0x018ded91f0e72ee74f49b15ba527ffffff; maxExpArray[102] = 0x017d8ec7f04136f4e5615fd41a63ffffff; maxExpArray[103] = 0x016ddc6556cdb84bdc8d12d22e6fffffff; maxExpArray[104] = 0x015ecf52776a1155b5bd8395814f7fffff; maxExpArray[105] = 0x015060c256cb23b3b3cc3754cf40ffffff; maxExpArray[106] = 0x01428a2f98d728ae223ddab715be3fffff; maxExpArray[107] = 0x013545598e5c23276ccf0ede68034fffff; maxExpArray[108] = 0x01288c4161ce1d6f54b7f61081194fffff; maxExpArray[109] = 0x011c592761c666aa641d5a01a40f17ffff; maxExpArray[110] = 0x0110a688680a7530515f3e6e6cfdcdffff; maxExpArray[111] = 0x01056f1b5bedf75c6bcb2ce8aed428ffff; maxExpArray[112] = 0x00faadceceeff8a0890f3875f008277fff; maxExpArray[113] = 0x00f05dc6b27edad306388a600f6ba0bfff; maxExpArray[114] = 0x00e67a5a25da41063de1495d5b18cdbfff; maxExpArray[115] = 0x00dcff115b14eedde6fc3aa5353f2e4fff; maxExpArray[116] = 0x00d3e7a3924312399f9aae2e0f868f8fff; maxExpArray[117] = 0x00cb2ff529eb71e41582cccd5a1ee26fff; maxExpArray[118] = 0x00c2d415c3db974ab32a51840c0b67edff; maxExpArray[119] = 0x00bad03e7d883f69ad5b0a186184e06bff; maxExpArray[120] = 0x00b320d03b2c343d4829abd6075f0cc5ff; maxExpArray[121] = 0x00abc25204e02828d73c6e80bcdb1a95bf; maxExpArray[122] = 0x00a4b16f74ee4bb2040a1ec6c15fbbf2df; maxExpArray[123] = 0x009deaf736ac1f569deb1b5ae3f36c130f; maxExpArray[124] = 0x00976bd9952c7aa957f5937d790ef65037; maxExpArray[125] = 0x009131271922eaa6064b73a22d0bd4f2bf; maxExpArray[126] = 0x008b380f3558668c46c91c49a2f8e967b9; maxExpArray[127] = 0x00857ddf0117efa215952912839f6473e6; },0,"subgraph cluster_1987_Power {
label=""Power"";
""1987_constructor"" [label=""constructor""];
""1987_findPositionInMaxExpArray"" [label=""findPositionInMaxExpArray""];
""1987_floorLog2"" [label=""floorLog2""];
""1987_power"" [label=""power""];
""1987_ln"" [label=""ln""];
""1987_fixedExp"" [label=""fixedExp""];
""1987_power"" -> ""1987_ln"";
""1987_ln"" -> ""1987_floorLog2"";
""1987_power"" -> ""1987_fixedExp"";
""1987_power"" -> ""1987_findPositionInMaxExpArray"";
}
"
0xaaa73b4a5411a4249b723722cb1bdabfaed495c2.sol,Moon,contract Moon { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1323_Moon {
label=""Moon"";
""1323_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1323_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1323_disableInitialStage"" [label=""disableInitialStage""];
""1323_setStakingRequirement"" [label=""setStakingRequirement""];
""1323_setAdministrator"" [label=""setAdministrator""];
""1323_buy"" [label=""buy""];
""1323_fallback"" [label=""fallback""];
""1323_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1323_balanceOf"" [label=""balanceOf""];
""1323_myTokens"" [label=""myTokens""];
""1323_Moon"" [label=""Moon""];
""1323_sqrt"" [label=""sqrt""];
""1323_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1323_buyPrice"" [label=""buyPrice""];
""1323_reinvest"" [label=""reinvest""];
""1323_sellPrice"" [label=""sellPrice""];
""1323_withdraw"" [label=""withdraw""];
""1323_exit"" [label=""exit""];
""1323_setName"" [label=""setName""];
""1323_setSymbol"" [label=""setSymbol""];
""1323_myDividends"" [label=""myDividends""];
""1323_dividendsOf"" [label=""dividendsOf""];
""1323_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1323_totalSupply"" [label=""totalSupply""];
""1323_transfer"" [label=""transfer""];
""1323_sell"" [label=""sell""];
""1323_purchaseTokens"" [label=""purchaseTokens""];
""1323_reinvest"" -> ""1323_purchaseTokens"";
""1323_withdraw"" -> ""1323_myDividends"";
""1323_sell"" -> ""1323_onlyBagholders"";
""1323_purchaseTokens"" -> ""1323_ethereumToTokens_"";
""1323_sellPrice"" -> ""1323_tokensToEthereum_"";
""1323_reinvest"" -> ""1323_myDividends"";
""1323_setStakingRequirement"" -> ""1323_onlyAdministrator"";
""1323_buyPrice"" -> ""1323_tokensToEthereum_"";
""1323_myDividends"" -> ""1323_dividendsOf"";
""1323_withdraw"" -> ""1323_onlyStronghands"";
""1323_transfer"" -> ""1323_withdraw"";
""1323_myTokens"" -> ""1323_balanceOf"";
""1323_sell"" -> ""1323_tokensToEthereum_"";
""1323_setName"" -> ""1323_onlyAdministrator"";
""1323_purchaseTokens"" -> ""1323_antiEarlyWhale"";
""1323_ethereumToTokens_"" -> ""1323_sqrt"";
""1323_buy"" -> ""1323_purchaseTokens"";
""1323_disableInitialStage"" -> ""1323_onlyAdministrator"";
""1323_transfer"" -> ""1323_myDividends"";
""1323_exit"" -> ""1323_sell"";
""1323_reinvest"" -> ""1323_onlyStronghands"";
""1323_transfer"" -> ""1323_onlyBagholders"";
""1323_fallback"" -> ""1323_purchaseTokens"";
""1323_setAdministrator"" -> ""1323_onlyAdministrator"";
""1323_setSymbol"" -> ""1323_onlyAdministrator"";
""1323_calculateEthereumReceived"" -> ""1323_tokensToEthereum_"";
""1323_exit"" -> ""1323_withdraw"";
""1323_transfer"" -> ""1323_tokensToEthereum_"";
""1323_calculateTokensReceived"" -> ""1323_ethereumToTokens_"";
}
"
0xebd79044b0a3261b5f2ff95bd06e3a17e7d109fb.sol,MigratableToken,"contract MigratableToken is BasicToken,GuidedByRoles { uint256 public totalMigrated; address public migrationAgent; event Migrate(address indexed _from, address indexed _to, uint256 _value); function setMigrationAgent(address _migrationAgent) public { require(rightAndRoles.onlyRoles(msg.sender,1)); require(totalMigrated == 0); migrationAgent = _migrationAgent; }",0,"subgraph cluster_572_MigratableToken {
label=""MigratableToken"";
""572_migrate"" [label=""migrate""];
""572_setMigrationAgent"" [label=""setMigrationAgent""];
""572_migrateAll"" [label=""migrateAll""];
""572_migrateInternal"" [label=""migrateInternal""];
""572_migrate"" -> ""572_migrateInternal"";
""572_migrateAll"" -> ""572_migrateInternal"";
}
"
0x705051bbfd9f287869a412cba8bc7d112de48e69.sol,SAKECOIN,"contract SAKECOIN is ERC223, Ownable { using SafeMath for uint256; string public name = ; string public symbol = ; uint8 public decimals = 8; uint256 public initialSupply = 30e9 * 1e8; uint256 public totalSupply; uint256 public distributeAmount = 0; bool public mintingFinished = false; mapping (address => uint) balances; mapping (address => bool) public frozenAccount; mapping (address => uint256) public unlockUnixTime; event FrozenFunds(address indexed target, bool frozen); event LockedFunds(address indexed target, uint256 locked); event Burn(address indexed burner, uint256 value); event Mint(address indexed to, uint256 amount); event MintFinished(); function SAKECOIN() public { totalSupply = initialSupply; balances[msg.sender] = totalSupply; }",0,"subgraph cluster_1515_SAKECOIN {
label=""SAKECOIN"";
""1515_decimals"" [label=""decimals""];
""1515_transferToContract"" [label=""transferToContract""];
""1515_autoDistribute"" [label=""autoDistribute""];
""1515_symbol"" [label=""symbol""];
""1515_transfer"" [label=""transfer""];
""1515_lockupAccounts"" [label=""lockupAccounts""];
""1515_isContract"" [label=""isContract""];
""1515_finishMinting"" [label=""finishMinting""];
""1515_fallback"" [label=""fallback""];
""1515_transferToAddress"" [label=""transferToAddress""];
""1515_mint"" [label=""mint""];
""1515_distributeAirdrop"" [label=""distributeAirdrop""];
""1515_totalSupply"" [label=""totalSupply""];
""1515_balanceOf"" [label=""balanceOf""];
""1515_collectTokens"" [label=""collectTokens""];
""1515_setDistributeAmount"" [label=""setDistributeAmount""];
""1515_freezeAccounts"" [label=""freezeAccounts""];
""1515_burn"" [label=""burn""];
""1515_name"" [label=""name""];
""1515_SAKECOIN"" [label=""SAKECOIN""];
""1515_finishMinting"" -> ""1515_onlyOwner"";
""1515_transferToContract"" -> ""1515_balanceOf"";
""1515_freezeAccounts"" -> ""1515_onlyOwner"";
""1515_transferToAddress"" -> ""1515_balanceOf"";
""1515_mint"" -> ""1515_canMint"";
""1515_transfer"" -> ""1515_isContract"";
""1515_mint"" -> ""1515_onlyOwner"";
""1515_transfer"" -> ""1515_transferToAddress"";
""1515_burn"" -> ""1515_balanceOf"";
""1515_burn"" -> ""1515_onlyOwner"";
""1515_collectTokens"" -> ""1515_onlyOwner"";
""1515_fallback"" -> ""1515_autoDistribute"";
""1515_transfer"" -> ""1515_balanceOf"";
""1515_setDistributeAmount"" -> ""1515_onlyOwner"";
""1515_transfer"" -> ""1515_transferToContract"";
""1515_lockupAccounts"" -> ""1515_onlyOwner"";
""1515_autoDistribute"" -> ""1515_balanceOf"";
""1515_finishMinting"" -> ""1515_canMint"";
}
"
0x0f33a2f6dc77be2134e1537bf919f7d9ef1d225d.sol,MOT,"contract MOT is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public blacklist; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 public totalSupply = 100000000e18; uint256 public totalDistributed = 20000000e18; uint256 public totalRemaining = totalSupply.sub(totalDistributed); uint256 public value = 1500e18; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_851_MOT {
label=""MOT"";
""851_constructor"" [label=""constructor""];
""851_transfer"" [label=""transfer""];
""851_transferOwnership"" [label=""transferOwnership""];
""851_burn"" [label=""burn""];
""851_balanceOf"" [label=""balanceOf""];
""851_allowance"" [label=""allowance""];
""851_getTokens"" [label=""getTokens""];
""851_finishDistribution"" [label=""finishDistribution""];
""851_transferFrom"" [label=""transferFrom""];
""851_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""851_approve"" [label=""approve""];
""851_fallback"" [label=""fallback""];
""851_getTokenBalance"" [label=""getTokenBalance""];
""851_distr"" [label=""distr""];
""851_withdraw"" [label=""withdraw""];
""851_getTokens"" -> ""851_onlyWhitelist"";
""851_transfer"" -> ""851_onlyPayloadSize"";
""851_finishDistribution"" -> ""851_onlyOwner"";
""851_getTokens"" -> ""851_canDistr"";
""851_finishDistribution"" -> ""851_canDistr"";
""851_distr"" -> ""851_canDistr"";
""851_burn"" -> ""851_onlyOwner"";
""851_transferOwnership"" -> ""851_onlyOwner"";
""851_transferFrom"" -> ""851_onlyPayloadSize"";
""851_withdrawForeignTokens"" -> ""851_onlyOwner"";
""851_withdraw"" -> ""851_onlyOwner"";
""851_fallback"" -> ""851_getTokens"";
""851_getTokens"" -> ""851_distr"";
}
"
0x412c003380e08921be3ee7ee5830d3a00dd7e589.sol,AeternumLibertarianFoundationToken,"contract AeternumLibertarianFoundationToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function AeternumLibertarianFoundationToken( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_361_AeternumLibertarianFoundationToken {
label=""AeternumLibertarianFoundationToken"";
""361_burnFrom"" [label=""burnFrom""];
""361_approve"" [label=""approve""];
""361_burn"" [label=""burn""];
""361__transfer"" [label=""_transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_AeternumLibertarianFoundationToken"" [label=""AeternumLibertarianFoundationToken""];
""361_transfer"" [label=""transfer""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_transferFrom"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
}
"
0xa5e5be69c923c701ae6ac8f1f5936af3ae610c68.sol,ERC721Enumerable,"contract ERC721Enumerable is ERC165, ERC721, IERC721Enumerable { mapping(address => uint256[]) private _ownedTokens; mapping(uint256 => uint256) private _ownedTokensIndex; uint256[] private _allTokens; mapping(uint256 => uint256) private _allTokensIndex; bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63; constructor() public { _registerInterface(_InterfaceId_ERC721Enumerable); }",0,"subgraph cluster_1644_ERC721Enumerable {
label=""ERC721Enumerable"";
""1644_constructor"" [label=""constructor""];
""1644__addTokenTo"" [label=""_addTokenTo""];
""1644__removeTokenFrom"" [label=""_removeTokenFrom""];
""1644_tokenOfOwnerByIndex"" [label=""tokenOfOwnerByIndex""];
""1644_tokenByIndex"" [label=""tokenByIndex""];
""1644__burn"" [label=""_burn""];
""1644__mint"" [label=""_mint""];
""1644_totalSupply"" [label=""totalSupply""];
""1644__mint"" -> ""1644__mint"";
""1644__addTokenTo"" -> ""1644__addTokenTo"";
""1644_tokenByIndex"" -> ""1644_totalSupply"";
""1644_constructor"" -> ""1644__registerInterface"";
""1644__burn"" -> ""1644__burn"";
""1644__removeTokenFrom"" -> ""1644__removeTokenFrom"";
""1644_tokenOfOwnerByIndex"" -> ""1644_balanceOf"";
}
"
0x8c2d1d6259afd282ada6812d040f7173d83873ef.sol,LittleStoreERC20Token,"contract LittleStoreERC20Token { mapping (address => bool) public agents; address public addressERC20Token; InterfaceERC20Token internal ERC20Token; bool public sale; uint public price; uint public bonusLine; uint public bonusSize; event ChangePermission (address indexed _called, address indexed _to, bool _permission); event ChangeSaleSettings (address indexed _called, address indexed _token, uint _price, uint _bonusLine, uint _bonusSize); event Buy (address indexed _called, address indexed _token, uint _count, uint _bonusCount, uint _value); event Donate (address indexed _from, uint _value); function LittleStoreERC20Token () public { agents[msg.sender] = true; sale = true; }",0,"subgraph cluster_409_LittleStoreERC20Token {
label=""LittleStoreERC20Token"";
""409_changeSaleSettings"" [label=""changeSaleSettings""];
""409_withdrawalToken"" [label=""withdrawalToken""];
""409_allowanceTransfer"" [label=""allowanceTransfer""];
""409_changePermission"" [label=""changePermission""];
""409_fallback"" [label=""fallback""];
""409_saleValve"" [label=""saleValve""];
""409_buy"" [label=""buy""];
""409_destroy"" [label=""destroy""];
""409_LittleStoreERC20Token"" [label=""LittleStoreERC20Token""];
""409_withdrawal"" [label=""withdrawal""];
""409_totalSale"" [label=""totalSale""];
""409_changePermission"" -> ""409_onlyAdministrators"";
""409_destroy"" -> ""409_onlyAdministrators"";
""409_saleValve"" -> ""409_onlyAdministrators"";
""409_changeSaleSettings"" -> ""409_onlyAdministrators"";
""409_withdrawal"" -> ""409_onlyAdministrators"";
""409_destroy"" -> ""409_withdrawalToken"";
""409_withdrawalToken"" -> ""409_onlyAdministrators"";
""409_allowanceTransfer"" -> ""409_onlyAdministrators"";
}
"
0xee522a9bbe2507546aec572cea7be0f250cba0cb.sol,CentaToken,"contract CentaToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function CentaToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0xFa064973Ad2EF28Ce8e3a306c36CB57cBb9A1d82] = _totalSupply; Transfer(address(0), 0xFa064973Ad2EF28Ce8e3a306c36CB57cBb9A1d82, _totalSupply); }",0,"subgraph cluster_543_CentaToken {
label=""CentaToken"";
""543_approve"" [label=""approve""];
""543_transfer"" [label=""transfer""];
""543_transferFrom"" [label=""transferFrom""];
""543_allowance"" [label=""allowance""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_balanceOf"" [label=""balanceOf""];
""543_fallback"" [label=""fallback""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_CentaToken"" [label=""CentaToken""];
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0x3595279a9f0658eb2649976f155111bae1ae9de6.sol,GGE,"contract GGE { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function GGE( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_380_GGE {
label=""GGE"";
""380_burnFrom"" [label=""burnFrom""];
""380_burn"" [label=""burn""];
""380__transfer"" [label=""_transfer""];
""380_transfer"" [label=""transfer""];
""380_transferFrom"" [label=""transferFrom""];
""380_GGE"" [label=""GGE""];
""380_approveAndCall"" [label=""approveAndCall""];
""380_approve"" [label=""approve""];
""380_approveAndCall"" -> ""380_approve"";
""380_transfer"" -> ""380__transfer"";
""380_transferFrom"" -> ""380__transfer"";
}
"
0xee59784fc8fba300ae37fa41e229163dfaeb68c3.sol,ToolsChain,"contract ToolsChain is IERC20 { using SafeMath for uint256; address private owner; string public name = ; string public symbol = ; uint8 public constant decimals = 18; uint256 public constant decimalFactor = 10 ** uint256(decimals); uint256 public constant totalSupply = 1024000000 * decimalFactor; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) internal allowed; mapping (address => bool) public frozenAccount; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); event FrozenFunds(address target, bool frozen); constructor() public { balances[msg.sender] = totalSupply; owner = msg.sender; emit Transfer(address(0), msg.sender, totalSupply); }",0,"subgraph cluster_644_ToolsChain {
label=""ToolsChain"";
""644_increaseApproval"" [label=""increaseApproval""];
""644_freezeAccount"" [label=""freezeAccount""];
""644_transferFrom"" [label=""transferFrom""];
""644_constructor"" [label=""constructor""];
""644_withdraw"" [label=""withdraw""];
""644_balanceOf"" [label=""balanceOf""];
""644_transfer"" [label=""transfer""];
""644_approve"" [label=""approve""];
""644_decreaseApproval"" [label=""decreaseApproval""];
""644_allowance"" [label=""allowance""];
""644_fallback"" [label=""fallback""];
""644_withdraw"" -> ""644_onlyOwner"";
""644_freezeAccount"" -> ""644_onlyOwner"";
}
"
0x313f29ea49a9e6ca3b3e254335d4ec32ef5045f8.sol,SirinCrowdsale,contract SirinCrowdsale is FinalizableCrowdsale { uint8 public constant MAX_TOKEN_GRANTEES = 10; uint256 public constant EXCHANGE_RATE = 500; uint256 public constant REFUND_DIVISION_RATE = 2; modifier onlyWhileSale() { require(isActive()); _; },0,"subgraph cluster_2465_SirinCrowdsale {
label=""SirinCrowdsale"";
""2465_setFiatRaisedConvertedToWei"" [label=""setFiatRaisedConvertedToWei""];
""2465_addUpdateGrantee"" [label=""addUpdateGrantee""];
""2465_deleteGrantee"" [label=""deleteGrantee""];
""2465_SirinCrowdsale"" [label=""SirinCrowdsale""];
""2465_isActive"" [label=""isActive""];
""2465_claimTokenOwnership"" [label=""claimTokenOwnership""];
""2465_claimRefundVaultOwnership"" [label=""claimRefundVaultOwnership""];
""2465_buyTokensWithGuarantee"" [label=""buyTokensWithGuarantee""];
""2465_getRate"" [label=""getRate""];
""2465_finalization"" [label=""finalization""];
""2465_getTotalFundsRaised"" [label=""getTotalFundsRaised""];
""2465_addUpdateGrantee"" -> ""2465_onlyWhileSale"";
""2465_finalization"" -> ""2465_finalization"";
""2465_buyTokensWithGuarantee"" -> ""2465_validPurchase"";
""2465_deleteGrantee"" -> ""2465_onlyOwner"";
""2465_buyTokensWithGuarantee"" -> ""2465_getRate"";
""2465_setFiatRaisedConvertedToWei"" -> ""2465_onlyWhileSale"";
""2465_claimTokenOwnership"" -> ""2465_onlyOwner"";
""2465_addUpdateGrantee"" -> ""2465_onlyOwner"";
""2465_SirinCrowdsale"" -> ""2465_Crowdsale"";
""2465_deleteGrantee"" -> ""2465_onlyWhileSale"";
""2465_finalization"" -> ""2465_onlyOwner"";
""2465_claimRefundVaultOwnership"" -> ""2465_onlyOwner"";
""2465_setFiatRaisedConvertedToWei"" -> ""2465_onlyOwner"";
}
"
0x6ddcc353122f36f6976baadd5ef62e56f39dd960.sol,PODSSale,"contract PODSSale { address public beneficiary; uint public fundingGoal; uint public amountRaised; uint public deadline; uint public price; token public tokenReward; mapping(address => uint256) public balanceOf; bool fundingGoalReached = false; bool crowdsaleClosed = false; event GoalReached(address recipient, uint totalAmountRaised); event FundTransfer(address backer, uint amount, bool isContribution); function PODSSale() public { beneficiary = address(0x0D2e5bd9C6DDc363586061C6129D6122f0D7a2CB); fundingGoal = 80 ether; deadline = now + 43210 minutes; price = 25000; tokenReward = token(address(0xEa29Ac8Bf5001592178F6Cd1275A1D0433F94C5B)); }",0,"subgraph cluster_231_PODSSale {
label=""PODSSale"";
""231_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""231_checkGoalReached"" [label=""checkGoalReached""];
""231_PODSSale"" [label=""PODSSale""];
""231_safeWithdrawal"" [label=""safeWithdrawal""];
""231_fallback"" [label=""fallback""];
""231_checkGoalReached"" -> ""231_afterDeadline"";
}
"
0x2c110867ca90e43d372c1c2e92990b00ea32818b.sol,FiatDex_protocol_v1,contract FiatDex_protocol_v1 { address public owner; uint256 public feeDelay = 7; uint256 public dailyFeeIncrease = 1000; uint256 public version = 1; constructor() public { owner = msg.sender; },0,"subgraph cluster_501_FiatDex_protocol_v1 {
label=""FiatDex_protocol_v1"";
""501_closeSwap"" [label=""closeSwap""];
""501_viewFiatDexSpecs"" [label=""viewFiatDexSpecs""];
""501_changeContractOwner"" [label=""changeContractOwner""];
""501_addFiatTraderCollateral"" [label=""addFiatTraderCollateral""];
""501_openSwap"" [label=""openSwap""];
""501_viewSwap"" [label=""viewSwap""];
""501_constructor"" [label=""constructor""];
""501_refundSwap"" [label=""refundSwap""];
""501_openSwap"" -> ""501_onlyNotOpenSwaps"";
""501_closeSwap"" -> ""501_onlyActiveSwaps"";
""501_addFiatTraderCollateral"" -> ""501_onlyInitializedSwaps"";
""501_refundSwap"" -> ""501_onlyInitializedSwaps"";
}
"
0x704a1e04ca263c4af14fca6cd5cc371d247bd200.sol,ERC20,contract ERC20 is IERC20 { using SafeMath for uint256; mapping (address => uint256) private _balances; mapping (address => mapping (address => uint256)) private _allowed; uint256 private _totalSupply; function totalSupply() public view returns (uint256) { return _totalSupply; },0,"subgraph cluster_194_IERC20 {
label=""IERC20"";
""194_transfer"" [label=""transfer""];
""194_balanceOf"" [label=""balanceOf""];
""194_approve"" [label=""approve""];
""194_allowance"" [label=""allowance""];
""194_transferFrom"" [label=""transferFrom""];
""194_totalSupply"" [label=""totalSupply""];
}
"
0x54ad74edeab48e09ccc43ee324f2603071dad72b.sol,DTOPToken,"contract DTOPToken is ERC20, Ownable, Pausable { using SafeMath for uint256; struct LockupInfo { uint256 releaseTime; uint256 termOfRound; uint256 unlockAmountPerRound; uint256 lockupBalance; }",0,"subgraph cluster_1384_DTOPToken {
label=""DTOPToken"";
""1384_unlock"" [label=""unlock""];
""1384_showLockState"" [label=""showLockState""];
""1384_mint"" [label=""mint""];
""1384_constructor"" [label=""constructor""];
""1384_isContract"" [label=""isContract""];
""1384_approve"" [label=""approve""];
""1384_approveAndCall"" [label=""approveAndCall""];
""1384_autoUnlock"" [label=""autoUnlock""];
""1384_distribute"" [label=""distribute""];
""1384_unfreezeAccount"" [label=""unfreezeAccount""];
""1384_releaseTimeLock"" [label=""releaseTimeLock""];
""1384_lock"" [label=""lock""];
""1384_freezeAccount"" [label=""freezeAccount""];
""1384_transferFrom"" [label=""transferFrom""];
""1384_fallback"" [label=""fallback""];
""1384_totalSupply"" [label=""totalSupply""];
""1384_burn"" [label=""burn""];
""1384_getNowTime"" [label=""getNowTime""];
""1384_lockupBalance"" [label=""lockupBalance""];
""1384_distributeWithLockup"" [label=""distributeWithLockup""];
""1384_claimToken"" [label=""claimToken""];
""1384_transfer"" [label=""transfer""];
""1384_balanceOf"" [label=""balanceOf""];
""1384_allowance"" [label=""allowance""];
""1384_autoUnlock"" -> ""1384_releaseTimeLock"";
""1384_distributeWithLockup"" -> ""1384_lock"";
""1384_lock"" -> ""1384_onlyOwner"";
""1384_distributeWithLockup"" -> ""1384_onlyOwner"";
""1384_transferFrom"" -> ""1384_autoUnlock"";
""1384_transfer"" -> ""1384_autoUnlock"";
""1384_mint"" -> ""1384_onlyOwner"";
""1384_burn"" -> ""1384_onlyOwner"";
""1384_approve"" -> ""1384_whenNotPaused"";
""1384_transferFrom"" -> ""1384_notFrozen"";
""1384_unlock"" -> ""1384_onlyOwner"";
""1384_transfer"" -> ""1384_notFrozen"";
""1384_freezeAccount"" -> ""1384_onlyOwner"";
""1384_approveAndCall"" -> ""1384_isContract"";
""1384_distribute"" -> ""1384_onlyOwner"";
""1384_transfer"" -> ""1384_whenNotPaused"";
""1384_unfreezeAccount"" -> ""1384_onlyOwner"";
""1384_distributeWithLockup"" -> ""1384_distribute"";
""1384_transferFrom"" -> ""1384_whenNotPaused"";
""1384_approveAndCall"" -> ""1384_approve"";
""1384_claimToken"" -> ""1384_onlyOwner"";
}
"
0x6fff3806bbac52a20e0d79bc538d527f6a22c96b.sol,Stoppable,"contract Stoppable is Auth, Note { bool public stopped; modifier stoppable { require (!stopped); _; }",0,"subgraph cluster_948_Stoppable {
label=""Stoppable"";
""948_start"" [label=""start""];
""948_stop"" [label=""stop""];
""948_stop"" -> ""948_note"";
""948_stop"" -> ""948_auth"";
""948_start"" -> ""948_auth"";
""948_start"" -> ""948_note"";
}
"
0xf244176246168f24e3187f7288edbca29267739b.sol,EtherNomin,"contract EtherNomin is ExternStateProxyFeeToken { address public oracle; Court public court; address public beneficiary; uint public nominPool; uint public poolFeeRate = UNIT / 200; uint constant MINIMUM_PURCHASE = UNIT / 100; uint constant MINIMUM_ISSUANCE_RATIO = 2 * UNIT; uint constant AUTO_LIQUIDATION_RATIO = UNIT; uint constant DEFAULT_LIQUIDATION_PERIOD = 90 days; uint constant MAX_LIQUIDATION_PERIOD = 180 days; uint public liquidationPeriod = DEFAULT_LIQUIDATION_PERIOD; uint public liquidationTimestamp = ~uint(0); uint public etherPrice; uint public lastPriceUpdate; uint public stalePeriod = 2 days; mapping(address => bool) public frozen; function EtherNomin(address _havven, address _oracle, address _beneficiary, uint initialEtherPrice, address _owner, TokenState initialState) ExternStateProxyFeeToken(, , 15 * UNIT / 10000, _havven, initialState, _owner) public { oracle = _oracle; beneficiary = _beneficiary; etherPrice = initialEtherPrice; lastPriceUpdate = now; emit PriceUpdated(etherPrice); frozen[this] = true; }",0,"subgraph cluster_3176_EtherNomin {
label=""EtherNomin"";
""3176_etherValue"" [label=""etherValue""];
""3176_frozen"" [label=""frozen""];
""3176_purchaseCostEther"" [label=""purchaseCostEther""];
""3176_etherValueAllowStale"" [label=""etherValueAllowStale""];
""3176_collateralisationRatio"" [label=""collateralisationRatio""];
""3176_fallback"" [label=""fallback""];
""3176_saleProceedsEtherAllowStale"" [label=""saleProceedsEtherAllowStale""];
""3176_poolFeeIncurred"" [label=""poolFeeIncurred""];
""3176_buy"" [label=""buy""];
""3176_sell"" [label=""sell""];
""3176_beginLiquidation"" [label=""beginLiquidation""];
""3176_updatePrice"" [label=""updatePrice""];
""3176_isLiquidating"" [label=""isLiquidating""];
""3176_terminateLiquidation"" [label=""terminateLiquidation""];
""3176_saleProceedsFiat"" [label=""saleProceedsFiat""];
""3176_EtherNomin"" [label=""EtherNomin""];
""3176_unfreezeAccount"" [label=""unfreezeAccount""];
""3176_confiscateBalance"" [label=""confiscateBalance""];
""3176_setStalePeriod"" [label=""setStalePeriod""];
""3176_setCourt"" [label=""setCourt""];
""3176_replenishPool"" [label=""replenishPool""];
""3176_fiatBalance"" [label=""fiatBalance""];
""3176_canSelfDestruct"" [label=""canSelfDestruct""];
""3176_transfer"" [label=""transfer""];
""3176_purchaseCostFiat"" [label=""purchaseCostFiat""];
""3176_setPoolFeeRate"" [label=""setPoolFeeRate""];
""3176_setBeneficiary"" [label=""setBeneficiary""];
""3176_transferFrom"" [label=""transferFrom""];
""3176_forceLiquidation"" [label=""forceLiquidation""];
""3176_selfDestruct"" [label=""selfDestruct""];
""3176__nominCap"" [label=""_nominCap""];
""3176_saleProceedsEther"" [label=""saleProceedsEther""];
""3176_diminishPool"" [label=""diminishPool""];
""3176_priceIsStale"" [label=""priceIsStale""];
""3176_setOracle"" [label=""setOracle""];
""3176_extendLiquidationPeriod"" [label=""extendLiquidationPeriod""];
""3176_fiatValue"" [label=""fiatValue""];
""3176_extendLiquidationPeriod"" -> ""3176_safeAdd"";
""3176_buy"" -> ""3176_safeAdd"";
""3176_poolFeeIncurred"" -> ""3176_safeMul_dec"";
""3176_sell"" -> ""3176_saleProceedsEtherAllowStale"";
""3176_buy"" -> ""3176_safeSub"";
""3176_replenishPool"" -> ""3176_safeMul_dec"";
""3176_forceLiquidation"" -> ""3176_notLiquidating"";
""3176_purchaseCostFiat"" -> ""3176_poolFeeIncurred"";
""3176_saleProceedsFiat"" -> ""3176_poolFeeIncurred"";
""3176_collateralisationRatio"" -> ""3176__nominCap"";
""3176_priceIsStale"" -> ""3176_safeAdd"";
""3176_setOracle"" -> ""3176_optionalProxy_onlyOwner"";
""3176_terminateLiquidation"" -> ""3176_isLiquidating"";
""3176_forceLiquidation"" -> ""3176_beginLiquidation"";
""3176_unfreezeAccount"" -> ""3176_optionalProxy_onlyOwner"";
""3176_saleProceedsEther"" -> ""3176_saleProceedsFiat"";
""3176_buy"" -> ""3176_notLiquidating"";
""3176_saleProceedsEtherAllowStale"" -> ""3176_saleProceedsFiat"";
""3176_collateralisationRatio"" -> ""3176_fiatBalance"";
""3176_buy"" -> ""3176_optionalProxy"";
""3176_canSelfDestruct"" -> ""3176_isLiquidating"";
""3176_etherValue"" -> ""3176_safeDiv_dec"";
""3176_transferFrom"" -> ""3176_optionalProxy"";
""3176_replenishPool"" -> ""3176_safeAdd"";
""3176_confiscateBalance"" -> ""3176_safeAdd"";
""3176_saleProceedsEtherAllowStale"" -> ""3176_etherValueAllowStale"";
""3176_buy"" -> ""3176_purchaseCostEther"";
""3176_fiatBalance"" -> ""3176_fiatValue"";
""3176_terminateLiquidation"" -> ""3176_priceNotStale"";
""3176_selfDestruct"" -> ""3176_optionalProxy_onlyOwner"";
""3176_setPoolFeeRate"" -> ""3176_optionalProxy_onlyOwner"";
""3176_transfer"" -> ""3176_optionalProxy"";
""3176_terminateLiquidation"" -> ""3176_optionalProxy_onlyOwner"";
""3176_etherValueAllowStale"" -> ""3176_safeDiv_dec"";
""3176_transferFrom"" -> ""3176__transferFrom_byProxy"";
""3176_replenishPool"" -> ""3176_fiatBalance"";
""3176_replenishPool"" -> ""3176_optionalProxy_onlyOwner"";
""3176_replenishPool"" -> ""3176__nominCap"";
""3176_sell"" -> ""3176_isLiquidating"";
""3176_fiatValue"" -> ""3176_priceNotStale"";
""3176_terminateLiquidation"" -> ""3176_collateralisationRatio"";
""3176_saleProceedsEther"" -> ""3176_etherValue"";
""3176_terminateLiquidation"" -> ""3176__nominCap"";
""3176_setCourt"" -> ""3176_optionalProxy_onlyOwner"";
""3176_sell"" -> ""3176_safeSub"";
""3176_EtherNomin"" -> ""3176_ExternStateProxyFeeToken"";
""3176_selfDestruct"" -> ""3176_canSelfDestruct"";
""3176__nominCap"" -> ""3176_safeAdd"";
""3176_diminishPool"" -> ""3176_optionalProxy_onlyOwner"";
""3176_updatePrice"" -> ""3176_postCheckAutoLiquidate"";
""3176_diminishPool"" -> ""3176_safeSub"";
""3176_setBeneficiary"" -> ""3176_optionalProxy_onlyOwner"";
""3176_sell"" -> ""3176_safeAdd"";
""3176_purchaseCostFiat"" -> ""3176_safeAdd"";
""3176_collateralisationRatio"" -> ""3176_safeDiv_dec"";
""3176_etherValue"" -> ""3176_priceNotStale"";
""3176_forceLiquidation"" -> ""3176_optionalProxy_onlyOwner"";
""3176_sell"" -> ""3176_saleProceedsEther"";
""3176_saleProceedsFiat"" -> ""3176_safeSub"";
""3176_sell"" -> ""3176_optionalProxy"";
""3176_fiatValue"" -> ""3176_safeMul_dec"";
""3176_purchaseCostEther"" -> ""3176_etherValue"";
""3176_extendLiquidationPeriod"" -> ""3176_isLiquidating"";
""3176_replenishPool"" -> ""3176_notLiquidating"";
""3176_extendLiquidationPeriod"" -> ""3176_optionalProxy_onlyOwner"";
""3176_setStalePeriod"" -> ""3176_optionalProxy_onlyOwner"";
""3176_purchaseCostEther"" -> ""3176_purchaseCostFiat"";
""3176_transfer"" -> ""3176__transfer_byProxy"";
}
"
0x9241b4c67b6cdf9b99f5f50de21283d0441eff75.sol,Treasury,"contract Treasury is owned { event Added( address indexed trustee ); event Flagged( address indexed trustee, bool isRaised ); event Replaced( address indexed older, address indexed newer ); event Proposal( address indexed payee, uint amt, string eref ); event Approved( address indexed approver, address indexed to, uint amount, string eref ); event Spent( address indexed payee, uint amt, string eref ); struct SpendProposal { address payee; uint amount; string eref; address[] approvals; }",0,"subgraph cluster_560_Treasury {
label=""Treasury"";
""560_flag"" [label=""flag""];
""560_replace"" [label=""replace""];
""560_proposal"" [label=""proposal""];
""560_strcmp"" [label=""strcmp""];
""560_add"" [label=""add""];
""560_Treasury"" [label=""Treasury""];
""560_approve"" [label=""approve""];
""560_fallback"" [label=""fallback""];
""560_replace"" -> ""560_onlyTreasurer"";
""560_proposal"" -> ""560_onlyTreasurer"";
""560_flag"" -> ""560_onlyTreasurer"";
""560_add"" -> ""560_onlyTreasurer"";
""560_approve"" -> ""560_strcmp"";
}
"
0x87cdabc87128476d84462eb9c5a67a7acfa7889e.sol,Escrow,"contract Escrow is Ownable { using SafeMath for uint256; event Deposited(address indexed payee, uint256 weiAmount); event Withdrawn(address indexed payee, uint256 weiAmount); mapping(address => uint256) private deposits; function depositsOf(address _payee) public view returns (uint256) { return deposits[_payee]; }",0,"subgraph cluster_512_RefundEscrow {
label=""RefundEscrow"";
""512_beneficiaryWithdraw"" [label=""beneficiaryWithdraw""];
""512_close"" [label=""close""];
""512_deposit"" [label=""deposit""];
""512_enableRefunds"" [label=""enableRefunds""];
""512_constructor"" [label=""constructor""];
""512_withdrawalAllowed"" [label=""withdrawalAllowed""];
""512_enableRefunds"" -> ""512_onlyOwner"";
""512_deposit"" -> ""512_deposit"";
""512_close"" -> ""512_onlyOwner"";
}
"
0xc08dcf2fa37b87a89ac7f0fdcb4aebda378dea29.sol,MITToken,contract MITToken is SafeMath{ string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; address public owner; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; mapping(uint => Holder) public lockholders; uint public lockholderNumber; struct Holder { address eth_address; uint exp_time; },0,"subgraph cluster_658_MITToken {
label=""MITToken"";
""658_validHolder"" [label=""validHolder""];
""658_transferFrom"" [label=""transferFrom""];
""658__transfer"" [label=""_transfer""];
""658_constructor"" [label=""constructor""];
""658_approve"" [label=""approve""];
""658__unlockToken"" [label=""_unlockToken""];
""658_burn"" [label=""burn""];
""658_burnFrom"" [label=""burnFrom""];
""658_approveAndCall"" [label=""approveAndCall""];
""658__lockToken"" [label=""_lockToken""];
""658_transfer"" [label=""transfer""];
""658__transfer"" -> ""658_safeAdd"";
""658_approveAndCall"" -> ""658_approve"";
""658__transfer"" -> ""658_safeSub"";
""658_transferFrom"" -> ""658__transfer"";
""658_transfer"" -> ""658__transfer"";
""658__transfer"" -> ""658_validHolder"";
}
"
0xdc8a6ef9a8a4114773e806dc24bb8e7b6f3d92eb.sol,CryptoBossWannaCry,contract CryptoBossWannaCry is PullPayment{ bool init = false; address public administrator; uint256 public bossRoundNumber; uint256 public BOSS_HP_DEFAULT = 10000000; uint256 public HALF_TIME_ATK_BOSS = 0; uint256 constant public VIRUS_MINING_PERIOD = 86400; uint256 public BOSS_DEF_DEFFAULT = 0; CryptoEngineerInterface public Engineer; CryptoMiningWarInterface public MiningWar; mapping(address => PlayerData) public players; mapping(uint256 => BossData) public bossData; mapping(address => bool) public miniGames; struct PlayerData { uint256 currentBossRoundNumber; uint256 lastBossRoundNumber; uint256 win; uint256 share; uint256 dame; uint256 nextTimeAtk; },0,"subgraph cluster_1272_CryptoBossWannaCry {
label=""CryptoBossWannaCry"";
""1272_startGame"" [label=""startGame""];
""1272_isBossWannaCryContract"" [label=""isBossWannaCryContract""];
""1272_getCurrentReward"" [label=""getCurrentReward""];
""1272_endAtkBoss"" [label=""endAtkBoss""];
""1272_updateShareETH"" [label=""updateShareETH""];
""1272_setContractsMiniGame"" [label=""setContractsMiniGame""];
""1272_isContractMiniGame"" [label=""isContractMiniGame""];
""1272_setMiningWarInterface"" [label=""setMiningWarInterface""];
""1272_startNewBoss"" [label=""startNewBoss""];
""1272_setEngineerInterface"" [label=""setEngineerInterface""];
""1272_constructor"" [label=""constructor""];
""1272_setHalfTimeAtkBoss"" [label=""setHalfTimeAtkBoss""];
""1272_calculateShareETH"" [label=""calculateShareETH""];
""1272_atkBoss"" [label=""atkBoss""];
""1272_fallback"" [label=""fallback""];
""1272_removeContractMiniGame"" [label=""removeContractMiniGame""];
""1272_setBossHPDefault"" [label=""setBossHPDefault""];
""1272_upgrade"" [label=""upgrade""];
""1272_setDefenceBoss"" [label=""setDefenceBoss""];
""1272_setupMiniGame"" [label=""setupMiniGame""];
""1272_devFee"" [label=""devFee""];
""1272_setBossRoundNumber"" [label=""setBossRoundNumber""];
""1272_randomNumber"" [label=""randomNumber""];
""1272_withdrawReward"" [label=""withdrawReward""];
""1272_endAtkBoss"" -> ""1272_startNewBoss"";
""1272_constructor"" -> ""1272_setMiningWarInterface"";
""1272_setHalfTimeAtkBoss"" -> ""1272_isAdministrator"";
""1272_setDefenceBoss"" -> ""1272_isAdministrator"";
""1272_startGame"" -> ""1272_startNewBoss"";
""1272_startGame"" -> ""1272_isAdministrator"";
""1272_getCurrentReward"" -> ""1272_calculateShareETH"";
""1272_atkBoss"" -> ""1272_updateShareETH"";
""1272_setBossRoundNumber"" -> ""1272_isAdministrator"";
""1272_setContractsMiniGame"" -> ""1272_isAdministrator"";
""1272_upgrade"" -> ""1272_isAdministrator"";
""1272_atkBoss"" -> ""1272_randomNumber"";
""1272_setEngineerInterface"" -> ""1272_isAdministrator"";
""1272_updateShareETH"" -> ""1272_calculateShareETH"";
""1272_withdrawReward"" -> ""1272_updateShareETH"";
""1272_removeContractMiniGame"" -> ""1272_isAdministrator"";
""1272_atkBoss"" -> ""1272_disableContract"";
""1272_atkBoss"" -> ""1272_endAtkBoss"";
""1272_constructor"" -> ""1272_setEngineerInterface"";
""1272_setBossHPDefault"" -> ""1272_isAdministrator"";
""1272_setMiningWarInterface"" -> ""1272_isAdministrator"";
}
"
0xf07d979303c50a8632848cb154c6b30980218c07.sol,PXLProperty,contract PXLProperty is StandardToken { uint8 constant LEVEL_1_MODERATOR = 1; uint8 constant LEVEL_2_MODERATOR = 2; uint8 constant LEVEL_1_ADMIN = 3; uint8 constant LEVEL_2_ADMIN = 4; uint8 constant LEVEL_1_ROOT = 5; uint8 constant LEVEL_2_ROOT = 6; uint8 constant LEVEL_3_ROOT = 7; uint8 constant LEVEL_PROPERTY_DAPPS = 8; uint8 constant LEVEL_PIXEL_PROPERTY = 9; uint8 constant FLAG_NSFW = 1; uint8 constant FLAG_BAN = 2; address pixelPropertyContract; mapping (address => uint8) public regulators; mapping (uint16 => Property) public properties; mapping (address => uint256[2]) public ownerWebsite; mapping (address => uint256[2]) public ownerHoverText; struct Property { uint8 flag; bool isInPrivateMode; address owner; address lastUpdater; uint256[5] colors; uint256 salePrice; uint256 lastUpdate; uint256 becomePublic; uint256 earnUntil; },0,"subgraph cluster_1595_PXLProperty {
label=""PXLProperty"";
""1595_setPixelPropertyContract"" [label=""setPixelPropertyContract""];
""1595_setPropertyEarnUntil"" [label=""setPropertyEarnUntil""];
""1595_getPropertyEarnUntil"" [label=""getPropertyEarnUntil""];
""1595_getPropertyData"" [label=""getPropertyData""];
""1595_setPropertyLastUpdate"" [label=""setPropertyLastUpdate""];
""1595_getPropertyLastUpdater"" [label=""getPropertyLastUpdater""];
""1595_setPropertyPrivateMode"" [label=""setPropertyPrivateMode""];
""1595_setOwnerLink"" [label=""setOwnerLink""];
""1595_rewardPXL"" [label=""rewardPXL""];
""1595_getPropertyPrivateMode"" [label=""getPropertyPrivateMode""];
""1595_getPropertySalePrice"" [label=""getPropertySalePrice""];
""1595_setPropertyOwnerSalePrice"" [label=""setPropertyOwnerSalePrice""];
""1595_setPropertySalePrice"" [label=""setPropertySalePrice""];
""1595_setPropertyLastUpdater"" [label=""setPropertyLastUpdater""];
""1595_setPropertyPrivateModeEarnUntilLastUpdateBecomePublic"" [label=""setPropertyPrivateModeEarnUntilLastUpdateBecomePublic""];
""1595_getPropertyOwner"" [label=""getPropertyOwner""];
""1595_setPropertyLastUpdaterLastUpdate"" [label=""setPropertyLastUpdaterLastUpdate""];
""1595_getPropertyLastUpdaterBecomePublic"" [label=""getPropertyLastUpdaterBecomePublic""];
""1595_setPropertyOwnerSalePricePrivateModeFlag"" [label=""setPropertyOwnerSalePricePrivateModeFlag""];
""1595_getPropertyColorsOfRow"" [label=""getPropertyColorsOfRow""];
""1595_setPropertyOwner"" [label=""setPropertyOwner""];
""1595_setPropertyBecomePublic"" [label=""setPropertyBecomePublic""];
""1595_setPropertyFlag"" [label=""setPropertyFlag""];
""1595_getRegulatorLevel"" [label=""getRegulatorLevel""];
""1595_setOwnerHoverText"" [label=""setOwnerHoverText""];
""1595_setPropertyRowColor"" [label=""setPropertyRowColor""];
""1595_setPropertyBecomePublicEarnUntil"" [label=""setPropertyBecomePublicEarnUntil""];
""1595_burnPXL"" [label=""burnPXL""];
""1595_getPropertyFlag"" [label=""getPropertyFlag""];
""1595_setPropertyColors"" [label=""setPropertyColors""];
""1595_getOwnerHoverText"" [label=""getOwnerHoverText""];
""1595_getPropertyColors"" [label=""getPropertyColors""];
""1595_getPropertyPrivateModeLastUpdateEarnUntil"" [label=""getPropertyPrivateModeLastUpdateEarnUntil""];
""1595_getOwnerLink"" [label=""getOwnerLink""];
""1595_setRegulatorAccessLevel"" [label=""setRegulatorAccessLevel""];
""1595_burnPXLRewardPXLx2"" [label=""burnPXLRewardPXLx2""];
""1595_getPropertyBecomePublic"" [label=""getPropertyBecomePublic""];
""1595_getPropertyLastUpdate"" [label=""getPropertyLastUpdate""];
""1595_setPropertyDAppContract"" [label=""setPropertyDAppContract""];
""1595_getPropertyOwnerSalePrice"" [label=""getPropertyOwnerSalePrice""];
""1595_burnPXLRewardPXL"" [label=""burnPXLRewardPXL""];
""1595_getPropertyPrivateModeBecomePublic"" [label=""getPropertyPrivateModeBecomePublic""];
""1595_PXLProperty"" [label=""PXLProperty""];
""1595_setOwnerHoverText"" -> ""1595_propertyDAppAccess"";
""1595_setPropertyOwnerSalePricePrivateModeFlag"" -> ""1595_pixelPropertyAccess"";
""1595_setPropertyOwner"" -> ""1595_pixelPropertyAccess"";
""1595_setPropertyBecomePublic"" -> ""1595_pixelPropertyAccess"";
""1595_setPropertyBecomePublicEarnUntil"" -> ""1595_pixelPropertyAccess"";
""1595_setPropertyEarnUntil"" -> ""1595_pixelPropertyAccess"";
""1595_setPropertyLastUpdate"" -> ""1595_pixelPropertyAccess"";
""1595_setPropertyPrivateMode"" -> ""1595_pixelPropertyAccess"";
""1595_burnPXLRewardPXL"" -> ""1595_pixelPropertyAccess"";
""1595_setPropertyLastUpdaterLastUpdate"" -> ""1595_pixelPropertyAccess"";
""1595_rewardPXL"" -> ""1595_pixelPropertyAccess"";
""1595_burnPXLRewardPXLx2"" -> ""1595_pixelPropertyAccess"";
""1595_setPropertyOwnerSalePrice"" -> ""1595_pixelPropertyAccess"";
""1595_setPropertyDAppContract"" -> ""1595_regulatorAccess"";
""1595_setPropertyFlag"" -> ""1595_regulatorAccess"";
""1595_burnPXL"" -> ""1595_pixelPropertyAccess"";
""1595_setPropertyPrivateModeEarnUntilLastUpdateBecomePublic"" -> ""1595_pixelPropertyAccess"";
""1595_setPixelPropertyContract"" -> ""1595_regulatorAccess"";
""1595_setPropertyColors"" -> ""1595_propertyDAppAccess"";
""1595_setRegulatorAccessLevel"" -> ""1595_regulatorAccess"";
""1595_setPropertySalePrice"" -> ""1595_pixelPropertyAccess"";
""1595_setPropertyRowColor"" -> ""1595_propertyDAppAccess"";
""1595_setOwnerLink"" -> ""1595_propertyDAppAccess"";
""1595_setPropertyLastUpdater"" -> ""1595_pixelPropertyAccess"";
}
"
0x57f097e0371d35f55a79a7c6f1ae2675c2f1efc4.sol,KYC,"contract KYC is Ownable { mapping (address => bool) public registeredAddress; mapping (address => bool) public admin; event Registered(address indexed _addr); event Unregistered(address indexed _addr); event SetAdmin(address indexed _addr, bool indexed _isAdmin); modifier onlyAdmin() { require(admin[msg.sender]); _; }",0,"subgraph cluster_257_KYC {
label=""KYC"";
""257_setAdmin"" [label=""setAdmin""];
""257_unregisterByList"" [label=""unregisterByList""];
""257_unregister"" [label=""unregister""];
""257_register"" [label=""register""];
""257_registerByList"" [label=""registerByList""];
""257_KYC"" [label=""KYC""];
""257_register"" -> ""257_onlyAdmin"";
""257_setAdmin"" -> ""257_onlyOwner"";
""257_registerByList"" -> ""257_onlyAdmin"";
""257_unregisterByList"" -> ""257_onlyAdmin"";
""257_unregister"" -> ""257_onlyAdmin"";
}
"
0xc0137065fa2214705f9fc921b68ace133fdf57a6.sol,DivMultisigHackable,contract DivMultisigHackable is Owned { using SafeMath for uint; HourglassInterface constant P3Dcontract_ = HourglassInterface(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe); SPASMInterface constant SPASM_ = SPASMInterface(0xfaAe60F2CE6491886C9f7C9356bd92F688cA66a1); function buyp3d(uint256 amt) internal{ P3Dcontract_.buy.value(amt)(this); },0,"subgraph cluster_884_DivMultisigHackable {
label=""DivMultisigHackable"";
""884_claimdivs"" [label=""claimdivs""];
""884_fallback"" [label=""fallback""];
""884_changevanity"" [label=""changevanity""];
""884_buyp3d"" [label=""buyp3d""];
""884_ethtobuyp3d"" [label=""ethtobuyp3d""];
""884_constructor"" [label=""constructor""];
""884_blockstillcontracthackable"" [label=""blockstillcontracthackable""];
""884_Expand"" [label=""Expand""];
""884_HackableETH"" [label=""HackableETH""];
""884_getMultisigencryotion"" [label=""getMultisigencryotion""];
""884_last50plusblokhack"" [label=""last50plusblokhack""];
""884_Encrypt"" [label=""Encrypt""];
""884_Hacksig"" [label=""Hacksig""];
""884_getMultisigOwner"" [label=""getMultisigOwner""];
""884_HackDivs"" [label=""HackDivs""];
""884_HackContract"" [label=""HackContract""];
""884_FetchlastHacker"" [label=""FetchlastHacker""];
""884_harvestabledivs"" [label=""harvestabledivs""];
""884_amountofp3d"" [label=""amountofp3d""];
""884_getMultisigcost"" [label=""getMultisigcost""];
""884_FetchVanity"" [label=""FetchVanity""];
""884_HackDivs"" -> ""884_claimdivs"";
""884_HackDivs"" -> ""884_harvestabledivs"";
}
"
0x887834d3b8d450b6bab109c252df3da286d73ce4.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },0,"subgraph cluster_1161_MiniMeToken {
label=""MiniMeToken"";
""1161_approveAndCall"" [label=""approveAndCall""];
""1161_totalSupply"" [label=""totalSupply""];
""1161_balanceOf"" [label=""balanceOf""];
""1161_updateValueAtNow"" [label=""updateValueAtNow""];
""1161_min"" [label=""min""];
""1161_createCloneToken"" [label=""createCloneToken""];
""1161_totalSupplyAt"" [label=""totalSupplyAt""];
""1161_enableTransfers"" [label=""enableTransfers""];
""1161_isContract"" [label=""isContract""];
""1161_balanceOfAt"" [label=""balanceOfAt""];
""1161_destroyTokens"" [label=""destroyTokens""];
""1161_getValueAt"" [label=""getValueAt""];
""1161_allowance"" [label=""allowance""];
""1161_MiniMeToken"" [label=""MiniMeToken""];
""1161_transferFrom"" [label=""transferFrom""];
""1161_fallback"" [label=""fallback""];
""1161_doTransfer"" [label=""doTransfer""];
""1161_claimTokens"" [label=""claimTokens""];
""1161_getBlockNumber"" [label=""getBlockNumber""];
""1161_transfer"" [label=""transfer""];
""1161_generateTokens"" [label=""generateTokens""];
""1161_approve"" [label=""approve""];
""1161_totalSupply"" -> ""1161_totalSupplyAt"";
""1161_destroyTokens"" -> ""1161_onlyController"";
""1161_balanceOfAt"" -> ""1161_min"";
""1161_generateTokens"" -> ""1161_balanceOf"";
""1161_MiniMeToken"" -> ""1161_getBlockNumber"";
""1161_doTransfer"" -> ""1161_isContract"";
""1161_generateTokens"" -> ""1161_onlyController"";
""1161_totalSupplyAt"" -> ""1161_getValueAt"";
""1161_balanceOf"" -> ""1161_balanceOfAt"";
""1161_generateTokens"" -> ""1161_updateValueAtNow"";
""1161_enableTransfers"" -> ""1161_onlyController"";
""1161_generateTokens"" -> ""1161_getValueAt"";
""1161_doTransfer"" -> ""1161_updateValueAtNow"";
""1161_destroyTokens"" -> ""1161_updateValueAtNow"";
""1161_destroyTokens"" -> ""1161_getBlockNumber"";
""1161_doTransfer"" -> ""1161_getBlockNumber"";
""1161_approve"" -> ""1161_isContract"";
""1161_totalSupplyAt"" -> ""1161_min"";
""1161_balanceOfAt"" -> ""1161_getValueAt"";
""1161_totalSupply"" -> ""1161_getBlockNumber"";
""1161_destroyTokens"" -> ""1161_balanceOf"";
""1161_transferFrom"" -> ""1161_doTransfer"";
""1161_balanceOf"" -> ""1161_getBlockNumber"";
""1161_doTransfer"" -> ""1161_balanceOfAt"";
""1161_destroyTokens"" -> ""1161_getValueAt"";
""1161_generateTokens"" -> ""1161_getBlockNumber"";
""1161_claimTokens"" -> ""1161_onlyController"";
""1161_createCloneToken"" -> ""1161_getBlockNumber"";
""1161_fallback"" -> ""1161_isContract"";
""1161_updateValueAtNow"" -> ""1161_getBlockNumber"";
""1161_transfer"" -> ""1161_doTransfer"";
""1161_approveAndCall"" -> ""1161_approve"";
}
"
0xf072f26100522ff1d5ecf40e74db5c25643b3e36.sol,PlaceToken,"contract PlaceToken is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.01 ether; uint256 private firstStepLimit = 0.8 ether; uint256 private secondStepLimit = 12 ether; mapping (uint256 => address) public placeIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public placeIndexToApproved; mapping (uint256 => uint256) private placeIndexToPrice; address public ceoAddress; struct Place { string name; string country; string owner_name; }",0,"subgraph cluster_863_PlaceToken {
label=""PlaceToken"";
""863_PlaceToken"" [label=""PlaceToken""];
""863_createContractPlace"" [label=""createContractPlace""];
""863_approve"" [label=""approve""];
""863_name"" [label=""name""];
""863__owns"" [label=""_owns""];
""863__approved"" [label=""_approved""];
""863_setStartingPrice"" [label=""setStartingPrice""];
""863_setOwnerName"" [label=""setOwnerName""];
""863_payout"" [label=""payout""];
""863_symbol"" [label=""symbol""];
""863_takeOwnership"" [label=""takeOwnership""];
""863_transferFrom"" [label=""transferFrom""];
""863__payout"" [label=""_payout""];
""863_setCEO"" [label=""setCEO""];
""863_balanceOf"" [label=""balanceOf""];
""863_purchase"" [label=""purchase""];
""863__addressNotNull"" [label=""_addressNotNull""];
""863__transfer"" [label=""_transfer""];
""863_totalSupply"" [label=""totalSupply""];
""863__createPlace"" [label=""_createPlace""];
""863_getStartingPrice"" [label=""getStartingPrice""];
""863_implementsERC721"" [label=""implementsERC721""];
""863_getPlace"" [label=""getPlace""];
""863_priceOf"" [label=""priceOf""];
""863_transfer"" [label=""transfer""];
""863_ownerOf"" [label=""ownerOf""];
""863_transfer"" -> ""863__owns"";
""863_setCEO"" -> ""863_onlyCEO"";
""863_approve"" -> ""863__owns"";
""863__createPlace"" -> ""863__transfer"";
""863_payout"" -> ""863_onlyCEO"";
""863_transferFrom"" -> ""863__approved"";
""863_payout"" -> ""863__payout"";
""863_purchase"" -> ""863__transfer"";
""863_createContractPlace"" -> ""863_onlyCEO"";
""863_transferFrom"" -> ""863__owns"";
""863_purchase"" -> ""863__addressNotNull"";
""863_takeOwnership"" -> ""863__transfer"";
""863_takeOwnership"" -> ""863__addressNotNull"";
""863_setStartingPrice"" -> ""863_onlyCEO"";
""863_createContractPlace"" -> ""863__createPlace"";
""863_setOwnerName"" -> ""863__owns"";
""863_transfer"" -> ""863__transfer"";
""863_transferFrom"" -> ""863__addressNotNull"";
""863_takeOwnership"" -> ""863__approved"";
""863_transferFrom"" -> ""863__transfer"";
""863_transfer"" -> ""863__addressNotNull"";
}
"
0x84d5c939ddfdc3ea033f03e18213a6906f94e0c3.sol,CryptoSagaDungeonVer1,"contract CryptoSagaDungeonVer1 is Claimable, Pausable { struct EnemyCombination { bool isPersonalized; uint32[4] enemySlotClassIds; }",0,"subgraph cluster_6266_CryptoSagaDungeonVer1 {
label=""CryptoSagaDungeonVer1"";
""6266_setRequiredProgressOfPreviousDungeon"" [label=""setRequiredProgressOfPreviousDungeon""];
""6266_setIsTurnDataSaved"" [label=""setIsTurnDataSaved""];
""6266_setGoldReward"" [label=""setGoldReward""];
""6266_setInitialEnemyCombination"" [label=""setInitialEnemyCombination""];
""6266_random"" [label=""random""];
""6266_enterDungeon"" [label=""enterDungeon""];
""6266_setLocationId"" [label=""setLocationId""];
""6266_sqrt"" [label=""sqrt""];
""6266_createNewCombination"" [label=""createNewCombination""];
""6266_getEnemyCombinationOfAddress"" [label=""getEnemyCombinationOfAddress""];
""6266_min"" [label=""min""];
""6266_getOrder"" [label=""getOrder""];
""6266_getPlayRecord"" [label=""getPlayRecord""];
""6266_getLastPlayDateTime"" [label=""getLastPlayDateTime""];
""6266_CryptoSagaDungeonVer1"" [label=""CryptoSagaDungeonVer1""];
""6266_checkOwnershipAndAvailability"" [label=""checkOwnershipAndAvailability""];
""6266_setCoolHero"" [label=""setCoolHero""];
""6266_setPossibleMobs"" [label=""setPossibleMobs""];
""6266_setPreviousDungeoonId"" [label=""setPreviousDungeoonId""];
""6266_max"" [label=""max""];
""6266_getInitialEnemyCombination"" [label=""getInitialEnemyCombination""];
""6266_setCoolDungeon"" [label=""setCoolDungeon""];
""6266_setExpReward"" [label=""setExpReward""];
""6266_giveReward"" [label=""giveReward""];
""6266_getPlayRecordNoTurnData"" [label=""getPlayRecordNoTurnData""];
""6266_setExpReward"" -> ""6266_onlyOwner"";
""6266_setInitialEnemyCombination"" -> ""6266_onlyOwner"";
""6266_setIsTurnDataSaved"" -> ""6266_onlyOwner"";
""6266_enterDungeon"" -> ""6266_checkOwnershipAndAvailability"";
""6266_enterDungeon"" -> ""6266_createNewCombination"";
""6266_setCoolHero"" -> ""6266_onlyOwner"";
""6266_enterDungeon"" -> ""6266_min"";
""6266_enterDungeon"" -> ""6266_giveReward"";
""6266_setGoldReward"" -> ""6266_onlyOwner"";
""6266_enterDungeon"" -> ""6266_getOrder"";
""6266_setPossibleMobs"" -> ""6266_onlyOwner"";
""6266_setCoolDungeon"" -> ""6266_onlyOwner"";
""6266_enterDungeon"" -> ""6266_max"";
""6266_enterDungeon"" -> ""6266_whenNotPaused"";
""6266_setLocationId"" -> ""6266_onlyOwner"";
""6266_giveReward"" -> ""6266_sqrt"";
""6266_enterDungeon"" -> ""6266_random"";
""6266_createNewCombination"" -> ""6266_random"";
""6266_setPreviousDungeoonId"" -> ""6266_onlyOwner"";
""6266_setRequiredProgressOfPreviousDungeon"" -> ""6266_onlyOwner"";
}
"
0xd6dbc68ffe25b456a338c2df645e75f7c3a19db7.sol,RBACMixin,"contract RBACMixin { string constant FORBIDDEN = ; mapping (address => bool) public owners; mapping (address => bool) public minters; event AddOwner(address indexed who); event DeleteOwner(address indexed who); event AddMinter(address indexed who); event DeleteMinter(address indexed who); constructor () public { _setOwner(msg.sender, true); }",0,"subgraph cluster_315_RBACMixin {
label=""RBACMixin"";
""315_addMinter"" [label=""addMinter""];
""315_isOwner"" [label=""isOwner""];
""315_addOwner"" [label=""addOwner""];
""315__setOwner"" [label=""_setOwner""];
""315__setMinter"" [label=""_setMinter""];
""315_constructor"" [label=""constructor""];
""315_deleteOwner"" [label=""deleteOwner""];
""315_deleteMinter"" [label=""deleteMinter""];
""315_isMinter"" [label=""isMinter""];
""315_deleteOwner"" -> ""315__setOwner"";
""315_deleteMinter"" -> ""315_onlyOwner"";
""315_addOwner"" -> ""315_onlyOwner"";
""315_addOwner"" -> ""315__setOwner"";
""315_addMinter"" -> ""315_onlyOwner"";
""315_constructor"" -> ""315__setOwner"";
""315_deleteMinter"" -> ""315__setMinter"";
""315_addMinter"" -> ""315__setMinter"";
""315_deleteOwner"" -> ""315_onlyOwner"";
}
"
0x02992370df72da5b039c3a6249beb27c487e63cb.sol,Exchange,"contract Exchange is SafeMath, Admin { mapping( address => mapping( address => uint )) public tokens; mapping( address => mapping( bytes32 => bool )) public orders; mapping( bytes32 => mapping( address => uint )) public ordersBalance; event Deposit( address token, address user, uint amount, uint balance ); event Withdraw( address token, address user, uint amount, uint balance ); event Order( address user, address tokenTake, uint amountTake, address tokenMake, uint amountMake, uint nonce ); event OrderCancel( address user, address tokenTake, uint amountTake, address tokenMake, uint amountMake, uint nonce ); event Trade( address makeAddress, address tokenMake, uint amountGiveMake, address takeAddress, address tokenTake, uint quantityTake, uint feeTakeXfer, uint balanceOrder ); event HashOutput(bytes32 hash); constructor( address _admin, address _feeAccount, uint _feeTake, string _version) public { admin = _admin; feeAccount = _feeAccount; feeTake = _feeTake; orderEnd = false; version = _version; pause = false; }",0,"subgraph cluster_1064_Exchange {
label=""Exchange"";
""1064_depositToken"" [label=""depositToken""];
""1064_order"" [label=""order""];
""1064_withdrawToken"" [label=""withdrawToken""];
""1064_withdrawEth"" [label=""withdrawEth""];
""1064_depositEth"" [label=""depositEth""];
""1064_assertToken"" [label=""assertToken""];
""1064_assertCompareBalance"" [label=""assertCompareBalance""];
""1064_trade"" [label=""trade""];
""1064_assertOrders"" [label=""assertOrders""];
""1064_tradeBalances"" [label=""tradeBalances""];
""1064_orderCancel"" [label=""orderCancel""];
""1064_assertPause"" [label=""assertPause""];
""1064_assertQuantity"" [label=""assertQuantity""];
""1064_constructor"" [label=""constructor""];
""1064_orderCancel"" -> ""1064_safeAdd"";
""1064_tradeBalances"" -> ""1064_safeMul"";
""1064_order"" -> ""1064_safeSub"";
""1064_withdrawEth"" -> ""1064_safeSub"";
""1064_withdrawEth"" -> ""1064_assertQuantity"";
""1064_withdrawToken"" -> ""1064_safeSub"";
""1064_trade"" -> ""1064_assertOrders"";
""1064_tradeBalances"" -> ""1064_safeAdd"";
""1064_withdrawToken"" -> ""1064_assertToken"";
""1064_tradeBalances"" -> ""1064_safeSub"";
""1064_depositToken"" -> ""1064_assertQuantity"";
""1064_trade"" -> ""1064_assertPause"";
""1064_trade"" -> ""1064_assertQuantity"";
""1064_trade"" -> ""1064_assertCompareBalance"";
""1064_depositEth"" -> ""1064_assertQuantity"";
""1064_trade"" -> ""1064_tradeBalances"";
""1064_depositToken"" -> ""1064_safeAdd"";
""1064_order"" -> ""1064_assertQuantity"";
""1064_depositEth"" -> ""1064_safeAdd"";
""1064_withdrawToken"" -> ""1064_assertQuantity"";
""1064_orderCancel"" -> ""1064_assertQuantity"";
""1064_trade"" -> ""1064_safeMul"";
""1064_depositToken"" -> ""1064_assertToken"";
""1064_order"" -> ""1064_assertCompareBalance"";
}
"
0xf48f68ffd138f003946eadd866bea913962fdd10.sol,ERC20,contract ERC20 is IERC20 { using SafeMath for uint256; mapping (address => uint256) private _balances; mapping (address => mapping (address => uint256)) private _allowed; uint256 private _totalSupply; function totalSupply() public view returns (uint256) { return _totalSupply; },0,"subgraph cluster_67_IERC20 {
label=""IERC20"";
""67_totalSupply"" [label=""totalSupply""];
""67_transferFrom"" [label=""transferFrom""];
""67_transfer"" [label=""transfer""];
""67_allowance"" [label=""allowance""];
""67_balanceOf"" [label=""balanceOf""];
""67_approve"" [label=""approve""];
}
"
0x3a5c3676afb1c81ff05ae57be70b97cd3c588313.sol,DetailedERC20,"contract DetailedERC20 is BasicToken { string public name; string public symbol; uint8 public decimals; function DetailedERC20(uint256 _totalSupply,string _name, string _symbol, uint8 _decimals) public { name = _name; symbol = _symbol; decimals = _decimals; totalSupply = _totalSupply; maxMSC = _totalSupply; balances[owner] = _totalSupply; }",0,"subgraph cluster_473_DetailedERC20 {
label=""DetailedERC20"";
""473_DetailedERC20"" [label=""DetailedERC20""];
}
"
0x26bf81f017a7149576dc5d82323172fcae9fd469.sol,BasicToken,"contract BasicToken is ERC20Basic { using SafeMath for uint; mapping(address => uint) balances; function transfer(address _to, uint _value) public{ balances[msg.sender] = balances[msg.sender].sub(_value); balances[_to] = balances[_to].add(_value); emit Transfer(msg.sender, _to, _value); }",0,"subgraph cluster_302_BasicToken {
label=""BasicToken"";
""302_balanceOf"" [label=""balanceOf""];
""302_transfer"" [label=""transfer""];
}
"
0x55ae5792903b179915e10065e26610435832a3f7.sol,owned,contract owned { address public owner; function owned() { owner = msg.sender; },0,"subgraph cluster_35_owned {
label=""owned"";
""35_transferOwnership"" [label=""transferOwnership""];
""35_owned"" [label=""owned""];
""35_transferOwnership"" -> ""35_onlyOwner"";
}
"
0x865cae29127a556ae9a0ed9e5f573ea43f83f6fd.sol,Atomoni,contract Atomoni is StandardToken { string public name; uint8 public decimals; string public symbol; string public version = ; uint256 public unitsOneEthCanBuy; uint256 public totalEthInWei; address public fundsWallet; function Atomoni() { balances[msg.sender] = 30000000000000000000000000000; totalSupply = 30000000000000000000000000000; name = ; decimals = 18; symbol = ; unitsOneEthCanBuy = 4444400; fundsWallet = msg.sender; },0,"subgraph cluster_421_Atomoni {
label=""Atomoni"";
""421_approveAndCall"" [label=""approveAndCall""];
""421_fallback"" [label=""fallback""];
""421_Atomoni"" [label=""Atomoni""];
}
"
0x296ec7b2b224ea122f8f8f9be2a824df092fc82c.sol,Scaltinof,"contract Scaltinof is ERC223, Ownable { using SafeMath for uint256; string public name = ; string public symbol = ; uint8 public decimals = 8; uint256 public initialSupply = 10e9 * 1e8; uint256 public totalSupply; uint256 public distributeAmount = 0; bool public mintingFinished = false; mapping(address => uint256) public balanceOf; mapping(address => mapping (address => uint256)) public allowance; mapping (address => bool) public frozenAccount; mapping (address => uint256) public unlockUnixTime; event FrozenFunds(address indexed target, bool frozen); event LockedFunds(address indexed target, uint256 locked); event Burn(address indexed from, uint256 amount); event Mint(address indexed to, uint256 amount); event MintFinished(); function Scaltinof() public { totalSupply = initialSupply; balanceOf[msg.sender] = totalSupply; }",0,"subgraph cluster_1844_Scaltinof {
label=""Scaltinof"";
""1844_transferToContract"" [label=""transferToContract""];
""1844_setDistributeAmount"" [label=""setDistributeAmount""];
""1844_transferToAddress"" [label=""transferToAddress""];
""1844_totalSupply"" [label=""totalSupply""];
""1844_distributeAirdrop"" [label=""distributeAirdrop""];
""1844_lockupAccounts"" [label=""lockupAccounts""];
""1844_symbol"" [label=""symbol""];
""1844_finishMinting"" [label=""finishMinting""];
""1844_freezeAccounts"" [label=""freezeAccounts""];
""1844_burn"" [label=""burn""];
""1844_mint"" [label=""mint""];
""1844_Scaltinof"" [label=""Scaltinof""];
""1844_autoDistribute"" [label=""autoDistribute""];
""1844_allowance"" [label=""allowance""];
""1844_balanceOf"" [label=""balanceOf""];
""1844_transfer"" [label=""transfer""];
""1844_fallback"" [label=""fallback""];
""1844_decimals"" [label=""decimals""];
""1844_transferFrom"" [label=""transferFrom""];
""1844_name"" [label=""name""];
""1844_isContract"" [label=""isContract""];
""1844_approve"" [label=""approve""];
""1844_collectTokens"" [label=""collectTokens""];
""1844_transfer"" -> ""1844_transferToContract"";
""1844_freezeAccounts"" -> ""1844_onlyOwner"";
""1844_burn"" -> ""1844_onlyOwner"";
""1844_collectTokens"" -> ""1844_onlyOwner"";
""1844_finishMinting"" -> ""1844_onlyOwner"";
""1844_transfer"" -> ""1844_isContract"";
""1844_mint"" -> ""1844_onlyOwner"";
""1844_transfer"" -> ""1844_transferToAddress"";
""1844_setDistributeAmount"" -> ""1844_onlyOwner"";
""1844_lockupAccounts"" -> ""1844_onlyOwner"";
""1844_finishMinting"" -> ""1844_canMint"";
""1844_fallback"" -> ""1844_autoDistribute"";
""1844_mint"" -> ""1844_canMint"";
}
"
0x56cc2f2acbb8445b896b4280e4e6bc36409112e7.sol,SMSCoin,contract SMSCoin is ERC20 { string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 3; uint256 public constant UNIT = 10 ** decimals; uint public totalSupply = 0; uint tokenSaleLot1 = 150000 * UNIT; uint reservedBonusLot1 = 45000 * UNIT; uint tokenSaleLot2 = 50000 * UNIT; uint tokenSaleLot3 = 50000 * UNIT; struct BonusStruct { uint8 ratio1; uint8 ratio2; uint8 ratio3; uint8 ratio4; },0,"subgraph cluster_1514_SMSCoin {
label=""SMSCoin"";
""1514_transfer"" [label=""transfer""];
""1514_resumePhase"" [label=""resumePhase""];
""1514_start3BonusPeriod3"" [label=""start3BonusPeriod3""];
""1514_saleCounter"" [label=""saleCounter""];
""1514_totalSupply"" [label=""totalSupply""];
""1514_transferTokens"" [label=""transferTokens""];
""1514_SMSCoin"" [label=""SMSCoin""];
""1514_burnSMSProcess"" [label=""burnSMSProcess""];
""1514_calcBonus"" [label=""calcBonus""];
""1514_sentBonus"" [label=""sentBonus""];
""1514_safeMul"" [label=""safeMul""];
""1514_soldToken"" [label=""soldToken""];
""1514_approve"" [label=""approve""];
""1514_start4NormalPeriod"" [label=""start4NormalPeriod""];
""1514_addAddress"" [label=""addAddress""];
""1514_transferFrom"" [label=""transferFrom""];
""1514_getAddressSize"" [label=""getAddressSize""];
""1514_fallback"" [label=""fallback""];
""1514_start6Phase2025"" [label=""start6Phase2025""];
""1514_start1BonusPeriod1"" [label=""start1BonusPeriod1""];
""1514_start5Phase2020"" [label=""start5Phase2020""];
""1514_getAddress"" [label=""getAddress""];
""1514_safeAdd"" [label=""safeAdd""];
""1514_start2BonusPeriod2"" [label=""start2BonusPeriod2""];
""1514_pausePhase"" [label=""pausePhase""];
""1514_safeDiv"" [label=""safeDiv""];
""1514_x3Token"" [label=""x3Token""];
""1514_drainETH"" [label=""drainETH""];
""1514_setTokenPrice"" [label=""setTokenPrice""];
""1514_balanceOf"" [label=""balanceOf""];
""1514_setBonus"" [label=""setBonus""];
""1514_allowance"" [label=""allowance""];
""1514_fallback"" -> ""1514_calcBonus"";
""1514_start3BonusPeriod3"" -> ""1514_setBonus"";
""1514_transfer"" -> ""1514_addAddress"";
""1514_start2BonusPeriod2"" -> ""1514_onlyOwner"";
""1514_resumePhase"" -> ""1514_onlyOwner"";
""1514_start5Phase2020"" -> ""1514_onlyOwner"";
""1514_fallback"" -> ""1514_transferTokens"";
""1514_start1BonusPeriod1"" -> ""1514_onlyOwner"";
""1514_fallback"" -> ""1514_safeDiv"";
""1514_start6Phase2025"" -> ""1514_x3Token"";
""1514_start1BonusPeriod1"" -> ""1514_addAddress"";
""1514_start1BonusPeriod1"" -> ""1514_setBonus"";
""1514_transferTokens"" -> ""1514_addAddress"";
""1514_setTokenPrice"" -> ""1514_onlyOwner"";
""1514_start3BonusPeriod3"" -> ""1514_onlyOwner"";
""1514_start4NormalPeriod"" -> ""1514_onlyOwner"";
""1514_start6Phase2025"" -> ""1514_burnSMSProcess"";
""1514_start2BonusPeriod2"" -> ""1514_setBonus"";
""1514_start4NormalPeriod"" -> ""1514_setBonus"";
""1514_start5Phase2020"" -> ""1514_x3Token"";
""1514_start5Phase2020"" -> ""1514_burnSMSProcess"";
""1514_start6Phase2025"" -> ""1514_onlyOwner"";
""1514_drainETH"" -> ""1514_onlyOwner"";
""1514_pausePhase"" -> ""1514_onlyOwner"";
}
"
0x509a38b7a1cc0dcd83aa9d06214663d9ec7c7f4a.sol,BlocksquareToken,"contract BlocksquareToken is ERC20Token, owned { using SafeMath for uint256; string public name = ; string public symbol = ; uint8 public decimals = 18; bool public tokenFrozen; uint256 supply; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowances; mapping (address => bool) allowedToMint; event TokenFrozen(bool _frozen, string _reason); event Mint(address indexed _to, uint256 _value); function BlocksquareToken() public { tokenFrozen = true; }",0,"subgraph cluster_529_BlocksquareToken {
label=""BlocksquareToken"";
""529_isAllowedToMint"" [label=""isAllowedToMint""];
""529_BlocksquareToken"" [label=""BlocksquareToken""];
""529_changeAllowanceToMint"" [label=""changeAllowanceToMint""];
""529_changeFreezeTransaction"" [label=""changeFreezeTransaction""];
""529_transfer"" [label=""transfer""];
""529_balanceOf"" [label=""balanceOf""];
""529_transferFrom"" [label=""transferFrom""];
""529_totalSupply"" [label=""totalSupply""];
""529_fallback"" [label=""fallback""];
""529_approve"" [label=""approve""];
""529__transfer"" [label=""_transfer""];
""529_mintTokens"" [label=""mintTokens""];
""529_allowance"" [label=""allowance""];
""529_changeAllowanceToMint"" -> ""529_onlyOwner"";
""529_transfer"" -> ""529__transfer"";
""529_changeFreezeTransaction"" -> ""529_onlyOwner"";
""529_transferFrom"" -> ""529__transfer"";
}
"
0x1dfabf381d80dd29d43bc347207b30a5c484bbd0.sol,AirDropPromo,"contract AirDropPromo { string public url = ""https: string public name; string public symbol; address owner; uint256 public totalSupply; event Transfer(address indexed _from, address indexed _to, uint256 _value); function AirDropPromo(string _tokenName, string _tokenSymbol) public { owner = msg.sender; totalSupply = 1; name = _tokenName; symbol = _tokenSymbol; }",0,"subgraph cluster_175_AirDropPromo {
label=""AirDropPromo"";
""175_balanceOf"" [label=""balanceOf""];
""175_promo"" [label=""promo""];
""175_transferFrom"" [label=""transferFrom""];
""175_allowance"" [label=""allowance""];
""175_AirDropPromo"" [label=""AirDropPromo""];
""175_fallback"" [label=""fallback""];
""175_approve"" [label=""approve""];
""175_setInfo"" [label=""setInfo""];
""175_transfer"" [label=""transfer""];
}
"
0x3688587725ed6dda84bcd25aeeb04997415da50a.sol,BFreeContract,"contract BFreeContract is ERC20Interface, owned{ string public constant name = ; string public constant symbol = ; uint public constant decimals = 0; uint256 public _totalSupply = 2240000; uint256 public icoMin = 300000; uint256 public preIcoLimit = 600000; uint256 public countHolders = 0; uint256 public amountOfInvestments = 0; uint256 preICOprice; uint256 ICOprice; uint256 public currentTokenPrice; uint256 public sellPrice; bool public preIcoIsRunning; bool public minimalGoalReached; bool public icoIsClosed; bool icoExitIsPossible; mapping (address => uint256) public tokenBalanceOf; mapping(address => mapping (address => uint256)) allowed; mapping(address => bool) frozenAccount; event FrozenFunds(address initiator, address account, string status); event BonusChanged(uint8 bonusOld, uint8 bonusNew); event minGoalReached(uint256 minIcoAmount, string notice); event preIcoEnded(uint256 preIcoAmount, string notice); event priceUpdated(uint256 oldPrice, uint256 newPrice, string notice); event withdrawed(address _to, uint256 summe, string notice); event deposited(address _from, uint256 summe, string notice); event orderToTransfer(address initiator, address _from, address _to, uint256 summe, string notice); event tokenCreated(address _creator, uint256 summe, string notice); event tokenDestroyed(address _destroyer, uint256 summe, string notice); event icoStatusUpdated(address _initiator, string status); function BFreeContract() { preIcoIsRunning = true; minimalGoalReached = false; icoExitIsPossible = false; icoIsClosed = false; tokenBalanceOf[this] += _totalSupply; allowed[this][owner] = _totalSupply; allowed[this][supervisor] = _totalSupply; currentTokenPrice = 0.024340770791075100 * 1 ether; preICOprice = 0.024340770791075100 * 1 ether; ICOprice = 0.040567951318458400 * 1 ether; sellPrice = 0; updatePrices(); }",0,"subgraph cluster_1780_BFreeContract {
label=""BFreeContract"";
""1780_destroyToken"" [label=""destroyToken""];
""1780_buyToken"" [label=""buyToken""];
""1780_sellMaximumPossibleAmountOfTokens"" [label=""sellMaximumPossibleAmountOfTokens""];
""1780_setSellPrice"" [label=""setSellPrice""];
""1780_calculateTheEndPrice"" [label=""calculateTheEndPrice""];
""1780_transferOwnership"" [label=""transferOwnership""];
""1780_setPreICOPrice"" [label=""setPreICOPrice""];
""1780_balanceOf"" [label=""balanceOf""];
""1780_freezeAccount"" [label=""freezeAccount""];
""1780_checkMinimalGoal"" [label=""checkMinimalGoal""];
""1780_allowIcoExit"" [label=""allowIcoExit""];
""1780_approve"" [label=""approve""];
""1780_checkPreIcoStatus"" [label=""checkPreIcoStatus""];
""1780__transfer"" [label=""_transfer""];
""1780_fallback"" [label=""fallback""];
""1780_buy"" [label=""buy""];
""1780_exitThisIcoForHalfOfTokenPrice"" [label=""exitThisIcoForHalfOfTokenPrice""];
""1780_getAllMyTokensForAllEtherOnContract"" [label=""getAllMyTokensForAllEtherOnContract""];
""1780_withdraw"" [label=""withdraw""];
""1780_collect"" [label=""collect""];
""1780_setICOPrice"" [label=""setICOPrice""];
""1780_sell"" [label=""sell""];
""1780_setPrices"" [label=""setPrices""];
""1780_updatePrices"" [label=""updatePrices""];
""1780_BFreeContract"" [label=""BFreeContract""];
""1780_deposit"" [label=""deposit""];
""1780_mintToken"" [label=""mintToken""];
""1780_stopThisIco"" [label=""stopThisIco""];
""1780_checkFrozenAccounts"" [label=""checkFrozenAccounts""];
""1780_transfer"" [label=""transfer""];
""1780_allowance"" [label=""allowance""];
""1780_transferFrom"" [label=""transferFrom""];
""1780_totalSupply"" [label=""totalSupply""];
""1780_destroyToken"" -> ""1780_isOwner"";
""1780_buyToken"" -> ""1780_checkMinimalGoal"";
""1780_sell"" -> ""1780__transfer"";
""1780_setSellPrice"" -> ""1780_isOwner"";
""1780_exitThisIcoForHalfOfTokenPrice"" -> ""1780__transfer"";
""1780_transferFrom"" -> ""1780__transfer"";
""1780_collect"" -> ""1780_isOwner"";
""1780_fallback"" -> ""1780_buyToken"";
""1780_sellMaximumPossibleAmountOfTokens"" -> ""1780_sell"";
""1780_transferOwnership"" -> ""1780_isOwner"";
""1780_setPrices"" -> ""1780_isOwner"";
""1780_deposit"" -> ""1780_isOwner"";
""1780_setPreICOPrice"" -> ""1780_updatePrices"";
""1780_setICOPrice"" -> ""1780_updatePrices"";
""1780_BFreeContract"" -> ""1780_updatePrices"";
""1780_buy"" -> ""1780_buyToken"";
""1780_buyToken"" -> ""1780_updatePrices"";
""1780_setPreICOPrice"" -> ""1780_isOwner"";
""1780_transfer"" -> ""1780__transfer"";
""1780_stopThisIco"" -> ""1780_isOwner"";
""1780_collect"" -> ""1780_withdraw"";
""1780_withdraw"" -> ""1780_isOwner"";
""1780_allowIcoExit"" -> ""1780_isOwner"";
""1780_freezeAccount"" -> ""1780_isOwner"";
""1780_mintToken"" -> ""1780_isOwner"";
""1780_getAllMyTokensForAllEtherOnContract"" -> ""1780__transfer"";
""1780_setPrices"" -> ""1780_updatePrices"";
""1780_setICOPrice"" -> ""1780_isOwner"";
""1780_buyToken"" -> ""1780__transfer"";
""1780_updatePrices"" -> ""1780_checkPreIcoStatus"";
}
"
0x1d18f44256a27862d886e27191d55ab4029172c1.sol,Admin,"contract Admin is Variable, Modifiers, Event { using safeMath for uint256; function admin_transfer_tempLockAddress(address _to, uint256 _value, uint256 _unlockTime) public isOwner returns(bool success) { balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value); balanceOf[_to] = balanceOf[_to].add(_value); tempLockedAddress[_to] = _unlockTime; emit Transfer(msg.sender, _to, _value); emit TempLockedAddress(_to, _unlockTime); return true; }",0,"subgraph cluster_708_Admin {
label=""Admin"";
""708_admin_tokenAdd"" [label=""admin_tokenAdd""];
""708_admin_tokenBurn"" [label=""admin_tokenBurn""];
""708_admin_renewLockedAddress"" [label=""admin_renewLockedAddress""];
""708_admin_transferFrom"" [label=""admin_transferFrom""];
""708_admin_transfer_tempLockAddress"" [label=""admin_transfer_tempLockAddress""];
""708_admin_renewLockedAddress"" -> ""708_isOwner"";
""708_admin_tokenBurn"" -> ""708_isOwner"";
""708_admin_transferFrom"" -> ""708_isOwner"";
""708_admin_transfer_tempLockAddress"" -> ""708_isOwner"";
""708_admin_tokenAdd"" -> ""708_isOwner"";
}
"
0x0ee1389404796e02ae1b40f7aa610cfc6ba2985c.sol,FREEToken,"contract FREEToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 5000000000000000000000000000; balances[0x525C9E7c5CEc37ADfcDDf2C70Eea25DFA6004693] = _totalSupply; emit Transfer(address(0), 0x525C9E7c5CEc37ADfcDDf2C70Eea25DFA6004693, _totalSupply); }",0,"subgraph cluster_640_FREEToken {
label=""FREEToken"";
""640_totalSupply"" [label=""totalSupply""];
""640_fallback"" [label=""fallback""];
""640_transferFrom"" [label=""transferFrom""];
""640_allowance"" [label=""allowance""];
""640_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""640_sendBatchCS"" [label=""sendBatchCS""];
""640_balanceOf"" [label=""balanceOf""];
""640_constructor"" [label=""constructor""];
""640_transfer"" [label=""transfer""];
""640_approve"" [label=""approve""];
""640_approveAndCall"" [label=""approveAndCall""];
""640_transfer"" -> ""640_safeSub"";
""640_transferFrom"" -> ""640_safeAdd"";
""640_transferAnyERC20Token"" -> ""640_onlyOwner"";
""640_transfer"" -> ""640_safeAdd"";
""640_transferFrom"" -> ""640_safeSub"";
}
"
0x39ffccecc551f35f8dfcb52c8c01060919aed1ea.sol,FoMo3DUnlimited,"contract FoMo3DUnlimited is modularShort { using SafeMath for *; using NameFilter for string; using F3DKeysCalcShort for uint256; PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0x137679d52dfa0d8191600046afc29634e349182d); address private admin = msg.sender; string constant public name = ; string constant public symbol = ; uint256 private rndExtra_ = 1 minutes; uint256 private rndGap_ = 1 minutes; uint256 constant private rndInit_ = 72 hours; uint256 constant private rndInc_ = 1 seconds; uint256 constant private rndMax_ = 999 years; uint256 public airDropPot_; uint256 public airDropTracker_ = 0; uint256 public rID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => F3Ddatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => F3Ddatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => F3Ddatasets.Round) public round_; mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping (uint256 => F3Ddatasets.TeamFee) public fees_; mapping (uint256 => F3Ddatasets.PotSplit) public potSplit_; constructor() public { fees_[0] = F3Ddatasets.TeamFee(20,0); fees_[1] = F3Ddatasets.TeamFee(43,0); fees_[2] = F3Ddatasets.TeamFee(52,0); fees_[3] = F3Ddatasets.TeamFee(43,0); potSplit_[0] = F3Ddatasets.PotSplit(30,0); potSplit_[1] = F3Ddatasets.PotSplit(20,0); potSplit_[2] = F3Ddatasets.PotSplit(10,0); potSplit_[3] = F3Ddatasets.PotSplit(20,0); }",0,"subgraph cluster_4167_FoMo3DUnlimited {
label=""FoMo3DUnlimited"";
""4167_updateTimer"" [label=""updateTimer""];
""4167_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""4167_buyXaddr"" [label=""buyXaddr""];
""4167_getPlayerVaults"" [label=""getPlayerVaults""];
""4167_core"" [label=""core""];
""4167_registerNameXaddr"" [label=""registerNameXaddr""];
""4167_managePlayer"" [label=""managePlayer""];
""4167_buyXid"" [label=""buyXid""];
""4167_registerNameXID"" [label=""registerNameXID""];
""4167_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""4167_verifyTeam"" [label=""verifyTeam""];
""4167_getBuyPrice"" [label=""getBuyPrice""];
""4167_distributeExternal"" [label=""distributeExternal""];
""4167_withdraw"" [label=""withdraw""];
""4167_reLoadXid"" [label=""reLoadXid""];
""4167_distributeInternal"" [label=""distributeInternal""];
""4167_calcKeysReceived"" [label=""calcKeysReceived""];
""4167_withdrawEarnings"" [label=""withdrawEarnings""];
""4167_updateGenVault"" [label=""updateGenVault""];
""4167_endRound"" [label=""endRound""];
""4167_potSwap"" [label=""potSwap""];
""4167_receivePlayerInfo"" [label=""receivePlayerInfo""];
""4167_receivePlayerNameList"" [label=""receivePlayerNameList""];
""4167_updateMasks"" [label=""updateMasks""];
""4167_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""4167_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""4167_reLoadCore"" [label=""reLoadCore""];
""4167_reLoadXaddr"" [label=""reLoadXaddr""];
""4167_buyCore"" [label=""buyCore""];
""4167_iWantXKeys"" [label=""iWantXKeys""];
""4167_constructor"" [label=""constructor""];
""4167_registerNameXname"" [label=""registerNameXname""];
""4167_determinePID"" [label=""determinePID""];
""4167_airdrop"" [label=""airdrop""];
""4167_endTx"" [label=""endTx""];
""4167_reLoadXname"" [label=""reLoadXname""];
""4167_fallback"" [label=""fallback""];
""4167_activate"" [label=""activate""];
""4167_getTimeLeft"" [label=""getTimeLeft""];
""4167_buyXname"" [label=""buyXname""];
""4167_registerNameXaddr"" -> ""4167_isHuman"";
""4167_fallback"" -> ""4167_determinePID"";
""4167_buyXid"" -> ""4167_isWithinLimits"";
""4167_core"" -> ""4167_updateTimer"";
""4167_registerNameXID"" -> ""4167_isHuman"";
""4167_buyXid"" -> ""4167_verifyTeam"";
""4167_buyXid"" -> ""4167_isHuman"";
""4167_buyXname"" -> ""4167_isWithinLimits"";
""4167_reLoadXid"" -> ""4167_isWithinLimits"";
""4167_reLoadXname"" -> ""4167_isWithinLimits"";
""4167_fallback"" -> ""4167_buyCore"";
""4167_reLoadXname"" -> ""4167_verifyTeam"";
""4167_buyXaddr"" -> ""4167_buyCore"";
""4167_buyXid"" -> ""4167_buyCore"";
""4167_reLoadXid"" -> ""4167_isHuman"";
""4167_reLoadXaddr"" -> ""4167_isHuman"";
""4167_reLoadXaddr"" -> ""4167_verifyTeam"";
""4167_core"" -> ""4167_distributeExternal"";
""4167_getPlayerVaults"" -> ""4167_calcUnMaskedEarnings"";
""4167_core"" -> ""4167_airdrop"";
""4167_buyXname"" -> ""4167_buyCore"";
""4167_buyXaddr"" -> ""4167_isActivated"";
""4167_reLoadXid"" -> ""4167_verifyTeam"";
""4167_distributeInternal"" -> ""4167_updateMasks"";
""4167_withdrawEarnings"" -> ""4167_updateGenVault"";
""4167_core"" -> ""4167_endTx"";
""4167_buyXname"" -> ""4167_isActivated"";
""4167_withdraw"" -> ""4167_withdrawEarnings"";
""4167_reLoadXname"" -> ""4167_isActivated"";
""4167_buyCore"" -> ""4167_core"";
""4167_buyXaddr"" -> ""4167_determinePID"";
""4167_buyXaddr"" -> ""4167_isHuman"";
""4167_getPlayerInfoByAddress"" -> ""4167_calcUnMaskedEarnings"";
""4167_registerNameXname"" -> ""4167_isHuman"";
""4167_reLoadXname"" -> ""4167_isHuman"";
""4167_core"" -> ""4167_managePlayer"";
""4167_reLoadXname"" -> ""4167_reLoadCore"";
""4167_reLoadCore"" -> ""4167_core"";
""4167_getPlayerVaults"" -> ""4167_getPlayerVaultsHelper"";
""4167_buyXname"" -> ""4167_verifyTeam"";
""4167_fallback"" -> ""4167_isHuman"";
""4167_withdraw"" -> ""4167_isHuman"";
""4167_managePlayer"" -> ""4167_updateGenVault"";
""4167_buyXname"" -> ""4167_determinePID"";
""4167_reLoadXaddr"" -> ""4167_reLoadCore"";
""4167_fallback"" -> ""4167_isWithinLimits"";
""4167_core"" -> ""4167_distributeInternal"";
""4167_updateGenVault"" -> ""4167_calcUnMaskedEarnings"";
""4167_reLoadCore"" -> ""4167_endRound"";
""4167_buyCore"" -> ""4167_endRound"";
""4167_buyXaddr"" -> ""4167_verifyTeam"";
""4167_buyXid"" -> ""4167_isActivated"";
""4167_reLoadXid"" -> ""4167_reLoadCore"";
""4167_reLoadXid"" -> ""4167_isActivated"";
""4167_reLoadXaddr"" -> ""4167_isActivated"";
""4167_buyXid"" -> ""4167_determinePID"";
""4167_withdraw"" -> ""4167_isActivated"";
""4167_fallback"" -> ""4167_isActivated"";
""4167_reLoadXaddr"" -> ""4167_isWithinLimits"";
""4167_withdraw"" -> ""4167_endRound"";
""4167_buyXaddr"" -> ""4167_isWithinLimits"";
""4167_reLoadCore"" -> ""4167_withdrawEarnings"";
""4167_buyXname"" -> ""4167_isHuman"";
}
"
0x6db943251e4126f913e9733821031791e75df713.sol,ReadyPlayerONE,"contract ReadyPlayerONE is modularLong { using SafeMath for *; using NameFilter for string; using RP1KeysCalcLong for uint256; address community_addr = 0x4c20d0ab4baadbce39fe6ac94cefd99b7686339c; address marketing_addr = 0x9386b3cc1155764b60ca81fc83761777f6487ac3; PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0x15247cF99b5870F54EA17e85E1aF8667a58a6644); string constant public name = ; string constant public symbol = ; uint256 private rndGap_ = 0; uint256 constant private rndInit_ = 1 hours; uint256 constant private rndInc_ = 30 seconds; uint256 constant private rndMax_ = 12 hours; uint256 public airDropPot_; uint256 public airDropTracker_ = 0; uint256 public rID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => RP1datasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => RP1datasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => RP1datasets.Round) public round_; mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping (uint256 => RP1datasets.TeamFee) public fees_; mapping (uint256 => RP1datasets.PotSplit) public potSplit_; constructor() public { fees_[0] = RP1datasets.TeamFee(30,0); fees_[1] = RP1datasets.TeamFee(41,0); fees_[2] = RP1datasets.TeamFee(60,0); fees_[3] = RP1datasets.TeamFee(46,0); potSplit_[0] = RP1datasets.PotSplit(18,4); potSplit_[1] = RP1datasets.PotSplit(25,0); potSplit_[2] = RP1datasets.PotSplit(22,8); potSplit_[3] = RP1datasets.PotSplit(32,2); }",0,"subgraph cluster_4102_ReadyPlayerONE {
label=""ReadyPlayerONE"";
""4102_potSwap"" [label=""potSwap""];
""4102_withdrawEarnings"" [label=""withdrawEarnings""];
""4102_endRound"" [label=""endRound""];
""4102_getTimeLeft"" [label=""getTimeLeft""];
""4102_endTx"" [label=""endTx""];
""4102_reLoadXaddr"" [label=""reLoadXaddr""];
""4102_getPlayerVaults"" [label=""getPlayerVaults""];
""4102_buyXaddr"" [label=""buyXaddr""];
""4102_reLoadXid"" [label=""reLoadXid""];
""4102_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""4102_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""4102_reLoadCore"" [label=""reLoadCore""];
""4102_constructor"" [label=""constructor""];
""4102_withdraw"" [label=""withdraw""];
""4102_calcKeysReceived"" [label=""calcKeysReceived""];
""4102_airdrop"" [label=""airdrop""];
""4102_getBuyPrice"" [label=""getBuyPrice""];
""4102_updateGenVault"" [label=""updateGenVault""];
""4102_managePlayer"" [label=""managePlayer""];
""4102_registerNameXname"" [label=""registerNameXname""];
""4102_buyXname"" [label=""buyXname""];
""4102_verifyTeam"" [label=""verifyTeam""];
""4102_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""4102_buyCore"" [label=""buyCore""];
""4102_core"" [label=""core""];
""4102_iWantXKeys"" [label=""iWantXKeys""];
""4102_fallback"" [label=""fallback""];
""4102_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""4102_receivePlayerNameList"" [label=""receivePlayerNameList""];
""4102_distributeInternal"" [label=""distributeInternal""];
""4102_registerNameXaddr"" [label=""registerNameXaddr""];
""4102_registerNameXID"" [label=""registerNameXID""];
""4102_receivePlayerInfo"" [label=""receivePlayerInfo""];
""4102_buyXid"" [label=""buyXid""];
""4102_updateTimer"" [label=""updateTimer""];
""4102_activate"" [label=""activate""];
""4102_updateMasks"" [label=""updateMasks""];
""4102_distributeExternal"" [label=""distributeExternal""];
""4102_determinePID"" [label=""determinePID""];
""4102_reLoadXname"" [label=""reLoadXname""];
""4102_reLoadXid"" -> ""4102_isWithinLimits"";
""4102_buyXaddr"" -> ""4102_buyCore"";
""4102_buyXname"" -> ""4102_verifyTeam"";
""4102_buyXid"" -> ""4102_buyCore"";
""4102_reLoadXname"" -> ""4102_reLoadCore"";
""4102_core"" -> ""4102_distributeInternal"";
""4102_buyXaddr"" -> ""4102_isActivated"";
""4102_reLoadCore"" -> ""4102_withdrawEarnings"";
""4102_core"" -> ""4102_distributeExternal"";
""4102_withdraw"" -> ""4102_isHuman"";
""4102_reLoadXid"" -> ""4102_reLoadCore"";
""4102_fallback"" -> ""4102_isActivated"";
""4102_core"" -> ""4102_managePlayer"";
""4102_getPlayerVaults"" -> ""4102_getPlayerVaultsHelper"";
""4102_buyXname"" -> ""4102_buyCore"";
""4102_buyXname"" -> ""4102_isHuman"";
""4102_fallback"" -> ""4102_isWithinLimits"";
""4102_reLoadXid"" -> ""4102_isActivated"";
""4102_buyXaddr"" -> ""4102_determinePID"";
""4102_reLoadCore"" -> ""4102_endRound"";
""4102_getPlayerInfoByAddress"" -> ""4102_calcUnMaskedEarnings"";
""4102_distributeInternal"" -> ""4102_updateMasks"";
""4102_reLoadCore"" -> ""4102_core"";
""4102_buyXid"" -> ""4102_isWithinLimits"";
""4102_managePlayer"" -> ""4102_updateGenVault"";
""4102_reLoadXaddr"" -> ""4102_isActivated"";
""4102_reLoadXaddr"" -> ""4102_verifyTeam"";
""4102_buyCore"" -> ""4102_core"";
""4102_reLoadXaddr"" -> ""4102_reLoadCore"";
""4102_reLoadXname"" -> ""4102_isWithinLimits"";
""4102_updateGenVault"" -> ""4102_calcUnMaskedEarnings"";
""4102_fallback"" -> ""4102_buyCore"";
""4102_buyXid"" -> ""4102_isHuman"";
""4102_withdraw"" -> ""4102_isActivated"";
""4102_registerNameXname"" -> ""4102_isHuman"";
""4102_reLoadXname"" -> ""4102_verifyTeam"";
""4102_buyCore"" -> ""4102_endRound"";
""4102_buyXaddr"" -> ""4102_isHuman"";
""4102_fallback"" -> ""4102_isHuman"";
""4102_withdrawEarnings"" -> ""4102_updateGenVault"";
""4102_reLoadXid"" -> ""4102_isHuman"";
""4102_core"" -> ""4102_airdrop"";
""4102_fallback"" -> ""4102_determinePID"";
""4102_buyXid"" -> ""4102_determinePID"";
""4102_buyXaddr"" -> ""4102_verifyTeam"";
""4102_reLoadXname"" -> ""4102_isHuman"";
""4102_buyXid"" -> ""4102_verifyTeam"";
""4102_buyXaddr"" -> ""4102_isWithinLimits"";
""4102_buyXname"" -> ""4102_determinePID"";
""4102_registerNameXaddr"" -> ""4102_isHuman"";
""4102_registerNameXID"" -> ""4102_isHuman"";
""4102_buyXname"" -> ""4102_isWithinLimits"";
""4102_reLoadXid"" -> ""4102_verifyTeam"";
""4102_reLoadXname"" -> ""4102_isActivated"";
""4102_core"" -> ""4102_endTx"";
""4102_getPlayerVaults"" -> ""4102_calcUnMaskedEarnings"";
""4102_withdraw"" -> ""4102_endRound"";
""4102_buyXname"" -> ""4102_isActivated"";
""4102_core"" -> ""4102_updateTimer"";
""4102_reLoadXaddr"" -> ""4102_isHuman"";
""4102_buyXid"" -> ""4102_isActivated"";
""4102_withdraw"" -> ""4102_withdrawEarnings"";
""4102_reLoadXaddr"" -> ""4102_isWithinLimits"";
}
"
0x2d3e7d4870a51b918919e7b851fe19983e4c38d5.sol,CommonSale,"contract CommonSale is InvestedProvider, WalletProvider, PercentRateProvider, RetrieveTokensFeature { using SafeMath for uint; address public directMintAgent; uint public price; uint public start; uint public minInvestedLimit; MintableToken public token; uint public hardcap; modifier isUnderHardcap() { require(invested < hardcap); _; }",0,"subgraph cluster_1288_CommonSale {
label=""CommonSale"";
""1288_endSaleDate"" [label=""endSaleDate""];
""1288_calculateTokens"" [label=""calculateTokens""];
""1288_setDirectMintAgent"" [label=""setDirectMintAgent""];
""1288_setStart"" [label=""setStart""];
""1288_setPrice"" [label=""setPrice""];
""1288_mintTokensExternal"" [label=""mintTokensExternal""];
""1288_mintTokensByETHExternal"" [label=""mintTokensByETHExternal""];
""1288_mintTokensByETH"" [label=""mintTokensByETH""];
""1288_setHardcap"" [label=""setHardcap""];
""1288_mintTokens"" [label=""mintTokens""];
""1288_fallback"" [label=""fallback""];
""1288_setMinInvestedLimit"" [label=""setMinInvestedLimit""];
""1288_setToken"" [label=""setToken""];
""1288_mintTokensByETHExternal"" -> ""1288_mintTokensByETH"";
""1288_setDirectMintAgent"" -> ""1288_onlyOwner"";
""1288_setToken"" -> ""1288_onlyOwner"";
""1288_setStart"" -> ""1288_onlyOwner"";
""1288_mintTokensByETH"" -> ""1288_calculateTokens"";
""1288_mintTokensByETH"" -> ""1288_isUnderHardcap"";
""1288_setHardcap"" -> ""1288_onlyOwner"";
""1288_fallback"" -> ""1288_fallback"";
""1288_setPrice"" -> ""1288_onlyOwner"";
""1288_setMinInvestedLimit"" -> ""1288_onlyOwner"";
""1288_mintTokensExternal"" -> ""1288_mintTokens"";
""1288_mintTokensByETHExternal"" -> ""1288_onlyDirectMintAgentOrOwner"";
""1288_mintTokensExternal"" -> ""1288_onlyDirectMintAgentOrOwner"";
""1288_mintTokensByETH"" -> ""1288_mintTokens"";
}
"
0x330fd5561c25f876c1910c76dec5622ac9471600.sol,DINAR,contract DINAR { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 4; uint public _totalSupply = 100000000000; uint256 public RATE = 1; bool public isMinting = true; string public constant generatedBy = ; using SafeMath for uint256; address public owner; modifier onlyOwner() { if (msg.sender != owner) { throw; },0,"subgraph cluster_516_DINAR {
label=""DINAR"";
""516_createTokens"" [label=""createTokens""];
""516_approve"" [label=""approve""];
""516_fallback"" [label=""fallback""];
""516_burnTokens"" [label=""burnTokens""];
""516_changeCrowdsaleRate"" [label=""changeCrowdsaleRate""];
""516_endCrowdsale"" [label=""endCrowdsale""];
""516_balanceOf"" [label=""balanceOf""];
""516_transfer"" [label=""transfer""];
""516_transferFrom"" [label=""transferFrom""];
""516_totalSupply"" [label=""totalSupply""];
""516_allowance"" [label=""allowance""];
""516_constructor"" [label=""constructor""];
""516_fallback"" -> ""516_createTokens"";
""516_endCrowdsale"" -> ""516_onlyOwner"";
""516_burnTokens"" -> ""516_onlyOwner"";
""516_changeCrowdsaleRate"" -> ""516_onlyOwner"";
}
"
0xed0577d074be9f605f0967fe6a8b3174d92e5e36.sol,OptionToken,contract OptionToken is StandardToken { using SafeMath for uint256; OptionFactory public factory; ERC20 public firstToken; ERC20 public secondToken; uint public minIssueAmount; uint public expiry; uint public strikePrice; bool public isCall; string public symbol; uint public decimals; struct Issuer { address addr; uint amount; },0,"subgraph cluster_4263_OptionToken {
label=""OptionToken"";
""4263_transferTokensInOnIssue"" [label=""transferTokensInOnIssue""];
""4263_setMinIssueAmount"" [label=""setMinIssueAmount""];
""4263_mint"" [label=""mint""];
""4263_transferTokensOrWeiOutToSenderOnExecute"" [label=""transferTokensOrWeiOutToSenderOnExecute""];
""4263_constructor"" [label=""constructor""];
""4263_issue"" [label=""issue""];
""4263_execute"" [label=""execute""];
""4263_executeWithWei"" [label=""executeWithWei""];
""4263_refund"" [label=""refund""];
""4263_transferTokensOrWeiOutToIssuerOnCancel"" [label=""transferTokensOrWeiOutToIssuerOnCancel""];
""4263_issueWithToken"" [label=""issueWithToken""];
""4263_burn"" [label=""burn""];
""4263_transferTokensToOwner"" [label=""transferTokensToOwner""];
""4263_transferTokensIn"" [label=""transferTokensIn""];
""4263_issueWithWei"" [label=""issueWithWei""];
""4263_transferTokensOrWeiOutToIssuerOnRefund"" [label=""transferTokensOrWeiOutToIssuerOnRefund""];
""4263_transferTokensInOnExecute"" [label=""transferTokensInOnExecute""];
""4263_cancel"" [label=""cancel""];
""4263_transfer"" [label=""transfer""];
""4263_transferTokensOrWeiOutToIssuerOnExecute"" [label=""transferTokensOrWeiOutToIssuerOnExecute""];
""4263_executeWithToken"" [label=""executeWithToken""];
""4263_cancel"" -> ""4263_beforeExpiry"";
""4263_executeWithToken"" -> ""4263_canExecuteWithToken"";
""4263_refund"" -> ""4263_afterExpiry"";
""4263_transferTokensInOnIssue"" -> ""4263_transferTokensToOwner"";
""4263_execute"" -> ""4263_burn"";
""4263_executeWithToken"" -> ""4263_transferTokensInOnExecute"";
""4263_issueWithToken"" -> ""4263_issue"";
""4263_issueWithToken"" -> ""4263_transferTokensInOnIssue"";
""4263_execute"" -> ""4263_transferTokensOrWeiOutToIssuerOnExecute"";
""4263_issueWithWei"" -> ""4263_canIssueWithWei"";
""4263_refund"" -> ""4263_transferTokensOrWeiOutToIssuerOnRefund"";
""4263_setMinIssueAmount"" -> ""4263_onlyAdmin"";
""4263_execute"" -> ""4263_transferTokensOrWeiOutToSenderOnExecute"";
""4263_cancel"" -> ""4263_burn"";
""4263_issueWithToken"" -> ""4263_canIssueWithToken"";
""4263_transferTokensInOnIssue"" -> ""4263_transferTokensIn"";
""4263_transferTokensInOnExecute"" -> ""4263_transferTokensIn"";
""4263_issueWithWei"" -> ""4263_beforeExpiry"";
""4263_executeWithToken"" -> ""4263_beforeExpiry"";
""4263_executeWithWei"" -> ""4263_canExecuteWithWei"";
""4263_cancel"" -> ""4263_transferTokensOrWeiOutToIssuerOnCancel"";
""4263_executeWithToken"" -> ""4263_execute"";
""4263_executeWithWei"" -> ""4263_beforeExpiry"";
""4263_issue"" -> ""4263_mint"";
""4263_executeWithWei"" -> ""4263_execute"";
""4263_issueWithToken"" -> ""4263_beforeExpiry"";
""4263_issueWithWei"" -> ""4263_issue"";
}
"
0xe1754d039c839192ee193d5cf8406fb24fcb421f.sol,ETHToken,"contract ETHToken is ERC20Interface { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant tokenCreationCap = 3000000* 10**18; uint256 public constant tokenCreationMin = 1* 10**18; mapping(address => mapping (address => uint256)) allowed; uint public fundingStart; uint public fundingEnd; bool public funding = true; address public master; uint256 totalTokens; uint256 soldAfterPowerHour; mapping (address => uint256) balances; mapping (address => uint) lastTransferred; mapping (address => uint256) balancesEther; address public migrationAgent; uint256 public totalMigrated; event Migrate(address indexed _from, address indexed _to, uint256 _value); event Refund(address indexed _from, uint256 _value); uint totalParticipants; function ETHToken() { master = msg.sender; fundingStart = 1511654250; fundingEnd = 1511663901; }",0,"subgraph cluster_770_ETHToken {
label=""ETHToken"";
""770_approve"" [label=""approve""];
""770_migrate"" [label=""migrate""];
""770_ICOopen"" [label=""ICOopen""];
""770_TimeLeft"" [label=""TimeLeft""];
""770_transferFrom"" [label=""transferFrom""];
""770_finalize"" [label=""finalize""];
""770_setMigrationAgent"" [label=""setMigrationAgent""];
""770_totalSupply"" [label=""totalSupply""];
""770_TimeLeftBeforeCrowdsale"" [label=""TimeLeftBeforeCrowdsale""];
""770_EtherBalanceOf"" [label=""EtherBalanceOf""];
""770_allowance"" [label=""allowance""];
""770_balanceOf"" [label=""balanceOf""];
""770_transfer"" [label=""transfer""];
""770_fallback"" [label=""fallback""];
""770_getAmountSoldAfterPowerDay"" [label=""getAmountSoldAfterPowerDay""];
""770_ETHToken"" [label=""ETHToken""];
""770_getAmountofTotalParticipants"" [label=""getAmountofTotalParticipants""];
""770_getExchangeRate"" [label=""getExchangeRate""];
""770_refund"" [label=""refund""];
""770_fallback"" -> ""770_getExchangeRate"";
}
"
0x6b8c8bec2d3e3e583eabbb29913cc6b929cdfacc.sol,TokenERC20,"contract TokenERC20 { using SafeMath for uint; string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event Approval(address indexed tokenOwner, address indexed spender, uint value); function TokenERC20() public { totalSupply = 160000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",0,"subgraph cluster_625_TokenERC20 {
label=""TokenERC20"";
""625_transfer"" [label=""transfer""];
""625_approve"" [label=""approve""];
""625_TokenERC20"" [label=""TokenERC20""];
""625_approveAndCall"" [label=""approveAndCall""];
""625_transferFrom"" [label=""transferFrom""];
""625__transfer"" [label=""_transfer""];
""625_burn"" [label=""burn""];
""625_burnFrom"" [label=""burnFrom""];
""625_transferFrom"" -> ""625__transfer"";
""625_transfer"" -> ""625__transfer"";
""625_approveAndCall"" -> ""625_approve"";
}
"
0x6c24a2934a0255c4dce7ae619ed2b285f06477a0.sol,BighubToken,"contract BighubToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function BighubToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 1400000000000000000000000000; balances[0x13c536BA3E45BE2bB79914D333b3fa95E9728E3A] = _totalSupply; emit Transfer(address(0), 0x13c536BA3E45BE2bB79914D333b3fa95E9728E3A, _totalSupply); }",0,"subgraph cluster_543_BighubToken {
label=""BighubToken"";
""543_balanceOf"" [label=""balanceOf""];
""543_transferFrom"" [label=""transferFrom""];
""543_transfer"" [label=""transfer""];
""543_fallback"" [label=""fallback""];
""543_approve"" [label=""approve""];
""543_allowance"" [label=""allowance""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_BighubToken"" [label=""BighubToken""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transfer"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0x74f7dca757597a5a9293c73895893fd2c295c5b6.sol,MinerX,"contract MinerX is StandardToken { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant INITIAL_SUPPLY = 2 * 10**9 * (10**uint256(decimals)); uint256 public weiRaised; uint256 public tokenAllocated; address public owner; bool public saleToken = true; event OwnerChanged(address indexed previousOwner, address indexed newOwner); event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount); event TokenLimitReached(uint256 tokenRaised, uint256 purchasedToken); event Transfer(address indexed _from, address indexed _to, uint256 _value); function MinerX() public { totalSupply = INITIAL_SUPPLY; owner = msg.sender; balances[owner] = INITIAL_SUPPLY; tokenAllocated = 0; transfersEnabled = true; }",0,"subgraph cluster_1542_MinerX {
label=""MinerX"";
""1542_enableTransfers"" [label=""enableTransfers""];
""1542_claimTokens"" [label=""claimTokens""];
""1542_validPurchaseTokens"" [label=""validPurchaseTokens""];
""1542_getTotalAmountOfTokens"" [label=""getTotalAmountOfTokens""];
""1542_changeOwner"" [label=""changeOwner""];
""1542_buyTokens"" [label=""buyTokens""];
""1542_startSale"" [label=""startSale""];
""1542_MinerX"" [label=""MinerX""];
""1542_stopSale"" [label=""stopSale""];
""1542_mint"" [label=""mint""];
""1542_fallback"" [label=""fallback""];
""1542_claimTokens"" -> ""1542_onlyOwner"";
""1542_startSale"" -> ""1542_onlyOwner"";
""1542_stopSale"" -> ""1542_onlyOwner"";
""1542_validPurchaseTokens"" -> ""1542_getTotalAmountOfTokens"";
""1542_fallback"" -> ""1542_buyTokens"";
""1542_buyTokens"" -> ""1542_mint"";
""1542_buyTokens"" -> ""1542_validPurchaseTokens"";
""1542_claimTokens"" -> ""1542_balanceOf"";
""1542_enableTransfers"" -> ""1542_onlyOwner"";
""1542_claimTokens"" -> ""1542_transfer"";
""1542_changeOwner"" -> ""1542_onlyOwner"";
}
"
0x6543cde961213e82001594bf4c34706579ce34ec.sol,ClinicAllRefundEscrow,contract ClinicAllRefundEscrow is RefundEscrow { using Math for uint256; struct RefundeeRecord { bool isRefunded; uint256 index; },0,"subgraph cluster_2170_ClinicAllRefundEscrow {
label=""ClinicAllRefundEscrow"";
""2170_deposit"" [label=""deposit""];
""2170_beneficiaryWithdrawChunk"" [label=""beneficiaryWithdrawChunk""];
""2170_beneficiaryWithdrawAll"" [label=""beneficiaryWithdrawAll""];
""2170_withdrawChunk"" [label=""withdrawChunk""];
""2170_withdraw"" [label=""withdraw""];
""2170_close"" [label=""close""];
""2170_removeRefundeeByIndex"" [label=""removeRefundeeByIndex""];
""2170_refundeesListLength"" [label=""refundeesListLength""];
""2170_withdrawEverything"" [label=""withdrawEverything""];
""2170_depositsOf"" [label=""depositsOf""];
""2170_beneficiaryDepositsOf"" [label=""beneficiaryDepositsOf""];
""2170_constructor"" [label=""constructor""];
""2170_depositFunds"" [label=""depositFunds""];
""2170_manualRefund"" [label=""manualRefund""];
""2170_withdrawChunk"" -> ""2170_removeRefundeeByIndex"";
""2170_manualRefund"" -> ""2170_removeRefundeeByIndex"";
""2170_withdrawChunk"" -> ""2170_onlyOwner"";
""2170_withdrawEverything"" -> ""2170_onlyOwner"";
""2170_close"" -> ""2170_onlyOwner"";
""2170_beneficiaryWithdrawChunk"" -> ""2170_onlyOwner"";
""2170_beneficiaryWithdrawAll"" -> ""2170_onlyOwner"";
""2170_constructor"" -> ""2170_constructor"";
""2170_close"" -> ""2170_close"";
""2170_manualRefund"" -> ""2170_depositsOf"";
""2170_manualRefund"" -> ""2170_onlyOwner"";
""2170_withdrawEverything"" -> ""2170_withdrawChunk"";
""2170_depositFunds"" -> ""2170_onlyOwner"";
""2170_withdraw"" -> ""2170_onlyOwner"";
""2170_withdraw"" -> ""2170_depositsOf"";
""2170_refundeesListLength"" -> ""2170_onlyOwner"";
""2170_withdraw"" -> ""2170_removeRefundeeByIndex"";
""2170_withdrawChunk"" -> ""2170_depositsOf"";
}
"
0x0cddd1094b8331b63191282f9b73cf609e139ac4.sol,PWGLToken,contract PWGLToken { string public name = ; string public symbol = ; uint256 public decimals = 8; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; uint256 public totalSupply = 0; bool public stopped = false; uint256 constant valueFounder = 88888888866666666; address owner = 0x0; modifier isOwner { assert(owner == msg.sender); _; },0,"subgraph cluster_354_PWGLToken {
label=""PWGLToken"";
""354_start"" [label=""start""];
""354_approve"" [label=""approve""];
""354_setName"" [label=""setName""];
""354_stop"" [label=""stop""];
""354_PWGLToken"" [label=""PWGLToken""];
""354_transferFrom"" [label=""transferFrom""];
""354_burn"" [label=""burn""];
""354_transfer"" [label=""transfer""];
""354_transferFrom"" -> ""354_validAddress"";
""354_transfer"" -> ""354_isRunning"";
""354_approve"" -> ""354_isRunning"";
""354_setName"" -> ""354_isOwner"";
""354_transfer"" -> ""354_validAddress"";
""354_start"" -> ""354_isOwner"";
""354_approve"" -> ""354_validAddress"";
""354_stop"" -> ""354_isOwner"";
""354_transferFrom"" -> ""354_isRunning"";
}
"
0x70c629875dadbe702489a5e1e3baae60e38924fa.sol,ExchangeRates,contract ExchangeRates is SelfDestructible { using SafeMath for uint; using SafeDecimalMath for uint; mapping(bytes4 => uint) public rates; mapping(bytes4 => uint) public lastRateUpdateTimes; address public oracle; uint constant ORACLE_FUTURE_LIMIT = 10 minutes; uint public rateStalePeriod = 3 hours; bool public priceUpdateLock = false; bytes4[5] public xdrParticipants; struct InversePricing { uint entryPoint; uint upperLimit; uint lowerLimit; bool frozen; },0,"subgraph cluster_1644_ExchangeRates {
label=""ExchangeRates"";
""1644_rateIsStale"" [label=""rateIsStale""];
""1644_constructor"" [label=""constructor""];
""1644_rateOrInverted"" [label=""rateOrInverted""];
""1644_setRateStalePeriod"" [label=""setRateStalePeriod""];
""1644_rateForCurrency"" [label=""rateForCurrency""];
""1644_anyRateIsStale"" [label=""anyRateIsStale""];
""1644_deleteRate"" [label=""deleteRate""];
""1644_setOracle"" [label=""setOracle""];
""1644_removeInversePricing"" [label=""removeInversePricing""];
""1644_setPriceUpdateLock"" [label=""setPriceUpdateLock""];
""1644_rateIsFrozen"" [label=""rateIsFrozen""];
""1644_updateXDRRate"" [label=""updateXDRRate""];
""1644_setInversePricing"" [label=""setInversePricing""];
""1644_updateRates"" [label=""updateRates""];
""1644_effectiveValue"" [label=""effectiveValue""];
""1644_internalUpdateRates"" [label=""internalUpdateRates""];
""1644_lastRateUpdateTimeForCurrency"" [label=""lastRateUpdateTimeForCurrency""];
""1644_ratesForCurrencies"" [label=""ratesForCurrencies""];
""1644_lastRateUpdateTimesForCurrencies"" [label=""lastRateUpdateTimesForCurrencies""];
""1644_effectiveValue"" -> ""1644_rateNotStale"";
""1644_deleteRate"" -> ""1644_onlyOracle"";
""1644_updateRates"" -> ""1644_onlyOracle"";
""1644_internalUpdateRates"" -> ""1644_updateXDRRate"";
""1644_updateRates"" -> ""1644_internalUpdateRates"";
""1644_removeInversePricing"" -> ""1644_onlyOwner"";
""1644_setPriceUpdateLock"" -> ""1644_onlyOracle"";
""1644_setOracle"" -> ""1644_onlyOwner"";
""1644_setInversePricing"" -> ""1644_onlyOwner"";
""1644_effectiveValue"" -> ""1644_rateForCurrency"";
""1644_constructor"" -> ""1644_constructor"";
""1644_internalUpdateRates"" -> ""1644_rateOrInverted"";
""1644_constructor"" -> ""1644_internalUpdateRates"";
""1644_setRateStalePeriod"" -> ""1644_onlyOwner"";
}
"
0x03c60795a9b4646752e25eed4bdadf5d8c62e13c.sol,CryptoColors,"contract CryptoColors is ERC721, Ownable { using SafeMath for uint256; uint256 private totalTokens; uint256[] private listedCryptoColors; uint256 public devOwed; uint256 public poolTotal; uint256 public lastPurchase; mapping (uint256 => CryptoColor) public cryptoColorData; mapping (uint256 => address) private tokenOwner; mapping (uint256 => address) private tokenApprovals; mapping (address => uint256[]) private ownedTokens; mapping(uint256 => uint256) private ownedTokensIndex; mapping (address => uint256) private payoutBalances; event TokenSold(uint256 indexed _tokenId, address indexed _owner, uint256 _purchasePrice, uint256 _price, address indexed _prevOwner); uint256 private firstCap = 0.5 ether; uint256 private secondCap = 1.0 ether; uint256 private thirdCap = 3.0 ether; uint256 private finalCap = 5.0 ether; struct CryptoColor { uint256 startingPrice; uint256 price; uint256 lastPrice; uint256 payout; uint256 withdrawn; address owner; }",0,"subgraph cluster_1476_CryptoColors {
label=""CryptoColors"";
""1476_getToken"" [label=""getToken""];
""1476_ownerOf"" [label=""ownerOf""];
""1476_balanceOf"" [label=""balanceOf""];
""1476_tokensOf"" [label=""tokensOf""];
""1476_getRentOwed"" [label=""getRentOwed""];
""1476_takeOwnership"" [label=""takeOwnership""];
""1476_createContractToken"" [label=""createContractToken""];
""1476_transfer"" [label=""transfer""];
""1476_calculatePoolCut"" [label=""calculatePoolCut""];
""1476_name"" [label=""name""];
""1476_approvedFor"" [label=""approvedFor""];
""1476__mint"" [label=""_mint""];
""1476_symbol"" [label=""symbol""];
""1476_clearApproval"" [label=""clearApproval""];
""1476_addToken"" [label=""addToken""];
""1476_withdrawRent"" [label=""withdrawRent""];
""1476_tokenExists"" [label=""tokenExists""];
""1476_purchase"" [label=""purchase""];
""1476_createMultiple"" [label=""createMultiple""];
""1476_approve"" [label=""approve""];
""1476_getNextPrice"" [label=""getNextPrice""];
""1476_withdraw"" [label=""withdraw""];
""1476_removeToken"" [label=""removeToken""];
""1476_isApprovedFor"" [label=""isApprovedFor""];
""1476_updatePayout"" [label=""updatePayout""];
""1476_clearApprovalAndTransfer"" [label=""clearApprovalAndTransfer""];
""1476_totalSupply"" [label=""totalSupply""];
""1476_updateSinglePayout"" [label=""updateSinglePayout""];
""1476_approve"" -> ""1476_approvedFor"";
""1476_isApprovedFor"" -> ""1476_approvedFor"";
""1476_clearApprovalAndTransfer"" -> ""1476_updateSinglePayout"";
""1476_approve"" -> ""1476_onlyOwnerOf"";
""1476_clearApprovalAndTransfer"" -> ""1476_isNotContract"";
""1476_transfer"" -> ""1476_addToken"";
""1476_transfer"" -> ""1476_clearApproval"";
""1476_approve"" -> ""1476_ownerOf"";
""1476_clearApproval"" -> ""1476_ownerOf"";
""1476_createMultiple"" -> ""1476_createContractToken"";
""1476_addToken"" -> ""1476_balanceOf"";
""1476_transfer"" -> ""1476_tokenExists"";
""1476__mint"" -> ""1476_addToken"";
""1476_transfer"" -> ""1476_onlyOwnerOf"";
""1476_purchase"" -> ""1476_getNextPrice"";
""1476_createContractToken"" -> ""1476_getNextPrice"";
""1476_takeOwnership"" -> ""1476_ownerOf"";
""1476_clearApprovalAndTransfer"" -> ""1476_addToken"";
""1476_transfer"" -> ""1476_removeToken"";
""1476_clearApprovalAndTransfer"" -> ""1476_clearApproval"";
""1476_transfer"" -> ""1476_clearApprovalAndTransfer"";
""1476_createMultiple"" -> ""1476_onlyOwner"";
""1476_purchase"" -> ""1476_isNotContract"";
""1476_getRentOwed"" -> ""1476_updatePayout"";
""1476_takeOwnership"" -> ""1476_clearApprovalAndTransfer"";
""1476_removeToken"" -> ""1476_ownerOf"";
""1476_createContractToken"" -> ""1476_onlyOwner"";
""1476_purchase"" -> ""1476_calculatePoolCut"";
""1476_clearApprovalAndTransfer"" -> ""1476_ownerOf"";
""1476_createContractToken"" -> ""1476__mint"";
""1476_purchase"" -> ""1476_transfer"";
""1476_withdrawRent"" -> ""1476_updatePayout"";
""1476_removeToken"" -> ""1476_balanceOf"";
""1476_transfer"" -> ""1476_updateSinglePayout"";
""1476_withdraw"" -> ""1476_onlyOwner"";
""1476_takeOwnership"" -> ""1476_isApprovedFor"";
""1476_getToken"" -> ""1476_getNextPrice"";
""1476_clearApprovalAndTransfer"" -> ""1476_removeToken"";
}
"
0x1eb0d4794d4067ed004c9d55ff6eb50620b27c58.sol,ProspectorsCrowdsale,"contract ProspectorsCrowdsale is Owned, DSMath { ProspectorsGoldToken public token; address public dev_multisig; uint public total_raised; uint public contributors_count = 0; uint public constant start_time = 1502377200; uint public constant end_time = 1505055600; uint public constant bonus_amount = 10000000 * 10**18; uint public constant start_amount = 60000000 * 10**18; uint public constant price = 0.0005 * 10**18; uint public constant bonus_price = 0.0004 * 10**18; uint public constant goal = 2000 ether; bool private closed = false; mapping(address => uint) funded; modifier in_time { if (time() < start_time || time() > end_time) revert(); _; }",0,"subgraph cluster_1077_ProspectorsCrowdsale {
label=""ProspectorsCrowdsale"";
""1077_my_token_balance"" [label=""my_token_balance""];
""1077_available_with_bonus"" [label=""available_with_bonus""];
""1077_refund"" [label=""refund""];
""1077_participate"" [label=""participate""];
""1077_is_success"" [label=""is_success""];
""1077_time"" [label=""time""];
""1077_available_without_bonus"" [label=""available_without_bonus""];
""1077_init"" [label=""init""];
""1077_closeCrowdsale"" [label=""closeCrowdsale""];
""1077_collect"" [label=""collect""];
""1077_destroy"" [label=""destroy""];
""1077_fallback"" [label=""fallback""];
""1077_min_balance_for_bonus"" [label=""min_balance_for_bonus""];
""1077_participate"" -> ""1077_add"";
""1077_fallback"" -> ""1077_participate"";
""1077_participate"" -> ""1077_in_time"";
""1077_participate"" -> ""1077_sub"";
""1077_destroy"" -> ""1077_onlyOwner"";
""1077_participate"" -> ""1077_wdiv"";
""1077_init"" -> ""1077_onlyOwner"";
""1077_participate"" -> ""1077_has_value"";
""1077_participate"" -> ""1077_min"";
""1077_closeCrowdsale"" -> ""1077_my_token_balance"";
""1077_destroy"" -> ""1077_time"";
""1077_participate"" -> ""1077_wmul"";
""1077_participate"" -> ""1077_available_with_bonus"";
""1077_available_without_bonus"" -> ""1077_my_token_balance"";
""1077_closeCrowdsale"" -> ""1077_time"";
""1077_available_with_bonus"" -> ""1077_my_token_balance"";
""1077_participate"" -> ""1077_my_token_balance"";
""1077_participate"" -> ""1077_cast"";
""1077_available_with_bonus"" -> ""1077_min_balance_for_bonus"";
""1077_closeCrowdsale"" -> ""1077_is_success"";
""1077_participate"" -> ""1077_hadd"";
""1077_available_without_bonus"" -> ""1077_min_balance_for_bonus"";
""1077_available_without_bonus"" -> ""1077_min"";
""1077_participate"" -> ""1077_available_without_bonus"";
}
"
0xa2e59b1c5e64130d06f08a99cd5eda8af9c68b8a.sol,PreSaleDisciple,"contract PreSaleDisciple is PreSaleGuardian { event DiscipleSaleCreate(uint indexed saleId, uint indexed discipleId, uint indexed price, uint occupation, uint level); event BuyDisciple(uint indexed saleId, uint discipleId, address indexed buyer, uint indexed currentPrice); event DiscipleOfferSubmit(uint indexed saleId, uint discipleId, address indexed bidder, uint indexed price); event DiscipleOfferAccept(uint indexed saleId, uint discipleId, address indexed newOwner, uint indexed newPrice); event SetDiscipleSale(uint indexed saleId, uint indexed price); event DiscipleAuctionCreate(uint indexed auctionId, uint indexed discipleId, uint indexed startPrice, uint occupation, uint level); event DiscipleAuctionBid(uint indexed auctionId, address indexed bidder, uint indexed offer); event VendingDisciple(uint indexed vendingId, address indexed buyer); event DiscipleVendOffer(uint indexed vendingId, address indexed bidder, uint indexed offer); event DiscipleVendAccept(uint indexed vendingId, address indexed newOwner, uint indexed newPrice); event SetDiscipleVend(uint indexed priceId, uint indexed price); mapping (uint => address) public DiscipleSaleToBuyer; mapping (uint => uint) public DiscipleVendToOffer; mapping (uint => address) public DiscipleVendToBidder; mapping (uint => uint) public DiscipleVendToTime; struct DiscipleSale { uint discipleId; uint occupation; uint level; uint price; bool ifSold; address bidder; uint offerPrice; uint timestamp; }",0,"subgraph cluster_4967_PreSaleDisciple {
label=""PreSaleDisciple"";
""4967_OfferToDisciple"" [label=""OfferToDisciple""];
""4967_vendDisciple"" [label=""vendDisciple""];
""4967_createDiscipleSale"" [label=""createDiscipleSale""];
""4967_getDiscipleSale"" [label=""getDiscipleSale""];
""4967_getDiscipleNum"" [label=""getDiscipleNum""];
""4967_setDiscipleVend"" [label=""setDiscipleVend""];
""4967__generateDiscipleSale"" [label=""_generateDiscipleSale""];
""4967_setDiscipleSale"" [label=""setDiscipleSale""];
""4967_getDiscipleVend"" [label=""getDiscipleVend""];
""4967_AcceptDiscipleOffer"" [label=""AcceptDiscipleOffer""];
""4967_acceptDiscipleVend"" [label=""acceptDiscipleVend""];
""4967__discipleVendPrice"" [label=""_discipleVendPrice""];
""4967_offlineDiscipleSold"" [label=""offlineDiscipleSold""];
""4967_buyDisciple"" [label=""buyDisciple""];
""4967_offerDiscipleVend"" [label=""offerDiscipleVend""];
""4967__discipleVendPrice"" -> ""4967_safeSub"";
""4967_offerDiscipleVend"" -> ""4967_whenNotPaused"";
""4967_vendDisciple"" -> ""4967_whenNotPaused"";
""4967_buyDisciple"" -> ""4967_safeSub"";
""4967_acceptDiscipleVend"" -> ""4967_whenNotPaused"";
""4967_vendDisciple"" -> ""4967__discipleVendPrice"";
""4967_AcceptDiscipleOffer"" -> ""4967_whenNotPaused"";
""4967_setDiscipleVend"" -> ""4967_onlyAdmin"";
""4967_setDiscipleSale"" -> ""4967_onlyAdmin"";
""4967_buyDisciple"" -> ""4967__computePrice"";
""4967_createDiscipleSale"" -> ""4967_onlyAdmin"";
""4967_buyDisciple"" -> ""4967_whenNotPaused"";
""4967_offlineDiscipleSold"" -> ""4967_onlyAdmin"";
""4967_buyDisciple"" -> ""4967__brokerFeeDistribute"";
""4967_OfferToDisciple"" -> ""4967_whenNotPaused"";
""4967_createDiscipleSale"" -> ""4967__generateDiscipleSale"";
""4967__discipleVendPrice"" -> ""4967__computePrice"";
}
"
0x178381837f84a7a636f57a3f2946cda512e5caab.sol,TreasureToken,contract TreasureToken { string public name = ; string public symbol = ; uint256 public decimals = 8; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; uint256 public totalSupply = 0; bool public stopped = false; uint256 constant valueFounder = 1000000000000000000; address owner = 0x0; modifier isOwner { assert(owner == msg.sender); _; },0,"subgraph cluster_354_TreasureToken {
label=""TreasureToken"";
""354_burn"" [label=""burn""];
""354_setName"" [label=""setName""];
""354_approve"" [label=""approve""];
""354_stop"" [label=""stop""];
""354_start"" [label=""start""];
""354_TreasureToken"" [label=""TreasureToken""];
""354_transferFrom"" [label=""transferFrom""];
""354_transfer"" [label=""transfer""];
""354_approve"" -> ""354_isRunning"";
""354_approve"" -> ""354_validAddress"";
""354_transfer"" -> ""354_isRunning"";
""354_start"" -> ""354_isOwner"";
""354_setName"" -> ""354_isOwner"";
""354_transferFrom"" -> ""354_validAddress"";
""354_transferFrom"" -> ""354_isRunning"";
""354_stop"" -> ""354_isOwner"";
""354_transfer"" -> ""354_validAddress"";
}
"
0x5aa4769f204f0b9e8d9c852377bf90fbe5bf2aeb.sol,MultiX250max03eth,contract MultiX250max03eth { address constant private PROMO = 0x74E6B17a922C741c4dA0b71796eFB0edDDda398a; uint constant public PROMO_PERCENT = 10; uint constant public MULTIPLIER = 250; struct Deposit { address depositor; uint128 deposit; uint128 expect; },0,"subgraph cluster_353_MultiX250max03eth {
label=""MultiX250max03eth"";
""353_fallback"" [label=""fallback""];
""353_pay"" [label=""pay""];
""353_getQueueLength"" [label=""getQueueLength""];
""353_getDeposit"" [label=""getDeposit""];
""353_getDepositsCount"" [label=""getDepositsCount""];
""353_getDeposits"" [label=""getDeposits""];
""353_fallback"" -> ""353_pay"";
""353_getDeposits"" -> ""353_getDepositsCount"";
}
"
0x78af01b310a23d25009bdfb95ef06e9a5584fb80.sol,HOTTO,"contract HOTTO is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 10000000000e8; uint256 public totalDistributed = 3000000000e8; uint256 public constant MIN_CONTRIBUTION = 1 ether / 100; uint256 public tokensPerEth = 20000000e8; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_944_HOTTO {
label=""HOTTO"";
""944_withdraw"" [label=""withdraw""];
""944_fallback"" [label=""fallback""];
""944_finishDistribution"" [label=""finishDistribution""];
""944_distr"" [label=""distr""];
""944_balanceOf"" [label=""balanceOf""];
""944_HT"" [label=""HT""];
""944_approve"" [label=""approve""];
""944_burn"" [label=""burn""];
""944_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""944_doAirdrop"" [label=""doAirdrop""];
""944_transferOwnership"" [label=""transferOwnership""];
""944_getTokenBalance"" [label=""getTokenBalance""];
""944_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""944_transferFrom"" [label=""transferFrom""];
""944_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""944_allowance"" [label=""allowance""];
""944_transfer"" [label=""transfer""];
""944_getTokens"" [label=""getTokens""];
""944_updateTokensPerEth"" [label=""updateTokensPerEth""];
""944_adminClaimAirdropMultiple"" -> ""944_onlyOwner"";
""944_getTokens"" -> ""944_distr"";
""944_adminClaimAirdrop"" -> ""944_doAirdrop"";
""944_burn"" -> ""944_onlyOwner"";
""944_transferFrom"" -> ""944_onlyPayloadSize"";
""944_transfer"" -> ""944_onlyPayloadSize"";
""944_HT"" -> ""944_distr"";
""944_distr"" -> ""944_canDistr"";
""944_withdraw"" -> ""944_onlyOwner"";
""944_adminClaimAirdrop"" -> ""944_onlyOwner"";
""944_finishDistribution"" -> ""944_canDistr"";
""944_transferOwnership"" -> ""944_onlyOwner"";
""944_updateTokensPerEth"" -> ""944_onlyOwner"";
""944_withdrawForeignTokens"" -> ""944_onlyOwner"";
""944_getTokens"" -> ""944_canDistr"";
""944_fallback"" -> ""944_getTokens"";
""944_adminClaimAirdropMultiple"" -> ""944_doAirdrop"";
""944_finishDistribution"" -> ""944_onlyOwner"";
}
"
0x300a0a820d8fb6e77850da5eaa8df64bbff5746d.sol,BoomrCoinCrowdsale,"contract BoomrCoinCrowdsale is Ownable{ using SafeMath for uint256; uint256 private minGoal = 0; uint256 private maxGoal = 0; uint256 private tokenLimitPresale = 0; uint256 private tokenLimitCrowdsale = 0; uint256 private presaleDiscount = 0; uint256 private crowdsaleDiscount1 = 0; uint256 private crowdsaleDiscount2 = 0; uint256 private crowdsaleDiscount3 = 0; uint256 private crowdsaleDiscount4 = 0; uint256 private presaleDuration = 0; uint256 private crowdsaleDuration1 = 0; uint256 private crowdsaleDuration2 = 0; uint256 private crowdsaleDuration3 = 0; uint256 private crowdsaleDuration4 = 0; uint256 private tokenPresaleTotalSold = 0; uint256 private tokenCrowdsaleTotalSold = 0; uint256 private totalBackers = 0; uint256 private weiRaised = 0; uint256 private presaleTokenPrice = 0; uint256 private baseTokenPrice = 0; uint256 private crowdsaleTokenPrice1 = 0; uint256 private crowdsaleTokenPrice2 = 0; uint256 private crowdsaleTokenPrice3 = 0; uint256 private crowdsaleTokenPrice4 = 0; uint256 private presaleTokenSent = 0; uint256 private crowdsaleTokenSold1 = 0; uint256 private crowdsaleTokenSold2 = 0; uint256 private crowdsaleTokenSold3 = 0; uint256 private crowdsaleTokenSold4 = 0; bool private finalized = false; bool private halted = false; uint256 public startTime; PausableToken public boomrToken; address private wallet; RefundVault private vault; mapping (address => uint256) public deposits; mapping (address => uint256) public purchases; event TokenPurchase(address indexed Purchaser, address indexed Beneficiary, uint256 ValueInWei, uint256 TokenAmount); event PresalePurchase(address indexed Purchaser, address indexed Beneficiary, uint256 ValueInWei); event PresaleDistribution(address indexed Purchaser, address indexed Beneficiary, uint256 TokenAmount); event Finalized(); function BoomrCoinCrowdsale() public{ }",0,"subgraph cluster_2121_BoomrCoinCrowdsale {
label=""BoomrCoinCrowdsale"";
""2121_depositPresale"" [label=""depositPresale""];
""2121_halt"" [label=""halt""];
""2121_currentStateActive"" [label=""currentStateActive""];
""2121_isCrowdsalePhase2"" [label=""isCrowdsalePhase2""];
""2121_getContractTokenBalance"" [label=""getContractTokenBalance""];
""2121_isPresaleWaitPhase"" [label=""isPresaleWaitPhase""];
""2121_isDistributable"" [label=""isDistributable""];
""2121_fallback"" [label=""fallback""];
""2121_internalDepositPresale"" [label=""internalDepositPresale""];
""2121_StartCrowdsale"" [label=""StartCrowdsale""];
""2121_forwardFunds"" [label=""forwardFunds""];
""2121_distributePresale"" [label=""distributePresale""];
""2121_BoomrCoinCrowdsale"" [label=""BoomrCoinCrowdsale""];
""2121_isPresalePhase"" [label=""isPresalePhase""];
""2121_isCrowdsalePhase4"" [label=""isCrowdsalePhase4""];
""2121_externalDeposit"" [label=""externalDeposit""];
""2121_currentTokenDistribution"" [label=""currentTokenDistribution""];
""2121_minGoalReached"" [label=""minGoalReached""];
""2121_internalBuyTokens"" [label=""internalBuyTokens""];
""2121_finalize"" [label=""finalize""];
""2121_unHalt"" [label=""unHalt""];
""2121_updatePrices"" [label=""updatePrices""];
""2121_buyTokens"" [label=""buyTokens""];
""2121_claimRefund"" [label=""claimRefund""];
""2121_currentStateSales"" [label=""currentStateSales""];
""2121_isCrowdsalePhase3"" [label=""isCrowdsalePhase3""];
""2121_isCrowdsalePhase1"" [label=""isCrowdsalePhase1""];
""2121_isBuyable"" [label=""isBuyable""];
""2121_maxGoalReached"" [label=""maxGoalReached""];
""2121_isCompleted"" [label=""isCompleted""];
""2121_fallback"" -> ""2121_buyTokens"";
""2121_fallback"" -> ""2121_isPresalePhase"";
""2121_isCrowdsalePhase4"" -> ""2121_maxGoalReached"";
""2121_isCrowdsalePhase1"" -> ""2121_maxGoalReached"";
""2121_internalDepositPresale"" -> ""2121_isPresalePhase"";
""2121_unHalt"" -> ""2121_onlyOwner"";
""2121_isBuyable"" -> ""2121_isDistributable"";
""2121_fallback"" -> ""2121_isPresaleWaitPhase"";
""2121_currentStateActive"" -> ""2121_isPresaleWaitPhase"";
""2121_currentStateActive"" -> ""2121_isDistributable"";
""2121_internalBuyTokens"" -> ""2121_forwardFunds"";
""2121_internalBuyTokens"" -> ""2121_isCrowdsalePhase2"";
""2121_distributePresale"" -> ""2121_isDistributable"";
""2121_externalDeposit"" -> ""2121_isPresalePhase"";
""2121_isCrowdsalePhase2"" -> ""2121_maxGoalReached"";
""2121_internalDepositPresale"" -> ""2121_maxGoalReached"";
""2121_isCompleted"" -> ""2121_maxGoalReached"";
""2121_externalDeposit"" -> ""2121_isCompleted"";
""2121_depositPresale"" -> ""2121_internalDepositPresale"";
""2121_externalDeposit"" -> ""2121_internalDepositPresale"";
""2121_fallback"" -> ""2121_isCompleted"";
""2121_fallback"" -> ""2121_isDistributable"";
""2121_buyTokens"" -> ""2121_internalBuyTokens"";
""2121_isPresalePhase"" -> ""2121_maxGoalReached"";
""2121_currentStateActive"" -> ""2121_isCrowdsalePhase1"";
""2121_StartCrowdsale"" -> ""2121_onlyOwner"";
""2121_currentStateSales"" -> ""2121_getContractTokenBalance"";
""2121_currentStateActive"" -> ""2121_isCrowdsalePhase4"";
""2121_internalBuyTokens"" -> ""2121_maxGoalReached"";
""2121_currentStateActive"" -> ""2121_isPresalePhase"";
""2121_currentStateActive"" -> ""2121_isCrowdsalePhase3"";
""2121_currentStateActive"" -> ""2121_minGoalReached"";
""2121_internalBuyTokens"" -> ""2121_isCrowdsalePhase4"";
""2121_finalize"" -> ""2121_minGoalReached"";
""2121_currentStateActive"" -> ""2121_maxGoalReached"";
""2121_fallback"" -> ""2121_depositPresale"";
""2121_externalDeposit"" -> ""2121_internalBuyTokens"";
""2121_currentStateActive"" -> ""2121_isBuyable"";
""2121_halt"" -> ""2121_onlyOwner"";
""2121_currentStateActive"" -> ""2121_isCompleted"";
""2121_fallback"" -> ""2121_distributePresale"";
""2121_currentStateActive"" -> ""2121_isCrowdsalePhase2"";
""2121_isBuyable"" -> ""2121_isCompleted"";
""2121_internalDepositPresale"" -> ""2121_forwardFunds"";
""2121_internalBuyTokens"" -> ""2121_isCrowdsalePhase3"";
""2121_finalize"" -> ""2121_isCompleted"";
""2121_externalDeposit"" -> ""2121_onlyOwner"";
""2121_claimRefund"" -> ""2121_minGoalReached"";
""2121_finalize"" -> ""2121_onlyOwner"";
""2121_isCrowdsalePhase3"" -> ""2121_maxGoalReached"";
""2121_internalDepositPresale"" -> ""2121_updatePrices"";
""2121_externalDeposit"" -> ""2121_isPresaleWaitPhase"";
""2121_internalBuyTokens"" -> ""2121_isCrowdsalePhase1"";
}
"
0xdae049562763d6a4236af188a05f4f29603b41cc.sol,ItemToken,"contract ItemToken { using SafeMath for uint256; event Bought (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Sold (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Transfer(address indexed _from, address indexed _to, uint256 _tokenId); event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId); address private owner; mapping (address => bool) private admins; IItemRegistry private itemRegistry; bool private erc721Enabled = false; uint256 private increaseLimit1 = 0.02 ether; uint256 private increaseLimit2 = 0.5 ether; uint256 private increaseLimit3 = 2.0 ether; uint256 private increaseLimit4 = 5.0 ether; uint256[] private listedItems; mapping (uint256 => address) private ownerOfItem; mapping (uint256 => uint256) private startingPriceOfItem; mapping (uint256 => uint256) private priceOfItem; mapping (uint256 => address) private approvedOfItem; function ItemToken () public { owner = msg.sender; admins[owner] = true; }",0,"subgraph cluster_1272_ItemToken {
label=""ItemToken"";
""1272_isContract"" [label=""isContract""];
""1272_approve"" [label=""approve""];
""1272_isAdmin"" [label=""isAdmin""];
""1272_populateFromItemRegistry"" [label=""populateFromItemRegistry""];
""1272_setItemRegistry"" [label=""setItemRegistry""];
""1272_setOwner"" [label=""setOwner""];
""1272__transfer"" [label=""_transfer""];
""1272_startingPriceOf"" [label=""startingPriceOf""];
""1272_approvedFor"" [label=""approvedFor""];
""1272_listItem"" [label=""listItem""];
""1272_balanceOf"" [label=""balanceOf""];
""1272_nextPriceOf"" [label=""nextPriceOf""];
""1272_tokensOf"" [label=""tokensOf""];
""1272_priceOf"" [label=""priceOf""];
""1272_allOf"" [label=""allOf""];
""1272_listMultipleItems"" [label=""listMultipleItems""];
""1272_withdrawAll"" [label=""withdrawAll""];
""1272_ItemToken"" [label=""ItemToken""];
""1272_symbol"" [label=""symbol""];
""1272_withdrawAmount"" [label=""withdrawAmount""];
""1272_totalSupply"" [label=""totalSupply""];
""1272_removeAdmin"" [label=""removeAdmin""];
""1272_enableERC721"" [label=""enableERC721""];
""1272_listItemFromRegistry"" [label=""listItemFromRegistry""];
""1272_tokenExists"" [label=""tokenExists""];
""1272_itemsForSaleLimit"" [label=""itemsForSaleLimit""];
""1272_implementsERC721"" [label=""implementsERC721""];
""1272_buy"" [label=""buy""];
""1272_addAdmin"" [label=""addAdmin""];
""1272_transferFrom"" [label=""transferFrom""];
""1272_ownerOf"" [label=""ownerOf""];
""1272_name"" [label=""name""];
""1272_transfer"" [label=""transfer""];
""1272_calculateNextPrice"" [label=""calculateNextPrice""];
""1272_calculateDevCut"" [label=""calculateDevCut""];
""1272_withdrawAmount"" -> ""1272_onlyOwner"";
""1272_transfer"" -> ""1272__transfer"";
""1272_transfer"" -> ""1272_ownerOf"";
""1272_buy"" -> ""1272_ownerOf"";
""1272_allOf"" -> ""1272_priceOf"";
""1272__transfer"" -> ""1272_ownerOf"";
""1272__transfer"" -> ""1272_tokenExists"";
""1272_setItemRegistry"" -> ""1272_onlyOwner"";
""1272_tokenExists"" -> ""1272_priceOf"";
""1272_allOf"" -> ""1272_nextPriceOf"";
""1272_buy"" -> ""1272_priceOf"";
""1272_listMultipleItems"" -> ""1272_listItem"";
""1272_populateFromItemRegistry"" -> ""1272_onlyOwner"";
""1272_addAdmin"" -> ""1272_onlyOwner"";
""1272_approve"" -> ""1272_tokenExists"";
""1272_listMultipleItems"" -> ""1272_onlyAdmins"";
""1272_buy"" -> ""1272_calculateDevCut"";
""1272_nextPriceOf"" -> ""1272_priceOf"";
""1272_nextPriceOf"" -> ""1272_calculateNextPrice"";
""1272_enableERC721"" -> ""1272_onlyOwner"";
""1272_approve"" -> ""1272_ownerOf"";
""1272_balanceOf"" -> ""1272_ownerOf"";
""1272_listItem"" -> ""1272_onlyAdmins"";
""1272_setOwner"" -> ""1272_onlyOwner"";
""1272_tokensOf"" -> ""1272_balanceOf"";
""1272_transferFrom"" -> ""1272__transfer"";
""1272_listItemFromRegistry"" -> ""1272_listItem"";
""1272_buy"" -> ""1272_isContract"";
""1272_listItemFromRegistry"" -> ""1272_onlyOwner"";
""1272_buy"" -> ""1272_nextPriceOf"";
""1272_transferFrom"" -> ""1272_approvedFor"";
""1272_tokensOf"" -> ""1272_ownerOf"";
""1272_allOf"" -> ""1272_ownerOf"";
""1272_withdrawAll"" -> ""1272_onlyOwner"";
""1272_populateFromItemRegistry"" -> ""1272_listItemFromRegistry"";
""1272_transfer"" -> ""1272_onlyERC721"";
""1272_removeAdmin"" -> ""1272_onlyOwner"";
""1272_approve"" -> ""1272_onlyERC721"";
""1272_buy"" -> ""1272__transfer"";
""1272_transferFrom"" -> ""1272_onlyERC721"";
""1272_allOf"" -> ""1272_startingPriceOf"";
}
"
0x448019c21743272e40eb8835dac2a7d5474899bf.sol,GODToken,contract GODToken is PausableToken { using SafeMath for uint256; string public name = ; string public symbol = ; uint public decimals = 18; uint256 private constant INITIAL_SUPPLY = 2653841597973271663912484125 wei; function GODToken(address _wallet) public { totalSupply = INITIAL_SUPPLY; balances[_wallet] = INITIAL_SUPPLY; },0,"subgraph cluster_609_GODToken {
label=""GODToken"";
""609_changeName"" [label=""changeName""];
""609_changeSymbolName"" [label=""changeSymbolName""];
""609_GODToken"" [label=""GODToken""];
""609_changeSymbolName"" -> ""609_onlyOwner"";
""609_changeName"" -> ""609_onlyOwner"";
}
"
0x32f916bcfae02a2a385ec0219a07fa2374bae7bb.sol,BinaryOption,"contract BinaryOption { address public namiCrowdSaleAddr; address public escrow; address public namiMultiSigWallet; Session public session; uint public timeInvestInMinute = 30; uint public timeOneSession = 180; uint public sessionId = 1; uint public rate = 190; uint public constant MAX_INVESTOR = 20; event SessionOpen(uint timeOpen, uint indexed sessionId); event InvestClose(uint timeInvestClose, uint priceOpen, uint indexed sessionId); event Invest(address indexed investor, bool choose, uint amount, uint timeInvest, uint indexed sessionId); event SessionClose(uint timeClose, uint indexed sessionId, uint priceClose, uint nacPrice, uint rate); event Deposit(address indexed sender, uint value); function() public payable { if (msg.value > 0) Deposit(msg.sender, msg.value); }",0,"subgraph cluster_2201_BinaryOption {
label=""BinaryOption"";
""2201_getChooses"" [label=""getChooses""];
""2201_invest"" [label=""invest""];
""2201_getEtherToBuy"" [label=""getEtherToBuy""];
""2201_getAmount"" [label=""getAmount""];
""2201_closeInvest"" [label=""closeInvest""];
""2201_changeTimeInvest"" [label=""changeTimeInvest""];
""2201_closeSession"" [label=""closeSession""];
""2201_withdrawEther"" [label=""withdrawEther""];
""2201_resetSession"" [label=""resetSession""];
""2201_fallback"" [label=""fallback""];
""2201_openSession"" [label=""openSession""];
""2201_changeRate"" [label=""changeRate""];
""2201_changeTimeOneSession"" [label=""changeTimeOneSession""];
""2201_BinaryOption"" [label=""BinaryOption""];
""2201_getInvestors"" [label=""getInvestors""];
""2201_changeEscrow"" [label=""changeEscrow""];
""2201_safeWithdraw"" [label=""safeWithdraw""];
""2201_safeWithdraw"" -> ""2201_onlyEscrow"";
""2201_changeRate"" -> ""2201_onlyEscrow"";
""2201_closeSession"" -> ""2201_getEtherToBuy"";
""2201_closeInvest"" -> ""2201_onlyEscrow"";
""2201_changeEscrow"" -> ""2201_onlyNamiMultisig"";
""2201_changeTimeOneSession"" -> ""2201_onlyEscrow"";
""2201_changeTimeInvest"" -> ""2201_onlyEscrow"";
""2201_withdrawEther"" -> ""2201_onlyEscrow"";
""2201_openSession"" -> ""2201_onlyEscrow"";
""2201_resetSession"" -> ""2201_onlyEscrow"";
""2201_closeSession"" -> ""2201_onlyEscrow"";
}
"
0x0f33a2f6dc77be2134e1537bf919f7d9ef1d225d.sol,MOT,"contract MOT is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public blacklist; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 public totalSupply = 100000000e18; uint256 public totalDistributed = 20000000e18; uint256 public totalRemaining = totalSupply.sub(totalDistributed); uint256 public value = 1500e18; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_851_MOT {
label=""MOT"";
""851_constructor"" [label=""constructor""];
""851_transfer"" [label=""transfer""];
""851_transferOwnership"" [label=""transferOwnership""];
""851_burn"" [label=""burn""];
""851_balanceOf"" [label=""balanceOf""];
""851_allowance"" [label=""allowance""];
""851_getTokens"" [label=""getTokens""];
""851_finishDistribution"" [label=""finishDistribution""];
""851_transferFrom"" [label=""transferFrom""];
""851_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""851_approve"" [label=""approve""];
""851_fallback"" [label=""fallback""];
""851_getTokenBalance"" [label=""getTokenBalance""];
""851_distr"" [label=""distr""];
""851_withdraw"" [label=""withdraw""];
""851_getTokens"" -> ""851_onlyWhitelist"";
""851_transfer"" -> ""851_onlyPayloadSize"";
""851_finishDistribution"" -> ""851_onlyOwner"";
""851_getTokens"" -> ""851_canDistr"";
""851_finishDistribution"" -> ""851_canDistr"";
""851_distr"" -> ""851_canDistr"";
""851_burn"" -> ""851_onlyOwner"";
""851_transferOwnership"" -> ""851_onlyOwner"";
""851_transferFrom"" -> ""851_onlyPayloadSize"";
""851_withdrawForeignTokens"" -> ""851_onlyOwner"";
""851_withdraw"" -> ""851_onlyOwner"";
""851_fallback"" -> ""851_getTokens"";
""851_getTokens"" -> ""851_distr"";
}
"
0x211db6b2cba3b95fb95ac479dd51d84a2fb61388.sol,BOSS,"contract BOSS is StandardToken, Pausable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant INITIAL_SUPPLY = 200000000000000000000000000; function BOSS() { totalSupply = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; }",0,"subgraph cluster_572_BOSS {
label=""BOSS"";
""572_transfer"" [label=""transfer""];
""572_transferFrom"" [label=""transferFrom""];
""572_BOSS"" [label=""BOSS""];
""572_approve"" [label=""approve""];
""572_approve"" -> ""572_approve"";
""572_transfer"" -> ""572_whenNotPaused"";
""572_transferFrom"" -> ""572_transferFrom"";
""572_transferFrom"" -> ""572_whenNotPaused"";
""572_approve"" -> ""572_whenNotPaused"";
""572_transfer"" -> ""572_transfer"";
}
"
0xf14f06e227c015b398b8069314f4b8d1d7022c9e.sol,AuthenticatedProxy,"contract AuthenticatedProxy is TokenRecipient { address public user; ProxyRegistry public registry; bool public revoked; enum HowToCall { Call, DelegateCall }",0,"subgraph cluster_2864_AuthenticatedProxy {
label=""AuthenticatedProxy"";
""2864_AuthenticatedProxy"" [label=""AuthenticatedProxy""];
""2864_setRevoke"" [label=""setRevoke""];
""2864_proxy"" [label=""proxy""];
""2864_proxyAssert"" [label=""proxyAssert""];
""2864_proxyAssert"" -> ""2864_proxy"";
}
"
0x74bbed9bd87e339ad23b52ba8dd91b4cd216d080.sol,RadicalPixels,"contract RadicalPixels is HarbergerTaxable, ERC721Token { using SafeMath for uint256; uint256 public xMax; uint256 public yMax; uint256 constant clearLow = 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000; uint256 constant clearHigh = 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff; uint256 constant factor = 0x100000000000000000000000000000000; struct Pixel { bytes32 id; address seller; uint256 x; uint256 y; uint256 price; bytes32 auctionId; bytes32 contentData; }",0,"subgraph cluster_3201_RadicalPixels {
label=""RadicalPixels"";
""3201__calculateTax"" [label=""_calculateTax""];
""3201_beginDutchAuction"" [label=""beginDutchAuction""];
""3201__setPixelBlockPrice"" [label=""_setPixelBlockPrice""];
""3201_encodeTokenId"" [label=""encodeTokenId""];
""3201_transferFrom"" [label=""transferFrom""];
""3201__updatePixelMapping"" [label=""_updatePixelMapping""];
""3201_constructor"" [label=""constructor""];
""3201_buyPixelBlocks"" [label=""buyPixelBlocks""];
""3201_buyUninitializedPixelBlocks"" [label=""buyUninitializedPixelBlocks""];
""3201__generateDutchAuction"" [label=""_generateDutchAuction""];
""3201_setPixelBlockPrices"" [label=""setPixelBlockPrices""];
""3201_changeContentData"" [label=""changeContentData""];
""3201_endDutchAuction"" [label=""endDutchAuction""];
""3201__encodeTokenId"" [label=""_encodeTokenId""];
""3201_setPixelBlockPrice"" [label=""setPixelBlockPrice""];
""3201__buyUninitializedPixelBlock"" [label=""_buyUninitializedPixelBlock""];
""3201__buyPixelBlock"" [label=""_buyPixelBlock""];
""3201_buyUninitializedPixelBlock"" [label=""buyUninitializedPixelBlock""];
""3201_buyPixelBlock"" [label=""buyPixelBlock""];
""3201__endDutchAuction"" [label=""_endDutchAuction""];
""3201_bidInAuction"" [label=""bidInAuction""];
""3201_beginDutchAuction"" -> ""3201__generateDutchAuction"";
""3201_encodeTokenId"" -> ""3201_validRange"";
""3201__buyPixelBlock"" -> ""3201_validRange"";
""3201__setPixelBlockPrice"" -> ""3201_validRange"";
""3201_buyUninitializedPixelBlock"" -> ""3201__buyUninitializedPixelBlock"";
""3201_endDutchAuction"" -> ""3201__endDutchAuction"";
""3201__buyUninitializedPixelBlock"" -> ""3201_hasPositveBalance"";
""3201_beginDutchAuction"" -> ""3201_validRange"";
""3201__setPixelBlockPrice"" -> ""3201__addToValueHeld"";
""3201_bidInAuction"" -> ""3201_validRange"";
""3201_setPixelBlockPrice"" -> ""3201__setPixelBlockPrice"";
""3201__buyUninitializedPixelBlock"" -> ""3201__mint"";
""3201_encodeTokenId"" -> ""3201__encodeTokenId"";
""3201_setPixelBlockPrices"" -> ""3201__setPixelBlockPrice"";
""3201_bidInAuction"" -> ""3201__encodeTokenId"";
""3201_beginDutchAuction"" -> ""3201_auctionNotOngoing"";
""3201__buyPixelBlock"" -> ""3201_hasPositveBalance"";
""3201__buyPixelBlock"" -> ""3201__updatePixelMapping"";
""3201_transferFrom"" -> ""3201_auctionNotOngoing"";
""3201_endDutchAuction"" -> ""3201__encodeTokenId"";
""3201_beginDutchAuction"" -> ""3201__updatePixelMapping"";
""3201__buyPixelBlock"" -> ""3201__subFromValueHeld"";
""3201__buyPixelBlock"" -> ""3201_addTokenTo"";
""3201_transferFrom"" -> ""3201_transferFrom"";
""3201_transferFrom"" -> ""3201__addToValueHeld"";
""3201_buyPixelBlocks"" -> ""3201__buyPixelBlock"";
""3201_endDutchAuction"" -> ""3201__subFromValueHeld"";
""3201_transferFrom"" -> ""3201__subFromValueHeld"";
""3201__buyUninitializedPixelBlock"" -> ""3201__addToValueHeld"";
""3201__buyPixelBlock"" -> ""3201__addToValueHeld"";
""3201_beginDutchAuction"" -> ""3201_userHasPositveBalance"";
""3201__buyUninitializedPixelBlock"" -> ""3201_validRange"";
""3201_buyUninitializedPixelBlocks"" -> ""3201__buyUninitializedPixelBlock"";
""3201_constructor"" -> ""3201_constructor"";
""3201_beginDutchAuction"" -> ""3201__encodeTokenId"";
""3201_buyPixelBlock"" -> ""3201__buyPixelBlock"";
""3201_endDutchAuction"" -> ""3201_addTokenTo"";
""3201__buyPixelBlock"" -> ""3201__encodeTokenId"";
""3201_endDutchAuction"" -> ""3201_removeTokenFrom"";
""3201__buyPixelBlock"" -> ""3201_removeTokenFrom"";
""3201__setPixelBlockPrice"" -> ""3201_auctionNotOngoing"";
""3201_endDutchAuction"" -> ""3201__updatePixelMapping"";
""3201__buyUninitializedPixelBlock"" -> ""3201__updatePixelMapping"";
""3201_endDutchAuction"" -> ""3201_validRange"";
""3201_endDutchAuction"" -> ""3201__addToValueHeld"";
""3201__buyPixelBlock"" -> ""3201__calculateTax"";
""3201__buyUninitializedPixelBlock"" -> ""3201__encodeTokenId"";
""3201__setPixelBlockPrice"" -> ""3201__updatePixelMapping"";
}
"
0x316ee6b10479576e908e5272458c789c3f4d2a47.sol,DuanZiToken,contract DuanZiToken is ERC223 { using SafeMath for uint256; using SafeMath for uint; address public owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public blacklist; mapping (address => uint) public increase; mapping (address => uint256) public unlockUnixTime; uint public maxIncrease=20; address public target; string internal name_= ; string internal symbol_ = ; uint8 internal decimals_= 18; uint256 internal totalSupply_= 2000000000e18; uint256 public toGiveBase = 5000e18; uint256 public increaseBase = 500e18; uint256 public OfficalHold = totalSupply_.mul(18).div(100); uint256 public totalRemaining = totalSupply_; uint256 public totalDistributed = 0; bool public canTransfer = true; uint256 public etherGetBase=5000000; bool public distributionFinished = false; bool public finishFreeGetToken = false; bool public finishEthGetToken = false; modifier canDistr() { require(!distributionFinished); _; },0,"subgraph cluster_1716_DuanZiToken {
label=""DuanZiToken"";
""1716_transferToContract"" [label=""transferToContract""];
""1716_stopTransfer"" [label=""stopTransfer""];
""1716_finishEthGet"" [label=""finishEthGet""];
""1716_startEthGet"" [label=""startEthGet""];
""1716_transferToAddress"" [label=""transferToAddress""];
""1716_symbol"" [label=""symbol""];
""1716_distribution"" [label=""distribution""];
""1716_finishFreeGet"" [label=""finishFreeGet""];
""1716_isContract"" [label=""isContract""];
""1716_startDistribution"" [label=""startDistribution""];
""1716_changeBaseValue"" [label=""changeBaseValue""];
""1716_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1716_distr"" [label=""distr""];
""1716_name"" [label=""name""];
""1716_burn"" [label=""burn""];
""1716_changeIncrease"" [label=""changeIncrease""];
""1716_approve"" [label=""approve""];
""1716_disableWhitelist"" [label=""disableWhitelist""];
""1716_fallback"" [label=""fallback""];
""1716_DuanZiToken"" [label=""DuanZiToken""];
""1716_distributeAmounts"" [label=""distributeAmounts""];
""1716_startFreeGet"" [label=""startFreeGet""];
""1716_transfer"" [label=""transfer""];
""1716_getTokenBalance"" [label=""getTokenBalance""];
""1716_transferFrom"" [label=""transferFrom""];
""1716_getTokens"" [label=""getTokens""];
""1716_finishDistribution"" [label=""finishDistribution""];
""1716_decimals"" [label=""decimals""];
""1716_balanceOf"" [label=""balanceOf""];
""1716_enableWhitelist"" [label=""enableWhitelist""];
""1716_changeOwner"" [label=""changeOwner""];
""1716_totalSupply"" [label=""totalSupply""];
""1716_withdraw"" [label=""withdraw""];
""1716_allowance"" [label=""allowance""];
""1716_startTransfer"" [label=""startTransfer""];
""1716_startEthGet"" -> ""1716_canDistr"";
""1716_startFreeGet"" -> ""1716_onlyOwner"";
""1716_burn"" -> ""1716_onlyOwner"";
""1716_distributeAmounts"" -> ""1716_canDistr"";
""1716_getTokens"" -> ""1716_distr"";
""1716_finishEthGet"" -> ""1716_onlyOwner"";
""1716_finishEthGet"" -> ""1716_canDistr"";
""1716_finishDistribution"" -> ""1716_canDistr"";
""1716_distribution"" -> ""1716_onlyOwner"";
""1716_transfer"" -> ""1716_transferToContract"";
""1716_withdrawForeignTokens"" -> ""1716_onlyOwner"";
""1716_withdraw"" -> ""1716_onlyOwner"";
""1716_getTokens"" -> ""1716_onlyWhitelist"";
""1716_stopTransfer"" -> ""1716_onlyOwner"";
""1716_finishDistribution"" -> ""1716_onlyOwner"";
""1716_finishFreeGet"" -> ""1716_canDistr"";
""1716_transfer"" -> ""1716_canTrans"";
""1716_changeBaseValue"" -> ""1716_onlyOwner"";
""1716_startDistribution"" -> ""1716_onlyOwner"";
""1716_distr"" -> ""1716_canDistr"";
""1716_transferToAddress"" -> ""1716_balanceOf"";
""1716_distribution"" -> ""1716_distr"";
""1716_changeIncrease"" -> ""1716_onlyOwner"";
""1716_enableWhitelist"" -> ""1716_onlyOwner"";
""1716_DuanZiToken"" -> ""1716_distr"";
""1716_changeOwner"" -> ""1716_onlyOwner"";
""1716_disableWhitelist"" -> ""1716_onlyOwner"";
""1716_fallback"" -> ""1716_getTokens"";
""1716_getTokens"" -> ""1716_canDistr"";
""1716_startFreeGet"" -> ""1716_canDistr"";
""1716_finishFreeGet"" -> ""1716_onlyOwner"";
""1716_startTransfer"" -> ""1716_onlyOwner"";
""1716_transfer"" -> ""1716_isContract"";
""1716_distributeAmounts"" -> ""1716_onlyOwner"";
""1716_distributeAmounts"" -> ""1716_distr"";
""1716_startEthGet"" -> ""1716_onlyOwner"";
""1716_transferToContract"" -> ""1716_balanceOf"";
""1716_transfer"" -> ""1716_balanceOf"";
""1716_transferFrom"" -> ""1716_canTrans"";
""1716_distribution"" -> ""1716_canDistr"";
""1716_transfer"" -> ""1716_transferToAddress"";
}
"
0xbd24918e527512c48e7f54b3bec8f47b9f48914b.sol,JanusNetwork,"contract JanusNetwork is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 5000000000e8; uint256 public totalDistributed = 0; uint256 public tokensPerEth = 12000000e8; uint256 public constant minContribution = 1 ether / 200; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_948_JanusNetwork {
label=""JanusNetwork"";
""948_transferFrom"" [label=""transferFrom""];
""948_distr"" [label=""distr""];
""948_balanceOf"" [label=""balanceOf""];
""948_transferOwnership"" [label=""transferOwnership""];
""948_doAirdrop"" [label=""doAirdrop""];
""948_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""948_transfer"" [label=""transfer""];
""948_getTokenBalance"" [label=""getTokenBalance""];
""948_approve"" [label=""approve""];
""948_burn"" [label=""burn""];
""948_updateTokensPerEth"" [label=""updateTokensPerEth""];
""948_allowance"" [label=""allowance""];
""948_finishDistribution"" [label=""finishDistribution""];
""948_withdraw"" [label=""withdraw""];
""948_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""948_withdrawAltcoinTokens"" [label=""withdrawAltcoinTokens""];
""948_fallback"" [label=""fallback""];
""948_JANUS"" [label=""JANUS""];
""948_getTokens"" [label=""getTokens""];
""948_transfer"" -> ""948_onlyPayloadSize"";
""948_fallback"" -> ""948_getTokens"";
""948_withdrawAltcoinTokens"" -> ""948_onlyOwner"";
""948_finishDistribution"" -> ""948_canDistr"";
""948_JANUS"" -> ""948_distr"";
""948_adminClaimAirdropMultiple"" -> ""948_doAirdrop"";
""948_withdraw"" -> ""948_onlyOwner"";
""948_getTokens"" -> ""948_distr"";
""948_adminClaimAirdrop"" -> ""948_doAirdrop"";
""948_burn"" -> ""948_onlyOwner"";
""948_transferFrom"" -> ""948_onlyPayloadSize"";
""948_transferOwnership"" -> ""948_onlyOwner"";
""948_adminClaimAirdropMultiple"" -> ""948_onlyOwner"";
""948_updateTokensPerEth"" -> ""948_onlyOwner"";
""948_getTokens"" -> ""948_canDistr"";
""948_adminClaimAirdrop"" -> ""948_onlyOwner"";
""948_finishDistribution"" -> ""948_onlyOwner"";
""948_distr"" -> ""948_canDistr"";
}
"
0x4bd3aac60b2e8893913b8398edda362e6b46dd98.sol,CryptoPoliceOfficerToken,"contract CryptoPoliceOfficerToken is TotalSupply, Balance, Burnable { using MathUtils for uint; string public name; string public symbol; uint8 public decimals = 18; mapping(address => mapping(address => uint)) allowances; bool public publicTransfersEnabled = false; uint public releaseStartTime; uint public lockedAmount; TokenLock[] public locks; struct TokenLock { uint amount; uint timespan; bool released; }",0,"subgraph cluster_840_CryptoPoliceOfficerToken {
label=""CryptoPoliceOfficerToken"";
""840_addTokenLock"" [label=""addTokenLock""];
""840_approveAndCall"" [label=""approveAndCall""];
""840_transfer"" [label=""transfer""];
""840_transferFrom"" [label=""transferFrom""];
""840__transfer"" [label=""_transfer""];
""840_requireOwnerUnlockedAmount"" [label=""requireOwnerUnlockedAmount""];
""840_enablePublicTransfers"" [label=""enablePublicTransfers""];
""840_allowance"" [label=""allowance""];
""840_releaseLockedTokens"" [label=""releaseLockedTokens""];
""840_constructor"" [label=""constructor""];
""840_setCrowdsaleContract"" [label=""setCrowdsaleContract""];
""840_approve"" [label=""approve""];
""840_releaseLockedTokens"" -> ""840_grantOwner"";
""840_setCrowdsaleContract"" -> ""840_grantOwner"";
""840__transfer"" -> ""840_hasSufficientBalance"";
""840_addTokenLock"" -> ""840_grantOwner"";
""840_setCrowdsaleContract"" -> ""840_getCrowdsaleHardCap"";
""840_approveAndCall"" -> ""840_approve"";
""840_transfer"" -> ""840__transfer"";
""840_setCrowdsaleContract"" -> ""840_setCrowdsaleContract"";
""840_enablePublicTransfers"" -> ""840_crowdsaleSuccessful"";
""840__transfer"" -> ""840_whenTransferable"";
""840_transferFrom"" -> ""840__transfer"";
""840_requireOwnerUnlockedAmount"" -> ""840_balanceOf"";
""840_setCrowdsaleContract"" -> ""840_transfer"";
""840_addTokenLock"" -> ""840_requireOwnerUnlockedAmount"";
""840_enablePublicTransfers"" -> ""840_grantOwner"";
""840__transfer"" -> ""840_hasUnlockedAmount"";
}
"
0x26b5962250b779ab0f33970738a46fcfb00a70b9.sol,NewLottery,"contract NewLottery is Owned { uint256 private maxTickets; uint256 public minimumBounty; uint256 public ticketPrice; uint256 public lottoIndex; uint256 lastTicketTime; uint8 _direction; uint256 numtickets; uint256 totalBounty; address owner; event NewTicket(address indexed fromAddress, bool success); event LottoComplete(address indexed fromAddress, uint indexed lottoIndex, uint256 reward); function LottoCount() public payable { owner = msg.sender; ticketPrice = 0.101 * 10**18; minimumBounty = 1 * 10**18; maxTickets = 10; _direction = 0; lottoIndex = 1; lastTicketTime = 0; numtickets = 0; totalBounty = msg.value; require(totalBounty >= minimumBounty); }",0,"subgraph cluster_354_NewLottery {
label=""NewLottery"";
""354_getLastTicketTime"" [label=""getLastTicketTime""];
""354_getBalance"" [label=""getBalance""];
""354_shutdown"" [label=""shutdown""];
""354_withdraw"" [label=""withdraw""];
""354_LottoCount"" [label=""LottoCount""];
""354_PayWinner"" [label=""PayWinner""];
""354_AddTicket"" [label=""AddTicket""];
""354_withdraw"" -> ""354_onlyOwner"";
""354_shutdown"" -> ""354_onlyOwner"";
""354_AddTicket"" -> ""354_PayWinner"";
}
"
0xb402be8db1d9eb2beedfe2c8a6c38a604e9f13c6.sol,depositofferToken,"contract depositofferToken is ReentryProtected, ERC20Token, depositofferTokenAbstract, depositofferTokenConfig { using SafeMath for uint; uint public constant TOKENS_PER_ETH = TOKENS_PER_USD * USD_PER_ETH; uint public constant MIN_ETH_FUND = 1 ether * MIN_USD_FUND / USD_PER_ETH; uint public constant MAX_ETH_FUND = 1 ether * MAX_USD_FUND / USD_PER_ETH; uint public constant KYC_ETH_LMT = 1 ether * KYC_USD_LMT / USD_PER_ETH; uint public END_DATE = START_DATE + FUNDING_PERIOD; modifier onlyOwner { require(msg.sender == owner); _; }",0,"subgraph cluster_1224_depositofferToken {
label=""depositofferToken"";
""1224_usdToEth"" [label=""usdToEth""];
""1224_usdRaised"" [label=""usdRaised""];
""1224_transfer"" [label=""transfer""];
""1224_refund"" [label=""refund""];
""1224_changeOwner"" [label=""changeOwner""];
""1224_transferFrom"" [label=""transferFrom""];
""1224_destroy"" [label=""destroy""];
""1224_ethToTokens"" [label=""ethToTokens""];
""1224_finaliseICO"" [label=""finaliseICO""];
""1224_abort"" [label=""abort""];
""1224_fallback"" [label=""fallback""];
""1224_ethToUsd"" [label=""ethToUsd""];
""1224_changedeposito"" [label=""changedeposito""];
""1224_depositofferToken"" [label=""depositofferToken""];
""1224_approve"" [label=""approve""];
""1224_fundSucceeded"" [label=""fundSucceeded""];
""1224_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""1224_fundFailed"" [label=""fundFailed""];
""1224_acceptOwnership"" [label=""acceptOwnership""];
""1224_addKycAddress"" [label=""addKycAddress""];
""1224_proxyPurchase"" [label=""proxyPurchase""];
""1224_destroy"" -> ""1224_onlyOwner"";
""1224_transferAnyERC20Token"" -> ""1224_preventReentry"";
""1224_proxyPurchase"" -> ""1224_noReentry"";
""1224_addKycAddress"" -> ""1224_onlyOwner"";
""1224_abort"" -> ""1224_onlyOwner"";
""1224_fallback"" -> ""1224_proxyPurchase"";
""1224_proxyPurchase"" -> ""1224_xfer"";
""1224_abort"" -> ""1224_noReentry"";
""1224_changedeposito"" -> ""1224_onlyOwner"";
""1224_refund"" -> ""1224_fundFailed"";
""1224_usdRaised"" -> ""1224_ethToUsd"";
""1224_refund"" -> ""1224_preventReentry"";
""1224_changeOwner"" -> ""1224_onlyOwner"";
""1224_ethToTokens"" -> ""1224_ethToUsd"";
""1224_proxyPurchase"" -> ""1224_fundFailed"";
""1224_transfer"" -> ""1224_preventReentry"";
""1224_transferFrom"" -> ""1224_preventReentry"";
""1224_refund"" -> ""1224_xfer"";
""1224_addKycAddress"" -> ""1224_noReentry"";
""1224_addKycAddress"" -> ""1224_fundFailed"";
""1224_transferAnyERC20Token"" -> ""1224_onlyOwner"";
""1224_transfer"" -> ""1224_transfer"";
""1224_approve"" -> ""1224_noReentry"";
""1224_approve"" -> ""1224_approve"";
""1224_fundSucceeded"" -> ""1224_fundFailed"";
""1224_changeOwner"" -> ""1224_noReentry"";
""1224_finaliseICO"" -> ""1224_fundSucceeded"";
""1224_finaliseICO"" -> ""1224_onlyOwner"";
""1224_changedeposito"" -> ""1224_noReentry"";
""1224_transferFrom"" -> ""1224_transferFrom"";
""1224_destroy"" -> ""1224_noReentry"";
""1224_finaliseICO"" -> ""1224_preventReentry"";
""1224_acceptOwnership"" -> ""1224_noReentry"";
""1224_proxyPurchase"" -> ""1224_ethToTokens"";
}
"
0x6d7efeb3df42e6075fa7cf04e278d2d69e26a623.sol,LuckyYouToken,contract LuckyYouToken is PausableToken { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; constructor() public{ totalSupply = 1 * 1000 * 1000 * 1000 * (10 ** uint256(decimals)); balances[owner] = totalSupply; },0,"subgraph cluster_877_LuckyYouToken {
label=""LuckyYouToken"";
""877_airDrop"" [label=""airDrop""];
""877_constructor"" [label=""constructor""];
""877_multiTransfer"" [label=""multiTransfer""];
""877_claimTokens"" [label=""claimTokens""];
""877_claimTokens"" -> ""877_onlyOwner"";
""877_airDrop"" -> ""877_transferFrom"";
""877_multiTransfer"" -> ""877_transfer"";
}
"
0xbc97f1508fdeb0a63b25f3a4806b62ef5370e8ab.sol,CryptoBeginnerQuest,contract CryptoBeginnerQuest { using SafeMath for uint256; address private administrator; address public miningWarAddress; CryptoEngineerInterface public Engineer; CryptoDepositInterface public Deposit; CryptoMiningWarInterface public MiningWar; CryptoAirdropGameInterface public AirdropGame; CryptoBossWannaCryInterface public BossWannaCry; CryptoArenaInterface public Arena; uint256 private miningWarDeadline; uint256 private miningWarRound; mapping(address => Player) private players; mapping(address => MinerQuest) private minerQuests; mapping(address => EngineerQuest) private engineerQuests; mapping(address => DepositQuest) private depositQuests; mapping(address => JoinAirdropQuest) private joinAirdropQuests; mapping(address => AtkBossQuest) private atkBossQuests; mapping(address => AtkPlayerQuest) private atkPlayerQuests; mapping(address => BoosterQuest) private boosterQuests; mapping(address => RedbullQuest) private redbullQuests; struct Player { uint256 miningWarRound; uint256 currentQuest; },0,"subgraph cluster_2473_CryptoBeginnerQuest {
label=""CryptoBeginnerQuest"";
""2473_setMiningWarInterface"" [label=""setMiningWarInterface""];
""2473_confirmMinerQuest"" [label=""confirmMinerQuest""];
""2473_getPlayerDepositData"" [label=""getPlayerDepositData""];
""2473_getData"" [label=""getData""];
""2473_checkJoinAirdropQuest"" [label=""checkJoinAirdropQuest""];
""2473_upgrade"" [label=""upgrade""];
""2473_getMinerLv1"" [label=""getMinerLv1""];
""2473_addAtkBossQuest"" [label=""addAtkBossQuest""];
""2473_getPlayerBossWannaCryData"" [label=""getPlayerBossWannaCryData""];
""2473_checkRedbullQuest"" [label=""checkRedbullQuest""];
""2473_isContractMiniGame"" [label=""isContractMiniGame""];
""2473_confirmQuest"" [label=""confirmQuest""];
""2473_getMiningWarRoundOfPlayer"" [label=""getMiningWarRoundOfPlayer""];
""2473_addAtkPlayerQuest"" [label=""addAtkPlayerQuest""];
""2473_checkGetFreeQuest"" [label=""checkGetFreeQuest""];
""2473_checkAtkPlayerQuest"" [label=""checkAtkPlayerQuest""];
""2473_getPlayerAirdropGameData"" [label=""getPlayerAirdropGameData""];
""2473_checkBoosterQuest"" [label=""checkBoosterQuest""];
""2473_getMiningWarDealine"" [label=""getMiningWarDealine""];
""2473_getNextTimeAtkPlayer"" [label=""getNextTimeAtkPlayer""];
""2473_setArenaInterface"" [label=""setArenaInterface""];
""2473_addDepositQuest"" [label=""addDepositQuest""];
""2473_setupGame"" [label=""setupGame""];
""2473_confirmJoinAirdropQuest"" [label=""confirmJoinAirdropQuest""];
""2473_addEngineerQuest"" [label=""addEngineerQuest""];
""2473_getBoosters"" [label=""getBoosters""];
""2473_addLevelQuest"" [label=""addLevelQuest""];
""2473_addQuest"" [label=""addQuest""];
""2473_confirmAtkBossQuest"" [label=""confirmAtkBossQuest""];
""2473_setBossWannaCryInterface"" [label=""setBossWannaCryInterface""];
""2473_getEngineerLv1"" [label=""getEngineerLv1""];
""2473_getMiningWarRound"" [label=""getMiningWarRound""];
""2473_constructor"" [label=""constructor""];
""2473_getRedbulls"" [label=""getRedbulls""];
""2473_confirmEngineerQuest"" [label=""confirmEngineerQuest""];
""2473_fallback"" [label=""fallback""];
""2473_checkAtkBossQuest"" [label=""checkAtkBossQuest""];
""2473_addRedbullQuest"" [label=""addRedbullQuest""];
""2473_setupMiniGame"" [label=""setupMiniGame""];
""2473_confirmRedbullQuest"" [label=""confirmRedbullQuest""];
""2473_confirmGetFreeQuest"" [label=""confirmGetFreeQuest""];
""2473_addBoosterQuest"" [label=""addBoosterQuest""];
""2473_setDepositInterface"" [label=""setDepositInterface""];
""2473_checkEngineerQuest"" [label=""checkEngineerQuest""];
""2473_addMinerQuest"" [label=""addMinerQuest""];
""2473_confirmDepositQuest"" [label=""confirmDepositQuest""];
""2473_checkQuest"" [label=""checkQuest""];
""2473_setEngineerInterface"" [label=""setEngineerInterface""];
""2473_setAirdropGameInterface"" [label=""setAirdropGameInterface""];
""2473_addJoinAirdropQuest"" [label=""addJoinAirdropQuest""];
""2473_checkMinerQuest"" [label=""checkMinerQuest""];
""2473_confirmAtkPlayerQuest"" [label=""confirmAtkPlayerQuest""];
""2473_checkDepositQuest"" [label=""checkDepositQuest""];
""2473_confirmBoosterQuest"" [label=""confirmBoosterQuest""];
""2473_addQuest"" -> ""2473_addJoinAirdropQuest"";
""2473_confirmQuest"" -> ""2473_addQuest"";
""2473_confirmQuest"" -> ""2473_confirmDepositQuest"";
""2473_addLevelQuest"" -> ""2473_isAdministrator"";
""2473_checkQuest"" -> ""2473_checkJoinAirdropQuest"";
""2473_addQuest"" -> ""2473_addEngineerQuest"";
""2473_checkQuest"" -> ""2473_checkBoosterQuest"";
""2473_addLevelQuest"" -> ""2473_addDepositQuest"";
""2473_addLevelQuest"" -> ""2473_addAtkPlayerQuest"";
""2473_checkMinerQuest"" -> ""2473_getMinerLv1"";
""2473_checkQuest"" -> ""2473_checkGetFreeQuest"";
""2473_addQuest"" -> ""2473_addMinerQuest"";
""2473_constructor"" -> ""2473_setEngineerInterface"";
""2473_setEngineerInterface"" -> ""2473_isAdministrator"";
""2473_addQuest"" -> ""2473_addBoosterQuest"";
""2473_setAirdropGameInterface"" -> ""2473_isAdministrator"";
""2473_checkQuest"" -> ""2473_checkEngineerQuest"";
""2473_addDepositQuest"" -> ""2473_getPlayerDepositData"";
""2473_setupGame"" -> ""2473_getMiningWarDealine"";
""2473_upgrade"" -> ""2473_isAdministrator"";
""2473_checkBoosterQuest"" -> ""2473_getBoosters"";
""2473_addLevelQuest"" -> ""2473_addMinerQuest"";
""2473_setMiningWarInterface"" -> ""2473_isAdministrator"";
""2473_checkAtkBossQuest"" -> ""2473_getPlayerBossWannaCryData"";
""2473_addLevelQuest"" -> ""2473_addJoinAirdropQuest"";
""2473_addQuest"" -> ""2473_addDepositQuest"";
""2473_checkGetFreeQuest"" -> ""2473_getMiningWarRoundOfPlayer"";
""2473_constructor"" -> ""2473_setBossWannaCryInterface"";
""2473_addLevelQuest"" -> ""2473_addAtkBossQuest"";
""2473_checkRedbullQuest"" -> ""2473_getRedbulls"";
""2473_addLevelQuest"" -> ""2473_addRedbullQuest"";
""2473_checkQuest"" -> ""2473_checkAtkBossQuest"";
""2473_setArenaInterface"" -> ""2473_isAdministrator"";
""2473_confirmQuest"" -> ""2473_confirmEngineerQuest"";
""2473_addQuest"" -> ""2473_addAtkPlayerQuest"";
""2473_confirmQuest"" -> ""2473_confirmBoosterQuest"";
""2473_checkJoinAirdropQuest"" -> ""2473_getPlayerAirdropGameData"";
""2473_constructor"" -> ""2473_setArenaInterface"";
""2473_setBossWannaCryInterface"" -> ""2473_isAdministrator"";
""2473_checkEngineerQuest"" -> ""2473_getEngineerLv1"";
""2473_confirmQuest"" -> ""2473_confirmRedbullQuest"";
""2473_checkDepositQuest"" -> ""2473_getPlayerDepositData"";
""2473_addQuest"" -> ""2473_addRedbullQuest"";
""2473_confirmQuest"" -> ""2473_confirmJoinAirdropQuest"";
""2473_getData"" -> ""2473_checkQuest"";
""2473_setDepositInterface"" -> ""2473_isAdministrator"";
""2473_addQuest"" -> ""2473_addAtkBossQuest"";
""2473_confirmQuest"" -> ""2473_confirmGetFreeQuest"";
""2473_constructor"" -> ""2473_setMiningWarInterface"";
""2473_addAtkBossQuest"" -> ""2473_getPlayerBossWannaCryData"";
""2473_constructor"" -> ""2473_setAirdropGameInterface"";
""2473_setupGame"" -> ""2473_getMiningWarRound"";
""2473_checkAtkPlayerQuest"" -> ""2473_getNextTimeAtkPlayer"";
""2473_constructor"" -> ""2473_setDepositInterface"";
""2473_checkQuest"" -> ""2473_checkDepositQuest"";
""2473_checkQuest"" -> ""2473_checkMinerQuest"";
""2473_addLevelQuest"" -> ""2473_addEngineerQuest"";
""2473_addAtkPlayerQuest"" -> ""2473_getNextTimeAtkPlayer"";
""2473_checkQuest"" -> ""2473_checkRedbullQuest"";
""2473_addLevelQuest"" -> ""2473_addBoosterQuest"";
""2473_confirmQuest"" -> ""2473_confirmMinerQuest"";
""2473_confirmQuest"" -> ""2473_checkQuest"";
""2473_addJoinAirdropQuest"" -> ""2473_getPlayerAirdropGameData"";
""2473_confirmQuest"" -> ""2473_confirmAtkBossQuest"";
""2473_confirmQuest"" -> ""2473_confirmAtkPlayerQuest"";
""2473_checkQuest"" -> ""2473_checkAtkPlayerQuest"";
}
"
0xb3b558f664327156e87274155c2921bc8d9b1f18.sol,CHXTokenSale,"contract CHXTokenSale is Whitelistable { using SafeMath for uint; event TokenPurchased(address indexed investor, uint contribution, uint tokens); uint public constant TOKEN_PRICE = 170 szabo; uint public saleStartTime; uint public saleEndTime; uint public maxGasPrice = 20e9 wei; uint public minContribution = 100 finney; uint public maxContributionPhase1 = 500 finney; uint public maxContributionPhase2 = 10 ether; uint public phase1DurationInHours = 24; CHXToken public tokenContract; mapping (address => uint) public etherContributions; mapping (address => uint) public tokenAllocations; uint public etherCollected; uint public tokensSold; function CHXTokenSale() public { }",0,"subgraph cluster_1752_CHXTokenSale {
label=""CHXTokenSale"";
""1752_CHXTokenSale"" [label=""CHXTokenSale""];
""1752_setMaxContributionPhase1"" [label=""setMaxContributionPhase1""];
""1752_setMaxContributionPhase2"" [label=""setMaxContributionPhase2""];
""1752_sendCollectedEther"" [label=""sendCollectedEther""];
""1752_setMaxGasPrice"" [label=""setMaxGasPrice""];
""1752_setMinContribution"" [label=""setMinContribution""];
""1752_transferOwnership"" [label=""transferOwnership""];
""1752_setPhase1DurationInHours"" [label=""setPhase1DurationInHours""];
""1752_setSaleTime"" [label=""setSaleTime""];
""1752_setTokenContract"" [label=""setTokenContract""];
""1752_fallback"" [label=""fallback""];
""1752_sendRemainingTokens"" [label=""sendRemainingTokens""];
""1752_setMaxContributionPhase2"" -> ""1752_onlyOwner"";
""1752_setPhase1DurationInHours"" -> ""1752_onlyOwner"";
""1752_setMinContribution"" -> ""1752_onlyOwner"";
""1752_setMaxContributionPhase1"" -> ""1752_onlyOwner"";
""1752_transferOwnership"" -> ""1752_transferOwnership"";
""1752_sendRemainingTokens"" -> ""1752_onlyOwner"";
""1752_sendCollectedEther"" -> ""1752_onlyOwner"";
""1752_transferOwnership"" -> ""1752_onlyOwner"";
""1752_setTokenContract"" -> ""1752_onlyOwner"";
""1752_setMaxGasPrice"" -> ""1752_onlyOwner"";
""1752_setSaleTime"" -> ""1752_onlyOwner"";
""1752_transferOwnership"" -> ""1752_setWhitelistAdmin"";
}
"
0xf3c8ed6c721774c022c530e813a369dfe78a6e85.sol,CryptoSprites,contract CryptoSprites is ERC721 { address public owner; address KittyCoreAddress = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d; address SaleClockAuctionAddress = 0xb1690C08E213a35Ed9bAb7B318DE14420FB57d8C; address charityAddress = 0xb30cb3b3E03A508Db2A0a3e07BA1297b47bb0fb1; uint public etherForOwner; uint public etherForCharity; uint public ownerCut = 15; uint public charityCut = 15; uint public featurePrice = 10**16; uint public priceMultiplier = 1; uint public priceDivider = 10; modifier onlyOwner { require(msg.sender == owner); _; },0,"subgraph cluster_1695_CryptoSprites {
label=""CryptoSprites"";
""1695_symbol"" [label=""symbol""];
""1695_featureSprite"" [label=""featureSprite""];
""1695_takeOwnership"" [label=""takeOwnership""];
""1695_withdraw"" [label=""withdraw""];
""1695_disapprove"" [label=""disapprove""];
""1695_supportsInterface"" [label=""supportsInterface""];
""1695_allowance"" [label=""allowance""];
""1695_transferFrom"" [label=""transferFrom""];
""1695_listSpriteForSale"" [label=""listSpriteForSale""];
""1695_buySprite"" [label=""buySprite""];
""1695_name"" [label=""name""];
""1695_changeOwner"" [label=""changeOwner""];
""1695_totalSupply"" [label=""totalSupply""];
""1695_approve"" [label=""approve""];
""1695_adjustFeaturePrice"" [label=""adjustFeaturePrice""];
""1695_transfer"" [label=""transfer""];
""1695_featuredSpritesLength"" [label=""featuredSpritesLength""];
""1695_lookupKitty"" [label=""lookupKitty""];
""1695_lookupKittyDetails2"" [label=""lookupKittyDetails2""];
""1695_lookupAllSprites"" [label=""lookupAllSprites""];
""1695_lookupFeaturedSprites"" [label=""lookupFeaturedSprites""];
""1695_lookupSprite"" [label=""lookupSprite""];
""1695_removeSpriteFromSale"" [label=""removeSpriteFromSale""];
""1695_adjustDefaultSpritePrice"" [label=""adjustDefaultSpritePrice""];
""1695_balanceOf"" [label=""balanceOf""];
""1695_lookupKittyDetails1"" [label=""lookupKittyDetails1""];
""1695_adjustCut"" [label=""adjustCut""];
""1695_fallback"" [label=""fallback""];
""1695_ownerOf"" [label=""ownerOf""];
""1695_calculatePrice"" [label=""calculatePrice""];
""1695_CryptoSprites"" [label=""CryptoSprites""];
""1695_usersSpriteOwningHistory"" [label=""usersSpriteOwningHistory""];
""1695_adjustCut"" -> ""1695_onlyOwner"";
""1695_changeOwner"" -> ""1695_onlyOwner"";
""1695_adjustFeaturePrice"" -> ""1695_onlyOwner"";
""1695_adjustDefaultSpritePrice"" -> ""1695_onlyOwner"";
""1695_withdraw"" -> ""1695_onlyOwner"";
}
"
0xf4702b0918a8a89dfc38459ce42198834818f26b.sol,Wallet,"contract Wallet is multisig, multiowned, daylimit { struct Transaction { address to; uint value; bytes data; }",0,"subgraph cluster_1155_Wallet {
label=""Wallet"";
""1155_confirm"" [label=""confirm""];
""1155_fallback"" [label=""fallback""];
""1155_execute"" [label=""execute""];
""1155_clearPending"" [label=""clearPending""];
""1155_kill"" [label=""kill""];
""1155_Wallet"" [label=""Wallet""];
""1155_Wallet"" -> ""1155_multiowned"";
""1155_execute"" -> ""1155_underLimit"";
""1155_confirm"" -> ""1155_onlymanyowners"";
""1155_Wallet"" -> ""1155_daylimit"";
""1155_clearPending"" -> ""1155_clearPending"";
""1155_execute"" -> ""1155_confirm"";
""1155_execute"" -> ""1155_onlyowner"";
""1155_kill"" -> ""1155_onlymanyowners"";
}
"
0x6b18b3808fd9c4401af4839b6aa2971aae7a8aad.sol,ODEEPToken,"contract ODEEPToken is StandardToken , BurnableToken { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; address public Bounties_Wallet = 0x70F48becd584115E8FF298eA72D5EFE199526655; address public Team_Wallet = 0xd3186A1e1ECe80F2E1811904bfBF876e6ea27A41; address public OEM_Wallet = 0x4fD0e4E8EFDf55D2C1B41d504A2977a9f8453714; address public LA_wallet = 0xA0AaFDbDD5bE0d5f1A5f980331DEf9b5e106e587; address public tokenWallet = 0x81cb9078e3c19842B201e2cCFC4B0f111d693D47; uint256 public constant INITIAL_SUPPLY = 100000000 ether; uint256 tokenRate = 560; function ODEEPToken() public { totalSupply_ = INITIAL_SUPPLY; balances[Bounties_Wallet] = INITIAL_SUPPLY.mul(5).div(100) ; balances[Team_Wallet] = INITIAL_SUPPLY.mul(8).div(100); balances[OEM_Wallet] = INITIAL_SUPPLY.mul(10).div(100) ; balances[LA_wallet] = INITIAL_SUPPLY.mul(8).div(100) ; balances[tokenWallet] = INITIAL_SUPPLY.mul(69).div(100); endDate = _endDate; emit Transfer(0x0, Bounties_Wallet, balances[Bounties_Wallet]); emit Transfer(0x0, Team_Wallet, balances[Team_Wallet]); emit Transfer(0x0, OEM_Wallet, balances[OEM_Wallet]); emit Transfer(0x0, LA_wallet, balances[LA_wallet]); emit Transfer(0x0, tokenWallet, balances[tokenWallet]); }",0,"subgraph cluster_1596_ODEEPToken {
label=""ODEEPToken"";
""1596_fallback"" [label=""fallback""];
""1596__EnvoisTokens"" [label=""_EnvoisTokens""];
""1596_setCapTab"" [label=""setCapTab""];
""1596_sendTokens"" [label=""sendTokens""];
""1596_isPreSale"" [label=""isPreSale""];
""1596__sendTokensManually"" [label=""_sendTokensManually""];
""1596_getTokenRate"" [label=""getTokenRate""];
""1596_getCapTab"" [label=""getCapTab""];
""1596_ODEEPToken"" [label=""ODEEPToken""];
""1596_currentStepIndexAll"" [label=""currentStepIndexAll""];
""1596_buyTokens"" [label=""buyTokens""];
""1596_isMainSale"" [label=""isMainSale""];
""1596_setTokenRate"" [label=""setTokenRate""];
""1596_currentStepIndexByDate"" [label=""currentStepIndexByDate""];
""1596_computeTokenAmountAll"" [label=""computeTokenAmountAll""];
""1596_buyTokens"" -> ""1596__EnvoisTokens"";
""1596__EnvoisTokens"" -> ""1596_sendTokens"";
""1596_currentStepIndexAll"" -> ""1596_currentStepIndexByDate"";
""1596_setTokenRate"" -> ""1596_onlyOwner"";
""1596_setCapTab"" -> ""1596_onlyOwner"";
""1596_computeTokenAmountAll"" -> ""1596_computeTokenAmountAll"";
""1596_buyTokens"" -> ""1596_computeTokenAmountAll"";
""1596_fallback"" -> ""1596_isMainSale"";
""1596_computeTokenAmountAll"" -> ""1596_currentStepIndexAll"";
""1596_buyTokens"" -> ""1596_isMainSale"";
""1596_buyTokens"" -> ""1596_isPreSale"";
""1596_buyTokens"" -> ""1596_currentStepIndexAll"";
""1596__sendTokensManually"" -> ""1596_onlyOwner"";
""1596__sendTokensManually"" -> ""1596_sendTokens"";
""1596_fallback"" -> ""1596_isPreSale"";
""1596_fallback"" -> ""1596_buyTokens"";
}
"
0x6e59116f211369823e4d8f86d816d0d58e3d9f48.sol,PausableToken,"contract PausableToken is StandardToken, Pausable { function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) { return super.transfer(_to, _value); }",0,"subgraph cluster_773_PausableToken {
label=""PausableToken"";
""773_increaseApproval"" [label=""increaseApproval""];
""773_transferFrom"" [label=""transferFrom""];
""773_decreaseApproval"" [label=""decreaseApproval""];
""773_transfer"" [label=""transfer""];
""773_approve"" [label=""approve""];
""773_transfer"" -> ""773_transfer"";
""773_approve"" -> ""773_whenNotPaused"";
""773_transferFrom"" -> ""773_whenNotPaused"";
""773_transferFrom"" -> ""773_transferFrom"";
""773_approve"" -> ""773_approve"";
""773_transfer"" -> ""773_whenNotPaused"";
""773_increaseApproval"" -> ""773_increaseApproval"";
""773_decreaseApproval"" -> ""773_whenNotPaused"";
""773_increaseApproval"" -> ""773_whenNotPaused"";
""773_decreaseApproval"" -> ""773_decreaseApproval"";
}
"
0x34022232ad82711337ac9dbfdc473e886f1805df.sol,ShalloToken,"contract ShalloToken is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 27000000000e8; uint256 public totalDistributed = 0; uint256 public tokensPerEth = 25000000e8; uint256 public constant minContribution = 1 ether / 100; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_957_ShalloToken {
label=""ShalloToken"";
""957_transfer"" [label=""transfer""];
""957_withdraw"" [label=""withdraw""];
""957_fallback"" [label=""fallback""];
""957_finishDistribution"" [label=""finishDistribution""];
""957_getTokenBalance"" [label=""getTokenBalance""];
""957_getTokens"" [label=""getTokens""];
""957_ShalloToken"" [label=""ShalloToken""];
""957_transferOwnership"" [label=""transferOwnership""];
""957_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""957_transferFrom"" [label=""transferFrom""];
""957_distr"" [label=""distr""];
""957_withdrawAltcoinTokens"" [label=""withdrawAltcoinTokens""];
""957_balanceOf"" [label=""balanceOf""];
""957_updateTokensPerEth"" [label=""updateTokensPerEth""];
""957_burn"" [label=""burn""];
""957_doAirdrop"" [label=""doAirdrop""];
""957_allowance"" [label=""allowance""];
""957_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""957_approve"" [label=""approve""];
""957_getTokens"" -> ""957_canDistr"";
""957_burn"" -> ""957_onlyOwner"";
""957_getTokens"" -> ""957_distr"";
""957_adminClaimAirdrop"" -> ""957_onlyOwner"";
""957_adminClaimAirdropMultiple"" -> ""957_doAirdrop"";
""957_adminClaimAirdrop"" -> ""957_doAirdrop"";
""957_updateTokensPerEth"" -> ""957_onlyOwner"";
""957_withdrawAltcoinTokens"" -> ""957_onlyOwner"";
""957_fallback"" -> ""957_getTokens"";
""957_distr"" -> ""957_canDistr"";
""957_transferFrom"" -> ""957_onlyPayloadSize"";
""957_transfer"" -> ""957_onlyPayloadSize"";
""957_transferOwnership"" -> ""957_onlyOwner"";
""957_finishDistribution"" -> ""957_onlyOwner"";
""957_withdraw"" -> ""957_onlyOwner"";
""957_adminClaimAirdropMultiple"" -> ""957_onlyOwner"";
""957_finishDistribution"" -> ""957_canDistr"";
""957_ShalloToken"" -> ""957_distr"";
}
"
0x1de89382684ce5a99fc9d3d4b709706d6a013571.sol,Pausable,contract Pausable is Ownable { bool public paused = true; modifier whenNotPaused() { require(!paused); _; },0,"subgraph cluster_254_Pausable {
label=""Pausable"";
""254_pause"" [label=""pause""];
""254_unpause"" [label=""unpause""];
""254_unpause"" -> ""254_whenPaused"";
""254_pause"" -> ""254_onlyOwner"";
""254_pause"" -> ""254_whenNotPaused"";
""254_unpause"" -> ""254_onlyOwner"";
}
"
0x32ff276e98517ef6e0ad7bc7b2674baa0f1c388b.sol,BillPokerPreICO,"contract BillPokerPreICO is Ownable, Pausable { using SafeMath for uint; address public tokenWallet = 0xf91E6d611ec35B985bADAD2F0DA96820930B9BD2; uint public tokensSold; uint public weiRaised; mapping (address => uint256) public holdTokens; mapping (address => uint256) public purchaseTokens; address[] public holdTokenInvestors; Token public token = Token(0xc305fcdc300fa43c527e9327711f360e79528a70); uint public constant minInvest = 0.0001 ether; uint public constant tokensLimit = 25000000 ether; uint256 public startTime = 1510339500; uint256 public endTime = 1519689600; uint public price = 0.0001 ether; bool public isHoldTokens = false; uint public investorCount; mapping (bytes32 => Promo) public promoMap; struct Promo { bool enable; uint investorPercentToken; address dealer; uint dealerPercentToken; uint dealerPercentETH; uint buyCount; uint investorTokenAmount; uint dealerTokenAmount; uint investorEthAmount; uint dealerEthAmount; }",0,"subgraph cluster_985_BillPokerPreICO {
label=""BillPokerPreICO"";
""985_holdTokenInvestorsCount"" [label=""holdTokenInvestorsCount""];
""985_getTimeBonus"" [label=""getTimeBonus""];
""985_getCountBonus"" [label=""getCountBonus""];
""985_addPromo"" [label=""addPromo""];
""985_withdrawal"" [label=""withdrawal""];
""985_buyTokens"" [label=""buyTokens""];
""985_fallback"" [label=""fallback""];
""985_removePromo"" [label=""removePromo""];
""985_sendTokens"" [label=""sendTokens""];
""985_finalSendTokens"" [label=""finalSendTokens""];
""985_fallback"" -> ""985_buyTokens"";
""985_buyTokens"" -> ""985_getTimeBonus"";
""985_finalSendTokens"" -> ""985_onlyOwner"";
""985_removePromo"" -> ""985_onlyOwner"";
""985_withdrawal"" -> ""985_onlyOwner"";
""985_buyTokens"" -> ""985_whenNotPaused"";
""985_buyTokens"" -> ""985_getCountBonus"";
""985_addPromo"" -> ""985_onlyOwner"";
""985_buyTokens"" -> ""985_sendTokens"";
}
"
0xa5dc0165b798779ac80acc84c4da4ee77b79843f.sol,Whitelist,contract Whitelist is HasOwner { mapping(address => bool) public whitelist; function Whitelist(address _owner) public HasOwner(_owner) { },0,"subgraph cluster_1044_Whitelist {
label=""Whitelist"";
""1044_whitelistAddresses"" [label=""whitelistAddresses""];
""1044_Whitelist"" [label=""Whitelist""];
""1044_blacklistAddresses"" [label=""blacklistAddresses""];
""1044_setWhitelistEntries"" [label=""setWhitelistEntries""];
""1044_blacklistAddresses"" -> ""1044_onlyOwner"";
""1044_whitelistAddresses"" -> ""1044_setWhitelistEntries"";
""1044_Whitelist"" -> ""1044_HasOwner"";
""1044_blacklistAddresses"" -> ""1044_setWhitelistEntries"";
""1044_whitelistAddresses"" -> ""1044_onlyOwner"";
}
"
0x2169cce281717d204fa0ecf846a6171e96234d72.sol,BurnableToken,"contract BurnableToken is BasicToken { event Burn(address indexed burner, uint256 value); function burn(uint256 _value) public { require(_value <= balances[msg.sender]); address burner = msg.sender; balances[burner] = balances[burner].sub(_value); totalSupply_ = totalSupply_.sub(_value); emit Burn(burner, _value); emit Transfer(burner, address(0), _value); }",0,"subgraph cluster_382_BurnableToken {
label=""BurnableToken"";
""382_burn"" [label=""burn""];
}
"
0xd9485499499d66b175cf5ed54c0a19f1a6bcb61a.sol,ERC20Token,contract ERC20Token { using SafeMath for uint256; mapping(address => uint256) balances; uint256 totalSupply_; function totalSupply() public view returns (uint256) { return totalSupply_; },0,"subgraph cluster_210_ERC20Token {
label=""ERC20Token"";
""210_approve"" [label=""approve""];
""210_transferFrom"" [label=""transferFrom""];
""210_totalSupply"" [label=""totalSupply""];
""210_allowance"" [label=""allowance""];
""210_transfer"" [label=""transfer""];
""210_balanceOf"" [label=""balanceOf""];
}
"
0xd2cd43c4f6a6fa7bdfa44ee5bc486bae34f9a2aa.sol,Crowdsale,"contract Crowdsale is CrowdsaleBase { bool public requireCustomerId; bool public requiredSignedAddress; address public signerAddress; function Crowdsale(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal) CrowdsaleBase(_token, _pricingStrategy, _multisigWallet, _start, _end, _minimumFundingGoal) { }",0,"subgraph cluster_1390_AllocatedCrowdsaleMixin {
label=""AllocatedCrowdsaleMixin"";
""1390_isCrowdsaleFull"" [label=""isCrowdsaleFull""];
""1390_AllocatedCrowdsaleMixin"" [label=""AllocatedCrowdsaleMixin""];
""1390_isBreakingCap"" [label=""isBreakingCap""];
""1390_assignTokens"" [label=""assignTokens""];
""1390_getTokensLeft"" [label=""getTokensLeft""];
""1390_isCrowdsaleFull"" -> ""1390_getTokensLeft"";
""1390_isBreakingCap"" -> ""1390_getTokensLeft"";
}
"
0xf5587929c51017cfa8d0ead672fcc6b39f1496b0.sol,RippleCredit,"contract RippleCredit is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 150 * 1 days; uint public round2 = now + 50 * 1 days; uint public round1 = now + 100 * 1 days; uint256 public totalSupply = 500000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 100000e8; uint public target0drop = 1; uint public progress0drop = 0; address multisig = 0xFF84C3EAB550CBAb11725CA50F5bee01d9670fD9; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_1288_RippleCredit {
label=""RippleCredit"";
""1288_balanceOf"" [label=""balanceOf""];
""1288_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1288_transfer"" [label=""transfer""];
""1288_getTokenBalance"" [label=""getTokenBalance""];
""1288_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1288_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1288_burn"" [label=""burn""];
""1288_Distribute"" [label=""Distribute""];
""1288_distr"" [label=""distr""];
""1288_getTokens"" [label=""getTokens""];
""1288_transferFrom"" [label=""transferFrom""];
""1288_constructor"" [label=""constructor""];
""1288_fallback"" [label=""fallback""];
""1288_add"" [label=""add""];
""1288_withdraw"" [label=""withdraw""];
""1288_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1288_transferOwnership"" [label=""transferOwnership""];
""1288_approve"" [label=""approve""];
""1288_finishDistribution"" [label=""finishDistribution""];
""1288_withdrawAll"" [label=""withdrawAll""];
""1288_allowance"" [label=""allowance""];
""1288_burn"" -> ""1288_onlyOwner"";
""1288_add"" -> ""1288_onlyOwner"";
""1288_distr"" -> ""1288_canDistr"";
""1288_withdrawAll"" -> ""1288_onlyOwner"";
""1288_withdraw"" -> ""1288_onlyOwner"";
""1288_getTokens"" -> ""1288_distr"";
""1288_transfer"" -> ""1288_onlyPayloadSize"";
""1288_DistributeAirdrop"" -> ""1288_Distribute"";
""1288_finishDistribution"" -> ""1288_onlyOwner"";
""1288_transferFrom"" -> ""1288_onlyPayloadSize"";
""1288_fallback"" -> ""1288_getTokens"";
""1288_transferOwnership"" -> ""1288_onlyOwner"";
""1288_getTokens"" -> ""1288_canDistr"";
""1288_withdrawForeignTokens"" -> ""1288_onlyOwner"";
""1288_finishDistribution"" -> ""1288_canDistr"";
""1288_DistributeAirdropMultiple"" -> ""1288_onlyOwner"";
""1288_DistributeAirdropMultiple"" -> ""1288_Distribute"";
""1288_updateTokensPerEth"" -> ""1288_onlyOwner"";
""1288_Distribute"" -> ""1288_onlyOwner"";
""1288_DistributeAirdrop"" -> ""1288_onlyOwner"";
""1288_constructor"" -> ""1288_distr"";
}
"
0x004a60e932aeb59ab06996586a64c8cea37c3875.sol,MinCoin,contract MinCoin is StandardToken { string public name; uint8 public decimals; string public symbol; string public version = ; uint256 public unitsOneEthCanBuy; uint256 public totalEthInWei; address public fundsWallet; function MinCoin() { balances[msg.sender] = 1000000000000000000000; totalSupply = 1000000000000000000000; name = ; decimals = 18; symbol = ; unitsOneEthCanBuy = 10; fundsWallet = msg.sender; },0,"subgraph cluster_421_MinCoin {
label=""MinCoin"";
""421_fallback"" [label=""fallback""];
""421_MinCoin"" [label=""MinCoin""];
""421_approveAndCall"" [label=""approveAndCall""];
}
"
0x365ec7b439abcc8a3a2c4289f0868a4adcd996e9.sol,EtherRacingCore,"contract EtherRacingCore is Ownable, Pausable { uint64 _seed = 0; function random(uint64 upper) internal returns (uint64) { _seed = uint64(keccak256(keccak256(block.blockhash(block.number), _seed), now)); return _seed % upper; }",0,"subgraph cluster_1857_EtherRacingCore {
label=""EtherRacingCore"";
""1857_bid"" [label=""bid""];
""1857_EtherRacingCore"" [label=""EtherRacingCore""];
""1857_getCarProductEarning"" [label=""getCarProductEarning""];
""1857_addAuction"" [label=""addAuction""];
""1857_getCarProductName"" [label=""getCarProductName""];
""1857_getPlayerBalance"" [label=""getPlayerBalance""];
""1857_getCarProduct"" [label=""getCarProduct""];
""1857_cancelAuction"" [label=""cancelAuction""];
""1857_cashOutCar"" [label=""cashOutCar""];
""1857_getCarDetails"" [label=""getCarDetails""];
""1857_getCarProductCurrentPrice"" [label=""getCarProductCurrentPrice""];
""1857_addCarInit"" [label=""addCarInit""];
""1857_CompleteInit"" [label=""CompleteInit""];
""1857_getCarCurrentPriceAuction"" [label=""getCarCurrentPriceAuction""];
""1857_getCarAuctionID"" [label=""getCarAuctionID""];
""1857_getCarSelling"" [label=""getCarSelling""];
""1857_getCarEarning"" [label=""getCarEarning""];
""1857_getCarCount"" [label=""getCarCount""];
""1857_setUpgradeAddress"" [label=""setUpgradeAddress""];
""1857_cashOut"" [label=""cashOut""];
""1857_getCarOwner"" [label=""getCarOwner""];
""1857_buyCar"" [label=""buyCar""];
""1857_random"" [label=""random""];
""1857_addCarProduct"" [label=""addCarProduct""];
""1857_levelUpCar"" [label=""levelUpCar""];
""1857_endSaleCarProduct"" [label=""endSaleCarProduct""];
""1857__transfer"" [label=""_transfer""];
""1857_upgradeCar"" [label=""upgradeCar""];
""1857__transferAction"" [label=""_transferAction""];
""1857_getCarProductCount"" [label=""getCarProductCount""];
""1857_cashOutCar"" -> ""1857_whenNotPaused"";
""1857_getCarCurrentPriceAuction"" -> ""1857_getCarSelling"";
""1857__transferAction"" -> ""1857_whenNotPaused"";
""1857_cancelAuction"" -> ""1857_whenNotPaused"";
""1857_setUpgradeAddress"" -> ""1857_onlyMaster"";
""1857_buyCar"" -> ""1857_random"";
""1857_addCarInit"" -> ""1857_onlyMaster"";
""1857_EtherRacingCore"" -> ""1857_addCarProduct"";
""1857_addAuction"" -> ""1857_whenNotPaused"";
""1857_bid"" -> ""1857_getCarCurrentPriceAuction"";
""1857_upgradeCar"" -> ""1857_whenNotPaused"";
""1857_cashOutCar"" -> ""1857_getCarEarning"";
""1857_addCarProduct"" -> ""1857_onlyMaster"";
""1857_CompleteInit"" -> ""1857_onlyMaster"";
""1857__transfer"" -> ""1857_whenNotPaused"";
""1857_bid"" -> ""1857_whenNotPaused"";
""1857_cashOut"" -> ""1857_whenNotPaused"";
""1857_endSaleCarProduct"" -> ""1857_onlyMaster"";
""1857_levelUpCar"" -> ""1857_onlyMaster"";
}
"
0x004a60e932aeb59ab06996586a64c8cea37c3875.sol,MinCoin,contract MinCoin is StandardToken { string public name; uint8 public decimals; string public symbol; string public version = ; uint256 public unitsOneEthCanBuy; uint256 public totalEthInWei; address public fundsWallet; function MinCoin() { balances[msg.sender] = 1000000000000000000000; totalSupply = 1000000000000000000000; name = ; decimals = 18; symbol = ; unitsOneEthCanBuy = 10; fundsWallet = msg.sender; },0,"subgraph cluster_421_MinCoin {
label=""MinCoin"";
""421_fallback"" [label=""fallback""];
""421_MinCoin"" [label=""MinCoin""];
""421_approveAndCall"" [label=""approveAndCall""];
}
"
0x3106526a07ee43ca97d794ec3ba3578a47d84cfb.sol,VirMYR,"contract VirMYR { string public name; string public symbol; uint8 public decimals = 2; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = 1000000000000000000000000000; balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",0,"subgraph cluster_355_VirMYR {
label=""VirMYR"";
""355_TokenERC20"" [label=""TokenERC20""];
""355__transfer"" [label=""_transfer""];
""355_transferFrom"" [label=""transferFrom""];
""355_transfer"" [label=""transfer""];
""355_burnFrom"" [label=""burnFrom""];
""355_approve"" [label=""approve""];
""355_burn"" [label=""burn""];
""355_approveAndCall"" [label=""approveAndCall""];
""355_approveAndCall"" -> ""355_approve"";
""355_transfer"" -> ""355__transfer"";
""355_transferFrom"" -> ""355__transfer"";
}
"
0x74f7dca757597a5a9293c73895893fd2c295c5b6.sol,MinerX,"contract MinerX is StandardToken { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant INITIAL_SUPPLY = 2 * 10**9 * (10**uint256(decimals)); uint256 public weiRaised; uint256 public tokenAllocated; address public owner; bool public saleToken = true; event OwnerChanged(address indexed previousOwner, address indexed newOwner); event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount); event TokenLimitReached(uint256 tokenRaised, uint256 purchasedToken); event Transfer(address indexed _from, address indexed _to, uint256 _value); function MinerX() public { totalSupply = INITIAL_SUPPLY; owner = msg.sender; balances[owner] = INITIAL_SUPPLY; tokenAllocated = 0; transfersEnabled = true; }",0,"subgraph cluster_1542_MinerX {
label=""MinerX"";
""1542_enableTransfers"" [label=""enableTransfers""];
""1542_claimTokens"" [label=""claimTokens""];
""1542_validPurchaseTokens"" [label=""validPurchaseTokens""];
""1542_getTotalAmountOfTokens"" [label=""getTotalAmountOfTokens""];
""1542_changeOwner"" [label=""changeOwner""];
""1542_buyTokens"" [label=""buyTokens""];
""1542_startSale"" [label=""startSale""];
""1542_MinerX"" [label=""MinerX""];
""1542_stopSale"" [label=""stopSale""];
""1542_mint"" [label=""mint""];
""1542_fallback"" [label=""fallback""];
""1542_claimTokens"" -> ""1542_onlyOwner"";
""1542_startSale"" -> ""1542_onlyOwner"";
""1542_stopSale"" -> ""1542_onlyOwner"";
""1542_validPurchaseTokens"" -> ""1542_getTotalAmountOfTokens"";
""1542_fallback"" -> ""1542_buyTokens"";
""1542_buyTokens"" -> ""1542_mint"";
""1542_buyTokens"" -> ""1542_validPurchaseTokens"";
""1542_claimTokens"" -> ""1542_balanceOf"";
""1542_enableTransfers"" -> ""1542_onlyOwner"";
""1542_claimTokens"" -> ""1542_transfer"";
""1542_changeOwner"" -> ""1542_onlyOwner"";
}
"
0x17df117bb806a622d841bd5166a23b5d8746232f.sol,ItemRegistry,"contract ItemRegistry { using SafeMath for uint256; enum ItemClass {TIER1, TIER2, TIER3, TIER4}",0,"subgraph cluster_785_ItemRegistry {
label=""ItemRegistry"";
""785_nextPriceOf"" [label=""nextPriceOf""];
""785_ownerOf"" [label=""ownerOf""];
""785_isContract"" [label=""isContract""];
""785_ItemRegistry"" [label=""ItemRegistry""];
""785_setCut"" [label=""setCut""];
""785_itemsForSaleLimit"" [label=""itemsForSaleLimit""];
""785_setOwner"" [label=""setOwner""];
""785_allItemsForSale"" [label=""allItemsForSale""];
""785_startingPriceOf"" [label=""startingPriceOf""];
""785_numberOfItemsForSale"" [label=""numberOfItemsForSale""];
""785_listItem"" [label=""listItem""];
""785_balanceOf"" [label=""balanceOf""];
""785_priceOf"" [label=""priceOf""];
""785_buy"" [label=""buy""];
""785_allOf"" [label=""allOf""];
""785_withdraw"" [label=""withdraw""];
""785_itemsOfOwner"" [label=""itemsOfOwner""];
""785_calculateNextPrice"" [label=""calculateNextPrice""];
""785_listMultipleItems"" [label=""listMultipleItems""];
""785_classOf"" [label=""classOf""];
""785_withdraw"" -> ""785_onlyOwner"";
""785_allOf"" -> ""785_nextPriceOf"";
""785_listMultipleItems"" -> ""785_listItem"";
""785_nextPriceOf"" -> ""785_calculateNextPrice"";
""785_buy"" -> ""785_priceOf"";
""785_allOf"" -> ""785_priceOf"";
""785_listItem"" -> ""785_onlyOwner"";
""785_nextPriceOf"" -> ""785_classOf"";
""785_setOwner"" -> ""785_onlyOwner"";
""785_itemsOfOwner"" -> ""785_ownerOf"";
""785_allOf"" -> ""785_classOf"";
""785_allOf"" -> ""785_ownerOf"";
""785_itemsOfOwner"" -> ""785_balanceOf"";
""785_nextPriceOf"" -> ""785_priceOf"";
""785_buy"" -> ""785_ownerOf"";
""785_setCut"" -> ""785_onlyOwner"";
""785_buy"" -> ""785_isContract"";
""785_balanceOf"" -> ""785_ownerOf"";
""785_buy"" -> ""785_nextPriceOf"";
""785_listMultipleItems"" -> ""785_onlyOwner"";
""785_allOf"" -> ""785_startingPriceOf"";
}
"
0x33259c14a28c89af457c9dbac9743f3efb651f09.sol,PODH,contract PODH { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1307_PODH {
label=""PODH"";
""1307_purchaseTokens"" [label=""purchaseTokens""];
""1307_disableInitialStage"" [label=""disableInitialStage""];
""1307_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1307_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1307_setName"" [label=""setName""];
""1307_transfer"" [label=""transfer""];
""1307_setAdministrator"" [label=""setAdministrator""];
""1307_myTokens"" [label=""myTokens""];
""1307_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1307_balanceOf"" [label=""balanceOf""];
""1307_buy"" [label=""buy""];
""1307_sqrt"" [label=""sqrt""];
""1307_totalSupply"" [label=""totalSupply""];
""1307_withdraw"" [label=""withdraw""];
""1307_exit"" [label=""exit""];
""1307_dividendsOf"" [label=""dividendsOf""];
""1307_buyPrice"" [label=""buyPrice""];
""1307_PODH"" [label=""PODH""];
""1307_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1307_reinvest"" [label=""reinvest""];
""1307_myDividends"" [label=""myDividends""];
""1307_setStakingRequirement"" [label=""setStakingRequirement""];
""1307_sell"" [label=""sell""];
""1307_fallback"" [label=""fallback""];
""1307_sellPrice"" [label=""sellPrice""];
""1307_setSymbol"" [label=""setSymbol""];
""1307_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1307_withdraw"" -> ""1307_onlyStronghands"";
""1307_transfer"" -> ""1307_onlyBagholders"";
""1307_sellPrice"" -> ""1307_tokensToEthereum_"";
""1307_setAdministrator"" -> ""1307_onlyAdministrator"";
""1307_calculateTokensReceived"" -> ""1307_ethereumToTokens_"";
""1307_calculateEthereumReceived"" -> ""1307_tokensToEthereum_"";
""1307_disableInitialStage"" -> ""1307_onlyAdministrator"";
""1307_purchaseTokens"" -> ""1307_antiEarlyWhale"";
""1307_myTokens"" -> ""1307_balanceOf"";
""1307_reinvest"" -> ""1307_onlyStronghands"";
""1307_transfer"" -> ""1307_withdraw"";
""1307_sell"" -> ""1307_onlyBagholders"";
""1307_buyPrice"" -> ""1307_tokensToEthereum_"";
""1307_myDividends"" -> ""1307_dividendsOf"";
""1307_transfer"" -> ""1307_myDividends"";
""1307_withdraw"" -> ""1307_myDividends"";
""1307_exit"" -> ""1307_withdraw"";
""1307_reinvest"" -> ""1307_myDividends"";
""1307_buy"" -> ""1307_purchaseTokens"";
""1307_exit"" -> ""1307_sell"";
""1307_setName"" -> ""1307_onlyAdministrator"";
""1307_reinvest"" -> ""1307_purchaseTokens"";
""1307_purchaseTokens"" -> ""1307_ethereumToTokens_"";
""1307_transfer"" -> ""1307_tokensToEthereum_"";
""1307_setSymbol"" -> ""1307_onlyAdministrator"";
""1307_fallback"" -> ""1307_purchaseTokens"";
""1307_ethereumToTokens_"" -> ""1307_sqrt"";
""1307_setStakingRequirement"" -> ""1307_onlyAdministrator"";
""1307_sell"" -> ""1307_tokensToEthereum_"";
}
"
0x64b103aee34d1fa22fb4c45c4be105cbe1c4a179.sol,RainbowsEverywhere,contract RainbowsEverywhere { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1312_RainbowsEverywhere {
label=""RainbowsEverywhere"";
""1312_setStakingRequirement"" [label=""setStakingRequirement""];
""1312_balanceOf"" [label=""balanceOf""];
""1312_setName"" [label=""setName""];
""1312_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1312_withdraw"" [label=""withdraw""];
""1312_sqrt"" [label=""sqrt""];
""1312_purchaseTokens"" [label=""purchaseTokens""];
""1312_exit"" [label=""exit""];
""1312_transfer"" [label=""transfer""];
""1312_myDividends"" [label=""myDividends""];
""1312_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1312_totalSupply"" [label=""totalSupply""];
""1312_buy"" [label=""buy""];
""1312_dividendsOf"" [label=""dividendsOf""];
""1312_buyPrice"" [label=""buyPrice""];
""1312_setAdministrator"" [label=""setAdministrator""];
""1312_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1312_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1312_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1312_RainbowsEverywhere"" [label=""RainbowsEverywhere""];
""1312_sellPrice"" [label=""sellPrice""];
""1312_myTokens"" [label=""myTokens""];
""1312_disableInitialStage"" [label=""disableInitialStage""];
""1312_fallback"" [label=""fallback""];
""1312_sell"" [label=""sell""];
""1312_reinvest"" [label=""reinvest""];
""1312_setSymbol"" [label=""setSymbol""];
""1312_sell"" -> ""1312_tokensToEthereum_"";
""1312_buyPrice"" -> ""1312_tokensToEthereum_"";
""1312_setName"" -> ""1312_onlyAdministrator"";
""1312_transfer"" -> ""1312_onlyBagholders"";
""1312_calculateTokensReceived"" -> ""1312_ethereumToTokens_"";
""1312_buy"" -> ""1312_purchaseTokens"";
""1312_disableInitialStage"" -> ""1312_onlyAdministrator"";
""1312_reinvest"" -> ""1312_purchaseTokens"";
""1312_fallback"" -> ""1312_purchaseTokens"";
""1312_sellPrice"" -> ""1312_tokensToEthereum_"";
""1312_purchaseTokens"" -> ""1312_ethereumToTokens_"";
""1312_exit"" -> ""1312_sell"";
""1312_transfer"" -> ""1312_tokensToEthereum_"";
""1312_ethereumToTokens_"" -> ""1312_sqrt"";
""1312_withdraw"" -> ""1312_onlyStronghands"";
""1312_reinvest"" -> ""1312_myDividends"";
""1312_reinvest"" -> ""1312_onlyStronghands"";
""1312_sell"" -> ""1312_onlyBagholders"";
""1312_transfer"" -> ""1312_withdraw"";
""1312_setSymbol"" -> ""1312_onlyAdministrator"";
""1312_setStakingRequirement"" -> ""1312_onlyAdministrator"";
""1312_myTokens"" -> ""1312_balanceOf"";
""1312_exit"" -> ""1312_withdraw"";
""1312_setAdministrator"" -> ""1312_onlyAdministrator"";
""1312_withdraw"" -> ""1312_myDividends"";
""1312_purchaseTokens"" -> ""1312_antiEarlyWhale"";
""1312_calculateEthereumReceived"" -> ""1312_tokensToEthereum_"";
""1312_transfer"" -> ""1312_myDividends"";
""1312_myDividends"" -> ""1312_dividendsOf"";
}
"
0x17c93f4bfe407b4f58b73c7839f3a588d499e67d.sol,BurnableToken,"contract BurnableToken is StandardToken { event Burn(address indexed burner, uint256 value); function burn(uint256 _value) public { require(_value <= balances[msg.sender]); address burner = msg.sender; balances[burner] = balances[burner].sub(_value); totalSupply_ = totalSupply_.sub(_value); Burn(burner, _value); Transfer(burner, address(0), _value); }",0,"subgraph cluster_561_BurnableToken {
label=""BurnableToken"";
""561_burn"" [label=""burn""];
}
"
0x693e3857aa48bb2902fd12f724dc095622e61afc.sol,DopeToken,"contract DopeToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function DopeToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 10000000000000000000000; balances[0xe2f54E82B8E413537B95e739C2e80d99dE40C67B] = _totalSupply; Transfer(address(0), 0xe2f54E82B8E413537B95e739C2e80d99dE40C67B, _totalSupply); }",0,"subgraph cluster_543_DopeToken {
label=""DopeToken"";
""543_transferFrom"" [label=""transferFrom""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_approve"" [label=""approve""];
""543_transfer"" [label=""transfer""];
""543_allowance"" [label=""allowance""];
""543_totalSupply"" [label=""totalSupply""];
""543_fallback"" [label=""fallback""];
""543_DopeToken"" [label=""DopeToken""];
""543_balanceOf"" [label=""balanceOf""];
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0x72a73495b769682d7b09a9641fa1a95e308fbe08.sol,P4,contract P4 is Whitelist { modifier onlyTokenHolders { require(myTokens() > 0); _; },0,"subgraph cluster_9_P4RTYRelay {
label=""P4RTYRelay"";
""9_relay"" [label=""relay""];
}
"
0xdcfae5ec906742f66e57e09ce098f5adb76ababa.sol,EthDeposit,contract EthDeposit is Owned { address public Manager; address public NewManager; uint public SponsorsQty; uint public CharterCapital; uint public ClientQty; uint public PrcntRate = 5; bool paymentsAllowed; struct Lender { uint LastLendTime; uint Amount; uint Reserved; },0,"subgraph cluster_488_EthDeposit {
label=""EthDeposit"";
""488_Deposit"" [label=""Deposit""];
""488_fallback"" [label=""fallback""];
""488_AuthorizePayments"" [label=""AuthorizePayments""];
""488_ToSponsor"" [label=""ToSponsor""];
""488_isManager"" [label=""isManager""];
""488_SetPrcntRate"" [label=""SetPrcntRate""];
""488_FixProfit"" [label=""FixProfit""];
""488_ConfirmManager"" [label=""ConfirmManager""];
""488_StopPaymens"" [label=""StopPaymens""];
""488_WitdrawLenderProfit"" [label=""WitdrawLenderProfit""];
""488_WithdrawToSponsor"" [label=""WithdrawToSponsor""];
""488_StartPaymens"" [label=""StartPaymens""];
""488_canManage"" [label=""canManage""];
""488_ChangeManager"" [label=""ChangeManager""];
""488_CheckProfit"" [label=""CheckProfit""];
""488_init"" [label=""init""];
""488_WithdrawToSponsor"" -> ""488_isOwner"";
""488_AuthorizePayments"" -> ""488_isOwner"";
""488_StartPaymens"" -> ""488_AuthorizePayments"";
""488_StopPaymens"" -> ""488_canManage"";
""488_fallback"" -> ""488_ToSponsor"";
""488_WitdrawLenderProfit"" -> ""488_FixProfit"";
""488_FixProfit"" -> ""488_CheckProfit"";
""488_ChangeManager"" -> ""488_canManage"";
""488_StartPaymens"" -> ""488_canManage"";
""488_StopPaymens"" -> ""488_AuthorizePayments"";
""488_SetPrcntRate"" -> ""488_canManage"";
""488_Deposit"" -> ""488_FixProfit"";
}
"
0xedac0e5bedf702accc3a9b2b4b44b4ba0806e882.sol,DSMath,"contract DSMath { function add(uint256 x, uint256 y) constant internal returns (uint256 z) { assert((z = x + y) >= x); }",0,"subgraph cluster_807_DSMath {
label=""DSMath"";
""807_cast"" [label=""cast""];
""807_wdiv"" [label=""wdiv""];
""807_hmin"" [label=""hmin""];
""807_wmax"" [label=""wmax""];
""807_hmax"" [label=""hmax""];
""807_rsub"" [label=""rsub""];
""807_hmul"" [label=""hmul""];
""807_div"" [label=""div""];
""807_wadd"" [label=""wadd""];
""807_rmax"" [label=""rmax""];
""807_hadd"" [label=""hadd""];
""807_rpow"" [label=""rpow""];
""807_min"" [label=""min""];
""807_imax"" [label=""imax""];
""807_add"" [label=""add""];
""807_wmin"" [label=""wmin""];
""807_mul"" [label=""mul""];
""807_hdiv"" [label=""hdiv""];
""807_rmin"" [label=""rmin""];
""807_hsub"" [label=""hsub""];
""807_max"" [label=""max""];
""807_wmul"" [label=""wmul""];
""807_radd"" [label=""radd""];
""807_wsub"" [label=""wsub""];
""807_rmul"" [label=""rmul""];
""807_imin"" [label=""imin""];
""807_rdiv"" [label=""rdiv""];
""807_sub"" [label=""sub""];
""807_wmul"" -> ""807_cast"";
""807_wmax"" -> ""807_hmax"";
""807_rpow"" -> ""807_rmul"";
""807_wadd"" -> ""807_hadd"";
""807_rsub"" -> ""807_hsub"";
""807_wsub"" -> ""807_hsub"";
""807_wdiv"" -> ""807_cast"";
""807_rmin"" -> ""807_hmin"";
""807_rmul"" -> ""807_cast"";
""807_hadd"" -> ""807_assert"";
""807_rmax"" -> ""807_hmax"";
""807_wmin"" -> ""807_hmin"";
""807_radd"" -> ""807_hadd"";
""807_rdiv"" -> ""807_cast"";
}
"
0x4e9b6e88e6b83453e3ec6a1ffa0c95f289cf81d5.sol,DailyRoi,contract DailyRoi { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_40_AcceptsDailyRoi {
label=""AcceptsDailyRoi"";
""40_AcceptsDailyRoi"" [label=""AcceptsDailyRoi""];
""40_tokenFallback"" [label=""tokenFallback""];
}
"
0xc14c848a2a5945e1a415976fc059550ecbe7b034.sol,Line,contract Line { address private owner; uint constant public jackpotNumerator = 50; uint constant public winNumerator = 5; uint constant public giftNumerator = 1; uint constant public denominator = 100; uint constant public ownerDenominator = 100; uint public jackpot = 0; address[] internal addresses; mapping(address => SpinRec) internal spinsByAddr; mapping(bytes32 => SpinRec) internal spinsByQuery; struct SpinRec { uint id; bytes32 queryId; uint bet; uint token; },0,"subgraph cluster_537_Line {
label=""Line"";
""537_getQueryId"" [label=""getQueryId""];
""537_reset"" [label=""reset""];
""537_fallback"" [label=""fallback""];
""537_constructor"" [label=""constructor""];
""537_random"" [label=""random""];
""537_getQueryIdBytes"" [label=""getQueryIdBytes""];
""537_recordSpin"" [label=""recordSpin""];
""537_revealResult"" [label=""revealResult""];
""537_getToken"" [label=""getToken""];
""537_getTokenForBytes"" [label=""getTokenForBytes""];
""537_getTokenFor"" [label=""getTokenFor""];
""537_waiver"" [label=""waiver""];
""537_fallback"" -> ""537_random"";
""537_fallback"" -> ""537_revealResult"";
""537_reset"" -> ""537_onlyOwner"";
""537_fallback"" -> ""537_recordSpin"";
}
"
0xa21c9a3ae47103b1fd1dfa04766c4d00c19e1ff6.sol,CryptoOscarsToken,"contract CryptoOscarsToken is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.001 ether; uint256 private constant PROMO_CREATION_LIMIT = 20000; mapping (uint256 => address) public movieIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public movieIndexToApproved; mapping (uint256 => uint256) private movieIndexToPrice; address public ceoAddress; address public cooAddress; uint256 public promoCreatedCount; struct Movie { string name; }",0,"subgraph cluster_930_CryptoOscarsToken {
label=""CryptoOscarsToken"";
""930_approve"" [label=""approve""];
""930_balanceOf"" [label=""balanceOf""];
""930_transfer"" [label=""transfer""];
""930_ownerOf"" [label=""ownerOf""];
""930_payout"" [label=""payout""];
""930_takeOwnership"" [label=""takeOwnership""];
""930_totalSupply"" [label=""totalSupply""];
""930__createMovie"" [label=""_createMovie""];
""930_setCOO"" [label=""setCOO""];
""930_CryptoMoviesToken"" [label=""CryptoMoviesToken""];
""930_setCEO"" [label=""setCEO""];
""930__payout"" [label=""_payout""];
""930_tokensOfOwner"" [label=""tokensOfOwner""];
""930__addressNotNull"" [label=""_addressNotNull""];
""930_priceOf"" [label=""priceOf""];
""930_createContractMovie"" [label=""createContractMovie""];
""930__transfer"" [label=""_transfer""];
""930_name"" [label=""name""];
""930_purchase"" [label=""purchase""];
""930__approved"" [label=""_approved""];
""930_createPromoMovie"" [label=""createPromoMovie""];
""930_symbol"" [label=""symbol""];
""930__owns"" [label=""_owns""];
""930_transferFrom"" [label=""transferFrom""];
""930_getMovie"" [label=""getMovie""];
""930_implementsERC721"" [label=""implementsERC721""];
""930_transferFrom"" -> ""930__addressNotNull"";
""930_takeOwnership"" -> ""930__approved"";
""930_transferFrom"" -> ""930__approved"";
""930_createContractMovie"" -> ""930_onlyCOO"";
""930_setCEO"" -> ""930_onlyCEO"";
""930_purchase"" -> ""930__transfer"";
""930_purchase"" -> ""930__addressNotNull"";
""930_payout"" -> ""930_onlyCLevel"";
""930__createMovie"" -> ""930__transfer"";
""930_payout"" -> ""930__payout"";
""930_createContractMovie"" -> ""930__createMovie"";
""930_createPromoMovie"" -> ""930_onlyCOO"";
""930_tokensOfOwner"" -> ""930_balanceOf"";
""930_createPromoMovie"" -> ""930__createMovie"";
""930_takeOwnership"" -> ""930__addressNotNull"";
""930_setCOO"" -> ""930_onlyCEO"";
""930_transferFrom"" -> ""930__transfer"";
""930_transferFrom"" -> ""930__owns"";
""930_tokensOfOwner"" -> ""930_totalSupply"";
""930_transfer"" -> ""930__owns"";
""930_takeOwnership"" -> ""930__transfer"";
""930_approve"" -> ""930__owns"";
""930_transfer"" -> ""930__addressNotNull"";
""930_transfer"" -> ""930__transfer"";
}
"
0x01e6a8af629cc06ff37755a61d9e7dd1135d8c6a.sol,Wrapped_Ether,"contract Wrapped_Ether { using SafeMath for uint256; string public name = ; uint public total_supply; mapping(address => uint) internal balances; mapping(address => mapping (address => uint)) internal allowed; event Transfer(address indexed _from, address indexed _to, uint _value); event Approval(address indexed _owner, address indexed _spender, uint _value); event StateChanged(bool _success, string _message); function createToken() public payable { require(msg.value > 0); balances[msg.sender] = balances[msg.sender].add(msg.value); total_supply = total_supply.add(msg.value); }",0,"subgraph cluster_2610_Wrapped_Ether {
label=""Wrapped_Ether"";
""2610_withdraw"" [label=""withdraw""];
""2610_transferFrom"" [label=""transferFrom""];
""2610_totalSupply"" [label=""totalSupply""];
""2610_createToken"" [label=""createToken""];
""2610_balanceOf"" [label=""balanceOf""];
""2610_transfer"" [label=""transfer""];
""2610_allowance"" [label=""allowance""];
""2610_approve"" [label=""approve""];
}
"
0x3670a029a6ce9be3bd62c76853e747e65ddf6431.sol,NTA3D,"contract NTA3D is NTA3DEvents { using SafeMath for *; using NameFilter for string; using NTA3DKeysCalc for uint256; string constant public name = ; string constant public symbol = ; bool activated_; address admin; uint256 constant private rndStarts = 12 hours; uint256 constant private rndPerKey = 15 seconds; uint256 constant private rndMax = 12 hours; uint256 constant private cardValidity = 1 hours; uint256 constant private cardPrice = 0.05 ether; uint256 constant private DIVIDE = 1000; uint256 constant private smallDropTrigger = 100 ether; uint256 constant private bigDropTrigger = 300000 * 1e18; uint256 constant private keyPriceTrigger = 50000 * 1e18; uint256 constant private keyPriceFirst = 0.0005 ether; uint256 constant private oneOffInvest1 = 0.1 ether; uint256 constant private oneOffInvest2 = 1 ether; uint256 public rID; uint256 public pID; mapping (address => uint256) public pIDxAddr; mapping (bytes32 => uint256) public pIDxName; mapping (uint256 => NTAdatasets.Player) public pIDPlayer; mapping (uint256 => mapping (uint256 => NTAdatasets.PlayerRound)) public pIDPlayerRound; mapping (uint256 => NTAdatasets.Card) cIDCard; address cardSeller; address[11] partner; address to06; address to04; address to20A; address to20B; mapping (address => uint256) private gameFunds; mapping (uint256 => NTAdatasets.Round) public rIDRound; mapping (uint256 => NTAdatasets.Deposit) public deposit; mapping (uint256 => NTAdatasets.PotSplit) public potSplit; constructor() public { activated_ = false; admin = msg.sender; deposit[0] = NTAdatasets.Deposit(460, 170, 50, 50, 100, 100, 20, 50); deposit[1] = NTAdatasets.Deposit(200, 430, 50, 50, 100, 100, 20, 50); potSplit[0] = NTAdatasets.PotSplit(200, 450, 50, 30, 20, 80, 50, 20, 100); potSplit[1] = NTAdatasets.PotSplit(200, 450, 50, 30, 20, 80, 50, 20, 100); to06 = 0x9B53CC857cD9DD5EbE6bc07Bde67D8CE4076345f; to04 = 0x5835a72118c0C784203B8d39936A0875497B6eCa; to20A = 0xEc2441D3113fC2376cd127344331c0F1b959Ce1C; to20B = 0xd1Dac908c97c0a885e9B413a84ACcC0010C002d2; cardSeller = 0xeE4f032bdB0f9B51D6c7035d3DEFfc217D91225C; }",0,"subgraph cluster_5169_NTA3DKeysCalc {
label=""NTA3DKeysCalc"";
""5169_ethRec"" [label=""ethRec""];
""5169_keys"" [label=""keys""];
""5169_keysRec"" [label=""keysRec""];
""5169_eth"" [label=""eth""];
""5169_keysRec"" -> ""5169_keys"";
""5169_keys"" -> ""5169_eth"";
""5169_ethRec"" -> ""5169_eth"";
}
"
0x28863b9534af2a4c3d912e9a3b76b0b7b4fe2046.sol,ViberateBuyer,"contract ViberateBuyer { mapping (address => uint256) public balances; uint256 public buy_bounty; uint256 public withdraw_bounty; bool public bought_tokens; uint256 public contract_eth_value; bool public kill_switch; bytes32 password_hash = 0xfac0a99293c75e2f2ed76d4eb06030f4f3458f419a67ca0feac3dbe9791275b4; uint256 public earliest_buy_time = 1504612800; uint256 public eth_cap = 10000 ether; address public developer = 0x0639C169D9265Ca4B4DEce693764CdA8ea5F3882; address public sale; ERC20 public token; function set_addresses(address _sale, address _token) { require(msg.sender == developer); require(sale == 0x0); sale = _sale; token = ERC20(_token); }",0,"subgraph cluster_473_ViberateBuyer {
label=""ViberateBuyer"";
""473_set_addresses"" [label=""set_addresses""];
""473_fallback"" [label=""fallback""];
""473_add_to_buy_bounty"" [label=""add_to_buy_bounty""];
""473_withdraw"" [label=""withdraw""];
""473_claim_bounty"" [label=""claim_bounty""];
""473_personal_withdraw"" [label=""personal_withdraw""];
""473_activate_kill_switch"" [label=""activate_kill_switch""];
""473_add_to_withdraw_bounty"" [label=""add_to_withdraw_bounty""];
}
"
0x3686986e559f257cfaccb44f17af5b245e45814f.sol,ZEROtoken,contract ZEROtoken { address owner = msg.sender; bool public purchasingAllowed = false; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; uint256 public totalContribution = 0; uint256 public totalSupply = 0; function name() constant returns (string) { return ; },0,"subgraph cluster_524_ZEROtoken {
label=""ZEROtoken"";
""524_balanceOf"" [label=""balanceOf""];
""524_transferFrom"" [label=""transferFrom""];
""524_fallback"" [label=""fallback""];
""524_transfer"" [label=""transfer""];
""524_getStats"" [label=""getStats""];
""524_approve"" [label=""approve""];
""524_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""524_decimals"" [label=""decimals""];
""524_disablePurchasing"" [label=""disablePurchasing""];
""524_enablePurchasing"" [label=""enablePurchasing""];
""524_allowance"" [label=""allowance""];
""524_kill"" [label=""kill""];
""524_name"" [label=""name""];
""524_symbol"" [label=""symbol""];
}
"
0x0242514106114deaa99fd81574142c36edb03b6d.sol,App,"contract App is ZOSLibOwnable { event ProxyCreated(address proxy); event PackageChanged(string providerName, address package, uint64[3] version); struct ProviderInfo { Package package; uint64[3] version; }",0,"subgraph cluster_1015_App {
label=""App"";
""1015_constructor"" [label=""constructor""];
""1015_setPackage"" [label=""setPackage""];
""1015_getProvider"" [label=""getProvider""];
""1015_unsetPackage"" [label=""unsetPackage""];
""1015_create"" [label=""create""];
""1015_getImplementation"" [label=""getImplementation""];
""1015_getPackage"" [label=""getPackage""];
""1015_unsetPackage"" -> ""1015_onlyOwner"";
""1015_getImplementation"" -> ""1015_getProvider"";
""1015_create"" -> ""1015_getImplementation"";
""1015_setPackage"" -> ""1015_onlyOwner"";
}
"
0xc4529ea3f838a7e27a673a87bfe844a5b8b1e4e2.sol,InterestTest,contract InterestTest is Base { address public creator; address public OwnerO; address public Owner1; uint256 public etherLimit = 2 ether; mapping (address => uint256) public balances; mapping (address => uint256) public interestPaid; function initOwner(address owner) { OwnerO = owner; },0,"subgraph cluster_340_InterestTest {
label=""InterestTest"";
""340_deposit"" [label=""deposit""];
""340_fallback"" [label=""fallback""];
""340_calculateInterest"" [label=""calculateInterest""];
""340_currentBalance"" [label=""currentBalance""];
""340_initOwner1"" [label=""initOwner1""];
""340_initOwner"" [label=""initOwner""];
""340_payout"" [label=""payout""];
""340_InterestTest"" [label=""InterestTest""];
""340_payInterest"" [label=""payInterest""];
""340_InterestTest"" -> ""340_initOwner1"";
""340_payInterest"" -> ""340_calculateInterest"";
""340_payInterest"" -> ""340_payout"";
""340_InterestTest"" -> ""340_initOwner"";
}
"
0xcfbc9103362aec4ce3089f155c2da2eea1cb7602.sol,ERC721BasicToken,contract ERC721BasicToken is ERC721Basic { using SafeMath for uint256; using AddressUtils for address; bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba; mapping (uint256 => address) internal tokenOwner; mapping (uint256 => address) internal tokenApprovals; mapping (address => uint256) internal ownedTokensCount; mapping (address => mapping (address => bool)) internal operatorApprovals; modifier onlyOwnerOf(uint256 _tokenId) { require(ownerOf(_tokenId) == msg.sender); _; },0,"subgraph cluster_967_ERC721BasicToken {
label=""ERC721BasicToken"";
""967_ownerOf"" [label=""ownerOf""];
""967_addTokenTo"" [label=""addTokenTo""];
""967_balanceOf"" [label=""balanceOf""];
""967_safeTransferFrom"" [label=""safeTransferFrom""];
""967_approve"" [label=""approve""];
""967_isApprovedForAll"" [label=""isApprovedForAll""];
""967_clearApproval"" [label=""clearApproval""];
""967_transferFrom"" [label=""transferFrom""];
""967_getApproved"" [label=""getApproved""];
""967__burn"" [label=""_burn""];
""967_checkAndCallSafeTransfer"" [label=""checkAndCallSafeTransfer""];
""967_setApprovalForAll"" [label=""setApprovalForAll""];
""967_isApprovedOrOwner"" [label=""isApprovedOrOwner""];
""967_removeTokenFrom"" [label=""removeTokenFrom""];
""967__mint"" [label=""_mint""];
""967_exists"" [label=""exists""];
""967_safeTransferFrom"" -> ""967_canTransfer"";
""967__burn"" -> ""967_removeTokenFrom"";
""967_safeTransferFrom"" -> ""967_checkAndCallSafeTransfer"";
""967_safeTransferFrom"" -> ""967_safeTransferFrom"";
""967_clearApproval"" -> ""967_ownerOf"";
""967__burn"" -> ""967_clearApproval"";
""967_approve"" -> ""967_ownerOf"";
""967_safeTransferFrom"" -> ""967_transferFrom"";
""967_isApprovedOrOwner"" -> ""967_isApprovedForAll"";
""967_removeTokenFrom"" -> ""967_ownerOf"";
""967_approve"" -> ""967_getApproved"";
""967_transferFrom"" -> ""967_removeTokenFrom"";
""967_isApprovedOrOwner"" -> ""967_getApproved"";
""967_isApprovedOrOwner"" -> ""967_ownerOf"";
""967_transferFrom"" -> ""967_addTokenTo"";
""967__mint"" -> ""967_addTokenTo"";
""967_transferFrom"" -> ""967_clearApproval"";
""967_transferFrom"" -> ""967_canTransfer"";
""967_approve"" -> ""967_isApprovedForAll"";
}
"
0xed26cf773ac74d213668ccfda7de0831a6a5bb96.sol,eIDR,"contract eIDR { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor ( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_380_eIDR {
label=""eIDR"";
""380__transfer"" [label=""_transfer""];
""380_burnFrom"" [label=""burnFrom""];
""380_approveAndCall"" [label=""approveAndCall""];
""380_approve"" [label=""approve""];
""380_transferFrom"" [label=""transferFrom""];
""380_transfer"" [label=""transfer""];
""380_burn"" [label=""burn""];
""380_constructor"" [label=""constructor""];
""380_transfer"" -> ""380__transfer"";
""380_approveAndCall"" -> ""380_approve"";
""380_transferFrom"" -> ""380__transfer"";
}
"
0xed846c2962df064b6fecc7029bc5cd366699cc7f.sol,usingOraclize,contract usingOraclize { uint constant day = 60*60*24; uint constant week = 60*60*24*7; uint constant month = 60*60*24*30; byte constant proofType_NONE = 0x00; byte constant proofType_TLSNotary = 0x10; byte constant proofType_Android = 0x20; byte constant proofType_Ledger = 0x30; byte constant proofType_Native = 0xF0; byte constant proofStorage_IPFS = 0x01; uint8 constant networkID_auto = 0; uint8 constant networkID_mainnet = 1; uint8 constant networkID_testnet = 2; uint8 constant networkID_morden = 2; uint8 constant networkID_consensys = 161; OraclizeAddrResolverI OAR; OraclizeI oraclize; modifier oraclizeAPI { if((address(OAR)==0)||(getCodeSize(address(OAR))==0)) oraclize_setNetwork(networkID_auto); if(address(oraclize) != OAR.getAddress()) oraclize = OraclizeI(OAR.getAddress()); _; },0,"subgraph cluster_5992_usingOraclize {
label=""usingOraclize"";
""5992_oraclize_randomDS_setCommitment"" [label=""oraclize_randomDS_setCommitment""];
""5992_parseAddr"" [label=""parseAddr""];
""5992_matchBytes32Prefix"" [label=""matchBytes32Prefix""];
""5992_strConcat"" [label=""strConcat""];
""5992_oraclize_setCustomGasPrice"" [label=""oraclize_setCustomGasPrice""];
""5992_oraclize_newRandomDSQuery"" [label=""oraclize_newRandomDSQuery""];
""5992_safer_ecrecover"" [label=""safer_ecrecover""];
""5992_oraclize_getNetworkName"" [label=""oraclize_getNetworkName""];
""5992_oraclize_setNetwork"" [label=""oraclize_setNetwork""];
""5992_ecrecovery"" [label=""ecrecovery""];
""5992_oraclize_setNetworkName"" [label=""oraclize_setNetworkName""];
""5992_indexOf"" [label=""indexOf""];
""5992_oraclize_setProof"" [label=""oraclize_setProof""];
""5992_stra2cbor"" [label=""stra2cbor""];
""5992___callback"" [label=""__callback""];
""5992_oraclize_randomDS_proofVerify__sessionKeyValidity"" [label=""oraclize_randomDS_proofVerify__sessionKeyValidity""];
""5992_oraclize_randomDS_proofVerify__returnCode"" [label=""oraclize_randomDS_proofVerify__returnCode""];
""5992_oraclize_randomDS_proofVerify__main"" [label=""oraclize_randomDS_proofVerify__main""];
""5992_oraclize_query"" [label=""oraclize_query""];
""5992_uint2str"" [label=""uint2str""];
""5992_strCompare"" [label=""strCompare""];
""5992_copyBytes"" [label=""copyBytes""];
""5992_parseInt"" [label=""parseInt""];
""5992_oraclize_cbAddress"" [label=""oraclize_cbAddress""];
""5992_verifySig"" [label=""verifySig""];
""5992_oraclize_randomDS_getSessionPubKeyHash"" [label=""oraclize_randomDS_getSessionPubKeyHash""];
""5992_ba2cbor"" [label=""ba2cbor""];
""5992_getCodeSize"" [label=""getCodeSize""];
""5992_oraclize_getPrice"" [label=""oraclize_getPrice""];
""5992_oraclize_randomDS_proofVerify__returnCode"" -> ""5992_oraclize_randomDS_proofVerify__main"";
""5992_oraclize_query"" -> ""5992_oraclize_query"";
""5992_oraclize_randomDS_proofVerify__main"" -> ""5992_copyBytes"";
""5992_verifySig"" -> ""5992_safer_ecrecover"";
""5992_oraclize_setCustomGasPrice"" -> ""5992_oraclizeAPI"";
""5992_oraclize_randomDS_proofVerify__returnCode"" -> ""5992_oraclize_getNetworkName"";
""5992_oraclize_setProof"" -> ""5992_oraclizeAPI"";
""5992___callback"" -> ""5992___callback"";
""5992_oraclize_setNetwork"" -> ""5992_getCodeSize"";
""5992_oraclize_cbAddress"" -> ""5992_oraclizeAPI"";
""5992_oraclize_query"" -> ""5992_oraclizeAPI"";
""5992_ecrecovery"" -> ""5992_safer_ecrecover"";
""5992_oraclize_randomDS_proofVerify__sessionKeyValidity"" -> ""5992_verifySig"";
""5992_oraclize_getPrice"" -> ""5992_oraclizeAPI"";
""5992_oraclize_setNetwork"" -> ""5992_oraclize_setNetworkName"";
""5992_oraclize_query"" -> ""5992_ba2cbor"";
""5992_oraclize_randomDS_proofVerify__sessionKeyValidity"" -> ""5992_copyBytes"";
""5992_oraclize_newRandomDSQuery"" -> ""5992_copyBytes"";
""5992_verifySig"" -> ""5992_copyBytes"";
""5992_oraclize_randomDS_proofVerify__main"" -> ""5992_verifySig"";
""5992_oraclize_query"" -> ""5992_stra2cbor"";
""5992_oraclize_newRandomDSQuery"" -> ""5992_oraclize_randomDS_setCommitment"";
""5992_oraclize_newRandomDSQuery"" -> ""5992_oraclize_query"";
""5992_oraclize_randomDS_proofVerify__main"" -> ""5992_oraclize_randomDS_proofVerify__sessionKeyValidity"";
""5992_oraclize_randomDS_getSessionPubKeyHash"" -> ""5992_oraclizeAPI"";
""5992_oraclize_randomDS_proofVerify__main"" -> ""5992_matchBytes32Prefix"";
""5992_oraclize_setNetwork"" -> ""5992_oraclize_setNetwork"";
""5992_parseInt"" -> ""5992_parseInt"";
""5992_strConcat"" -> ""5992_strConcat"";
""5992_oraclize_newRandomDSQuery"" -> ""5992_oraclize_randomDS_getSessionPubKeyHash"";
}
"
0x7932f0fd456084c829336452d6001f3c7dbf5639.sol,AirDrop,"contract AirDrop is onlyOwner{ Token token; address _creator = 0x073db5ac9aa943253a513cd692d16160f1c10e74; event TransferredToken(address indexed to, uint256 value); constructor() public{ address _tokenAddr = 0x99092a458b405fb8c06c5a3aa01cffd826019568; token = Token(_tokenAddr); }",0,"subgraph cluster_228_AirDrop {
label=""AirDrop"";
""228_userXRTBalance"" [label=""userXRTBalance""];
""228_sendResidualAmount"" [label=""sendResidualAmount""];
""228_fallback"" [label=""fallback""];
""228_withdraw"" [label=""withdraw""];
""228_sendAmount"" [label=""sendAmount""];
""228_constructor"" [label=""constructor""];
""228_sendInternally"" [label=""sendInternally""];
""228_sendInternally"" -> ""228_userXRTBalance"";
""228_withdraw"" -> ""228_isRunning"";
""228_sendAmount"" -> ""228_isOwner"";
""228_sendResidualAmount"" -> ""228_isOwner"";
""228_withdraw"" -> ""228_sendInternally"";
""228_fallback"" -> ""228_withdraw"";
}
"
0x0000009a317684a5f840484357fa587aca76454c.sol,Claimable,contract Claimable is Ownable { address public pendingOwner; modifier onlyPendingOwner() { require(msg.sender == pendingOwner); _; },0,"subgraph cluster_364_Claimable {
label=""Claimable"";
""364_claimOwnership"" [label=""claimOwnership""];
""364_transferOwnership"" [label=""transferOwnership""];
""364_claimOwnership"" -> ""364_onlyPendingOwner"";
""364_transferOwnership"" -> ""364_onlyOwner"";
}
"
0xda830afa460526071d3d149e898fead664f0a4bb.sol,TokenCampaign,contract TokenCampaign is Controlled { using SafeMath for uint256; eat_token_interface public token; uint8 public constant decimals = 18; uint256 public constant scale = (uint256(10) ** decimals); uint256 public constant hardcap = 100000000 * scale; uint256 public constant PRCT100_D_TEAM = 63; uint256 public constant PRCT100_R_TEAM = 250; uint256 public constant PRCT100_R2 = 150; uint256 public constant FIXEDREWARD_MM = 100000 * scale; uint256 public constant PRCT100_ETH_OP = 4000; uint256 public constant preCrowdMinContribution = (20 ether); uint256 public constant minContribution = (1 ether) / 100; uint256 public constant preCrowd_tokens_scaled = 7142857142857140000000; uint256 public constant stage_1_tokens_scaled = 6250000000000000000000; uint256 public constant stage_2_tokens_scaled = 5555555555555560000000; uint256 public constant stage_3_tokens_scaled = 5000000000000000000000; uint256 public constant PreCrowdAllocation = 20000000 * scale ; uint256 public constant Stage1Allocation = 15000000 * scale ; uint256 public constant Stage2Allocation = 15000000 * scale ; uint256 public constant Stage3Allocation = 20000000 * scale ; uint256 public tokensRemainingPreCrowd = PreCrowdAllocation; uint256 public tokensRemainingStage1 = Stage1Allocation; uint256 public tokensRemainingStage2 = Stage2Allocation; uint256 public tokensRemainingStage3 = Stage3Allocation; uint256 public maxPreCrowdAllocationPerInvestor = 20000000 * scale ; uint256 public maxStage1AllocationPerInvestor = 15000000 * scale ; uint256 public maxStage2AllocationPerInvestor = 15000000 * scale ; uint256 public maxStage3AllocationPerInvestor = 20000000 * scale ; uint256 public tokensGenerated = 0; address[] public joinedCrowdsale; uint256 public amountRaised = 0; uint256 public amountRefunded = 0; address public dteamVaultAddr1; address public dteamVaultAddr2; address public dteamVaultAddr3; address public dteamVaultAddr4; address public rteamVaultAddr; address public r2VaultAddr; address public mmVaultAddr; address public reserveVaultAddr; address public trusteeVaultAddr; address public opVaultAddr; address public tokenAddr; uint8 public campaignState = 3; bool public paused = false; uint256 public tCampaignStart = 64060588800; uint256 public t_1st_StageEnd = 5 * (1 days); uint256 public t_2nd_StageEnd = 2 * (1 days); uint256 public tCampaignEnd = 35 * (1 days); uint256 public tFinalized = 64060588800; struct ParticipantListData { bool participatedFlag; uint256 contributedAmountPreAllocated; uint256 contributedAmountPreCrowd; uint256 contributedAmountStage1; uint256 contributedAmountStage2; uint256 contributedAmountStage3; uint256 preallocatedTokens; uint256 allocatedTokens; uint256 spentAmount; },0,"subgraph cluster_3689_TokenCampaign {
label=""TokenCampaign"";
""3689_setMaxStage1AllocationPerInvestor"" [label=""setMaxStage1AllocationPerInvestor""];
""3689_proxy_contribution"" [label=""proxy_contribution""];
""3689_do_grant_tokens"" [label=""do_grant_tokens""];
""3689_pauseSale"" [label=""pauseSale""];
""3689_resumeSale"" [label=""resumeSale""];
""3689_setopVaultAddr"" [label=""setopVaultAddr""];
""3689_process_contribution"" [label=""process_contribution""];
""3689_refund"" [label=""refund""];
""3689_setMultipleParticipantWhitelist"" [label=""setMultipleParticipantWhitelist""];
""3689_setMaxStage2AllocationPerInvestor"" [label=""setMaxStage2AllocationPerInvestor""];
""3689_toggleWhitelist"" [label=""toggleWhitelist""];
""3689_setrteamVaultAddr"" [label=""setrteamVaultAddr""];
""3689_setmmVaultAddr"" [label=""setmmVaultAddr""];
""3689_setMaxPreCrowdAllocationPerInvestor"" [label=""setMaxPreCrowdAllocationPerInvestor""];
""3689_claimTokens"" [label=""claimTokens""];
""3689_airdrop"" [label=""airdrop""];
""3689_setParticipantWhitelist"" [label=""setParticipantWhitelist""];
""3689_emergencyFinalize"" [label=""emergencyFinalize""];
""3689_setdteamVaultAddr1"" [label=""setdteamVaultAddr1""];
""3689_contractBalance"" [label=""contractBalance""];
""3689_setr2VaultAddr"" [label=""setr2VaultAddr""];
""3689_setInvestorsBatchSize"" [label=""setInvestorsBatchSize""];
""3689_TokenCampaign"" [label=""TokenCampaign""];
""3689_setdteamVaultAddr4"" [label=""setdteamVaultAddr4""];
""3689_preallocate"" [label=""preallocate""];
""3689_settrusteeVaultAddr"" [label=""settrusteeVaultAddr""];
""3689_setMaxStage3AllocationPerInvestor"" [label=""setMaxStage3AllocationPerInvestor""];
""3689_fallback"" [label=""fallback""];
""3689_finalizeCampaign"" [label=""finalizeCampaign""];
""3689_allocateInvestors"" [label=""allocateInvestors""];
""3689_investorCount"" [label=""investorCount""];
""3689_retrieveFunds"" [label=""retrieveFunds""];
""3689_setdteamVaultAddr3"" [label=""setdteamVaultAddr3""];
""3689_multiAirdrop"" [label=""multiAirdrop""];
""3689_startSale"" [label=""startSale""];
""3689_closeSale"" [label=""closeSale""];
""3689_setdteamVaultAddr2"" [label=""setdteamVaultAddr2""];
""3689_setmmVaultAddr"" -> ""3689_onlyController"";
""3689_finalizeCampaign"" -> ""3689_do_grant_tokens"";
""3689_finalizeCampaign"" -> ""3689_onlyController"";
""3689_startSale"" -> ""3689_onlyController"";
""3689_setMaxStage3AllocationPerInvestor"" -> ""3689_onlyController"";
""3689_setrteamVaultAddr"" -> ""3689_onlyController"";
""3689_preallocate"" -> ""3689_onlyController"";
""3689_settrusteeVaultAddr"" -> ""3689_onlyController"";
""3689_toggleWhitelist"" -> ""3689_onlyController"";
""3689_airdrop"" -> ""3689_onlyController"";
""3689_setMaxStage2AllocationPerInvestor"" -> ""3689_onlyController"";
""3689_setMultipleParticipantWhitelist"" -> ""3689_setParticipantWhitelist"";
""3689_pauseSale"" -> ""3689_onlyController"";
""3689_setInvestorsBatchSize"" -> ""3689_onlyController"";
""3689_setdteamVaultAddr2"" -> ""3689_onlyController"";
""3689_closeSale"" -> ""3689_onlyController"";
""3689_setMaxStage1AllocationPerInvestor"" -> ""3689_onlyController"";
""3689_resumeSale"" -> ""3689_onlyController"";
""3689_emergencyFinalize"" -> ""3689_onlyController"";
""3689_setdteamVaultAddr4"" -> ""3689_onlyController"";
""3689_proxy_contribution"" -> ""3689_process_contribution"";
""3689_setopVaultAddr"" -> ""3689_onlyController"";
""3689_multiAirdrop"" -> ""3689_airdrop"";
""3689_setr2VaultAddr"" -> ""3689_onlyController"";
""3689_allocateInvestors"" -> ""3689_do_grant_tokens"";
""3689_setdteamVaultAddr3"" -> ""3689_onlyController"";
""3689_setMultipleParticipantWhitelist"" -> ""3689_onlyController"";
""3689_preallocate"" -> ""3689_do_grant_tokens"";
""3689_fallback"" -> ""3689_process_contribution"";
""3689_airdrop"" -> ""3689_do_grant_tokens"";
""3689_setParticipantWhitelist"" -> ""3689_onlyController"";
""3689_setMaxPreCrowdAllocationPerInvestor"" -> ""3689_onlyController"";
""3689_claimTokens"" -> ""3689_onlyController"";
""3689_setdteamVaultAddr1"" -> ""3689_onlyController"";
""3689_multiAirdrop"" -> ""3689_onlyController"";
""3689_allocateInvestors"" -> ""3689_onlyController"";
""3689_retrieveFunds"" -> ""3689_onlyController"";
}
"
0xf22c54b53c8a4c5e986663de601a2b7702964393.sol,LUCACTTT,"contract LUCACTTT is SafeMath{ string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; address public owner; mapping (address => uint256) public balanceOf; mapping (address => uint256) public freezeOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event Freeze(address indexed from, uint256 value); event Unfreeze(address indexed from, uint256 value); constructor(uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol) public { balanceOf[msg.sender] = initialSupply; totalSupply = initialSupply; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; owner = msg.sender; }",0,"subgraph cluster_626_LUCACTTT {
label=""LUCACTTT"";
""626_transferFrom"" [label=""transferFrom""];
""626_freeze"" [label=""freeze""];
""626_constructor"" [label=""constructor""];
""626_withdrawEther"" [label=""withdrawEther""];
""626_unfreeze"" [label=""unfreeze""];
""626_burn"" [label=""burn""];
""626_approve"" [label=""approve""];
""626_fallback"" [label=""fallback""];
""626_transfer"" [label=""transfer""];
""626_transfer"" -> ""626_safeSub"";
""626_transfer"" -> ""626_safeAdd"";
""626_freeze"" -> ""626_safeAdd"";
""626_transferFrom"" -> ""626_safeAdd"";
""626_unfreeze"" -> ""626_safeSub"";
""626_unfreeze"" -> ""626_safeAdd"";
""626_burn"" -> ""626_safeSub"";
""626_transferFrom"" -> ""626_safeSub"";
""626_freeze"" -> ""626_safeSub"";
}
"
0x18cabd1e7db6c52406719cb72859ea2c2eea75d6.sol,GoGuides,"contract GoGuides { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function GoGuides( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_361_GoGuides {
label=""GoGuides"";
""361_transferFrom"" [label=""transferFrom""];
""361_burnFrom"" [label=""burnFrom""];
""361_GoGuides"" [label=""GoGuides""];
""361_burn"" [label=""burn""];
""361__transfer"" [label=""_transfer""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_transfer"" [label=""transfer""];
""361_approve"" [label=""approve""];
""361_transferFrom"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
}
"
0xecff8fc2a19f83fc855618704f38725756dbcae3.sol,OK3D,"contract OK3D is modularShort { using SafeMath for *; using NameFilter for string; using F3DKeysCalcShort for uint256; PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0x5015A6E288FF4AC0c62bf1DA237c24c3Fb849188); address private admin = msg.sender; string constant public name = ; string constant public symbol = ; uint256 private rndExtra_ = 0; uint256 private rndGap_ = 2 minutes; uint256 constant private rndInit_ = 12 hours; uint256 constant private rndInc_ = 30 seconds; uint256 constant private rndMax_ = 24 hours; uint256 public airDropPot_; uint256 public airDropTracker_ = 0; uint256 public rID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => F3Ddatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => F3Ddatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => F3Ddatasets.Round) public round_; mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping (uint256 => F3Ddatasets.TeamFee) public fees_; mapping (uint256 => F3Ddatasets.PotSplit) public potSplit_; constructor() public { fees_[0] = F3Ddatasets.TeamFee(28,10); fees_[1] = F3Ddatasets.TeamFee(36,10); fees_[2] = F3Ddatasets.TeamFee(51,10); fees_[3] = F3Ddatasets.TeamFee(40,10); potSplit_[0] = F3Ddatasets.PotSplit(25,10); potSplit_[1] = F3Ddatasets.PotSplit(25,0); potSplit_[2] = F3Ddatasets.PotSplit(20,20); potSplit_[3] = F3Ddatasets.PotSplit(20,20); activated_ = true; rID_ = 1; round_[1].strt = now + rndExtra_ - rndGap_; round_[1].end = now + rndInit_ + rndExtra_; }",0,"subgraph cluster_4376_OK3D {
label=""OK3D"";
""4376_iWantXKeys"" [label=""iWantXKeys""];
""4376_withdrawEarnings"" [label=""withdrawEarnings""];
""4376_updateMasks"" [label=""updateMasks""];
""4376_core"" [label=""core""];
""4376_fallback"" [label=""fallback""];
""4376_potSwap"" [label=""potSwap""];
""4376_endTx"" [label=""endTx""];
""4376_registerNameXname"" [label=""registerNameXname""];
""4376_getTimeLeft"" [label=""getTimeLeft""];
""4376_endRound"" [label=""endRound""];
""4376_buyXname"" [label=""buyXname""];
""4376_registerNameXaddr"" [label=""registerNameXaddr""];
""4376_withdraw"" [label=""withdraw""];
""4376_airdrop"" [label=""airdrop""];
""4376_calcKeysReceived"" [label=""calcKeysReceived""];
""4376_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""4376_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""4376_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""4376_buyXaddr"" [label=""buyXaddr""];
""4376_distributeInvest"" [label=""distributeInvest""];
""4376_receivePlayerInfo"" [label=""receivePlayerInfo""];
""4376_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""4376_reLoadXid"" [label=""reLoadXid""];
""4376_getBuyPrice"" [label=""getBuyPrice""];
""4376_determinePID"" [label=""determinePID""];
""4376_verifyTeam"" [label=""verifyTeam""];
""4376_distributeExternal"" [label=""distributeExternal""];
""4376_updateGenVault"" [label=""updateGenVault""];
""4376_reLoadXname"" [label=""reLoadXname""];
""4376_getPlayerVaults"" [label=""getPlayerVaults""];
""4376_reLoadCore"" [label=""reLoadCore""];
""4376_receivePlayerNameList"" [label=""receivePlayerNameList""];
""4376_activate"" [label=""activate""];
""4376_constructor"" [label=""constructor""];
""4376_registerNameXID"" [label=""registerNameXID""];
""4376_reLoadXaddr"" [label=""reLoadXaddr""];
""4376_managePlayer"" [label=""managePlayer""];
""4376_updateTimer"" [label=""updateTimer""];
""4376_buyXid"" [label=""buyXid""];
""4376_distributeInternal"" [label=""distributeInternal""];
""4376_buyCore"" [label=""buyCore""];
""4376_getPlayerInfoByAddress"" -> ""4376_calcUnMaskedEarnings"";
""4376_buyCore"" -> ""4376_endRound"";
""4376_buyXid"" -> ""4376_determinePID"";
""4376_reLoadXaddr"" -> ""4376_reLoadCore"";
""4376_getPlayerVaults"" -> ""4376_calcUnMaskedEarnings"";
""4376_withdraw"" -> ""4376_withdrawEarnings"";
""4376_withdraw"" -> ""4376_isHuman"";
""4376_buyCore"" -> ""4376_core"";
""4376_fallback"" -> ""4376_isActivated"";
""4376_buyXname"" -> ""4376_determinePID"";
""4376_registerNameXID"" -> ""4376_isHuman"";
""4376_registerNameXname"" -> ""4376_isHuman"";
""4376_distributeInternal"" -> ""4376_updateMasks"";
""4376_reLoadXname"" -> ""4376_verifyTeam"";
""4376_fallback"" -> ""4376_isHuman"";
""4376_withdraw"" -> ""4376_isActivated"";
""4376_buyXaddr"" -> ""4376_isActivated"";
""4376_reLoadXname"" -> ""4376_isActivated"";
""4376_buyXid"" -> ""4376_isWithinLimits"";
""4376_buyXid"" -> ""4376_buyCore"";
""4376_buyXaddr"" -> ""4376_buyCore"";
""4376_buyXaddr"" -> ""4376_verifyTeam"";
""4376_fallback"" -> ""4376_isWithinLimits"";
""4376_reLoadXid"" -> ""4376_reLoadCore"";
""4376_reLoadCore"" -> ""4376_endRound"";
""4376_buyXname"" -> ""4376_verifyTeam"";
""4376_buyXname"" -> ""4376_buyCore"";
""4376_registerNameXaddr"" -> ""4376_isHuman"";
""4376_reLoadXid"" -> ""4376_isWithinLimits"";
""4376_core"" -> ""4376_airdrop"";
""4376_withdrawEarnings"" -> ""4376_updateGenVault"";
""4376_buyXname"" -> ""4376_isActivated"";
""4376_reLoadCore"" -> ""4376_withdrawEarnings"";
""4376_withdraw"" -> ""4376_endRound"";
""4376_reLoadXaddr"" -> ""4376_isActivated"";
""4376_buyXname"" -> ""4376_isHuman"";
""4376_buyXaddr"" -> ""4376_determinePID"";
""4376_buyXaddr"" -> ""4376_isWithinLimits"";
""4376_buyXaddr"" -> ""4376_isHuman"";
""4376_managePlayer"" -> ""4376_updateGenVault"";
""4376_reLoadXname"" -> ""4376_isWithinLimits"";
""4376_reLoadXname"" -> ""4376_isHuman"";
""4376_reLoadXid"" -> ""4376_isHuman"";
""4376_core"" -> ""4376_distributeInternal"";
""4376_fallback"" -> ""4376_determinePID"";
""4376_updateGenVault"" -> ""4376_calcUnMaskedEarnings"";
""4376_buyXid"" -> ""4376_isHuman"";
""4376_fallback"" -> ""4376_buyCore"";
""4376_reLoadXaddr"" -> ""4376_isHuman"";
""4376_reLoadXid"" -> ""4376_verifyTeam"";
""4376_buyXid"" -> ""4376_isActivated"";
""4376_reLoadCore"" -> ""4376_core"";
""4376_core"" -> ""4376_managePlayer"";
""4376_reLoadXname"" -> ""4376_reLoadCore"";
""4376_core"" -> ""4376_distributeExternal"";
""4376_reLoadXaddr"" -> ""4376_verifyTeam"";
""4376_reLoadXaddr"" -> ""4376_isWithinLimits"";
""4376_buyXid"" -> ""4376_verifyTeam"";
""4376_core"" -> ""4376_endTx"";
""4376_buyXname"" -> ""4376_isWithinLimits"";
""4376_distributeExternal"" -> ""4376_distributeInvest"";
""4376_getPlayerVaults"" -> ""4376_getPlayerVaultsHelper"";
""4376_reLoadXid"" -> ""4376_isActivated"";
""4376_core"" -> ""4376_updateTimer"";
}
"
0xc01e504a13be6dfaf3c3624cd847895047d087d6.sol,XMB,"contract XMB is ERC20,Ownable{ using SafeMath for uint256; string public constant name=; string public constant symbol=; string public constant version = ; uint256 public constant decimals = 18; mapping(address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; uint256 public constant MAX_SUPPLY=1000000000*10**decimals; uint256 public constant INIT_SUPPLY=300000000*10**decimals; uint256 public stepOneRate; uint256 public stepTwoRate; uint256 public stepOneStartTime; uint256 public stepOneEndTime; uint256 public stepTwoStartTime; uint256 public stepTwoEndTime; uint256 public stepOneLockEndTime; uint256 public stepTwoLockEndTime; uint256 public airdropSupply; struct epoch { uint256 endTime; uint256 amount; }",0,"subgraph cluster_948_XMB {
label=""XMB"";
""948_XMB"" [label=""XMB""];
""948_etherProceeds"" [label=""etherProceeds""];
""948_setStepOneTime"" [label=""setStepOneTime""];
""948_transfer"" [label=""transfer""];
""948_allowance"" [label=""allowance""];
""948_balanceOf"" [label=""balanceOf""];
""948_setStepTwoLockEndTime"" [label=""setStepTwoLockEndTime""];
""948_fallback"" [label=""fallback""];
""948_lockBalance"" [label=""lockBalance""];
""948_setStepTwoTime"" [label=""setStepTwoTime""];
""948_setStepOneLockEndTime"" [label=""setStepOneLockEndTime""];
""948_approve"" [label=""approve""];
""948_setStepOneRate"" [label=""setStepOneRate""];
""948_transferFrom"" [label=""transferFrom""];
""948_setStepTwoRate"" [label=""setStepTwoRate""];
""948_processFunding"" [label=""processFunding""];
""948_airdrop"" [label=""airdrop""];
""948_setStepOneTime"" -> ""948_onlyOwner"";
""948_fallback"" -> ""948_processFunding"";
""948_airdrop"" -> ""948_transfer"";
""948_setStepTwoRate"" -> ""948_onlyOwner"";
""948_processFunding"" -> ""948_totalSupplyNotReached"";
""948_setStepTwoTime"" -> ""948_onlyOwner"";
""948_etherProceeds"" -> ""948_onlyOwner"";
""948_setStepOneLockEndTime"" -> ""948_onlyOwner"";
""948_fallback"" -> ""948_lockBalance"";
""948_airdrop"" -> ""948_balanceOf"";
""948_setStepOneRate"" -> ""948_onlyOwner"";
""948_setStepTwoLockEndTime"" -> ""948_onlyOwner"";
""948_airdrop"" -> ""948_onlyOwner"";
}
"
0x70491ade38d2cd8a869b19343dd5a06133c2a201.sol,GoatClash,contract GoatClash { ERC20 private _token; function token() public view returns(ERC20) { return _token; },0,"subgraph cluster_2200_GoatClash {
label=""GoatClash"";
""2200_setMaxProfit"" [label=""setMaxProfit""];
""2200_placeBet"" [label=""placeBet""];
""2200_settleBet"" [label=""settleBet""];
""2200_setToken"" [label=""setToken""];
""2200_settleBetUncleMerkleProof"" [label=""settleBetUncleMerkleProof""];
""2200_constructor"" [label=""constructor""];
""2200_acceptNextOwner"" [label=""acceptNextOwner""];
""2200_increaseJackpot"" [label=""increaseJackpot""];
""2200_verifyMerkleProof"" [label=""verifyMerkleProof""];
""2200_withdrawFunds"" [label=""withdrawFunds""];
""2200_setCroupier"" [label=""setCroupier""];
""2200_memcpy"" [label=""memcpy""];
""2200_approveNextOwner"" [label=""approveNextOwner""];
""2200_getDiceWinAmount"" [label=""getDiceWinAmount""];
""2200_requireCorrectReceipt"" [label=""requireCorrectReceipt""];
""2200_cancelBet"" [label=""cancelBet""];
""2200_deductFunds"" [label=""deductFunds""];
""2200_settleBetCommon"" [label=""settleBetCommon""];
""2200_token"" [label=""token""];
""2200_kill"" [label=""kill""];
""2200_sendFunds"" [label=""sendFunds""];
""2200_setSecretSigner"" [label=""setSecretSigner""];
""2200_fallback"" [label=""fallback""];
""2200_settleBet"" -> ""2200_onlyCroupier"";
""2200_settleBetCommon"" -> ""2200_deductFunds"";
""2200_approveNextOwner"" -> ""2200_onlyOwner"";
""2200_setSecretSigner"" -> ""2200_onlyOwner"";
""2200_verifyMerkleProof"" -> ""2200_memcpy"";
""2200_settleBetUncleMerkleProof"" -> ""2200_settleBetCommon"";
""2200_increaseJackpot"" -> ""2200_onlyOwner"";
""2200_setCroupier"" -> ""2200_onlyOwner"";
""2200_withdrawFunds"" -> ""2200_sendFunds"";
""2200_placeBet"" -> ""2200_getDiceWinAmount"";
""2200_settleBetUncleMerkleProof"" -> ""2200_requireCorrectReceipt"";
""2200_settleBetCommon"" -> ""2200_getDiceWinAmount"";
""2200_kill"" -> ""2200_sendFunds"";
""2200_withdrawFunds"" -> ""2200_onlyOwner"";
""2200_settleBet"" -> ""2200_settleBetCommon"";
""2200_settleBetCommon"" -> ""2200_sendFunds"";
""2200_cancelBet"" -> ""2200_onlyCroupier"";
""2200_setToken"" -> ""2200_onlyOwner"";
""2200_settleBetUncleMerkleProof"" -> ""2200_verifyMerkleProof"";
""2200_kill"" -> ""2200_onlyOwner"";
""2200_cancelBet"" -> ""2200_getDiceWinAmount"";
""2200_setMaxProfit"" -> ""2200_onlyOwner"";
""2200_settleBetUncleMerkleProof"" -> ""2200_onlyCroupier"";
}
"
0x36e666eaac18ed22b8e370547c75e6782b63d5da.sol,Token,"contract Token { using SafeMath for uint256; address public owner; string public name = ; string public symbol = ; uint256 public decimals = 18; uint256 totalSupply_ = 20e8 * (10**18); bool public paused = false; mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) internal allowed; mapping(address => uint256) internal locked; event Burn(address indexed burner, uint256 value); event Approval(address indexed owner, address indexed spender,uint256 value); event Transfer(address indexed from, address indexed to, uint256 value); event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); event Pause(); event Unpause(); event Lock(address indexed LockedAddress, uint256 LockAmount); event Unlock(address indexed LockedAddress); constructor() public { owner = msg.sender; balances[owner] = totalSupply_ ; }",0,"subgraph cluster_1059_Token {
label=""Token"";
""1059_transferOwnership"" [label=""transferOwnership""];
""1059_allowance"" [label=""allowance""];
""1059_balanceOf"" [label=""balanceOf""];
""1059_transferFrom"" [label=""transferFrom""];
""1059_totalSupply"" [label=""totalSupply""];
""1059_approve"" [label=""approve""];
""1059_unlock"" [label=""unlock""];
""1059_increaseApproval"" [label=""increaseApproval""];
""1059_checkLock"" [label=""checkLock""];
""1059_burn"" [label=""burn""];
""1059_burnFrom"" [label=""burnFrom""];
""1059_pause"" [label=""pause""];
""1059_lock"" [label=""lock""];
""1059__transferOwnership"" [label=""_transferOwnership""];
""1059_constructor"" [label=""constructor""];
""1059_multiLock"" [label=""multiLock""];
""1059_burnOf"" [label=""burnOf""];
""1059_multiTransfer"" [label=""multiTransfer""];
""1059_destroyAndSend"" [label=""destroyAndSend""];
""1059_transfer"" [label=""transfer""];
""1059_unpause"" [label=""unpause""];
""1059_multiUnlock"" [label=""multiUnlock""];
""1059_decreaseApproval"" [label=""decreaseApproval""];
""1059__burn"" [label=""_burn""];
""1059_approve"" -> ""1059_whenNotPaused"";
""1059_unpause"" -> ""1059_onlyOwner"";
""1059_multiUnlock"" -> ""1059_onlyOwner"";
""1059_multiLock"" -> ""1059_lock"";
""1059_multiLock"" -> ""1059_onlyOwner"";
""1059_transferFrom"" -> ""1059_whenNotPaused"";
""1059_burnOf"" -> ""1059__burn"";
""1059_pause"" -> ""1059_onlyOwner"";
""1059_pause"" -> ""1059_whenNotPaused"";
""1059_lock"" -> ""1059_onlyOwner"";
""1059_transferOwnership"" -> ""1059__transferOwnership"";
""1059_burn"" -> ""1059__burn"";
""1059_unpause"" -> ""1059_whenPaused"";
""1059_multiTransfer"" -> ""1059_whenNotPaused"";
""1059_transferOwnership"" -> ""1059_onlyOwner"";
""1059_increaseApproval"" -> ""1059_whenNotPaused"";
""1059_burnFrom"" -> ""1059__burn"";
""1059_burnOf"" -> ""1059_onlyOwner"";
""1059_destroyAndSend"" -> ""1059_onlyOwner"";
""1059_multiUnlock"" -> ""1059_unlock"";
""1059_decreaseApproval"" -> ""1059_whenNotPaused"";
""1059_transfer"" -> ""1059_whenNotPaused"";
""1059_unlock"" -> ""1059_onlyOwner"";
""1059_checkLock"" -> ""1059_onlyOwner"";
}
"
0x01c627181089b6e10ee8316ec08516b3df7c4845.sol,BrickCrowdsale,contract BrickCrowdsale is Ownable { using SafeMath for uint256; uint256 public startTime; uint256 public endTime; uint256 public weiRaised; uint256 public limitDateSale; bool public isSoftCapHit = false; bool public isStarted = false; bool public isFinalized = false; uint256 icoPvtRate = 40; uint256 icoPreRate = 50; uint256 ico1Rate = 65; uint256 ico2Rate = 75; uint256 ico3Rate = 90; uint256 public pvtTokens = (40000) * (10**18); uint256 public preSaleTokens = (6000000) * (10**18); uint256 public ico1Tokens = (8000000) * (10**18); uint256 public ico2Tokens = (8000000) * (10**18); uint256 public ico3Tokens = (8000000) * (10**18); uint256 public totalTokens = (40000000)* (10**18); address public advisoryEthWallet = 0x0D7629d32546CD493bc33ADEF115D4489f5599Be; address public infraEthWallet = 0x536D36a05F6592aa29BB0beE30cda706B1272521; address public techDevelopmentEthWallet = 0x4d0B70d8E612b5dca3597C64643a8d1efd5965e1; address public operationsEthWallet = 0xbc67B82924eEc8643A4f2ceDa59B5acfd888A967; address public wallet = 0x44d44CA0f75bdd3AE8806D02515E8268459c554A; struct ContributorData { uint256 contributionAmountViewOnly; uint256 tokensIssuedViewOnly; uint256 contributionAmount; uint256 tokensIssued; },0,"subgraph cluster_2591_BrickCrowdsale {
label=""BrickCrowdsale"";
""2591_hasEnded"" [label=""hasEnded""];
""2591_starting"" [label=""starting""];
""2591_releaseAllTokens"" [label=""releaseAllTokens""];
""2591_isWithinSaleTimeLimit"" [label=""isWithinSaleTimeLimit""];
""2591_setRate"" [label=""setRate""];
""2591_setHardCap"" [label=""setHardCap""];
""2591_setPvtTokens"" [label=""setPvtTokens""];
""2591_isWithinTokenAllocLimit"" [label=""isWithinTokenAllocLimit""];
""2591_constructor"" [label=""constructor""];
""2591_currentTokenSupply"" [label=""currentTokenSupply""];
""2591_release"" [label=""release""];
""2591_endIcoSaleRound3"" [label=""endIcoSaleRound3""];
""2591_endIcoSaleRound2"" [label=""endIcoSaleRound2""];
""2591_getCurrentRateInCents"" [label=""getCurrentRateInCents""];
""2591_releaseTokens"" [label=""releaseTokens""];
""2591_setKycAddress"" [label=""setKycAddress""];
""2591_finalize"" [label=""finalize""];
""2591_endIcoSaleRound1"" [label=""endIcoSaleRound1""];
""2591_setSaleDuration"" [label=""setSaleDuration""];
""2591_investorCount"" [label=""investorCount""];
""2591_refundMoney"" [label=""refundMoney""];
""2591_setKYCRequiredToSendTokens"" [label=""setKYCRequiredToSendTokens""];
""2591_forwardAllRaisedFunds"" [label=""forwardAllRaisedFunds""];
""2591_tokenSendFailuresCount"" [label=""tokenSendFailuresCount""];
""2591_setSaleBonus"" [label=""setSaleBonus""];
""2591_updateRateInWei"" [label=""updateRateInWei""];
""2591_setIco2Tokens"" [label=""setIco2Tokens""];
""2591_transferTokenOwnership"" [label=""transferTokenOwnership""];
""2591_hasStarted"" [label=""hasStarted""];
""2591_setSoftCap"" [label=""setSoftCap""];
""2591_refundAllMoney"" [label=""refundAllMoney""];
""2591_setIco1Tokens"" [label=""setIco1Tokens""];
""2591_buyTokens"" [label=""buyTokens""];
""2591_endPvtSale"" [label=""endPvtSale""];
""2591_didSoftCapReached"" [label=""didSoftCapReached""];
""2591_setPreSaleTokens"" [label=""setPreSaleTokens""];
""2591_transferKycOwnerShip"" [label=""transferKycOwnerShip""];
""2591_finalization"" [label=""finalization""];
""2591_start"" [label=""start""];
""2591_endPreSale"" [label=""endPreSale""];
""2591_setKYCRequiredToReceiveFunds"" [label=""setKYCRequiredToReceiveFunds""];
""2591_setIco3Tokens"" [label=""setIco3Tokens""];
""2591_buyPhaseTokens"" [label=""buyPhaseTokens""];
""2591_validPurchase"" [label=""validPurchase""];
""2591_isWithinSaleLimit"" [label=""isWithinSaleLimit""];
""2591_setTokenAddress"" [label=""setTokenAddress""];
""2591_setTokensForCrowdSale"" [label=""setTokensForCrowdSale""];
""2591_computeTokens"" [label=""computeTokens""];
""2591_splitTokens"" [label=""splitTokens""];
""2591_fallback"" [label=""fallback""];
""2591_init"" [label=""init""];
""2591_init"" -> ""2591_setRate"";
""2591_finalization"" -> ""2591_splitTokens"";
""2591_setHardCap"" -> ""2591_onlyOwner"";
""2591_setIco3Tokens"" -> ""2591_onlyOwner"";
""2591_refundAllMoney"" -> ""2591_refundMoney"";
""2591_setPvtTokens"" -> ""2591_onlyOwner"";
""2591_releaseAllTokens"" -> ""2591_releaseTokens"";
""2591_releaseTokens"" -> ""2591_onlyOwner"";
""2591_setRate"" -> ""2591_getCurrentRateInCents"";
""2591_setSaleDuration"" -> ""2591_onlyOwner"";
""2591_setTokensForCrowdSale"" -> ""2591_onlyOwner"";
""2591_finalization"" -> ""2591_forwardAllRaisedFunds"";
""2591_isWithinTokenAllocLimit"" -> ""2591_isWithinSaleTimeLimit"";
""2591_setSoftCap"" -> ""2591_onlyOwner"";
""2591_releaseAllTokens"" -> ""2591_onlyOwner"";
""2591_buyPhaseTokens"" -> ""2591_buyTokens"";
""2591_transferKycOwnerShip"" -> ""2591_onlyOwner"";
""2591_setKYCRequiredToReceiveFunds"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_setSoftCap"";
""2591_start"" -> ""2591_hasStarted"";
""2591_setPreSaleTokens"" -> ""2591_onlyOwner"";
""2591_isWithinTokenAllocLimit"" -> ""2591_isWithinSaleLimit"";
""2591_endIcoSaleRound1"" -> ""2591_onlyOwner"";
""2591_endIcoSaleRound1"" -> ""2591_updateRateInWei"";
""2591_validPurchase"" -> ""2591_isWithinSaleTimeLimit"";
""2591_start"" -> ""2591_starting"";
""2591_init"" -> ""2591_setSaleDuration"";
""2591_endPreSale"" -> ""2591_onlyOwner"";
""2591_finalize"" -> ""2591_onlyOwner"";
""2591_refundMoney"" -> ""2591_onlyOwner"";
""2591_fallback"" -> ""2591_buyPhaseTokens"";
""2591_setIco1Tokens"" -> ""2591_onlyOwner"";
""2591_endIcoSaleRound3"" -> ""2591_updateRateInWei"";
""2591_setKycAddress"" -> ""2591_onlyOwner"";
""2591_transferTokenOwnership"" -> ""2591_onlyOwner"";
""2591_setKYCRequiredToSendTokens"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_setSaleBonus"";
""2591_endIcoSaleRound2"" -> ""2591_onlyOwner"";
""2591_setIco2Tokens"" -> ""2591_onlyOwner"";
""2591_setRate"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_setTokenAddress"";
""2591_refundAllMoney"" -> ""2591_onlyOwner"";
""2591_setTokenAddress"" -> ""2591_onlyOwner"";
""2591_buyPhaseTokens"" -> ""2591_validPurchase"";
""2591_init"" -> ""2591_setHardCap"";
""2591_finalize"" -> ""2591_finalization"";
""2591_releaseTokens"" -> ""2591_release"";
""2591_init"" -> ""2591_onlyOwner"";
""2591_buyPhaseTokens"" -> ""2591_isWithinTokenAllocLimit"";
""2591_buyPhaseTokens"" -> ""2591_computeTokens"";
""2591_updateRateInWei"" -> ""2591_getCurrentRateInCents"";
""2591_setSaleBonus"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_setTokensForCrowdSale"";
""2591_init"" -> ""2591_setKycAddress"";
""2591_endIcoSaleRound2"" -> ""2591_updateRateInWei"";
""2591_endPvtSale"" -> ""2591_onlyOwner"";
""2591_start"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_start"";
""2591_endIcoSaleRound3"" -> ""2591_onlyOwner"";
""2591_endPreSale"" -> ""2591_updateRateInWei"";
""2591_endPvtSale"" -> ""2591_updateRateInWei"";
}
"
0xd13a124b14f7e451cc546cace61d569c8f66a90f.sol,SPCtoken,"contract SPCtoken { string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 0; event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens); event Transfer(address indexed from, address indexed to, uint256 tokens); mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) allowed; uint256 totalSupply_; using SafeMath for uint256; constructor(uint256 total) public { totalSupply_ = total; balances[msg.sender] = totalSupply_; }",0,"subgraph cluster_253_SPCtoken {
label=""SPCtoken"";
""253_balanceOf"" [label=""balanceOf""];
""253_allowance"" [label=""allowance""];
""253_transferFrom"" [label=""transferFrom""];
""253_constructor"" [label=""constructor""];
""253_approve"" [label=""approve""];
""253_transfer"" [label=""transfer""];
""253_totalSupply"" [label=""totalSupply""];
}
"
0x24a7de87b3bd7298bbf8966fdf170c558d69ecc4.sol,METADOLLAR,"contract METADOLLAR is ERC20Interface, Owned, SafeMath { string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 public _totalSupply = 1000000000000000000000000000000; uint256 public icoMin = 1000000000000000; uint256 public icoLimit = 1000000000000000000000000000000; uint256 public countHolders = 0; uint256 public amountOfInvestments = 0; uint256 public icoPrice; uint256 public dolRate = 1000; uint256 public ethRate = 1; uint256 public sellRate = 900; uint256 public commissionRate = 1000; uint256 public sellPrice; uint256 public currentTokenPrice; uint256 public commission; bool public icoIsRunning; bool public minimalGoalReached; bool public icoIsClosed; mapping (address => uint256) public tokenBalanceOf; mapping(address => mapping (address => uint256)) allowed; mapping(address => bool) frozenAccount; event FrozenFunds(address initiator, address account, string status); event BonusChanged(uint8 bonusOld, uint8 bonusNew); event minGoalReached(uint256 minIcoAmount, string notice); event preIcoEnded(uint256 preIcoAmount, string notice); event priceUpdated(uint256 oldPrice, uint256 newPrice, string notice); event withdrawed(address _to, uint256 summe, string notice); event deposited(address _from, uint256 summe, string notice); event orderToTransfer(address initiator, address _from, address _to, uint256 summe, string notice); event tokenCreated(address _creator, uint256 summe, string notice); event tokenDestroyed(address _destroyer, uint256 summe, string notice); event icoStatusUpdated(address _initiator, string status); function STARTMETADOLLAR() { icoIsRunning = true; minimalGoalReached = false; icoIsClosed = false; tokenBalanceOf[this] += _totalSupply; allowed[this][owner] = _totalSupply; allowed[this][supervisor] = _totalSupply; currentTokenPrice = 1 * 1; icoPrice = ethRate * dolRate; sellPrice = sellRate * ethRate; updatePrices(); }",0,"subgraph cluster_1740_METADOLLAR {
label=""METADOLLAR"";
""1740_fallback"" [label=""fallback""];
""1740_transfer"" [label=""transfer""];
""1740_approve"" [label=""approve""];
""1740_buyToken"" [label=""buyToken""];
""1740_balanceOf"" [label=""balanceOf""];
""1740__transfer"" [label=""_transfer""];
""1740_withdraw"" [label=""withdraw""];
""1740_setSellRate"" [label=""setSellRate""];
""1740_collect"" [label=""collect""];
""1740_checkFrozenAccounts"" [label=""checkFrozenAccounts""];
""1740_STARTMETADOLLAR"" [label=""STARTMETADOLLAR""];
""1740_checkIcoStatus"" [label=""checkIcoStatus""];
""1740_totalSupply"" [label=""totalSupply""];
""1740_sell"" [label=""sell""];
""1740_transferOwnership"" [label=""transferOwnership""];
""1740_mintToken"" [label=""mintToken""];
""1740_setEthRate"" [label=""setEthRate""];
""1740_setDolRate"" [label=""setDolRate""];
""1740_allowance"" [label=""allowance""];
""1740_deposit"" [label=""deposit""];
""1740_transferFrom"" [label=""transferFrom""];
""1740_destroyToken"" [label=""destroyToken""];
""1740_setCommissionRate"" [label=""setCommissionRate""];
""1740_sell2"" [label=""sell2""];
""1740_updatePrices"" [label=""updatePrices""];
""1740_checkMinimalGoal"" [label=""checkMinimalGoal""];
""1740_buy"" [label=""buy""];
""1740_freezeAccount"" [label=""freezeAccount""];
""1740_calculateTheEndPrice"" [label=""calculateTheEndPrice""];
""1740_stopThisIco"" [label=""stopThisIco""];
""1740_setICOPrice"" [label=""setICOPrice""];
""1740_buy"" -> ""1740_buyToken"";
""1740_setDolRate"" -> ""1740_isOwner"";
""1740_fallback"" -> ""1740_buyToken"";
""1740_buyToken"" -> ""1740_updatePrices"";
""1740_collect"" -> ""1740_withdraw"";
""1740_STARTMETADOLLAR"" -> ""1740_updatePrices"";
""1740_sell"" -> ""1740__transfer"";
""1740_transferOwnership"" -> ""1740_isOwner"";
""1740_transfer"" -> ""1740__transfer"";
""1740_setEthRate"" -> ""1740_isOwner"";
""1740_mintToken"" -> ""1740_isOwner"";
""1740_deposit"" -> ""1740_isOwner"";
""1740_setICOPrice"" -> ""1740_isOwner"";
""1740_buyToken"" -> ""1740__transfer"";
""1740_stopThisIco"" -> ""1740_isOwner"";
""1740_freezeAccount"" -> ""1740_isOwner"";
""1740_withdraw"" -> ""1740_isOwner"";
""1740_setCommissionRate"" -> ""1740_isOwner"";
""1740_collect"" -> ""1740_isOwner"";
""1740_transferFrom"" -> ""1740__transfer"";
""1740_setICOPrice"" -> ""1740_updatePrices"";
""1740_setSellRate"" -> ""1740_isOwner"";
""1740_updatePrices"" -> ""1740_checkIcoStatus"";
""1740_destroyToken"" -> ""1740_isOwner"";
}
"
0x30ed9d2a07f4a79557c8e75ad4d95071a18af0bc.sol,CryptoSagaHero,"contract CryptoSagaHero is ERC721Token, Claimable, Pausable, AccessMint, AccessDeploy, AccessDeposit { string public constant name = ; string public constant symbol = ; struct HeroClass { string className; uint8 classRank; uint8 classRace; uint32 classAge; uint8 classType; uint32 maxLevel; uint8 aura; uint32[5] baseStats; uint32[5] minIVForStats; uint32[5] maxIVForStats; uint32 currentNumberOfInstancedHeroes; }",0,"subgraph cluster_2787_CryptoSagaHero {
label=""CryptoSagaHero"";
""2787_mint"" [label=""mint""];
""2787_getHeroClassId"" [label=""getHeroClassId""];
""2787_setRequiredExpIncreaseFactor"" [label=""setRequiredExpIncreaseFactor""];
""2787_setGoldContract"" [label=""setGoldContract""];
""2787_defineType"" [label=""defineType""];
""2787_levelUp"" [label=""levelUp""];
""2787_getGoldDepositOfAddress"" [label=""getGoldDepositOfAddress""];
""2787_CryptoSagaHero"" [label=""CryptoSagaHero""];
""2787_getTokenIdOfAddressAndIndex"" [label=""getTokenIdOfAddressAndIndex""];
""2787_transferDeposit"" [label=""transferDeposit""];
""2787_deploy"" [label=""deploy""];
""2787_getHeroAvailableAt"" [label=""getHeroAvailableAt""];
""2787_random"" [label=""random""];
""2787_getHeroRequiredGoldForLevelUp"" [label=""getHeroRequiredGoldForLevelUp""];
""2787_setHeroName"" [label=""setHeroName""];
""2787_withdrawDeposit"" [label=""withdrawDeposit""];
""2787_getHeroLocation"" [label=""getHeroLocation""];
""2787_getClassName"" [label=""getClassName""];
""2787_getClassMintCount"" [label=""getClassMintCount""];
""2787_getHeroBP"" [label=""getHeroBP""];
""2787_getTotalBPOfAddress"" [label=""getTotalBPOfAddress""];
""2787_numberOfHeroClasses"" [label=""numberOfHeroClasses""];
""2787_getClassRank"" [label=""getClassRank""];
""2787_getHeroName"" [label=""getHeroName""];
""2787_addExp"" [label=""addExp""];
""2787_getHeroInfo"" [label=""getHeroInfo""];
""2787_getHeroLevel"" [label=""getHeroLevel""];
""2787_addDeposit"" [label=""addDeposit""];
""2787_getClassInfo"" [label=""getClassInfo""];
""2787_setRequiredGoldIncreaseFactor"" [label=""setRequiredGoldIncreaseFactor""];
""2787_getHeroRequiredExpForLevelUp"" [label=""getHeroRequiredExpForLevelUp""];
""2787_CryptoSagaHero"" -> ""2787_defineType"";
""2787_addExp"" -> ""2787_ownerOf"";
""2787_setGoldContract"" -> ""2787_onlyOwner"";
""2787_addDeposit"" -> ""2787_onlyAccessDeposit"";
""2787_mint"" -> ""2787__mint"";
""2787_levelUp"" -> ""2787_whenNotPaused"";
""2787_getTotalBPOfAddress"" -> ""2787_getHeroBP"";
""2787_mint"" -> ""2787_onlyAccessMint"";
""2787_deploy"" -> ""2787_onlyAccessDeploy"";
""2787_levelUp"" -> ""2787_ownerOf"";
""2787_defineType"" -> ""2787_onlyOwner"";
""2787_deploy"" -> ""2787_ownerOf"";
""2787_setRequiredGoldIncreaseFactor"" -> ""2787_onlyOwner"";
""2787_levelUp"" -> ""2787_getHeroRequiredExpForLevelUp"";
""2787_mint"" -> ""2787_random"";
""2787_getTokenIdOfAddressAndIndex"" -> ""2787_tokensOf"";
""2787_transferDeposit"" -> ""2787_whenNotPaused"";
""2787_getTotalBPOfAddress"" -> ""2787_tokensOf"";
""2787_setHeroName"" -> ""2787_onlyOwnerOf"";
""2787_levelUp"" -> ""2787_getHeroRequiredGoldForLevelUp"";
""2787_setRequiredExpIncreaseFactor"" -> ""2787_onlyOwner"";
""2787_levelUp"" -> ""2787_onlyOwnerOf"";
""2787_CryptoSagaHero"" -> ""2787_setGoldContract"";
""2787_addExp"" -> ""2787_onlyAccessDeploy"";
}
"
0xc541e02e7d66cb5cbd7d33d1874dcc3f028ad75c.sol,Hourglass,contract Hourglass { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1329_Hourglass {
label=""Hourglass"";
""1329_myTokens"" [label=""myTokens""];
""1329_dividendsOf"" [label=""dividendsOf""];
""1329_setSymbol"" [label=""setSymbol""];
""1329_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1329_withdraw"" [label=""withdraw""];
""1329_setAdministrator"" [label=""setAdministrator""];
""1329_sell"" [label=""sell""];
""1329_disableInitialStage"" [label=""disableInitialStage""];
""1329_reinvest"" [label=""reinvest""];
""1329_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1329_purchaseTokens"" [label=""purchaseTokens""];
""1329_buy"" [label=""buy""];
""1329_Hourglass"" [label=""Hourglass""];
""1329_myDividends"" [label=""myDividends""];
""1329_totalSupply"" [label=""totalSupply""];
""1329_setName"" [label=""setName""];
""1329_setStakingRequirement"" [label=""setStakingRequirement""];
""1329_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1329_sqrt"" [label=""sqrt""];
""1329_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1329_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1329_buyPrice"" [label=""buyPrice""];
""1329_transfer"" [label=""transfer""];
""1329_balanceOf"" [label=""balanceOf""];
""1329_exit"" [label=""exit""];
""1329_fallback"" [label=""fallback""];
""1329_sellPrice"" [label=""sellPrice""];
""1329_transfer"" -> ""1329_tokensToEthereum_"";
""1329_purchaseTokens"" -> ""1329_antiEarlyWhale"";
""1329_sell"" -> ""1329_onlyBagholders"";
""1329_transfer"" -> ""1329_onlyBagholders"";
""1329_calculateEthereumReceived"" -> ""1329_tokensToEthereum_"";
""1329_myTokens"" -> ""1329_balanceOf"";
""1329_setName"" -> ""1329_onlyAdministrator"";
""1329_withdraw"" -> ""1329_onlyStronghands"";
""1329_setSymbol"" -> ""1329_onlyAdministrator"";
""1329_calculateTokensReceived"" -> ""1329_ethereumToTokens_"";
""1329_buy"" -> ""1329_purchaseTokens"";
""1329_withdraw"" -> ""1329_myDividends"";
""1329_reinvest"" -> ""1329_myDividends"";
""1329_fallback"" -> ""1329_purchaseTokens"";
""1329_sell"" -> ""1329_tokensToEthereum_"";
""1329_sellPrice"" -> ""1329_tokensToEthereum_"";
""1329_transfer"" -> ""1329_myDividends"";
""1329_purchaseTokens"" -> ""1329_ethereumToTokens_"";
""1329_exit"" -> ""1329_withdraw"";
""1329_reinvest"" -> ""1329_onlyStronghands"";
""1329_setStakingRequirement"" -> ""1329_onlyAdministrator"";
""1329_ethereumToTokens_"" -> ""1329_sqrt"";
""1329_myDividends"" -> ""1329_dividendsOf"";
""1329_reinvest"" -> ""1329_purchaseTokens"";
""1329_exit"" -> ""1329_sell"";
""1329_buyPrice"" -> ""1329_tokensToEthereum_"";
""1329_setAdministrator"" -> ""1329_onlyAdministrator"";
""1329_transfer"" -> ""1329_withdraw"";
""1329_disableInitialStage"" -> ""1329_onlyAdministrator"";
}
"
0xd48c70991441d66a86c26580cd6b629f63f58516.sol,SVGCrowdsale,"contract SVGCrowdsale { using SafeMath for uint256; ERC20 public token; address public wallet; uint256 public weiRaised; uint256 public currentRound; uint startTime = now; uint256 public completedAt; event TokenPurchase( address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount ); event LogFundingSuccessful( uint _totalRaised ); constructor(address _wallet, ERC20 _token) public { require(_wallet != address(0)); require(_token != address(0)); wallet = _wallet; token = _token; }",0,"subgraph cluster_657_SVGCrowdsale {
label=""SVGCrowdsale"";
""657_fallback"" [label=""fallback""];
""657_forwardFunds"" [label=""forwardFunds""];
""657_updatePurchasingState"" [label=""updatePurchasingState""];
""657_checkIfFundingCompleteOrExpired"" [label=""checkIfFundingCompleteOrExpired""];
""657_buyTokens"" [label=""buyTokens""];
""657__preValidatePurchase"" [label=""_preValidatePurchase""];
""657_processPurchase"" [label=""processPurchase""];
""657_getTokenAmount"" [label=""getTokenAmount""];
""657__deliverTokens"" [label=""_deliverTokens""];
""657_constructor"" [label=""constructor""];
""657_postValidatePurchase"" [label=""postValidatePurchase""];
""657_buyTokens"" -> ""657_checkIfFundingCompleteOrExpired"";
""657_processPurchase"" -> ""657__deliverTokens"";
""657_buyTokens"" -> ""657_processPurchase"";
""657_buyTokens"" -> ""657_updatePurchasingState"";
""657_buyTokens"" -> ""657__preValidatePurchase"";
""657_buyTokens"" -> ""657_postValidatePurchase"";
""657_buyTokens"" -> ""657_getTokenAmount"";
""657_fallback"" -> ""657_buyTokens"";
""657_buyTokens"" -> ""657_forwardFunds"";
}
"
0x383bf1fd04d0901bbd674a580e0a621fcbb4799b.sol,CryptoDoggies,"contract CryptoDoggies is AccessControl, DetailedERC721 { using SafeMath for uint256; event TokenCreated(uint256 tokenId, string name, bytes5 dna, uint256 price, address owner); event TokenSold( uint256 indexed tokenId, string name, bytes5 dna, uint256 sellingPrice, uint256 newPrice, address indexed oldOwner, address indexed newOwner ); mapping (uint256 => address) private tokenIdToOwner; mapping (uint256 => uint256) private tokenIdToPrice; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) private tokenIdToApproved; struct Doggy { string name; bytes5 dna; }",0,"subgraph cluster_1255_CryptoDoggies {
label=""CryptoDoggies"";
""1255_tokensOf"" [label=""tokensOf""];
""1255_symbol"" [label=""symbol""];
""1255_createToken"" [label=""createToken""];
""1255_implementsERC721"" [label=""implementsERC721""];
""1255__owns"" [label=""_owns""];
""1255_purchase"" [label=""purchase""];
""1255_priceOf"" [label=""priceOf""];
""1255_takeOwnership"" [label=""takeOwnership""];
""1255_enableERC721"" [label=""enableERC721""];
""1255__generateRandomDna"" [label=""_generateRandomDna""];
""1255_getToken"" [label=""getToken""];
""1255__createToken"" [label=""_createToken""];
""1255_balanceOf"" [label=""balanceOf""];
""1255_ownerOf"" [label=""ownerOf""];
""1255__isContract"" [label=""_isContract""];
""1255__approved"" [label=""_approved""];
""1255__transfer"" [label=""_transfer""];
""1255_approve"" [label=""approve""];
""1255_nextPriceOf"" [label=""nextPriceOf""];
""1255_totalSupply"" [label=""totalSupply""];
""1255_transferFrom"" [label=""transferFrom""];
""1255_name"" [label=""name""];
""1255_withdrawBalance"" [label=""withdrawBalance""];
""1255_transfer"" [label=""transfer""];
""1255_getAllTokens"" [label=""getAllTokens""];
""1255_getToken"" -> ""1255_nextPriceOf"";
""1255_approve"" -> ""1255__owns"";
""1255__createToken"" -> ""1255__transfer"";
""1255_purchase"" -> ""1255__transfer"";
""1255_transfer"" -> ""1255__owns"";
""1255_takeOwnership"" -> ""1255_whenNotPaused"";
""1255_getAllTokens"" -> ""1255_nextPriceOf"";
""1255_takeOwnership"" -> ""1255_onlyERC721"";
""1255_getAllTokens"" -> ""1255_totalSupply"";
""1255_approve"" -> ""1255_whenNotPaused"";
""1255_approve"" -> ""1255_onlyERC721"";
""1255_takeOwnership"" -> ""1255__approved"";
""1255_purchase"" -> ""1255_whenNotPaused"";
""1255_enableERC721"" -> ""1255_onlyCEO"";
""1255_transferFrom"" -> ""1255_whenNotPaused"";
""1255_purchase"" -> ""1255_ownerOf"";
""1255_withdrawBalance"" -> ""1255_onlyCEO"";
""1255_purchase"" -> ""1255_nextPriceOf"";
""1255_transferFrom"" -> ""1255__transfer"";
""1255_createToken"" -> ""1255_onlyCLevel"";
""1255_implementsERC721"" -> ""1255_whenNotPaused"";
""1255_tokensOf"" -> ""1255_balanceOf"";
""1255_transferFrom"" -> ""1255_onlyERC721"";
""1255_transfer"" -> ""1255_whenNotPaused"";
""1255_transfer"" -> ""1255__transfer"";
""1255_tokensOf"" -> ""1255_totalSupply"";
""1255_purchase"" -> ""1255_priceOf"";
""1255_transferFrom"" -> ""1255__approved"";
""1255_transfer"" -> ""1255_onlyERC721"";
""1255_purchase"" -> ""1255__isContract"";
""1255_createToken"" -> ""1255__generateRandomDna"";
""1255_transferFrom"" -> ""1255__owns"";
""1255_takeOwnership"" -> ""1255__transfer"";
""1255_createToken"" -> ""1255__createToken"";
""1255_nextPriceOf"" -> ""1255_priceOf"";
}
"
0x4902c062f1384654bd075b719c6a26a83ef7aaf0.sol,TokenERC20,contract TokenERC20 { address public owner; uint256 public feesA = 1; uint256 public feesB = 1; uint256 public feesC = 1; uint256 public feesD = 1; address public addressA = 0xC61994B01607Ed7351e1D4FEE93fb0e661ceE39c; address public addressB = 0x821D44F1d04936e8b95D2FFAE91DFDD6E6EA39F9; address public addressC = 0xf193c2EC62466fd338710afab04574E7Eeb6C0e2; address public addressD = 0x3105889390F894F8ee1d3f8f75E2c4dde57735bA; function founder() private { owner = msg.sender; },0,"subgraph cluster_716_TokenERC20 {
label=""TokenERC20"";
""716_burn"" [label=""burn""];
""716_setaddress"" [label=""setaddress""];
""716_transfer"" [label=""transfer""];
""716_TokenERC20"" [label=""TokenERC20""];
""716_setfees"" [label=""setfees""];
""716_approveAndCall"" [label=""approveAndCall""];
""716_change_owner"" [label=""change_owner""];
""716__transfer"" [label=""_transfer""];
""716_transferFrom"" [label=""transferFrom""];
""716_Reissue"" [label=""Reissue""];
""716_founder"" [label=""founder""];
""716_burnFrom"" [label=""burnFrom""];
""716_approve"" [label=""approve""];
""716_transfer"" -> ""716__transfer"";
""716_approveAndCall"" -> ""716_approve"";
""716_transferFrom"" -> ""716__transfer"";
}
"
0x945f171de4ea81a213dcc7a1e8c4f6feb3b4b806.sol,ECP_Token,"contract ECP_Token { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 public remaining; address public owner; uint public icoStatus; address public benAddress; address public bkaddress; uint public allowTransferToken; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event TokenTransferEvent(address indexed from, address indexed to, uint256 value, string typex); function ECP_Token() public { totalSupply = 15000000000000000000000000000; owner = msg.sender; balanceOf[owner] = totalSupply; name = ; symbol = ; decimals = 18; remaining = totalSupply; icoStatus = 1; benAddress = 0xe4a7a715bE044186a3ac5C60c7Df7dD1215f7419; bkaddress = 0x44e00602e4B8F546f76983de2489d636CB443722; allowTransferToken = 1; }",0,"subgraph cluster_745_ECP_Token {
label=""ECP_Token"";
""745_withdraw_all"" [label=""withdraw_all""];
""745_freezeAccount"" [label=""freezeAccount""];
""745_withdraw"" [label=""withdraw""];
""745_transferOwnership"" [label=""transferOwnership""];
""745_sendTokenToSingleAccount"" [label=""sendTokenToSingleAccount""];
""745__transfer"" [label=""_transfer""];
""745_burn"" [label=""burn""];
""745_sendToMultipleAccount"" [label=""sendToMultipleAccount""];
""745_approveAndCall"" [label=""approveAndCall""];
""745_approve"" [label=""approve""];
""745_adm_trasfer"" [label=""adm_trasfer""];
""745_changeIcoStatus"" [label=""changeIcoStatus""];
""745_fallback"" [label=""fallback""];
""745_setTransferStatus"" [label=""setTransferStatus""];
""745_totalSupply"" [label=""totalSupply""];
""745_transferFrom"" [label=""transferFrom""];
""745_balanceOf"" [label=""balanceOf""];
""745_burnFrom"" [label=""burnFrom""];
""745_transfer"" [label=""transfer""];
""745_mintToken"" [label=""mintToken""];
""745_ECP_Token"" [label=""ECP_Token""];
""745_transfer"" -> ""745__transfer"";
""745_adm_trasfer"" -> ""745_onlyOwner"";
""745_transferFrom"" -> ""745__transfer"";
""745_withdraw_all"" -> ""745_onlyOwner"";
""745_setTransferStatus"" -> ""745_onlyOwner"";
""745_freezeAccount"" -> ""745_onlyOwner"";
""745_sendTokenToSingleAccount"" -> ""745__transfer"";
""745_sendToMultipleAccount"" -> ""745_onlyOwner"";
""745_mintToken"" -> ""745_onlyOwner"";
""745_sendTokenToSingleAccount"" -> ""745_onlyOwner"";
""745_transferOwnership"" -> ""745_onlyOwner"";
""745_sendToMultipleAccount"" -> ""745__transfer"";
""745_approveAndCall"" -> ""745_approve"";
""745_adm_trasfer"" -> ""745__transfer"";
""745_withdraw"" -> ""745_onlyOwner"";
""745_changeIcoStatus"" -> ""745_onlyOwner"";
}
"
0xd1ceeee3ecfff60d9532c37c9d24f68ca0e96453.sol,Dice2Win,contract Dice2Win { uint constant JACKPOT_MODULO = 1000; uint constant HOUSE_EDGE_PERCENT = 2; uint constant JACKPOT_FEE_PERCENT = 50; uint constant MIN_BET = 0.01 ether; uint constant MAX_AMOUNT = 300000 ether; uint constant MIN_JACKPOT_BET = 0.1 ether; uint constant MAX_MODULO = 100; uint constant MAX_MASK_MODULO = 40; uint constant MAX_BET_MASK = 2 ** MAX_MASK_MODULO; uint constant BET_EXPIRATION_BLOCKS = 250; address constant DUMMY_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; address public owner; address private nextOwner; uint public maxProfit; address public secretSigner; uint128 public jackpotSize; uint128 public lockedInBets; struct Bet { uint amount; uint8 modulo; uint8 rollUnder; uint40 placeBlockNumber; uint40 mask; address gambler; },0,"subgraph cluster_1266_Dice2Win {
label=""Dice2Win"";
""1266_kill"" [label=""kill""];
""1266_constructor"" [label=""constructor""];
""1266_placeBet"" [label=""placeBet""];
""1266_fallback"" [label=""fallback""];
""1266_refundBet"" [label=""refundBet""];
""1266_sendFunds"" [label=""sendFunds""];
""1266_clearStorage"" [label=""clearStorage""];
""1266_acceptNextOwner"" [label=""acceptNextOwner""];
""1266_withdrawFunds"" [label=""withdrawFunds""];
""1266_clearProcessedBet"" [label=""clearProcessedBet""];
""1266_setMaxProfit"" [label=""setMaxProfit""];
""1266_approveNextOwner"" [label=""approveNextOwner""];
""1266_settleBet"" [label=""settleBet""];
""1266_getJackpotFee"" [label=""getJackpotFee""];
""1266_getDiceWinAmount"" [label=""getDiceWinAmount""];
""1266_setSecretSigner"" [label=""setSecretSigner""];
""1266_increaseJackpot"" [label=""increaseJackpot""];
""1266_settleBet"" -> ""1266_clearProcessedBet"";
""1266_refundBet"" -> ""1266_getDiceWinAmount"";
""1266_withdrawFunds"" -> ""1266_onlyOwner"";
""1266_clearStorage"" -> ""1266_clearProcessedBet"";
""1266_withdrawFunds"" -> ""1266_sendFunds"";
""1266_increaseJackpot"" -> ""1266_onlyOwner"";
""1266_kill"" -> ""1266_onlyOwner"";
""1266_settleBet"" -> ""1266_sendFunds"";
""1266_setSecretSigner"" -> ""1266_onlyOwner"";
""1266_approveNextOwner"" -> ""1266_onlyOwner"";
""1266_placeBet"" -> ""1266_getDiceWinAmount"";
""1266_setMaxProfit"" -> ""1266_onlyOwner"";
""1266_refundBet"" -> ""1266_sendFunds"";
""1266_settleBet"" -> ""1266_getDiceWinAmount"";
""1266_placeBet"" -> ""1266_getJackpotFee"";
}
"
0x6a02e1a01e24007c80d3c377ce8ea624bf2a22c6.sol,Fomo60Min,"contract Fomo60Min is modularShort { using SafeMath for *; using NameFilter for string; using F3DKeysCalcShort for uint256; PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0xe9f984847c8bd1c8842d108e2755be0d4eac7dba); address private admin = msg.sender; string constant public name = ; string constant public symbol = ; uint256 private rndExtra_ = 30 minutes; uint256 private rndGap_ = 30 minutes; uint256 constant private rndInit_ = 30 minutes; uint256 constant private rndInc_ = 10 seconds; uint256 constant private rndMax_ = 1 hours; uint256 constant private preIcoMax_ = 100000000000000000000; uint256 constant private preIcoPerEth_ = 1000000000000000000; uint256 public airDropPot_; uint256 public airDropTracker_ = 0; uint256 public rID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => F3Ddatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => F3Ddatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => F3Ddatasets.Round) public round_; mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping (uint256 => F3Ddatasets.TeamFee) public fees_; mapping (uint256 => F3Ddatasets.PotSplit) public potSplit_; constructor() public { fees_[0] = F3Ddatasets.TeamFee(30,6); fees_[1] = F3Ddatasets.TeamFee(43,0); fees_[2] = F3Ddatasets.TeamFee(56,10); fees_[3] = F3Ddatasets.TeamFee(43,8); potSplit_[0] = F3Ddatasets.PotSplit(15,10); potSplit_[1] = F3Ddatasets.PotSplit(25,0); potSplit_[2] = F3Ddatasets.PotSplit(20,20); potSplit_[3] = F3Ddatasets.PotSplit(30,10); }",0,"subgraph cluster_4195_Fomo60Min {
label=""Fomo60Min"";
""4195_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""4195_getBuyPrice"" [label=""getBuyPrice""];
""4195_potSwap"" [label=""potSwap""];
""4195_buyXaddr"" [label=""buyXaddr""];
""4195_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""4195_distributeExternal"" [label=""distributeExternal""];
""4195_determinePID"" [label=""determinePID""];
""4195_managePlayer"" [label=""managePlayer""];
""4195_withdrawEarnings"" [label=""withdrawEarnings""];
""4195_core"" [label=""core""];
""4195_receivePlayerNameList"" [label=""receivePlayerNameList""];
""4195_registerNameXID"" [label=""registerNameXID""];
""4195_registerNameXname"" [label=""registerNameXname""];
""4195_updateGenVault"" [label=""updateGenVault""];
""4195_constructor"" [label=""constructor""];
""4195_endRound"" [label=""endRound""];
""4195_airdrop"" [label=""airdrop""];
""4195_endTx"" [label=""endTx""];
""4195_reLoadXaddr"" [label=""reLoadXaddr""];
""4195_verifyTeam"" [label=""verifyTeam""];
""4195_buyXname"" [label=""buyXname""];
""4195_calcKeysReceived"" [label=""calcKeysReceived""];
""4195_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""4195_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""4195_receivePlayerInfo"" [label=""receivePlayerInfo""];
""4195_fallback"" [label=""fallback""];
""4195_distributeInternal"" [label=""distributeInternal""];
""4195_getPlayerVaults"" [label=""getPlayerVaults""];
""4195_updateMasks"" [label=""updateMasks""];
""4195_reLoadXname"" [label=""reLoadXname""];
""4195_activate"" [label=""activate""];
""4195_updateTimer"" [label=""updateTimer""];
""4195_reLoadXid"" [label=""reLoadXid""];
""4195_getTimeLeft"" [label=""getTimeLeft""];
""4195_buyCore"" [label=""buyCore""];
""4195_withdraw"" [label=""withdraw""];
""4195_iWantXKeys"" [label=""iWantXKeys""];
""4195_reLoadCore"" [label=""reLoadCore""];
""4195_buyXid"" [label=""buyXid""];
""4195_registerNameXaddr"" [label=""registerNameXaddr""];
""4195_buyXid"" -> ""4195_isActivated"";
""4195_reLoadXid"" -> ""4195_isWithinLimits"";
""4195_buyCore"" -> ""4195_endRound"";
""4195_withdrawEarnings"" -> ""4195_updateGenVault"";
""4195_getPlayerVaults"" -> ""4195_getPlayerVaultsHelper"";
""4195_buyXid"" -> ""4195_verifyTeam"";
""4195_buyXaddr"" -> ""4195_determinePID"";
""4195_core"" -> ""4195_distributeExternal"";
""4195_reLoadXname"" -> ""4195_isWithinLimits"";
""4195_buyXname"" -> ""4195_isWithinLimits"";
""4195_reLoadXid"" -> ""4195_isHuman"";
""4195_reLoadXid"" -> ""4195_reLoadCore"";
""4195_fallback"" -> ""4195_buyCore"";
""4195_core"" -> ""4195_airdrop"";
""4195_buyXaddr"" -> ""4195_isHuman"";
""4195_buyXid"" -> ""4195_isHuman"";
""4195_buyXid"" -> ""4195_buyCore"";
""4195_reLoadXname"" -> ""4195_isActivated"";
""4195_buyXaddr"" -> ""4195_verifyTeam"";
""4195_withdraw"" -> ""4195_isHuman"";
""4195_buyXname"" -> ""4195_buyCore"";
""4195_withdraw"" -> ""4195_isActivated"";
""4195_registerNameXaddr"" -> ""4195_isHuman"";
""4195_buyXid"" -> ""4195_determinePID"";
""4195_withdraw"" -> ""4195_withdrawEarnings"";
""4195_buyXaddr"" -> ""4195_isWithinLimits"";
""4195_reLoadXid"" -> ""4195_verifyTeam"";
""4195_buyXname"" -> ""4195_determinePID"";
""4195_buyCore"" -> ""4195_core"";
""4195_updateGenVault"" -> ""4195_calcUnMaskedEarnings"";
""4195_buyXname"" -> ""4195_isActivated"";
""4195_getPlayerInfoByAddress"" -> ""4195_calcUnMaskedEarnings"";
""4195_buyXname"" -> ""4195_verifyTeam"";
""4195_withdraw"" -> ""4195_endRound"";
""4195_registerNameXID"" -> ""4195_isHuman"";
""4195_buyXname"" -> ""4195_isHuman"";
""4195_fallback"" -> ""4195_isWithinLimits"";
""4195_registerNameXname"" -> ""4195_isHuman"";
""4195_reLoadCore"" -> ""4195_core"";
""4195_buyXaddr"" -> ""4195_buyCore"";
""4195_reLoadXaddr"" -> ""4195_isActivated"";
""4195_fallback"" -> ""4195_isHuman"";
""4195_buyXaddr"" -> ""4195_isActivated"";
""4195_buyXid"" -> ""4195_isWithinLimits"";
""4195_reLoadXaddr"" -> ""4195_isWithinLimits"";
""4195_reLoadXaddr"" -> ""4195_isHuman"";
""4195_reLoadXid"" -> ""4195_isActivated"";
""4195_core"" -> ""4195_distributeInternal"";
""4195_core"" -> ""4195_endTx"";
""4195_core"" -> ""4195_managePlayer"";
""4195_reLoadXname"" -> ""4195_verifyTeam"";
""4195_fallback"" -> ""4195_determinePID"";
""4195_core"" -> ""4195_updateTimer"";
""4195_distributeInternal"" -> ""4195_updateMasks"";
""4195_managePlayer"" -> ""4195_updateGenVault"";
""4195_reLoadXname"" -> ""4195_reLoadCore"";
""4195_reLoadCore"" -> ""4195_endRound"";
""4195_fallback"" -> ""4195_isActivated"";
""4195_reLoadXname"" -> ""4195_isHuman"";
""4195_getPlayerVaults"" -> ""4195_calcUnMaskedEarnings"";
""4195_reLoadXaddr"" -> ""4195_verifyTeam"";
""4195_reLoadXaddr"" -> ""4195_reLoadCore"";
""4195_reLoadCore"" -> ""4195_withdrawEarnings"";
}
"
